// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for PlanDefinition
  /// </summary>
  public static class PlanDefinitionJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR PlanDefinition into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","PlanDefinition");
      // Complex: PlanDefinition, Export: PlanDefinition, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      if ((current.SubtitleElement != null) && (current.SubtitleElement.Value != null))
      {
        writer.WriteString("subtitle",current.SubtitleElement.Value);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if (current.Subject != null)
      {
        switch (current.Subject)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("subjectCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("subjectReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.UsageElement != null) && (current.UsageElement.Value != null))
      {
        writer.WriteString("usage",current.UsageElement.Value);
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      if ((current.ApprovalDateElement != null) && (current.ApprovalDateElement.Value != null))
      {
        writer.WriteString("approvalDate",current.ApprovalDateElement.Value);
      }

      if ((current.LastReviewDateElement != null) && (current.LastReviewDateElement.Value != null))
      {
        writer.WriteString("lastReviewDate",current.LastReviewDateElement.Value);
      }

      if (current.EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        current.EffectivePeriod.SerializeJson(writer, options);
      }

      if ((current.Topic != null) && (current.Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Topic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Author != null) && (current.Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Author)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Editor != null) && (current.Editor.Count != 0))
      {
        writer.WritePropertyName("editor");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Editor)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Reviewer != null) && (current.Reviewer.Count != 0))
      {
        writer.WritePropertyName("reviewer");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Reviewer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Endorser != null) && (current.Endorser.Count != 0))
      {
        writer.WritePropertyName("endorser");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Endorser)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RelatedArtifact != null) && (current.RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();
        foreach (RelatedArtifact val in current.RelatedArtifact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.LibraryElement != null) && (current.LibraryElement.Count != 0))
      {
        writer.WritePropertyName("library");
        writer.WriteStartArray();
        foreach (Canonical val in current.LibraryElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Goal != null) && (current.Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();
        foreach (PlanDefinition.GoalComponent val in current.Goal)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (PlanDefinition.ActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition
    /// </summary>
    public static void DeserializeJson(this PlanDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Identifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "subtitle":
          current.SubtitleElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));

          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "subjectCodeableConcept":
          current.Subject = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "subjectReference":
          current.Subject = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UseContext.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());

          break;

        case "usage":
          current.UsageElement = new FhirString(reader.GetString());

          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());

          break;

        case "approvalDate":
          current.ApprovalDateElement = new Date(reader.GetString());

          break;

        case "lastReviewDate":
          current.LastReviewDateElement = new Date(reader.GetString());

          break;

        case "effectivePeriod":
          current.EffectivePeriod = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);

          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Topic.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Topic.Count == 0)
          {
            current.Topic = null;
          }

          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Author.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Author.Count == 0)
          {
            current.Author = null;
          }

          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Editor.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Editor.Count == 0)
          {
            current.Editor = null;
          }

          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Reviewer.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Reviewer.Count == 0)
          {
            current.Reviewer = null;
          }

          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Endorser.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Endorser.Count == 0)
          {
            current.Endorser = null;
          }

          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.RelatedArtifact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.RelatedArtifact.Count == 0)
          {
            current.RelatedArtifact = null;
          }

          break;

        case "library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LibraryElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LibraryElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.LibraryElement.Count == 0)
          {
            current.LibraryElement = null;
          }

          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Goal = new List<PlanDefinition.GoalComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Goal.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.GoalComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Goal.Count == 0)
          {
            current.Goal = null;
          }

          break;

        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<PlanDefinition.ActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Action.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.ActionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }

          break;

        // Complex: PlanDefinition, Export: PlanDefinition, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR PlanDefinition#Goal into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition.GoalComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: PlanDefinition#Goal, Export: GoalComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      writer.WritePropertyName("description");
      current.Description.SerializeJson(writer, options);

      if (current.Priority != null)
      {
        writer.WritePropertyName("priority");
        current.Priority.SerializeJson(writer, options);
      }

      if (current.Start != null)
      {
        writer.WritePropertyName("start");
        current.Start.SerializeJson(writer, options);
      }

      if ((current.Addresses != null) && (current.Addresses.Count != 0))
      {
        writer.WritePropertyName("addresses");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Addresses)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Documentation != null) && (current.Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();
        foreach (RelatedArtifact val in current.Documentation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Target != null) && (current.Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();
        foreach (PlanDefinition.TargetComponent val in current.Target)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Goal
    /// </summary>
    public static void DeserializeJson(this PlanDefinition.GoalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Goal
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition.GoalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "description":
          current.Description = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "priority":
          current.Priority = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "start":
          current.Start = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "addresses":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Addresses = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Addresses.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Addresses.Count == 0)
          {
            current.Addresses = null;
          }

          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Documentation.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Documentation.Count == 0)
          {
            current.Documentation = null;
          }

          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Target = new List<PlanDefinition.TargetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Target.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.TargetComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Target.Count == 0)
          {
            current.Target = null;
          }

          break;

        // Complex: goal, Export: GoalComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR PlanDefinition#Target into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition.TargetComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: PlanDefinition#Target, Export: TargetComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Measure != null)
      {
        writer.WritePropertyName("measure");
        current.Measure.SerializeJson(writer, options);
      }

      if (current.Detail != null)
      {
        switch (current.Detail)
        {
          case Quantity v_Quantity:
            writer.WritePropertyName("detailQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("detailRange");
            v_Range.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("detailCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Due != null)
      {
        writer.WritePropertyName("due");
        current.Due.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Target
    /// </summary>
    public static void DeserializeJson(this PlanDefinition.TargetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Target
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition.TargetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "measure":
          current.Measure = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "detailQuantity":
          current.Detail = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "detailRange":
          current.Detail = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "detailCodeableConcept":
          current.Detail = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "due":
          current.Due = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);

          break;

        // Complex: target, Export: TargetComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR PlanDefinition#Action into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition.ActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: PlanDefinition#Action, Export: ActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.PrefixElement != null) && (current.PrefixElement.Value != null))
      {
        writer.WriteString("prefix",current.PrefixElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if ((current.TextEquivalentElement != null) && (current.TextEquivalentElement.Value != null))
      {
        writer.WriteString("textEquivalent",current.TextEquivalentElement.Value);
      }

      if (current.PriorityElement != null)
      {
        writer.WriteString("priority",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.PriorityElement.Value));
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Reason != null) && (current.Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Reason)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Documentation != null) && (current.Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();
        foreach (RelatedArtifact val in current.Documentation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.GoalIdElement != null) && (current.GoalIdElement.Count != 0))
      {
        writer.WritePropertyName("goalId");
        writer.WriteStartArray();
        foreach (Id val in current.GoalIdElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.Subject != null)
      {
        switch (current.Subject)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("subjectCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("subjectReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Trigger != null) && (current.Trigger.Count != 0))
      {
        writer.WritePropertyName("trigger");
        writer.WriteStartArray();
        foreach (TriggerDefinition val in current.Trigger)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Condition != null) && (current.Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();
        foreach (PlanDefinition.ConditionComponent val in current.Condition)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Input != null) && (current.Input.Count != 0))
      {
        writer.WritePropertyName("input");
        writer.WriteStartArray();
        foreach (DataRequirement val in current.Input)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Output != null) && (current.Output.Count != 0))
      {
        writer.WritePropertyName("output");
        writer.WriteStartArray();
        foreach (DataRequirement val in current.Output)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RelatedAction != null) && (current.RelatedAction.Count != 0))
      {
        writer.WritePropertyName("relatedAction");
        writer.WriteStartArray();
        foreach (PlanDefinition.RelatedActionComponent val in current.RelatedAction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Timing != null)
      {
        switch (current.Timing)
        {
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("timingDateTime",v_FhirDateTime.Value);
            break;
          case Age v_Age:
            writer.WritePropertyName("timingAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Period v_Period:
            writer.WritePropertyName("timingPeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("timingDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("timingRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("timingTiming");
            v_Timing.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Participant != null) && (current.Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();
        foreach (PlanDefinition.ParticipantComponent val in current.Participant)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.GroupingBehaviorElement != null)
      {
        writer.WriteString("groupingBehavior",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.GroupingBehaviorElement.Value));
      }

      if (current.SelectionBehaviorElement != null)
      {
        writer.WriteString("selectionBehavior",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.SelectionBehaviorElement.Value));
      }

      if (current.RequiredBehaviorElement != null)
      {
        writer.WriteString("requiredBehavior",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.RequiredBehaviorElement.Value));
      }

      if (current.PrecheckBehaviorElement != null)
      {
        writer.WriteString("precheckBehavior",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.PrecheckBehaviorElement.Value));
      }

      if (current.CardinalityBehaviorElement != null)
      {
        writer.WriteString("cardinalityBehavior",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CardinalityBehaviorElement.Value));
      }

      if (current.Definition != null)
      {
        switch (current.Definition)
        {
          case Canonical v_Canonical:
            writer.WriteString("definitionCanonical",v_Canonical.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("definitionUri",v_FhirUri.Value);
            break;
        }
      }
      if ((current.TransformElement != null) && (current.TransformElement.Value != null))
      {
        writer.WriteString("transform",current.TransformElement.Value);
      }

      if ((current.DynamicValue != null) && (current.DynamicValue.Count != 0))
      {
        writer.WritePropertyName("dynamicValue");
        writer.WriteStartArray();
        foreach (PlanDefinition.DynamicValueComponent val in current.DynamicValue)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (PlanDefinition.ActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Action
    /// </summary>
    public static void DeserializeJson(this PlanDefinition.ActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Action
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition.ActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "prefix":
          current.PrefixElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "textEquivalent":
          current.TextEquivalentElement = new FhirString(reader.GetString());

          break;

        case "priority":
          current.PriorityElement =new Code<Hl7.Fhir.Model.RequestPriority>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.RequestPriority>(reader.GetString()));

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Code.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }

          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Reason.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Reason.Count == 0)
          {
            current.Reason = null;
          }

          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Documentation.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Documentation.Count == 0)
          {
            current.Documentation = null;
          }

          break;

        case "goalId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.GoalIdElement = new List<Id>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.GoalIdElement.Add(new Id(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.GoalIdElement.Count == 0)
          {
            current.GoalIdElement = null;
          }

          break;

        case "subjectCodeableConcept":
          current.Subject = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "subjectReference":
          current.Subject = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "trigger":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Trigger = new List<TriggerDefinition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Trigger.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.TriggerDefinition>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Trigger.Count == 0)
          {
            current.Trigger = null;
          }

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Condition = new List<PlanDefinition.ConditionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Condition.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.ConditionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Condition.Count == 0)
          {
            current.Condition = null;
          }

          break;

        case "input":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Input = new List<DataRequirement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Input.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DataRequirement>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Input.Count == 0)
          {
            current.Input = null;
          }

          break;

        case "output":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Output = new List<DataRequirement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Output.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DataRequirement>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Output.Count == 0)
          {
            current.Output = null;
          }

          break;

        case "relatedAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RelatedAction = new List<PlanDefinition.RelatedActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.RelatedAction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.RelatedActionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.RelatedAction.Count == 0)
          {
            current.RelatedAction = null;
          }

          break;

        case "timingDateTime":
          current.Timing = new FhirDateTime(reader.GetString());
          break;

        case "timingAge":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Age>(ref reader, options);
          break;

        case "timingPeriod":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "timingDuration":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "timingRange":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "timingTiming":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Timing>(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Participant = new List<PlanDefinition.ParticipantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Participant.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.ParticipantComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Participant.Count == 0)
          {
            current.Participant = null;
          }

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "groupingBehavior":
          current.GroupingBehaviorElement =new Code<Hl7.Fhir.Model.ActionGroupingBehavior>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionGroupingBehavior>(reader.GetString()));

          break;

        case "selectionBehavior":
          current.SelectionBehaviorElement =new Code<Hl7.Fhir.Model.ActionSelectionBehavior>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionSelectionBehavior>(reader.GetString()));

          break;

        case "requiredBehavior":
          current.RequiredBehaviorElement =new Code<Hl7.Fhir.Model.ActionRequiredBehavior>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionRequiredBehavior>(reader.GetString()));

          break;

        case "precheckBehavior":
          current.PrecheckBehaviorElement =new Code<Hl7.Fhir.Model.ActionPrecheckBehavior>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionPrecheckBehavior>(reader.GetString()));

          break;

        case "cardinalityBehavior":
          current.CardinalityBehaviorElement =new Code<Hl7.Fhir.Model.ActionCardinalityBehavior>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionCardinalityBehavior>(reader.GetString()));

          break;

        case "definitionCanonical":
          current.Definition = new Canonical(reader.GetString());
          break;

        case "definitionUri":
          current.Definition = new FhirUri(reader.GetString());
          break;

        case "transform":
          current.TransformElement = new Canonical(reader.GetString());

          break;

        case "dynamicValue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DynamicValue = new List<PlanDefinition.DynamicValueComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DynamicValue.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.DynamicValueComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DynamicValue.Count == 0)
          {
            current.DynamicValue = null;
          }

          break;

        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<PlanDefinition.ActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Action.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.PlanDefinition.ActionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }

          break;

        // Complex: action, Export: ActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR PlanDefinition#Condition into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition.ConditionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: PlanDefinition#Condition, Export: ConditionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));

      if (current.Expression != null)
      {
        writer.WritePropertyName("expression");
        current.Expression.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Condition
    /// </summary>
    public static void DeserializeJson(this PlanDefinition.ConditionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Condition
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition.ConditionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "kind":
          current.KindElement =new Code<Hl7.Fhir.Model.ActionConditionKind>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionConditionKind>(reader.GetString()));

          break;

        case "expression":
          current.Expression = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);

          break;

        // Complex: condition, Export: ConditionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR PlanDefinition#RelatedAction into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition.RelatedActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: PlanDefinition#RelatedAction, Export: RelatedActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("actionId",current.ActionIdElement.Value);

      writer.WriteString("relationship",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.RelationshipElement.Value));

      if (current.Offset != null)
      {
        switch (current.Offset)
        {
          case Duration v_Duration:
            writer.WritePropertyName("offsetDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("offsetRange");
            v_Range.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#RelatedAction
    /// </summary>
    public static void DeserializeJson(this PlanDefinition.RelatedActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#RelatedAction
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition.RelatedActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actionId":
          current.ActionIdElement = new Id(reader.GetString());

          break;

        case "relationship":
          current.RelationshipElement =new Code<Hl7.Fhir.Model.ActionRelationshipType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionRelationshipType>(reader.GetString()));

          break;

        case "offsetDuration":
          current.Offset = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "offsetRange":
          current.Offset = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        // Complex: relatedAction, Export: RelatedActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR PlanDefinition#Participant into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition.ParticipantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: PlanDefinition#Participant, Export: ParticipantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Participant
    /// </summary>
    public static void DeserializeJson(this PlanDefinition.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#Participant
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ActionParticipantType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionParticipantType>(reader.GetString()));

          break;

        case "role":
          current.Role = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        // Complex: participant, Export: ParticipantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR PlanDefinition#DynamicValue into JSON
    /// </summary>
    public static void SerializeJson(this PlanDefinition.DynamicValueComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: PlanDefinition#DynamicValue, Export: DynamicValueComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.PathElement != null) && (current.PathElement.Value != null))
      {
        writer.WriteString("path",current.PathElement.Value);
      }

      if (current.Expression != null)
      {
        writer.WritePropertyName("expression");
        current.Expression.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#DynamicValue
    /// </summary>
    public static void DeserializeJson(this PlanDefinition.DynamicValueComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR PlanDefinition#DynamicValue
    /// </summary>
    public static void DeserializeJsonProperty(this PlanDefinition.DynamicValueComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "path":
          current.PathElement = new FhirString(reader.GetString());

          break;

        case "expression":
          current.Expression = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);

          break;

        // Complex: dynamicValue, Export: DynamicValueComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class PlanDefinitionJsonConverter : JsonConverter<PlanDefinition>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(PlanDefinition).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, PlanDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override PlanDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        PlanDefinition target = new PlanDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
