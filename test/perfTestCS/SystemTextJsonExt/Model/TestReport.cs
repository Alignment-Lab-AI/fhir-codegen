// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for TestReport
  /// </summary>
  public static class TestReportJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR TestReport into JSON
    /// </summary>
    public static void SerializeJson(this TestReport current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","TestReport");
      // Complex: TestReport, Export: TestReport, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      writer.WritePropertyName("testScript");
      current.TestScript.SerializeJson(writer, options);

      writer.WriteString("result",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ResultElement.Value));

      if (current.ScoreElement != null)
      {
        if (current.ScoreElement.Value != null)
        {
          writer.WriteNumber("score",(decimal)current.ScoreElement.Value);
        }
        if (current.ScoreElement.HasExtensions() || (!string.IsNullOrEmpty(current.ScoreElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_score",false,current.ScoreElement.Extension,current.ScoreElement.ElementId);
        }
      }

      if (current.TesterElement != null)
      {
        if (!string.IsNullOrEmpty(current.TesterElement.Value))
        {
          writer.WriteString("tester",current.TesterElement.Value);
        }
        if (current.TesterElement.HasExtensions() || (!string.IsNullOrEmpty(current.TesterElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_tester",false,current.TesterElement.Extension,current.TesterElement.ElementId);
        }
      }

      if (current.IssuedElement != null)
      {
        if (!string.IsNullOrEmpty(current.IssuedElement.Value))
        {
          writer.WriteString("issued",current.IssuedElement.Value);
        }
        if (current.IssuedElement.HasExtensions() || (!string.IsNullOrEmpty(current.IssuedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_issued",false,current.IssuedElement.Extension,current.IssuedElement.ElementId);
        }
      }

      if ((current.Participant != null) && (current.Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();
        foreach (TestReport.ParticipantComponent val in current.Participant)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Setup != null)
      {
        writer.WritePropertyName("setup");
        current.Setup.SerializeJson(writer, options);
      }

      if ((current.Test != null) && (current.Test.Count != 0))
      {
        writer.WritePropertyName("test");
        writer.WriteStartArray();
        foreach (TestReport.TestComponent val in current.Test)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Teardown != null)
      {
        writer.WritePropertyName("teardown");
        current.Teardown.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport
    /// </summary>
    public static void DeserializeJson(this TestReport current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.TestReport.TestReportStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestReport.TestReportStatus>(reader.GetString()));
          break;

        case "_status":
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "testScript":
          current.TestScript = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.TestScript).DeserializeJson(ref reader, options);
          break;

        case "result":
          current.ResultElement =new Code<Hl7.Fhir.Model.TestReport.TestReportResult>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestReport.TestReportResult>(reader.GetString()));
          break;

        case "_result":
          ((Hl7.Fhir.Model.Element)current.ResultElement).DeserializeJson(ref reader, options);
          break;

        case "score":
          current.ScoreElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "_score":
          ((Hl7.Fhir.Model.Element)current.ScoreElement).DeserializeJson(ref reader, options);
          break;

        case "tester":
          current.TesterElement = new FhirString(reader.GetString());
          break;

        case "_tester":
          ((Hl7.Fhir.Model.Element)current.TesterElement).DeserializeJson(ref reader, options);
          break;

        case "issued":
          current.IssuedElement = new FhirDateTime(reader.GetString());
          break;

        case "_issued":
          ((Hl7.Fhir.Model.Element)current.IssuedElement).DeserializeJson(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Participant = new List<TestReport.ParticipantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestReport.ParticipantComponent v_Participant = new Hl7.Fhir.Model.TestReport.ParticipantComponent();
            v_Participant.DeserializeJson(ref reader, options);
            current.Participant.Add(v_Participant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Participant.Count == 0)
          {
            current.Participant = null;
          }
          break;

        case "setup":
          current.Setup = new Hl7.Fhir.Model.TestReport.SetupComponent();
          ((Hl7.Fhir.Model.TestReport.SetupComponent)current.Setup).DeserializeJson(ref reader, options);
          break;

        case "test":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Test = new List<TestReport.TestComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestReport.TestComponent v_Test = new Hl7.Fhir.Model.TestReport.TestComponent();
            v_Test.DeserializeJson(ref reader, options);
            current.Test.Add(v_Test);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Test.Count == 0)
          {
            current.Test = null;
          }
          break;

        case "teardown":
          current.Teardown = new Hl7.Fhir.Model.TestReport.TeardownComponent();
          ((Hl7.Fhir.Model.TestReport.TeardownComponent)current.Teardown).DeserializeJson(ref reader, options);
          break;

        // Complex: TestReport, Export: TestReport, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#Participant into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.ParticipantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#Participant, Export: ParticipantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      writer.WriteString("uri",current.UriElement.Value);

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Participant
    /// </summary>
    public static void DeserializeJson(this TestReport.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Participant
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.TestReport.TestReportParticipantType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestReport.TestReportParticipantType>(reader.GetString()));
          break;

        case "_type":
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "uri":
          current.UriElement = new FhirUri(reader.GetString());
          break;

        case "_uri":
          ((Hl7.Fhir.Model.Element)current.UriElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          current.DisplayElement = new FhirString(reader.GetString());
          break;

        case "_display":
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        // Complex: participant, Export: ParticipantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#Setup into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.SetupComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#Setup, Export: SetupComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (TestReport.SetupActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Setup
    /// </summary>
    public static void DeserializeJson(this TestReport.SetupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Setup
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.SetupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<TestReport.SetupActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestReport.SetupActionComponent v_Action = new Hl7.Fhir.Model.TestReport.SetupActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: setup, Export: SetupComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#SetupAction into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.SetupActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#SetupAction, Export: SetupActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Operation != null)
      {
        writer.WritePropertyName("operation");
        current.Operation.SerializeJson(writer, options);
      }

      if (current.Assert != null)
      {
        writer.WritePropertyName("assert");
        current.Assert.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#SetupAction
    /// </summary>
    public static void DeserializeJson(this TestReport.SetupActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#SetupAction
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.SetupActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestReport.OperationComponent();
          ((Hl7.Fhir.Model.TestReport.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        case "assert":
          current.Assert = new Hl7.Fhir.Model.TestReport.AssertComponent();
          ((Hl7.Fhir.Model.TestReport.AssertComponent)current.Assert).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: SetupActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#Operation into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.OperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#Operation, Export: OperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("result",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ResultElement.Value));

      if (current.Message != null)
      {
        if (!string.IsNullOrEmpty(current.Message.Value))
        {
          writer.WriteString("message",current.Message.Value);
        }
        if (current.Message.HasExtensions() || (!string.IsNullOrEmpty(current.Message.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_message",false,current.Message.Extension,current.Message.ElementId);
        }
      }

      if (current.DetailElement != null)
      {
        if (!string.IsNullOrEmpty(current.DetailElement.Value))
        {
          writer.WriteString("detail",current.DetailElement.Value);
        }
        if (current.DetailElement.HasExtensions() || (!string.IsNullOrEmpty(current.DetailElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_detail",false,current.DetailElement.Extension,current.DetailElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Operation
    /// </summary>
    public static void DeserializeJson(this TestReport.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Operation
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "result":
          current.ResultElement =new Code<Hl7.Fhir.Model.TestReport.TestReportActionResult>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestReport.TestReportActionResult>(reader.GetString()));
          break;

        case "_result":
          ((Hl7.Fhir.Model.Element)current.ResultElement).DeserializeJson(ref reader, options);
          break;

        case "message":
          current.Message = new Markdown(reader.GetString());
          break;

        case "detail":
          current.DetailElement = new FhirUri(reader.GetString());
          break;

        case "_detail":
          ((Hl7.Fhir.Model.Element)current.DetailElement).DeserializeJson(ref reader, options);
          break;

        // Complex: operation, Export: OperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#Assert into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.AssertComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#Assert, Export: AssertComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("result",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ResultElement.Value));

      if (current.Message != null)
      {
        if (!string.IsNullOrEmpty(current.Message.Value))
        {
          writer.WriteString("message",current.Message.Value);
        }
        if (current.Message.HasExtensions() || (!string.IsNullOrEmpty(current.Message.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_message",false,current.Message.Extension,current.Message.ElementId);
        }
      }

      if (current.DetailElement != null)
      {
        if (!string.IsNullOrEmpty(current.DetailElement.Value))
        {
          writer.WriteString("detail",current.DetailElement.Value);
        }
        if (current.DetailElement.HasExtensions() || (!string.IsNullOrEmpty(current.DetailElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_detail",false,current.DetailElement.Extension,current.DetailElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Assert
    /// </summary>
    public static void DeserializeJson(this TestReport.AssertComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Assert
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.AssertComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "result":
          current.ResultElement =new Code<Hl7.Fhir.Model.TestReport.TestReportActionResult>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestReport.TestReportActionResult>(reader.GetString()));
          break;

        case "_result":
          ((Hl7.Fhir.Model.Element)current.ResultElement).DeserializeJson(ref reader, options);
          break;

        case "message":
          current.Message = new Markdown(reader.GetString());
          break;

        case "detail":
          current.DetailElement = new FhirString(reader.GetString());
          break;

        case "_detail":
          ((Hl7.Fhir.Model.Element)current.DetailElement).DeserializeJson(ref reader, options);
          break;

        // Complex: assert, Export: AssertComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#Test into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.TestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#Test, Export: TestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (TestReport.TestActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Test
    /// </summary>
    public static void DeserializeJson(this TestReport.TestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Test
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.TestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<TestReport.TestActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestReport.TestActionComponent v_Action = new Hl7.Fhir.Model.TestReport.TestActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: test, Export: TestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#TestAction into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.TestActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#TestAction, Export: TestActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Operation != null)
      {
        writer.WritePropertyName("operation");
        current.Operation.SerializeJson(writer, options);
      }

      if (current.Assert != null)
      {
        writer.WritePropertyName("assert");
        current.Assert.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#TestAction
    /// </summary>
    public static void DeserializeJson(this TestReport.TestActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#TestAction
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.TestActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestReport.OperationComponent();
          ((Hl7.Fhir.Model.TestReport.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        case "assert":
          current.Assert = new Hl7.Fhir.Model.TestReport.AssertComponent();
          ((Hl7.Fhir.Model.TestReport.AssertComponent)current.Assert).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: TestActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#Teardown into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.TeardownComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#Teardown, Export: TeardownComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (TestReport.TeardownActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Teardown
    /// </summary>
    public static void DeserializeJson(this TestReport.TeardownComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#Teardown
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.TeardownComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<TestReport.TeardownActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestReport.TeardownActionComponent v_Action = new Hl7.Fhir.Model.TestReport.TeardownActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: teardown, Export: TeardownComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestReport#TeardownAction into JSON
    /// </summary>
    public static void SerializeJson(this TestReport.TeardownActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestReport#TeardownAction, Export: TeardownActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("operation");
      current.Operation.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#TeardownAction
    /// </summary>
    public static void DeserializeJson(this TestReport.TeardownActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestReport#TeardownAction
    /// </summary>
    public static void DeserializeJsonProperty(this TestReport.TeardownActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestReport.OperationComponent();
          ((Hl7.Fhir.Model.TestReport.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: TeardownActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class TestReportJsonConverter : JsonConverter<TestReport>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(TestReport).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, TestReport value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override TestReport Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        TestReport target = new TestReport();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
