// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization
{
  /// <summary>
  /// Common resource converter to support polymorphic deserialization.
  /// </summary>
  public class JsonStreamResourceConverter : JsonConverter<Resource>
  {
    private static readonly byte[] _startObject = Encoding.UTF8.GetBytes("{");
    private static readonly byte[] _endObject = Encoding.UTF8.GetBytes("}");
    private static readonly byte[] _startArray = Encoding.UTF8.GetBytes("[");
    private static readonly byte[] _endArray = Encoding.UTF8.GetBytes("]");
    private static readonly byte[] _comma = Encoding.UTF8.GetBytes(",");
    private static readonly byte[] _propertySep = Encoding.UTF8.GetBytes(":");
    private static readonly byte[] _quote = Encoding.UTF8.GetBytes("\"");

    /// <summary>
    /// Determines whether the specified type can be converted.
    /// </summary>
    public override bool CanConvert(Type objectType) =>
      typeof(Resource).IsAssignableFrom(objectType);

    /// <summary>
    /// Writes a specified value as JSON.
    /// </summary>
    public override void Write(Utf8JsonWriter writer, Resource resource, JsonSerializerOptions options)
    {
      switch (resource)
      {
        case Account typedAccount:
          typedAccount.SerializeJson(writer, options, true);
          break;
        case ActivityDefinition typedActivityDefinition:
          typedActivityDefinition.SerializeJson(writer, options, true);
          break;
        case AdverseEvent typedAdverseEvent:
          typedAdverseEvent.SerializeJson(writer, options, true);
          break;
        case AllergyIntolerance typedAllergyIntolerance:
          typedAllergyIntolerance.SerializeJson(writer, options, true);
          break;
        case Appointment typedAppointment:
          typedAppointment.SerializeJson(writer, options, true);
          break;
        case AppointmentResponse typedAppointmentResponse:
          typedAppointmentResponse.SerializeJson(writer, options, true);
          break;
        case AuditEvent typedAuditEvent:
          typedAuditEvent.SerializeJson(writer, options, true);
          break;
        case Basic typedBasic:
          typedBasic.SerializeJson(writer, options, true);
          break;
        case Binary typedBinary:
          typedBinary.SerializeJson(writer, options, true);
          break;
        case BiologicallyDerivedProduct typedBiologicallyDerivedProduct:
          typedBiologicallyDerivedProduct.SerializeJson(writer, options, true);
          break;
        case BodyStructure typedBodyStructure:
          typedBodyStructure.SerializeJson(writer, options, true);
          break;
        case Bundle typedBundle:
          typedBundle.SerializeJson(writer, options, true);
          break;
        case CapabilityStatement typedCapabilityStatement:
          typedCapabilityStatement.SerializeJson(writer, options, true);
          break;
        case CarePlan typedCarePlan:
          typedCarePlan.SerializeJson(writer, options, true);
          break;
        case CareTeam typedCareTeam:
          typedCareTeam.SerializeJson(writer, options, true);
          break;
        case CatalogEntry typedCatalogEntry:
          typedCatalogEntry.SerializeJson(writer, options, true);
          break;
        case ChargeItem typedChargeItem:
          typedChargeItem.SerializeJson(writer, options, true);
          break;
        case ChargeItemDefinition typedChargeItemDefinition:
          typedChargeItemDefinition.SerializeJson(writer, options, true);
          break;
        case Claim typedClaim:
          typedClaim.SerializeJson(writer, options, true);
          break;
        case ClaimResponse typedClaimResponse:
          typedClaimResponse.SerializeJson(writer, options, true);
          break;
        case ClinicalImpression typedClinicalImpression:
          typedClinicalImpression.SerializeJson(writer, options, true);
          break;
        case CodeSystem typedCodeSystem:
          typedCodeSystem.SerializeJson(writer, options, true);
          break;
        case Communication typedCommunication:
          typedCommunication.SerializeJson(writer, options, true);
          break;
        case CommunicationRequest typedCommunicationRequest:
          typedCommunicationRequest.SerializeJson(writer, options, true);
          break;
        case CompartmentDefinition typedCompartmentDefinition:
          typedCompartmentDefinition.SerializeJson(writer, options, true);
          break;
        case Composition typedComposition:
          typedComposition.SerializeJson(writer, options, true);
          break;
        case ConceptMap typedConceptMap:
          typedConceptMap.SerializeJson(writer, options, true);
          break;
        case Condition typedCondition:
          typedCondition.SerializeJson(writer, options, true);
          break;
        case Consent typedConsent:
          typedConsent.SerializeJson(writer, options, true);
          break;
        case Contract typedContract:
          typedContract.SerializeJson(writer, options, true);
          break;
        case Coverage typedCoverage:
          typedCoverage.SerializeJson(writer, options, true);
          break;
        case CoverageEligibilityRequest typedCoverageEligibilityRequest:
          typedCoverageEligibilityRequest.SerializeJson(writer, options, true);
          break;
        case CoverageEligibilityResponse typedCoverageEligibilityResponse:
          typedCoverageEligibilityResponse.SerializeJson(writer, options, true);
          break;
        case DetectedIssue typedDetectedIssue:
          typedDetectedIssue.SerializeJson(writer, options, true);
          break;
        case Device typedDevice:
          typedDevice.SerializeJson(writer, options, true);
          break;
        case DeviceDefinition typedDeviceDefinition:
          typedDeviceDefinition.SerializeJson(writer, options, true);
          break;
        case DeviceMetric typedDeviceMetric:
          typedDeviceMetric.SerializeJson(writer, options, true);
          break;
        case DeviceRequest typedDeviceRequest:
          typedDeviceRequest.SerializeJson(writer, options, true);
          break;
        case DeviceUseStatement typedDeviceUseStatement:
          typedDeviceUseStatement.SerializeJson(writer, options, true);
          break;
        case DiagnosticReport typedDiagnosticReport:
          typedDiagnosticReport.SerializeJson(writer, options, true);
          break;
        case DocumentManifest typedDocumentManifest:
          typedDocumentManifest.SerializeJson(writer, options, true);
          break;
        case DocumentReference typedDocumentReference:
          typedDocumentReference.SerializeJson(writer, options, true);
          break;
        case EffectEvidenceSynthesis typedEffectEvidenceSynthesis:
          typedEffectEvidenceSynthesis.SerializeJson(writer, options, true);
          break;
        case Encounter typedEncounter:
          typedEncounter.SerializeJson(writer, options, true);
          break;
        case Endpoint typedEndpoint:
          typedEndpoint.SerializeJson(writer, options, true);
          break;
        case EnrollmentRequest typedEnrollmentRequest:
          typedEnrollmentRequest.SerializeJson(writer, options, true);
          break;
        case EnrollmentResponse typedEnrollmentResponse:
          typedEnrollmentResponse.SerializeJson(writer, options, true);
          break;
        case EpisodeOfCare typedEpisodeOfCare:
          typedEpisodeOfCare.SerializeJson(writer, options, true);
          break;
        case EventDefinition typedEventDefinition:
          typedEventDefinition.SerializeJson(writer, options, true);
          break;
        case Evidence typedEvidence:
          typedEvidence.SerializeJson(writer, options, true);
          break;
        case EvidenceVariable typedEvidenceVariable:
          typedEvidenceVariable.SerializeJson(writer, options, true);
          break;
        case ExampleScenario typedExampleScenario:
          typedExampleScenario.SerializeJson(writer, options, true);
          break;
        case ExplanationOfBenefit typedExplanationOfBenefit:
          typedExplanationOfBenefit.SerializeJson(writer, options, true);
          break;
        case FamilyMemberHistory typedFamilyMemberHistory:
          typedFamilyMemberHistory.SerializeJson(writer, options, true);
          break;
        case Flag typedFlag:
          typedFlag.SerializeJson(writer, options, true);
          break;
        case Goal typedGoal:
          typedGoal.SerializeJson(writer, options, true);
          break;
        case GraphDefinition typedGraphDefinition:
          typedGraphDefinition.SerializeJson(writer, options, true);
          break;
        case Group typedGroup:
          typedGroup.SerializeJson(writer, options, true);
          break;
        case GuidanceResponse typedGuidanceResponse:
          typedGuidanceResponse.SerializeJson(writer, options, true);
          break;
        case HealthcareService typedHealthcareService:
          typedHealthcareService.SerializeJson(writer, options, true);
          break;
        case ImagingStudy typedImagingStudy:
          typedImagingStudy.SerializeJson(writer, options, true);
          break;
        case Immunization typedImmunization:
          typedImmunization.SerializeJson(writer, options, true);
          break;
        case ImmunizationEvaluation typedImmunizationEvaluation:
          typedImmunizationEvaluation.SerializeJson(writer, options, true);
          break;
        case ImmunizationRecommendation typedImmunizationRecommendation:
          typedImmunizationRecommendation.SerializeJson(writer, options, true);
          break;
        case ImplementationGuide typedImplementationGuide:
          typedImplementationGuide.SerializeJson(writer, options, true);
          break;
        case InsurancePlan typedInsurancePlan:
          typedInsurancePlan.SerializeJson(writer, options, true);
          break;
        case Invoice typedInvoice:
          typedInvoice.SerializeJson(writer, options, true);
          break;
        case Library typedLibrary:
          typedLibrary.SerializeJson(writer, options, true);
          break;
        case Linkage typedLinkage:
          typedLinkage.SerializeJson(writer, options, true);
          break;
        case List typedList:
          typedList.SerializeJson(writer, options, true);
          break;
        case Location typedLocation:
          typedLocation.SerializeJson(writer, options, true);
          break;
        case Measure typedMeasure:
          typedMeasure.SerializeJson(writer, options, true);
          break;
        case MeasureReport typedMeasureReport:
          typedMeasureReport.SerializeJson(writer, options, true);
          break;
        case Media typedMedia:
          typedMedia.SerializeJson(writer, options, true);
          break;
        case Medication typedMedication:
          typedMedication.SerializeJson(writer, options, true);
          break;
        case MedicationAdministration typedMedicationAdministration:
          typedMedicationAdministration.SerializeJson(writer, options, true);
          break;
        case MedicationDispense typedMedicationDispense:
          typedMedicationDispense.SerializeJson(writer, options, true);
          break;
        case MedicationKnowledge typedMedicationKnowledge:
          typedMedicationKnowledge.SerializeJson(writer, options, true);
          break;
        case MedicationRequest typedMedicationRequest:
          typedMedicationRequest.SerializeJson(writer, options, true);
          break;
        case MedicationStatement typedMedicationStatement:
          typedMedicationStatement.SerializeJson(writer, options, true);
          break;
        case MedicinalProduct typedMedicinalProduct:
          typedMedicinalProduct.SerializeJson(writer, options, true);
          break;
        case MedicinalProductAuthorization typedMedicinalProductAuthorization:
          typedMedicinalProductAuthorization.SerializeJson(writer, options, true);
          break;
        case MedicinalProductContraindication typedMedicinalProductContraindication:
          typedMedicinalProductContraindication.SerializeJson(writer, options, true);
          break;
        case MedicinalProductIndication typedMedicinalProductIndication:
          typedMedicinalProductIndication.SerializeJson(writer, options, true);
          break;
        case MedicinalProductIngredient typedMedicinalProductIngredient:
          typedMedicinalProductIngredient.SerializeJson(writer, options, true);
          break;
        case MedicinalProductInteraction typedMedicinalProductInteraction:
          typedMedicinalProductInteraction.SerializeJson(writer, options, true);
          break;
        case MedicinalProductManufactured typedMedicinalProductManufactured:
          typedMedicinalProductManufactured.SerializeJson(writer, options, true);
          break;
        case MedicinalProductPackaged typedMedicinalProductPackaged:
          typedMedicinalProductPackaged.SerializeJson(writer, options, true);
          break;
        case MedicinalProductPharmaceutical typedMedicinalProductPharmaceutical:
          typedMedicinalProductPharmaceutical.SerializeJson(writer, options, true);
          break;
        case MedicinalProductUndesirableEffect typedMedicinalProductUndesirableEffect:
          typedMedicinalProductUndesirableEffect.SerializeJson(writer, options, true);
          break;
        case MessageDefinition typedMessageDefinition:
          typedMessageDefinition.SerializeJson(writer, options, true);
          break;
        case MessageHeader typedMessageHeader:
          typedMessageHeader.SerializeJson(writer, options, true);
          break;
        case MolecularSequence typedMolecularSequence:
          typedMolecularSequence.SerializeJson(writer, options, true);
          break;
        case NamingSystem typedNamingSystem:
          typedNamingSystem.SerializeJson(writer, options, true);
          break;
        case NutritionOrder typedNutritionOrder:
          typedNutritionOrder.SerializeJson(writer, options, true);
          break;
        case Observation typedObservation:
          typedObservation.SerializeJson(writer, options, true);
          break;
        case ObservationDefinition typedObservationDefinition:
          typedObservationDefinition.SerializeJson(writer, options, true);
          break;
        case OperationDefinition typedOperationDefinition:
          typedOperationDefinition.SerializeJson(writer, options, true);
          break;
        case OperationOutcome typedOperationOutcome:
          typedOperationOutcome.SerializeJson(writer, options, true);
          break;
        case Organization typedOrganization:
          typedOrganization.SerializeJson(writer, options, true);
          break;
        case OrganizationAffiliation typedOrganizationAffiliation:
          typedOrganizationAffiliation.SerializeJson(writer, options, true);
          break;
        case Parameters typedParameters:
          typedParameters.SerializeJson(writer, options, true);
          break;
        case Patient typedPatient:
          typedPatient.SerializeJson(writer, options, true);
          break;
        case PaymentNotice typedPaymentNotice:
          typedPaymentNotice.SerializeJson(writer, options, true);
          break;
        case PaymentReconciliation typedPaymentReconciliation:
          typedPaymentReconciliation.SerializeJson(writer, options, true);
          break;
        case Person typedPerson:
          typedPerson.SerializeJson(writer, options, true);
          break;
        case PlanDefinition typedPlanDefinition:
          typedPlanDefinition.SerializeJson(writer, options, true);
          break;
        case Practitioner typedPractitioner:
          typedPractitioner.SerializeJson(writer, options, true);
          break;
        case PractitionerRole typedPractitionerRole:
          typedPractitionerRole.SerializeJson(writer, options, true);
          break;
        case Procedure typedProcedure:
          typedProcedure.SerializeJson(writer, options, true);
          break;
        case Provenance typedProvenance:
          typedProvenance.SerializeJson(writer, options, true);
          break;
        case Questionnaire typedQuestionnaire:
          typedQuestionnaire.SerializeJson(writer, options, true);
          break;
        case QuestionnaireResponse typedQuestionnaireResponse:
          typedQuestionnaireResponse.SerializeJson(writer, options, true);
          break;
        case RelatedPerson typedRelatedPerson:
          typedRelatedPerson.SerializeJson(writer, options, true);
          break;
        case RequestGroup typedRequestGroup:
          typedRequestGroup.SerializeJson(writer, options, true);
          break;
        case ResearchDefinition typedResearchDefinition:
          typedResearchDefinition.SerializeJson(writer, options, true);
          break;
        case ResearchElementDefinition typedResearchElementDefinition:
          typedResearchElementDefinition.SerializeJson(writer, options, true);
          break;
        case ResearchStudy typedResearchStudy:
          typedResearchStudy.SerializeJson(writer, options, true);
          break;
        case ResearchSubject typedResearchSubject:
          typedResearchSubject.SerializeJson(writer, options, true);
          break;
        case RiskAssessment typedRiskAssessment:
          typedRiskAssessment.SerializeJson(writer, options, true);
          break;
        case RiskEvidenceSynthesis typedRiskEvidenceSynthesis:
          typedRiskEvidenceSynthesis.SerializeJson(writer, options, true);
          break;
        case Schedule typedSchedule:
          typedSchedule.SerializeJson(writer, options, true);
          break;
        case SearchParameter typedSearchParameter:
          typedSearchParameter.SerializeJson(writer, options, true);
          break;
        case ServiceRequest typedServiceRequest:
          typedServiceRequest.SerializeJson(writer, options, true);
          break;
        case Slot typedSlot:
          typedSlot.SerializeJson(writer, options, true);
          break;
        case Specimen typedSpecimen:
          typedSpecimen.SerializeJson(writer, options, true);
          break;
        case SpecimenDefinition typedSpecimenDefinition:
          typedSpecimenDefinition.SerializeJson(writer, options, true);
          break;
        case StructureDefinition typedStructureDefinition:
          typedStructureDefinition.SerializeJson(writer, options, true);
          break;
        case StructureMap typedStructureMap:
          typedStructureMap.SerializeJson(writer, options, true);
          break;
        case Subscription typedSubscription:
          typedSubscription.SerializeJson(writer, options, true);
          break;
        case Substance typedSubstance:
          typedSubstance.SerializeJson(writer, options, true);
          break;
        case SubstanceNucleicAcid typedSubstanceNucleicAcid:
          typedSubstanceNucleicAcid.SerializeJson(writer, options, true);
          break;
        case SubstancePolymer typedSubstancePolymer:
          typedSubstancePolymer.SerializeJson(writer, options, true);
          break;
        case SubstanceProtein typedSubstanceProtein:
          typedSubstanceProtein.SerializeJson(writer, options, true);
          break;
        case SubstanceReferenceInformation typedSubstanceReferenceInformation:
          typedSubstanceReferenceInformation.SerializeJson(writer, options, true);
          break;
        case SubstanceSourceMaterial typedSubstanceSourceMaterial:
          typedSubstanceSourceMaterial.SerializeJson(writer, options, true);
          break;
        case SubstanceSpecification typedSubstanceSpecification:
          typedSubstanceSpecification.SerializeJson(writer, options, true);
          break;
        case SupplyDelivery typedSupplyDelivery:
          typedSupplyDelivery.SerializeJson(writer, options, true);
          break;
        case SupplyRequest typedSupplyRequest:
          typedSupplyRequest.SerializeJson(writer, options, true);
          break;
        case Task typedTask:
          typedTask.SerializeJson(writer, options, true);
          break;
        case TerminologyCapabilities typedTerminologyCapabilities:
          typedTerminologyCapabilities.SerializeJson(writer, options, true);
          break;
        case TestReport typedTestReport:
          typedTestReport.SerializeJson(writer, options, true);
          break;
        case TestScript typedTestScript:
          typedTestScript.SerializeJson(writer, options, true);
          break;
        case ValueSet typedValueSet:
          typedValueSet.SerializeJson(writer, options, true);
          break;
        case VerificationResult typedVerificationResult:
          typedVerificationResult.SerializeJson(writer, options, true);
          break;
        case VisionPrescription typedVisionPrescription:
          typedVisionPrescription.SerializeJson(writer, options, true);
          break;
      }

      writer.Flush();
    }

    /// <summary>
    /// Reads and converts the JSON to a typed object.
    /// </summary>
    public override Resource Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      return PolymorphicRead(ref reader, typeToConvert, options);
    }

    /// <summary>
    /// Copy raw data from a Utf8JsonReader to a MemoryStream.
    /// </summary>
    private static void WriteReaderValueBytes(ref MemoryStream ms, ref Utf8JsonReader reader)
    {
      if (reader.HasValueSequence)
      {
        byte[] data = new byte[reader.ValueSequence.Length];
        reader.ValueSequence.CopyTo(data);
        ms.Write(data);
        return;
      }

      ms.Write(reader.ValueSpan);
    }

    /// <summary>
    /// Add a JSON seperator token, if necessary.
    /// </summary>
    private static void AddSeperatorIfNeeded(ref MemoryStream ms, ref Utf8JsonReader reader, JsonTokenType last)
    {
      switch (last)
      {
        case JsonTokenType.StartObject:
        case JsonTokenType.StartArray:
          // do nothing
          break;
        case JsonTokenType.PropertyName:
          ms.Write(_propertySep);
          break;
        default:
          ms.Write(_comma);
          break;
      }
    }

    /// <summary>
    /// Read override to handle polymorphic reading of resources.
    /// </summary>
    public static Resource PolymorphicRead(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      string propertyName = null;
      string resourceType = null;

      if (reader.TokenType == JsonTokenType.None)
      {
        reader.Read();
      }

      if (reader.TokenType != JsonTokenType.StartObject)
      {
        throw new JsonException();
      }

      reader.Read();
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      propertyName = reader.GetString();
      if (propertyName == "resourceType")
      {
        reader.Read();
        if (reader.TokenType != JsonTokenType.String)
        {
          throw new JsonException();
        }

        resourceType = reader.GetString();

        return DoPolymorphicRead(ref reader, options, resourceType);
      }

      MemoryStream ms = new MemoryStream(4096);

      ms.Write(Encoding.UTF8.GetBytes($"{{\"{propertyName}\""));
      propertyName = string.Empty;

      int depth = reader.CurrentDepth;
      bool done = false;
      bool nextValueIsResourceType = false;
      JsonTokenType lastToken = JsonTokenType.PropertyName;

      while ((!done) && reader.Read())
      {
        switch (reader.TokenType)
        {
          case JsonTokenType.StartObject:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            ms.Write(_startObject);
            break;

          case JsonTokenType.EndObject:
            ms.Write(_endObject);
            if (reader.CurrentDepth == (depth - 1))
            {
              done = true;
            }
            break;

          case JsonTokenType.StartArray:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            ms.Write(_startArray);
            break;

          case JsonTokenType.EndArray:
            ms.Write(_endArray);
            break;

          case JsonTokenType.PropertyName:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            if (reader.CurrentDepth == depth)
            {
              if (reader.ValueTextEquals("resourceType"))
              {
                nextValueIsResourceType = true;
              }
            }

            ms.Write(_quote);
            WriteReaderValueBytes(ref ms, ref reader);
            ms.Write(_quote);
            break;

          case JsonTokenType.Comment:
            break;

          case JsonTokenType.String:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            if (nextValueIsResourceType)
            {
              resourceType = reader.GetString();
              nextValueIsResourceType = false;
            }

            ms.Write(_quote);
            WriteReaderValueBytes(ref ms, ref reader);
            ms.Write(_quote);
            break;

          case JsonTokenType.Number:
          case JsonTokenType.True:
          case JsonTokenType.False:
          case JsonTokenType.Null:
          default:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            WriteReaderValueBytes(ref ms, ref reader);
            break;
        }

        lastToken = reader.TokenType;
      }

      ms.Flush();
      Utf8JsonReader secondary = new Utf8JsonReader(ms.GetBuffer());

      return DoPolymorphicRead(ref secondary, options, resourceType);
    }
    /// <summary>
    /// Sub-function for simpler handling of reader switching.
    /// </summary>
    public static Resource DoPolymorphicRead(ref Utf8JsonReader reader, JsonSerializerOptions options, string resourceType)
    {
      dynamic target;
      switch (resourceType)
      {
        case "Account":
          target = new Hl7.Fhir.Model.Account();
          ((Hl7.Fhir.Model.Account)target).DeserializeJson(ref reader, options);
          break;
        case "ActivityDefinition":
          target = new Hl7.Fhir.Model.ActivityDefinition();
          ((Hl7.Fhir.Model.ActivityDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "AdverseEvent":
          target = new Hl7.Fhir.Model.AdverseEvent();
          ((Hl7.Fhir.Model.AdverseEvent)target).DeserializeJson(ref reader, options);
          break;
        case "AllergyIntolerance":
          target = new Hl7.Fhir.Model.AllergyIntolerance();
          ((Hl7.Fhir.Model.AllergyIntolerance)target).DeserializeJson(ref reader, options);
          break;
        case "Appointment":
          target = new Hl7.Fhir.Model.Appointment();
          ((Hl7.Fhir.Model.Appointment)target).DeserializeJson(ref reader, options);
          break;
        case "AppointmentResponse":
          target = new Hl7.Fhir.Model.AppointmentResponse();
          ((Hl7.Fhir.Model.AppointmentResponse)target).DeserializeJson(ref reader, options);
          break;
        case "AuditEvent":
          target = new Hl7.Fhir.Model.AuditEvent();
          ((Hl7.Fhir.Model.AuditEvent)target).DeserializeJson(ref reader, options);
          break;
        case "Basic":
          target = new Hl7.Fhir.Model.Basic();
          ((Hl7.Fhir.Model.Basic)target).DeserializeJson(ref reader, options);
          break;
        case "Binary":
          target = new Hl7.Fhir.Model.Binary();
          ((Hl7.Fhir.Model.Binary)target).DeserializeJson(ref reader, options);
          break;
        case "BiologicallyDerivedProduct":
          target = new Hl7.Fhir.Model.BiologicallyDerivedProduct();
          ((Hl7.Fhir.Model.BiologicallyDerivedProduct)target).DeserializeJson(ref reader, options);
          break;
        case "BodyStructure":
          target = new Hl7.Fhir.Model.BodyStructure();
          ((Hl7.Fhir.Model.BodyStructure)target).DeserializeJson(ref reader, options);
          break;
        case "Bundle":
          target = new Hl7.Fhir.Model.Bundle();
          ((Hl7.Fhir.Model.Bundle)target).DeserializeJson(ref reader, options);
          break;
        case "CapabilityStatement":
          target = new Hl7.Fhir.Model.CapabilityStatement();
          ((Hl7.Fhir.Model.CapabilityStatement)target).DeserializeJson(ref reader, options);
          break;
        case "CarePlan":
          target = new Hl7.Fhir.Model.CarePlan();
          ((Hl7.Fhir.Model.CarePlan)target).DeserializeJson(ref reader, options);
          break;
        case "CareTeam":
          target = new Hl7.Fhir.Model.CareTeam();
          ((Hl7.Fhir.Model.CareTeam)target).DeserializeJson(ref reader, options);
          break;
        case "CatalogEntry":
          target = new Hl7.Fhir.Model.CatalogEntry();
          ((Hl7.Fhir.Model.CatalogEntry)target).DeserializeJson(ref reader, options);
          break;
        case "ChargeItem":
          target = new Hl7.Fhir.Model.ChargeItem();
          ((Hl7.Fhir.Model.ChargeItem)target).DeserializeJson(ref reader, options);
          break;
        case "ChargeItemDefinition":
          target = new Hl7.Fhir.Model.ChargeItemDefinition();
          ((Hl7.Fhir.Model.ChargeItemDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Claim":
          target = new Hl7.Fhir.Model.Claim();
          ((Hl7.Fhir.Model.Claim)target).DeserializeJson(ref reader, options);
          break;
        case "ClaimResponse":
          target = new Hl7.Fhir.Model.ClaimResponse();
          ((Hl7.Fhir.Model.ClaimResponse)target).DeserializeJson(ref reader, options);
          break;
        case "ClinicalImpression":
          target = new Hl7.Fhir.Model.ClinicalImpression();
          ((Hl7.Fhir.Model.ClinicalImpression)target).DeserializeJson(ref reader, options);
          break;
        case "CodeSystem":
          target = new Hl7.Fhir.Model.CodeSystem();
          ((Hl7.Fhir.Model.CodeSystem)target).DeserializeJson(ref reader, options);
          break;
        case "Communication":
          target = new Hl7.Fhir.Model.Communication();
          ((Hl7.Fhir.Model.Communication)target).DeserializeJson(ref reader, options);
          break;
        case "CommunicationRequest":
          target = new Hl7.Fhir.Model.CommunicationRequest();
          ((Hl7.Fhir.Model.CommunicationRequest)target).DeserializeJson(ref reader, options);
          break;
        case "CompartmentDefinition":
          target = new Hl7.Fhir.Model.CompartmentDefinition();
          ((Hl7.Fhir.Model.CompartmentDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Composition":
          target = new Hl7.Fhir.Model.Composition();
          ((Hl7.Fhir.Model.Composition)target).DeserializeJson(ref reader, options);
          break;
        case "ConceptMap":
          target = new Hl7.Fhir.Model.ConceptMap();
          ((Hl7.Fhir.Model.ConceptMap)target).DeserializeJson(ref reader, options);
          break;
        case "Condition":
          target = new Hl7.Fhir.Model.Condition();
          ((Hl7.Fhir.Model.Condition)target).DeserializeJson(ref reader, options);
          break;
        case "Consent":
          target = new Hl7.Fhir.Model.Consent();
          ((Hl7.Fhir.Model.Consent)target).DeserializeJson(ref reader, options);
          break;
        case "Contract":
          target = new Hl7.Fhir.Model.Contract();
          ((Hl7.Fhir.Model.Contract)target).DeserializeJson(ref reader, options);
          break;
        case "Coverage":
          target = new Hl7.Fhir.Model.Coverage();
          ((Hl7.Fhir.Model.Coverage)target).DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityRequest":
          target = new Hl7.Fhir.Model.CoverageEligibilityRequest();
          ((Hl7.Fhir.Model.CoverageEligibilityRequest)target).DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityResponse":
          target = new Hl7.Fhir.Model.CoverageEligibilityResponse();
          ((Hl7.Fhir.Model.CoverageEligibilityResponse)target).DeserializeJson(ref reader, options);
          break;
        case "DetectedIssue":
          target = new Hl7.Fhir.Model.DetectedIssue();
          ((Hl7.Fhir.Model.DetectedIssue)target).DeserializeJson(ref reader, options);
          break;
        case "Device":
          target = new Hl7.Fhir.Model.Device();
          ((Hl7.Fhir.Model.Device)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceDefinition":
          target = new Hl7.Fhir.Model.DeviceDefinition();
          ((Hl7.Fhir.Model.DeviceDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceMetric":
          target = new Hl7.Fhir.Model.DeviceMetric();
          ((Hl7.Fhir.Model.DeviceMetric)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceRequest":
          target = new Hl7.Fhir.Model.DeviceRequest();
          ((Hl7.Fhir.Model.DeviceRequest)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceUseStatement":
          target = new Hl7.Fhir.Model.DeviceUseStatement();
          ((Hl7.Fhir.Model.DeviceUseStatement)target).DeserializeJson(ref reader, options);
          break;
        case "DiagnosticReport":
          target = new Hl7.Fhir.Model.DiagnosticReport();
          ((Hl7.Fhir.Model.DiagnosticReport)target).DeserializeJson(ref reader, options);
          break;
        case "DocumentManifest":
          target = new Hl7.Fhir.Model.DocumentManifest();
          ((Hl7.Fhir.Model.DocumentManifest)target).DeserializeJson(ref reader, options);
          break;
        case "DocumentReference":
          target = new Hl7.Fhir.Model.DocumentReference();
          ((Hl7.Fhir.Model.DocumentReference)target).DeserializeJson(ref reader, options);
          break;
        case "EffectEvidenceSynthesis":
          target = new Hl7.Fhir.Model.EffectEvidenceSynthesis();
          ((Hl7.Fhir.Model.EffectEvidenceSynthesis)target).DeserializeJson(ref reader, options);
          break;
        case "Encounter":
          target = new Hl7.Fhir.Model.Encounter();
          ((Hl7.Fhir.Model.Encounter)target).DeserializeJson(ref reader, options);
          break;
        case "Endpoint":
          target = new Hl7.Fhir.Model.Endpoint();
          ((Hl7.Fhir.Model.Endpoint)target).DeserializeJson(ref reader, options);
          break;
        case "EnrollmentRequest":
          target = new Hl7.Fhir.Model.EnrollmentRequest();
          ((Hl7.Fhir.Model.EnrollmentRequest)target).DeserializeJson(ref reader, options);
          break;
        case "EnrollmentResponse":
          target = new Hl7.Fhir.Model.EnrollmentResponse();
          ((Hl7.Fhir.Model.EnrollmentResponse)target).DeserializeJson(ref reader, options);
          break;
        case "EpisodeOfCare":
          target = new Hl7.Fhir.Model.EpisodeOfCare();
          ((Hl7.Fhir.Model.EpisodeOfCare)target).DeserializeJson(ref reader, options);
          break;
        case "EventDefinition":
          target = new Hl7.Fhir.Model.EventDefinition();
          ((Hl7.Fhir.Model.EventDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Evidence":
          target = new Hl7.Fhir.Model.Evidence();
          ((Hl7.Fhir.Model.Evidence)target).DeserializeJson(ref reader, options);
          break;
        case "EvidenceVariable":
          target = new Hl7.Fhir.Model.EvidenceVariable();
          ((Hl7.Fhir.Model.EvidenceVariable)target).DeserializeJson(ref reader, options);
          break;
        case "ExampleScenario":
          target = new Hl7.Fhir.Model.ExampleScenario();
          ((Hl7.Fhir.Model.ExampleScenario)target).DeserializeJson(ref reader, options);
          break;
        case "ExplanationOfBenefit":
          target = new Hl7.Fhir.Model.ExplanationOfBenefit();
          ((Hl7.Fhir.Model.ExplanationOfBenefit)target).DeserializeJson(ref reader, options);
          break;
        case "FamilyMemberHistory":
          target = new Hl7.Fhir.Model.FamilyMemberHistory();
          ((Hl7.Fhir.Model.FamilyMemberHistory)target).DeserializeJson(ref reader, options);
          break;
        case "Flag":
          target = new Hl7.Fhir.Model.Flag();
          ((Hl7.Fhir.Model.Flag)target).DeserializeJson(ref reader, options);
          break;
        case "Goal":
          target = new Hl7.Fhir.Model.Goal();
          ((Hl7.Fhir.Model.Goal)target).DeserializeJson(ref reader, options);
          break;
        case "GraphDefinition":
          target = new Hl7.Fhir.Model.GraphDefinition();
          ((Hl7.Fhir.Model.GraphDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Group":
          target = new Hl7.Fhir.Model.Group();
          ((Hl7.Fhir.Model.Group)target).DeserializeJson(ref reader, options);
          break;
        case "GuidanceResponse":
          target = new Hl7.Fhir.Model.GuidanceResponse();
          ((Hl7.Fhir.Model.GuidanceResponse)target).DeserializeJson(ref reader, options);
          break;
        case "HealthcareService":
          target = new Hl7.Fhir.Model.HealthcareService();
          ((Hl7.Fhir.Model.HealthcareService)target).DeserializeJson(ref reader, options);
          break;
        case "ImagingStudy":
          target = new Hl7.Fhir.Model.ImagingStudy();
          ((Hl7.Fhir.Model.ImagingStudy)target).DeserializeJson(ref reader, options);
          break;
        case "Immunization":
          target = new Hl7.Fhir.Model.Immunization();
          ((Hl7.Fhir.Model.Immunization)target).DeserializeJson(ref reader, options);
          break;
        case "ImmunizationEvaluation":
          target = new Hl7.Fhir.Model.ImmunizationEvaluation();
          ((Hl7.Fhir.Model.ImmunizationEvaluation)target).DeserializeJson(ref reader, options);
          break;
        case "ImmunizationRecommendation":
          target = new Hl7.Fhir.Model.ImmunizationRecommendation();
          ((Hl7.Fhir.Model.ImmunizationRecommendation)target).DeserializeJson(ref reader, options);
          break;
        case "ImplementationGuide":
          target = new Hl7.Fhir.Model.ImplementationGuide();
          ((Hl7.Fhir.Model.ImplementationGuide)target).DeserializeJson(ref reader, options);
          break;
        case "InsurancePlan":
          target = new Hl7.Fhir.Model.InsurancePlan();
          ((Hl7.Fhir.Model.InsurancePlan)target).DeserializeJson(ref reader, options);
          break;
        case "Invoice":
          target = new Hl7.Fhir.Model.Invoice();
          ((Hl7.Fhir.Model.Invoice)target).DeserializeJson(ref reader, options);
          break;
        case "Library":
          target = new Hl7.Fhir.Model.Library();
          ((Hl7.Fhir.Model.Library)target).DeserializeJson(ref reader, options);
          break;
        case "Linkage":
          target = new Hl7.Fhir.Model.Linkage();
          ((Hl7.Fhir.Model.Linkage)target).DeserializeJson(ref reader, options);
          break;
        case "List":
          target = new Hl7.Fhir.Model.List();
          ((Hl7.Fhir.Model.List)target).DeserializeJson(ref reader, options);
          break;
        case "Location":
          target = new Hl7.Fhir.Model.Location();
          ((Hl7.Fhir.Model.Location)target).DeserializeJson(ref reader, options);
          break;
        case "Measure":
          target = new Hl7.Fhir.Model.Measure();
          ((Hl7.Fhir.Model.Measure)target).DeserializeJson(ref reader, options);
          break;
        case "MeasureReport":
          target = new Hl7.Fhir.Model.MeasureReport();
          ((Hl7.Fhir.Model.MeasureReport)target).DeserializeJson(ref reader, options);
          break;
        case "Media":
          target = new Hl7.Fhir.Model.Media();
          ((Hl7.Fhir.Model.Media)target).DeserializeJson(ref reader, options);
          break;
        case "Medication":
          target = new Hl7.Fhir.Model.Medication();
          ((Hl7.Fhir.Model.Medication)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationAdministration":
          target = new Hl7.Fhir.Model.MedicationAdministration();
          ((Hl7.Fhir.Model.MedicationAdministration)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationDispense":
          target = new Hl7.Fhir.Model.MedicationDispense();
          ((Hl7.Fhir.Model.MedicationDispense)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationKnowledge":
          target = new Hl7.Fhir.Model.MedicationKnowledge();
          ((Hl7.Fhir.Model.MedicationKnowledge)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationRequest":
          target = new Hl7.Fhir.Model.MedicationRequest();
          ((Hl7.Fhir.Model.MedicationRequest)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationStatement":
          target = new Hl7.Fhir.Model.MedicationStatement();
          ((Hl7.Fhir.Model.MedicationStatement)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProduct":
          target = new Hl7.Fhir.Model.MedicinalProduct();
          ((Hl7.Fhir.Model.MedicinalProduct)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductAuthorization":
          target = new Hl7.Fhir.Model.MedicinalProductAuthorization();
          ((Hl7.Fhir.Model.MedicinalProductAuthorization)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductContraindication":
          target = new Hl7.Fhir.Model.MedicinalProductContraindication();
          ((Hl7.Fhir.Model.MedicinalProductContraindication)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductIndication":
          target = new Hl7.Fhir.Model.MedicinalProductIndication();
          ((Hl7.Fhir.Model.MedicinalProductIndication)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductIngredient":
          target = new Hl7.Fhir.Model.MedicinalProductIngredient();
          ((Hl7.Fhir.Model.MedicinalProductIngredient)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductInteraction":
          target = new Hl7.Fhir.Model.MedicinalProductInteraction();
          ((Hl7.Fhir.Model.MedicinalProductInteraction)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductManufactured":
          target = new Hl7.Fhir.Model.MedicinalProductManufactured();
          ((Hl7.Fhir.Model.MedicinalProductManufactured)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductPackaged":
          target = new Hl7.Fhir.Model.MedicinalProductPackaged();
          ((Hl7.Fhir.Model.MedicinalProductPackaged)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductPharmaceutical":
          target = new Hl7.Fhir.Model.MedicinalProductPharmaceutical();
          ((Hl7.Fhir.Model.MedicinalProductPharmaceutical)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductUndesirableEffect":
          target = new Hl7.Fhir.Model.MedicinalProductUndesirableEffect();
          ((Hl7.Fhir.Model.MedicinalProductUndesirableEffect)target).DeserializeJson(ref reader, options);
          break;
        case "MessageDefinition":
          target = new Hl7.Fhir.Model.MessageDefinition();
          ((Hl7.Fhir.Model.MessageDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "MessageHeader":
          target = new Hl7.Fhir.Model.MessageHeader();
          ((Hl7.Fhir.Model.MessageHeader)target).DeserializeJson(ref reader, options);
          break;
        case "MolecularSequence":
          target = new Hl7.Fhir.Model.MolecularSequence();
          ((Hl7.Fhir.Model.MolecularSequence)target).DeserializeJson(ref reader, options);
          break;
        case "NamingSystem":
          target = new Hl7.Fhir.Model.NamingSystem();
          ((Hl7.Fhir.Model.NamingSystem)target).DeserializeJson(ref reader, options);
          break;
        case "NutritionOrder":
          target = new Hl7.Fhir.Model.NutritionOrder();
          ((Hl7.Fhir.Model.NutritionOrder)target).DeserializeJson(ref reader, options);
          break;
        case "Observation":
          target = new Hl7.Fhir.Model.Observation();
          ((Hl7.Fhir.Model.Observation)target).DeserializeJson(ref reader, options);
          break;
        case "ObservationDefinition":
          target = new Hl7.Fhir.Model.ObservationDefinition();
          ((Hl7.Fhir.Model.ObservationDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "OperationDefinition":
          target = new Hl7.Fhir.Model.OperationDefinition();
          ((Hl7.Fhir.Model.OperationDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "OperationOutcome":
          target = new Hl7.Fhir.Model.OperationOutcome();
          ((Hl7.Fhir.Model.OperationOutcome)target).DeserializeJson(ref reader, options);
          break;
        case "Organization":
          target = new Hl7.Fhir.Model.Organization();
          ((Hl7.Fhir.Model.Organization)target).DeserializeJson(ref reader, options);
          break;
        case "OrganizationAffiliation":
          target = new Hl7.Fhir.Model.OrganizationAffiliation();
          ((Hl7.Fhir.Model.OrganizationAffiliation)target).DeserializeJson(ref reader, options);
          break;
        case "Parameters":
          target = new Hl7.Fhir.Model.Parameters();
          ((Hl7.Fhir.Model.Parameters)target).DeserializeJson(ref reader, options);
          break;
        case "Patient":
          target = new Hl7.Fhir.Model.Patient();
          ((Hl7.Fhir.Model.Patient)target).DeserializeJson(ref reader, options);
          break;
        case "PaymentNotice":
          target = new Hl7.Fhir.Model.PaymentNotice();
          ((Hl7.Fhir.Model.PaymentNotice)target).DeserializeJson(ref reader, options);
          break;
        case "PaymentReconciliation":
          target = new Hl7.Fhir.Model.PaymentReconciliation();
          ((Hl7.Fhir.Model.PaymentReconciliation)target).DeserializeJson(ref reader, options);
          break;
        case "Person":
          target = new Hl7.Fhir.Model.Person();
          ((Hl7.Fhir.Model.Person)target).DeserializeJson(ref reader, options);
          break;
        case "PlanDefinition":
          target = new Hl7.Fhir.Model.PlanDefinition();
          ((Hl7.Fhir.Model.PlanDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Practitioner":
          target = new Hl7.Fhir.Model.Practitioner();
          ((Hl7.Fhir.Model.Practitioner)target).DeserializeJson(ref reader, options);
          break;
        case "PractitionerRole":
          target = new Hl7.Fhir.Model.PractitionerRole();
          ((Hl7.Fhir.Model.PractitionerRole)target).DeserializeJson(ref reader, options);
          break;
        case "Procedure":
          target = new Hl7.Fhir.Model.Procedure();
          ((Hl7.Fhir.Model.Procedure)target).DeserializeJson(ref reader, options);
          break;
        case "Provenance":
          target = new Hl7.Fhir.Model.Provenance();
          ((Hl7.Fhir.Model.Provenance)target).DeserializeJson(ref reader, options);
          break;
        case "Questionnaire":
          target = new Hl7.Fhir.Model.Questionnaire();
          ((Hl7.Fhir.Model.Questionnaire)target).DeserializeJson(ref reader, options);
          break;
        case "QuestionnaireResponse":
          target = new Hl7.Fhir.Model.QuestionnaireResponse();
          ((Hl7.Fhir.Model.QuestionnaireResponse)target).DeserializeJson(ref reader, options);
          break;
        case "RelatedPerson":
          target = new Hl7.Fhir.Model.RelatedPerson();
          ((Hl7.Fhir.Model.RelatedPerson)target).DeserializeJson(ref reader, options);
          break;
        case "RequestGroup":
          target = new Hl7.Fhir.Model.RequestGroup();
          ((Hl7.Fhir.Model.RequestGroup)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchDefinition":
          target = new Hl7.Fhir.Model.ResearchDefinition();
          ((Hl7.Fhir.Model.ResearchDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchElementDefinition":
          target = new Hl7.Fhir.Model.ResearchElementDefinition();
          ((Hl7.Fhir.Model.ResearchElementDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchStudy":
          target = new Hl7.Fhir.Model.ResearchStudy();
          ((Hl7.Fhir.Model.ResearchStudy)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchSubject":
          target = new Hl7.Fhir.Model.ResearchSubject();
          ((Hl7.Fhir.Model.ResearchSubject)target).DeserializeJson(ref reader, options);
          break;
        case "RiskAssessment":
          target = new Hl7.Fhir.Model.RiskAssessment();
          ((Hl7.Fhir.Model.RiskAssessment)target).DeserializeJson(ref reader, options);
          break;
        case "RiskEvidenceSynthesis":
          target = new Hl7.Fhir.Model.RiskEvidenceSynthesis();
          ((Hl7.Fhir.Model.RiskEvidenceSynthesis)target).DeserializeJson(ref reader, options);
          break;
        case "Schedule":
          target = new Hl7.Fhir.Model.Schedule();
          ((Hl7.Fhir.Model.Schedule)target).DeserializeJson(ref reader, options);
          break;
        case "SearchParameter":
          target = new Hl7.Fhir.Model.SearchParameter();
          ((Hl7.Fhir.Model.SearchParameter)target).DeserializeJson(ref reader, options);
          break;
        case "ServiceRequest":
          target = new Hl7.Fhir.Model.ServiceRequest();
          ((Hl7.Fhir.Model.ServiceRequest)target).DeserializeJson(ref reader, options);
          break;
        case "Slot":
          target = new Hl7.Fhir.Model.Slot();
          ((Hl7.Fhir.Model.Slot)target).DeserializeJson(ref reader, options);
          break;
        case "Specimen":
          target = new Hl7.Fhir.Model.Specimen();
          ((Hl7.Fhir.Model.Specimen)target).DeserializeJson(ref reader, options);
          break;
        case "SpecimenDefinition":
          target = new Hl7.Fhir.Model.SpecimenDefinition();
          ((Hl7.Fhir.Model.SpecimenDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "StructureDefinition":
          target = new Hl7.Fhir.Model.StructureDefinition();
          ((Hl7.Fhir.Model.StructureDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "StructureMap":
          target = new Hl7.Fhir.Model.StructureMap();
          ((Hl7.Fhir.Model.StructureMap)target).DeserializeJson(ref reader, options);
          break;
        case "Subscription":
          target = new Hl7.Fhir.Model.Subscription();
          ((Hl7.Fhir.Model.Subscription)target).DeserializeJson(ref reader, options);
          break;
        case "Substance":
          target = new Hl7.Fhir.Model.Substance();
          ((Hl7.Fhir.Model.Substance)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceNucleicAcid":
          target = new Hl7.Fhir.Model.SubstanceNucleicAcid();
          ((Hl7.Fhir.Model.SubstanceNucleicAcid)target).DeserializeJson(ref reader, options);
          break;
        case "SubstancePolymer":
          target = new Hl7.Fhir.Model.SubstancePolymer();
          ((Hl7.Fhir.Model.SubstancePolymer)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceProtein":
          target = new Hl7.Fhir.Model.SubstanceProtein();
          ((Hl7.Fhir.Model.SubstanceProtein)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceReferenceInformation":
          target = new Hl7.Fhir.Model.SubstanceReferenceInformation();
          ((Hl7.Fhir.Model.SubstanceReferenceInformation)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceSourceMaterial":
          target = new Hl7.Fhir.Model.SubstanceSourceMaterial();
          ((Hl7.Fhir.Model.SubstanceSourceMaterial)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceSpecification":
          target = new Hl7.Fhir.Model.SubstanceSpecification();
          ((Hl7.Fhir.Model.SubstanceSpecification)target).DeserializeJson(ref reader, options);
          break;
        case "SupplyDelivery":
          target = new Hl7.Fhir.Model.SupplyDelivery();
          ((Hl7.Fhir.Model.SupplyDelivery)target).DeserializeJson(ref reader, options);
          break;
        case "SupplyRequest":
          target = new Hl7.Fhir.Model.SupplyRequest();
          ((Hl7.Fhir.Model.SupplyRequest)target).DeserializeJson(ref reader, options);
          break;
        case "Task":
          target = new Hl7.Fhir.Model.Task();
          ((Hl7.Fhir.Model.Task)target).DeserializeJson(ref reader, options);
          break;
        case "TerminologyCapabilities":
          target = new Hl7.Fhir.Model.TerminologyCapabilities();
          ((Hl7.Fhir.Model.TerminologyCapabilities)target).DeserializeJson(ref reader, options);
          break;
        case "TestReport":
          target = new Hl7.Fhir.Model.TestReport();
          ((Hl7.Fhir.Model.TestReport)target).DeserializeJson(ref reader, options);
          break;
        case "TestScript":
          target = new Hl7.Fhir.Model.TestScript();
          ((Hl7.Fhir.Model.TestScript)target).DeserializeJson(ref reader, options);
          break;
        case "ValueSet":
          target = new Hl7.Fhir.Model.ValueSet();
          ((Hl7.Fhir.Model.ValueSet)target).DeserializeJson(ref reader, options);
          break;
        case "VerificationResult":
          target = new Hl7.Fhir.Model.VerificationResult();
          ((Hl7.Fhir.Model.VerificationResult)target).DeserializeJson(ref reader, options);
          break;
        case "VisionPrescription":
          target = new Hl7.Fhir.Model.VisionPrescription();
          ((Hl7.Fhir.Model.VisionPrescription)target).DeserializeJson(ref reader, options);
          break;
        default:
          throw new Exception($"Cannot parse resource type: {resourceType}");
      }

      return (Resource)target;
    }
  }
}
// end of file
