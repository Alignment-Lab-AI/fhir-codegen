// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Information about the use of the medicinal product in relation to other therapies described as part of the indication.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductIndicationOtherTherapy>))]
  public class MedicinalProductIndicationOtherTherapy : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
    /// </summary>
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
    /// </summary>
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// The type of relationship between the medicinal product indication or contraindication and another therapy.
    /// </summary>
    public CodeableConcept TherapyRelationshipType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WritePropertyName("therapyRelationshipType");
      TherapyRelationshipType.SerializeJson(writer, options);

      writer.WritePropertyName("medicationCodeableConcept");
      MedicationCodeableConcept.SerializeJson(writer, options);

      writer.WritePropertyName("medicationReference");
      MedicationReference.SerializeJson(writer, options);

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "medicationCodeableConcept":
          MedicationCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          MedicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "medicationReference":
          MedicationReference = new Fhir.R4.Models.Reference();
          MedicationReference.DeserializeJson(ref reader, options);
          break;

        case "therapyRelationshipType":
          TherapyRelationshipType = new Fhir.R4.Models.CodeableConcept();
          TherapyRelationshipType.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indication for the Medicinal Product.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductIndication>))]
  public class MedicinalProductIndication : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "MedicinalProductIndication";
    /// <summary>
    /// Comorbidity (concurrent condition) or co-infection as part of the indication.
    /// </summary>
    public List<CodeableConcept> Comorbidity { get; set; }
    /// <summary>
    /// The status of the disease or symptom for which the indication applies.
    /// </summary>
    public CodeableConcept DiseaseStatus { get; set; }
    /// <summary>
    /// The disease, symptom or procedure that is the indication for treatment.
    /// </summary>
    public CodeableConcept DiseaseSymptomProcedure { get; set; }
    /// <summary>
    /// Timing or duration information as part of the indication.
    /// </summary>
    public Quantity Duration { get; set; }
    /// <summary>
    /// The intended effect, aim or strategy to be achieved by the indication.
    /// </summary>
    public CodeableConcept IntendedEffect { get; set; }
    /// <summary>
    /// Information about the use of the medicinal product in relation to other therapies described as part of the indication.
    /// </summary>
    public List<MedicinalProductIndicationOtherTherapy> OtherTherapy { get; set; }
    /// <summary>
    /// The population group to which this applies.
    /// </summary>
    public List<Population> Population { get; set; }
    /// <summary>
    /// The medication for which this is an indication.
    /// </summary>
    public List<Reference> Subject { get; set; }
    /// <summary>
    /// Describe the undesirable effects of the medicinal product.
    /// </summary>
    public List<Reference> UndesirableEffect { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((Fhir.R4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Subject != null) && (Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();

        foreach (Reference valSubject in Subject)
        {
          valSubject.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DiseaseSymptomProcedure != null)
      {
        writer.WritePropertyName("diseaseSymptomProcedure");
        DiseaseSymptomProcedure.SerializeJson(writer, options);
      }

      if (DiseaseStatus != null)
      {
        writer.WritePropertyName("diseaseStatus");
        DiseaseStatus.SerializeJson(writer, options);
      }

      if ((Comorbidity != null) && (Comorbidity.Count != 0))
      {
        writer.WritePropertyName("comorbidity");
        writer.WriteStartArray();

        foreach (CodeableConcept valComorbidity in Comorbidity)
        {
          valComorbidity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (IntendedEffect != null)
      {
        writer.WritePropertyName("intendedEffect");
        IntendedEffect.SerializeJson(writer, options);
      }

      if (Duration != null)
      {
        writer.WritePropertyName("duration");
        Duration.SerializeJson(writer, options);
      }

      if ((OtherTherapy != null) && (OtherTherapy.Count != 0))
      {
        writer.WritePropertyName("otherTherapy");
        writer.WriteStartArray();

        foreach (MedicinalProductIndicationOtherTherapy valOtherTherapy in OtherTherapy)
        {
          valOtherTherapy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UndesirableEffect != null) && (UndesirableEffect.Count != 0))
      {
        writer.WritePropertyName("undesirableEffect");
        writer.WriteStartArray();

        foreach (Reference valUndesirableEffect in UndesirableEffect)
        {
          valUndesirableEffect.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Population != null) && (Population.Count != 0))
      {
        writer.WritePropertyName("population");
        writer.WriteStartArray();

        foreach (Population valPopulation in Population)
        {
          valPopulation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "comorbidity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Comorbidity = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objComorbidity = new Fhir.R4.Models.CodeableConcept();
            objComorbidity.DeserializeJson(ref reader, options);
            Comorbidity.Add(objComorbidity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Comorbidity.Count == 0)
          {
            Comorbidity = null;
          }

          break;

        case "diseaseStatus":
          DiseaseStatus = new Fhir.R4.Models.CodeableConcept();
          DiseaseStatus.DeserializeJson(ref reader, options);
          break;

        case "diseaseSymptomProcedure":
          DiseaseSymptomProcedure = new Fhir.R4.Models.CodeableConcept();
          DiseaseSymptomProcedure.DeserializeJson(ref reader, options);
          break;

        case "duration":
          Duration = new Fhir.R4.Models.Quantity();
          Duration.DeserializeJson(ref reader, options);
          break;

        case "intendedEffect":
          IntendedEffect = new Fhir.R4.Models.CodeableConcept();
          IntendedEffect.DeserializeJson(ref reader, options);
          break;

        case "otherTherapy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OtherTherapy = new List<MedicinalProductIndicationOtherTherapy>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductIndicationOtherTherapy objOtherTherapy = new Fhir.R4.Models.MedicinalProductIndicationOtherTherapy();
            objOtherTherapy.DeserializeJson(ref reader, options);
            OtherTherapy.Add(objOtherTherapy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OtherTherapy.Count == 0)
          {
            OtherTherapy = null;
          }

          break;

        case "population":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Population = new List<Population>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Population objPopulation = new Fhir.R4.Models.Population();
            objPopulation.DeserializeJson(ref reader, options);
            Population.Add(objPopulation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Population.Count == 0)
          {
            Population = null;
          }

          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subject = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSubject = new Fhir.R4.Models.Reference();
            objSubject.DeserializeJson(ref reader, options);
            Subject.Add(objSubject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subject.Count == 0)
          {
            Subject = null;
          }

          break;

        case "undesirableEffect":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UndesirableEffect = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objUndesirableEffect = new Fhir.R4.Models.Reference();
            objUndesirableEffect.DeserializeJson(ref reader, options);
            UndesirableEffect.Add(objUndesirableEffect);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UndesirableEffect.Count == 0)
          {
            UndesirableEffect = null;
          }

          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
