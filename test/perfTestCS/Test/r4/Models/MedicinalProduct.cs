// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Coding words or phrases of the name.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductNameNamePart>))]
  public class MedicinalProductNameNamePart : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A fragment of a product name.
    /// </summary>
    public string Part { get; set; }
    /// <summary>
    /// Extension container element for Part
    /// </summary>
    public Element _Part { get; set; }
    /// <summary>
    /// Idenifying type for this part of the name (e.g. strength part).
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Part))
      {
        writer.WriteString("part", (string)Part!);
      }

      if (_Part != null)
      {
        writer.WritePropertyName("_part");
        _Part.SerializeJson(writer, options);
      }

      writer.WritePropertyName("type");
      Type.SerializeJson(writer, options);

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "part":
          Part = reader.GetString();
          break;

        case "_part":
          _Part = new Fhir.R4.Models.Element();
          _Part.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Country where the name applies.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductNameCountryLanguage>))]
  public class MedicinalProductNameCountryLanguage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Country code for where this name applies.
    /// </summary>
    public CodeableConcept Country { get; set; }
    /// <summary>
    /// Jurisdiction code for where this name applies.
    /// </summary>
    public CodeableConcept Jurisdiction { get; set; }
    /// <summary>
    /// Language code for this name.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WritePropertyName("country");
      Country.SerializeJson(writer, options);

      if (Jurisdiction != null)
      {
        writer.WritePropertyName("jurisdiction");
        Jurisdiction.SerializeJson(writer, options);
      }

      writer.WritePropertyName("language");
      Language.SerializeJson(writer, options);

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          Country = new Fhir.R4.Models.CodeableConcept();
          Country.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = new Fhir.R4.Models.CodeableConcept();
          Jurisdiction.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = new Fhir.R4.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The product's name, including full name and possibly coded parts.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductName>))]
  public class MedicinalProductName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Country where the name applies.
    /// </summary>
    public List<MedicinalProductNameCountryLanguage> CountryLanguage { get; set; }
    /// <summary>
    /// Coding words or phrases of the name.
    /// </summary>
    public List<MedicinalProductNameNamePart> NamePart { get; set; }
    /// <summary>
    /// The full product name.
    /// </summary>
    public string ProductName { get; set; }
    /// <summary>
    /// Extension container element for ProductName
    /// </summary>
    public Element _ProductName { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ProductName))
      {
        writer.WriteString("productName", (string)ProductName!);
      }

      if (_ProductName != null)
      {
        writer.WritePropertyName("_productName");
        _ProductName.SerializeJson(writer, options);
      }

      if ((NamePart != null) && (NamePart.Count != 0))
      {
        writer.WritePropertyName("namePart");
        writer.WriteStartArray();

        foreach (MedicinalProductNameNamePart valNamePart in NamePart)
        {
          valNamePart.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CountryLanguage != null) && (CountryLanguage.Count != 0))
      {
        writer.WritePropertyName("countryLanguage");
        writer.WriteStartArray();

        foreach (MedicinalProductNameCountryLanguage valCountryLanguage in CountryLanguage)
        {
          valCountryLanguage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "countryLanguage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CountryLanguage = new List<MedicinalProductNameCountryLanguage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductNameCountryLanguage objCountryLanguage = new Fhir.R4.Models.MedicinalProductNameCountryLanguage();
            objCountryLanguage.DeserializeJson(ref reader, options);
            CountryLanguage.Add(objCountryLanguage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CountryLanguage.Count == 0)
          {
            CountryLanguage = null;
          }

          break;

        case "namePart":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NamePart = new List<MedicinalProductNameNamePart>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductNameNamePart objNamePart = new Fhir.R4.Models.MedicinalProductNameNamePart();
            objNamePart.DeserializeJson(ref reader, options);
            NamePart.Add(objNamePart);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NamePart.Count == 0)
          {
            NamePart = null;
          }

          break;

        case "productName":
          ProductName = reader.GetString();
          break;

        case "_productName":
          _ProductName = new Fhir.R4.Models.Element();
          _ProductName.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An operation applied to the product, for manufacturing or adminsitrative purpose.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductManufacturingBusinessOperation>))]
  public class MedicinalProductManufacturingBusinessOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Regulatory authorization reference number.
    /// </summary>
    public Identifier AuthorisationReferenceNumber { get; set; }
    /// <summary>
    /// To indicate if this proces is commercially confidential.
    /// </summary>
    public CodeableConcept ConfidentialityIndicator { get; set; }
    /// <summary>
    /// Regulatory authorization date.
    /// </summary>
    public string EffectiveDate { get; set; }
    /// <summary>
    /// Extension container element for EffectiveDate
    /// </summary>
    public Element _EffectiveDate { get; set; }
    /// <summary>
    /// The manufacturer or establishment associated with the process.
    /// </summary>
    public List<Reference> Manufacturer { get; set; }
    /// <summary>
    /// The type of manufacturing operation.
    /// </summary>
    public CodeableConcept OperationType { get; set; }
    /// <summary>
    /// A regulator which oversees the operation.
    /// </summary>
    public Reference Regulator { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (OperationType != null)
      {
        writer.WritePropertyName("operationType");
        OperationType.SerializeJson(writer, options);
      }

      if (AuthorisationReferenceNumber != null)
      {
        writer.WritePropertyName("authorisationReferenceNumber");
        AuthorisationReferenceNumber.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveDate))
      {
        writer.WriteString("effectiveDate", (string)EffectiveDate!);
      }

      if (_EffectiveDate != null)
      {
        writer.WritePropertyName("_effectiveDate");
        _EffectiveDate.SerializeJson(writer, options);
      }

      if (ConfidentialityIndicator != null)
      {
        writer.WritePropertyName("confidentialityIndicator");
        ConfidentialityIndicator.SerializeJson(writer, options);
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (Reference valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Regulator != null)
      {
        writer.WritePropertyName("regulator");
        Regulator.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authorisationReferenceNumber":
          AuthorisationReferenceNumber = new Fhir.R4.Models.Identifier();
          AuthorisationReferenceNumber.DeserializeJson(ref reader, options);
          break;

        case "confidentialityIndicator":
          ConfidentialityIndicator = new Fhir.R4.Models.CodeableConcept();
          ConfidentialityIndicator.DeserializeJson(ref reader, options);
          break;

        case "effectiveDate":
          EffectiveDate = reader.GetString();
          break;

        case "_effectiveDate":
          _EffectiveDate = new Fhir.R4.Models.Element();
          _EffectiveDate.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objManufacturer = new Fhir.R4.Models.Reference();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "operationType":
          OperationType = new Fhir.R4.Models.CodeableConcept();
          OperationType.DeserializeJson(ref reader, options);
          break;

        case "regulator":
          Regulator = new Fhir.R4.Models.Reference();
          Regulator.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductSpecialDesignation>))]
  public class MedicinalProductSpecialDesignation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Date when the designation was granted.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Identifier for the designation, or procedure number.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Condition for which the medicinal use applies.
    /// </summary>
    public CodeableConcept IndicationCodeableConcept { get; set; }
    /// <summary>
    /// Condition for which the medicinal use applies.
    /// </summary>
    public Reference IndicationReference { get; set; }
    /// <summary>
    /// The intended use of the product, e.g. prevention, treatment.
    /// </summary>
    public CodeableConcept IntendedUse { get; set; }
    /// <summary>
    /// Animal species for which this applies.
    /// </summary>
    public CodeableConcept Species { get; set; }
    /// <summary>
    /// For example granted, pending, expired or withdrawn.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The type of special designation, e.g. orphan drug, minor use.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (IntendedUse != null)
      {
        writer.WritePropertyName("intendedUse");
        IntendedUse.SerializeJson(writer, options);
      }

      if (IndicationCodeableConcept != null)
      {
        writer.WritePropertyName("indicationCodeableConcept");
        IndicationCodeableConcept.SerializeJson(writer, options);
      }

      if (IndicationReference != null)
      {
        writer.WritePropertyName("indicationReference");
        IndicationReference.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Species != null)
      {
        writer.WritePropertyName("species");
        Species.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new Fhir.R4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "indicationCodeableConcept":
          IndicationCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          IndicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "indicationReference":
          IndicationReference = new Fhir.R4.Models.Reference();
          IndicationReference.DeserializeJson(ref reader, options);
          break;

        case "intendedUse":
          IntendedUse = new Fhir.R4.Models.CodeableConcept();
          IntendedUse.DeserializeJson(ref reader, options);
          break;

        case "species":
          Species = new Fhir.R4.Models.CodeableConcept();
          Species.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new Fhir.R4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProduct>))]
  public class MedicinalProduct : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "MedicinalProduct";
    /// <summary>
    /// Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
    /// </summary>
    public CodeableConcept AdditionalMonitoringIndicator { get; set; }
    /// <summary>
    /// Supporting documentation, typically for regulatory submission.
    /// </summary>
    public List<Reference> AttachedDocument { get; set; }
    /// <summary>
    /// Clinical trials or studies that this product is involved in.
    /// </summary>
    public List<Reference> ClinicalTrial { get; set; }
    /// <summary>
    /// The dose form for a single part product, or combined form of a multiple part product.
    /// </summary>
    public CodeableConcept CombinedPharmaceuticalDoseForm { get; set; }
    /// <summary>
    /// A product specific contact, person (in a role), or an organization.
    /// </summary>
    public List<Reference> Contact { get; set; }
    /// <summary>
    /// Reference to another product, e.g. for linking authorised to investigational product.
    /// </summary>
    public List<Identifier> CrossReference { get; set; }
    /// <summary>
    /// If this medicine applies to human or veterinary uses.
    /// </summary>
    public Coding Domain { get; set; }
    /// <summary>
    /// Business identifier for this product. Could be an MPID.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The legal status of supply of the medicinal product as classified by the regulator.
    /// </summary>
    public CodeableConcept LegalStatusOfSupply { get; set; }
    /// <summary>
    /// An operation applied to the product, for manufacturing or adminsitrative purpose.
    /// </summary>
    public List<MedicinalProductManufacturingBusinessOperation> ManufacturingBusinessOperation { get; set; }
    /// <summary>
    /// Marketing status of the medicinal product, in contrast to marketing authorizaton.
    /// </summary>
    public List<MarketingStatus> MarketingStatus { get; set; }
    /// <summary>
    /// A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
    /// </summary>
    public List<Reference> MasterFile { get; set; }
    /// <summary>
    /// The product's name, including full name and possibly coded parts.
    /// </summary>
    public List<MedicinalProductName> Name { get; set; }
    /// <summary>
    /// Package representation for the product.
    /// </summary>
    public List<Reference> PackagedMedicinalProduct { get; set; }
    /// <summary>
    /// If authorised for use in children.
    /// </summary>
    public CodeableConcept PaediatricUseIndicator { get; set; }
    /// <summary>
    /// Pharmaceutical aspects of product.
    /// </summary>
    public List<Reference> PharmaceuticalProduct { get; set; }
    /// <summary>
    /// Allows the product to be classified by various systems.
    /// </summary>
    public List<CodeableConcept> ProductClassification { get; set; }
    /// <summary>
    /// Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
    /// </summary>
    public List<MedicinalProductSpecialDesignation> SpecialDesignation { get; set; }
    /// <summary>
    /// Whether the Medicinal Product is subject to special measures for regulatory reasons.
    /// </summary>
    public List<string> SpecialMeasures { get; set; }
    /// <summary>
    /// Extension container element for SpecialMeasures
    /// </summary>
    public List<Element> _SpecialMeasures { get; set; }
    /// <summary>
    /// Regulatory type, e.g. Investigational or Authorized.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((Fhir.R4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Domain != null)
      {
        writer.WritePropertyName("domain");
        Domain.SerializeJson(writer, options);
      }

      if (CombinedPharmaceuticalDoseForm != null)
      {
        writer.WritePropertyName("combinedPharmaceuticalDoseForm");
        CombinedPharmaceuticalDoseForm.SerializeJson(writer, options);
      }

      if (LegalStatusOfSupply != null)
      {
        writer.WritePropertyName("legalStatusOfSupply");
        LegalStatusOfSupply.SerializeJson(writer, options);
      }

      if (AdditionalMonitoringIndicator != null)
      {
        writer.WritePropertyName("additionalMonitoringIndicator");
        AdditionalMonitoringIndicator.SerializeJson(writer, options);
      }

      if ((SpecialMeasures != null) && (SpecialMeasures.Count != 0))
      {
        writer.WritePropertyName("specialMeasures");
        writer.WriteStartArray();

        foreach (string valSpecialMeasures in SpecialMeasures)
        {
          writer.WriteStringValue(valSpecialMeasures);
        }

        writer.WriteEndArray();
      }

      if ((_SpecialMeasures != null) && (_SpecialMeasures.Count != 0))
      {
        writer.WritePropertyName("_specialMeasures");
        writer.WriteStartArray();

        foreach (Element val_SpecialMeasures in _SpecialMeasures)
        {
          val_SpecialMeasures.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PaediatricUseIndicator != null)
      {
        writer.WritePropertyName("paediatricUseIndicator");
        PaediatricUseIndicator.SerializeJson(writer, options);
      }

      if ((ProductClassification != null) && (ProductClassification.Count != 0))
      {
        writer.WritePropertyName("productClassification");
        writer.WriteStartArray();

        foreach (CodeableConcept valProductClassification in ProductClassification)
        {
          valProductClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MarketingStatus != null) && (MarketingStatus.Count != 0))
      {
        writer.WritePropertyName("marketingStatus");
        writer.WriteStartArray();

        foreach (MarketingStatus valMarketingStatus in MarketingStatus)
        {
          valMarketingStatus.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PharmaceuticalProduct != null) && (PharmaceuticalProduct.Count != 0))
      {
        writer.WritePropertyName("pharmaceuticalProduct");
        writer.WriteStartArray();

        foreach (Reference valPharmaceuticalProduct in PharmaceuticalProduct)
        {
          valPharmaceuticalProduct.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PackagedMedicinalProduct != null) && (PackagedMedicinalProduct.Count != 0))
      {
        writer.WritePropertyName("packagedMedicinalProduct");
        writer.WriteStartArray();

        foreach (Reference valPackagedMedicinalProduct in PackagedMedicinalProduct)
        {
          valPackagedMedicinalProduct.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AttachedDocument != null) && (AttachedDocument.Count != 0))
      {
        writer.WritePropertyName("attachedDocument");
        writer.WriteStartArray();

        foreach (Reference valAttachedDocument in AttachedDocument)
        {
          valAttachedDocument.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MasterFile != null) && (MasterFile.Count != 0))
      {
        writer.WritePropertyName("masterFile");
        writer.WriteStartArray();

        foreach (Reference valMasterFile in MasterFile)
        {
          valMasterFile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (Reference valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ClinicalTrial != null) && (ClinicalTrial.Count != 0))
      {
        writer.WritePropertyName("clinicalTrial");
        writer.WriteStartArray();

        foreach (Reference valClinicalTrial in ClinicalTrial)
        {
          valClinicalTrial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Name != null) && (Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();

        foreach (MedicinalProductName valName in Name)
        {
          valName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CrossReference != null) && (CrossReference.Count != 0))
      {
        writer.WritePropertyName("crossReference");
        writer.WriteStartArray();

        foreach (Identifier valCrossReference in CrossReference)
        {
          valCrossReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ManufacturingBusinessOperation != null) && (ManufacturingBusinessOperation.Count != 0))
      {
        writer.WritePropertyName("manufacturingBusinessOperation");
        writer.WriteStartArray();

        foreach (MedicinalProductManufacturingBusinessOperation valManufacturingBusinessOperation in ManufacturingBusinessOperation)
        {
          valManufacturingBusinessOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SpecialDesignation != null) && (SpecialDesignation.Count != 0))
      {
        writer.WritePropertyName("specialDesignation");
        writer.WriteStartArray();

        foreach (MedicinalProductSpecialDesignation valSpecialDesignation in SpecialDesignation)
        {
          valSpecialDesignation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additionalMonitoringIndicator":
          AdditionalMonitoringIndicator = new Fhir.R4.Models.CodeableConcept();
          AdditionalMonitoringIndicator.DeserializeJson(ref reader, options);
          break;

        case "attachedDocument":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AttachedDocument = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objAttachedDocument = new Fhir.R4.Models.Reference();
            objAttachedDocument.DeserializeJson(ref reader, options);
            AttachedDocument.Add(objAttachedDocument);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AttachedDocument.Count == 0)
          {
            AttachedDocument = null;
          }

          break;

        case "clinicalTrial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ClinicalTrial = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objClinicalTrial = new Fhir.R4.Models.Reference();
            objClinicalTrial.DeserializeJson(ref reader, options);
            ClinicalTrial.Add(objClinicalTrial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ClinicalTrial.Count == 0)
          {
            ClinicalTrial = null;
          }

          break;

        case "combinedPharmaceuticalDoseForm":
          CombinedPharmaceuticalDoseForm = new Fhir.R4.Models.CodeableConcept();
          CombinedPharmaceuticalDoseForm.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objContact = new Fhir.R4.Models.Reference();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "crossReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CrossReference = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objCrossReference = new Fhir.R4.Models.Identifier();
            objCrossReference.DeserializeJson(ref reader, options);
            CrossReference.Add(objCrossReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CrossReference.Count == 0)
          {
            CrossReference = null;
          }

          break;

        case "domain":
          Domain = new Fhir.R4.Models.Coding();
          Domain.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "legalStatusOfSupply":
          LegalStatusOfSupply = new Fhir.R4.Models.CodeableConcept();
          LegalStatusOfSupply.DeserializeJson(ref reader, options);
          break;

        case "manufacturingBusinessOperation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ManufacturingBusinessOperation = new List<MedicinalProductManufacturingBusinessOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductManufacturingBusinessOperation objManufacturingBusinessOperation = new Fhir.R4.Models.MedicinalProductManufacturingBusinessOperation();
            objManufacturingBusinessOperation.DeserializeJson(ref reader, options);
            ManufacturingBusinessOperation.Add(objManufacturingBusinessOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ManufacturingBusinessOperation.Count == 0)
          {
            ManufacturingBusinessOperation = null;
          }

          break;

        case "marketingStatus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MarketingStatus = new List<MarketingStatus>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MarketingStatus objMarketingStatus = new Fhir.R4.Models.MarketingStatus();
            objMarketingStatus.DeserializeJson(ref reader, options);
            MarketingStatus.Add(objMarketingStatus);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MarketingStatus.Count == 0)
          {
            MarketingStatus = null;
          }

          break;

        case "masterFile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MasterFile = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objMasterFile = new Fhir.R4.Models.Reference();
            objMasterFile.DeserializeJson(ref reader, options);
            MasterFile.Add(objMasterFile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MasterFile.Count == 0)
          {
            MasterFile = null;
          }

          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Name = new List<MedicinalProductName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductName objName = new Fhir.R4.Models.MedicinalProductName();
            objName.DeserializeJson(ref reader, options);
            Name.Add(objName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Name.Count == 0)
          {
            Name = null;
          }

          break;

        case "packagedMedicinalProduct":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PackagedMedicinalProduct = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objPackagedMedicinalProduct = new Fhir.R4.Models.Reference();
            objPackagedMedicinalProduct.DeserializeJson(ref reader, options);
            PackagedMedicinalProduct.Add(objPackagedMedicinalProduct);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PackagedMedicinalProduct.Count == 0)
          {
            PackagedMedicinalProduct = null;
          }

          break;

        case "paediatricUseIndicator":
          PaediatricUseIndicator = new Fhir.R4.Models.CodeableConcept();
          PaediatricUseIndicator.DeserializeJson(ref reader, options);
          break;

        case "pharmaceuticalProduct":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PharmaceuticalProduct = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objPharmaceuticalProduct = new Fhir.R4.Models.Reference();
            objPharmaceuticalProduct.DeserializeJson(ref reader, options);
            PharmaceuticalProduct.Add(objPharmaceuticalProduct);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PharmaceuticalProduct.Count == 0)
          {
            PharmaceuticalProduct = null;
          }

          break;

        case "productClassification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProductClassification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objProductClassification = new Fhir.R4.Models.CodeableConcept();
            objProductClassification.DeserializeJson(ref reader, options);
            ProductClassification.Add(objProductClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProductClassification.Count == 0)
          {
            ProductClassification = null;
          }

          break;

        case "specialDesignation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecialDesignation = new List<MedicinalProductSpecialDesignation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductSpecialDesignation objSpecialDesignation = new Fhir.R4.Models.MedicinalProductSpecialDesignation();
            objSpecialDesignation.DeserializeJson(ref reader, options);
            SpecialDesignation.Add(objSpecialDesignation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecialDesignation.Count == 0)
          {
            SpecialDesignation = null;
          }

          break;

        case "specialMeasures":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecialMeasures = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SpecialMeasures.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecialMeasures.Count == 0)
          {
            SpecialMeasures = null;
          }

          break;

        case "_specialMeasures":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SpecialMeasures = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_SpecialMeasures = new Fhir.R4.Models.Element();
            obj_SpecialMeasures.DeserializeJson(ref reader, options);
            _SpecialMeasures.Add(obj_SpecialMeasures);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SpecialMeasures.Count == 0)
          {
            _SpecialMeasures = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
