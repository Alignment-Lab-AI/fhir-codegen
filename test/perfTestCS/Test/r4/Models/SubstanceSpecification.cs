// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Moiety, for structural modifications.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationMoiety>))]
  public class SubstanceSpecificationMoiety : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Quantitative value for this moiety.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// Quantitative value for this moiety.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// Identifier by which this moiety substance is known.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Molecular formula.
    /// </summary>
    public string MolecularFormula { get; set; }
    /// <summary>
    /// Extension container element for MolecularFormula
    /// </summary>
    public Element _MolecularFormula { get; set; }
    /// <summary>
    /// Textual name for this moiety substance.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Optical activity type.
    /// </summary>
    public CodeableConcept OpticalActivity { get; set; }
    /// <summary>
    /// Role that the moiety is playing.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Stereochemistry type.
    /// </summary>
    public CodeableConcept Stereochemistry { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        Stereochemistry.SerializeJson(writer, options);
      }

      if (OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        OpticalActivity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MolecularFormula))
      {
        writer.WriteString("molecularFormula", (string)MolecularFormula!);
      }

      if (_MolecularFormula != null)
      {
        writer.WritePropertyName("_molecularFormula");
        _MolecularFormula.SerializeJson(writer, options);
      }

      if (AmountQuantity != null)
      {
        writer.WritePropertyName("amountQuantity");
        AmountQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AmountString))
      {
        writer.WriteString("amountString", (string)AmountString!);
      }

      if (_AmountString != null)
      {
        writer.WritePropertyName("_amountString");
        _AmountString.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new Fhir.R4.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new Fhir.R4.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new Fhir.R4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "molecularFormula":
          MolecularFormula = reader.GetString();
          break;

        case "_molecularFormula":
          _MolecularFormula = new Fhir.R4.Models.Element();
          _MolecularFormula.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "opticalActivity":
          OpticalActivity = new Fhir.R4.Models.CodeableConcept();
          OpticalActivity.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new Fhir.R4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "stereochemistry":
          Stereochemistry = new Fhir.R4.Models.CodeableConcept();
          Stereochemistry.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// General specifications for this substance, including how it is related to other substances.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationProperty>))]
  public class SubstanceSpecificationProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Quantitative value for this property.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// Quantitative value for this property.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// A category for this property, e.g. Physical, Chemical, Enzymatic.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Property type e.g. viscosity, pH, isoelectric point.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
    /// </summary>
    public Reference DefiningSubstanceReference { get; set; }
    /// <summary>
    /// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
    /// </summary>
    public CodeableConcept DefiningSubstanceCodeableConcept { get; set; }
    /// <summary>
    /// Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
    /// </summary>
    public string Parameters { get; set; }
    /// <summary>
    /// Extension container element for Parameters
    /// </summary>
    public Element _Parameters { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Parameters))
      {
        writer.WriteString("parameters", (string)Parameters!);
      }

      if (_Parameters != null)
      {
        writer.WritePropertyName("_parameters");
        _Parameters.SerializeJson(writer, options);
      }

      if (DefiningSubstanceReference != null)
      {
        writer.WritePropertyName("definingSubstanceReference");
        DefiningSubstanceReference.SerializeJson(writer, options);
      }

      if (DefiningSubstanceCodeableConcept != null)
      {
        writer.WritePropertyName("definingSubstanceCodeableConcept");
        DefiningSubstanceCodeableConcept.SerializeJson(writer, options);
      }

      if (AmountQuantity != null)
      {
        writer.WritePropertyName("amountQuantity");
        AmountQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AmountString))
      {
        writer.WriteString("amountString", (string)AmountString!);
      }

      if (_AmountString != null)
      {
        writer.WritePropertyName("_amountString");
        _AmountString.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new Fhir.R4.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new Fhir.R4.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new Fhir.R4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "definingSubstanceReference":
          DefiningSubstanceReference = new Fhir.R4.Models.Reference();
          DefiningSubstanceReference.DeserializeJson(ref reader, options);
          break;

        case "definingSubstanceCodeableConcept":
          DefiningSubstanceCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          DefiningSubstanceCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "parameters":
          Parameters = reader.GetString();
          break;

        case "_parameters":
          _Parameters = new Fhir.R4.Models.Element();
          _Parameters.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationStructureIsotopeMolecularWeight>))]
  public class SubstanceSpecificationStructureIsotopeMolecularWeight : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// The method by which the molecular weight was determined.
    /// </summary>
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// Type of molecular weight such as exact, average (also known as. number average), weight average.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Method != null)
      {
        writer.WritePropertyName("method");
        Method.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new Fhir.R4.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = new Fhir.R4.Models.CodeableConcept();
          Method.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationStructureIsotope>))]
  public class SubstanceSpecificationStructureIsotope : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Half life - for a non-natural nuclide.
    /// </summary>
    public Quantity HalfLife { get; set; }
    /// <summary>
    /// Substance identifier for each non-natural or radioisotope.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    public SubstanceSpecificationStructureIsotopeMolecularWeight MolecularWeight { get; set; }
    /// <summary>
    /// Substance name for each non-natural or radioisotope.
    /// </summary>
    public CodeableConcept Name { get; set; }
    /// <summary>
    /// The type of isotopic substitution present in a single substance.
    /// </summary>
    public CodeableConcept Substitution { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Name != null)
      {
        writer.WritePropertyName("name");
        Name.SerializeJson(writer, options);
      }

      if (Substitution != null)
      {
        writer.WritePropertyName("substitution");
        Substitution.SerializeJson(writer, options);
      }

      if (HalfLife != null)
      {
        writer.WritePropertyName("halfLife");
        HalfLife.SerializeJson(writer, options);
      }

      if (MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        MolecularWeight.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "halfLife":
          HalfLife = new Fhir.R4.Models.Quantity();
          HalfLife.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new Fhir.R4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "molecularWeight":
          MolecularWeight = new Fhir.R4.Models.SubstanceSpecificationStructureIsotopeMolecularWeight();
          MolecularWeight.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = new Fhir.R4.Models.CodeableConcept();
          Name.DeserializeJson(ref reader, options);
          break;

        case "substitution":
          Substitution = new Fhir.R4.Models.CodeableConcept();
          Substitution.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Molecular structural representation.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationStructureRepresentation>))]
  public class SubstanceSpecificationStructureRepresentation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An attached file with the structural representation.
    /// </summary>
    public Attachment Attachment { get; set; }
    /// <summary>
    /// The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.
    /// </summary>
    public string Representation { get; set; }
    /// <summary>
    /// Extension container element for Representation
    /// </summary>
    public Element _Representation { get; set; }
    /// <summary>
    /// The type of structure (e.g. Full, Partial, Representative).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Representation))
      {
        writer.WriteString("representation", (string)Representation!);
      }

      if (_Representation != null)
      {
        writer.WritePropertyName("_representation");
        _Representation.SerializeJson(writer, options);
      }

      if (Attachment != null)
      {
        writer.WritePropertyName("attachment");
        Attachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "attachment":
          Attachment = new Fhir.R4.Models.Attachment();
          Attachment.DeserializeJson(ref reader, options);
          break;

        case "representation":
          Representation = reader.GetString();
          break;

        case "_representation":
          _Representation = new Fhir.R4.Models.Element();
          _Representation.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Structural information.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationStructure>))]
  public class SubstanceSpecificationStructure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
    /// </summary>
    public List<SubstanceSpecificationStructureIsotope> Isotope { get; set; }
    /// <summary>
    /// Molecular formula.
    /// </summary>
    public string MolecularFormula { get; set; }
    /// <summary>
    /// Extension container element for MolecularFormula
    /// </summary>
    public Element _MolecularFormula { get; set; }
    /// <summary>
    /// Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
    /// </summary>
    public string MolecularFormulaByMoiety { get; set; }
    /// <summary>
    /// Extension container element for MolecularFormulaByMoiety
    /// </summary>
    public Element _MolecularFormulaByMoiety { get; set; }
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    public SubstanceSpecificationStructureIsotopeMolecularWeight MolecularWeight { get; set; }
    /// <summary>
    /// Optical activity type.
    /// </summary>
    public CodeableConcept OpticalActivity { get; set; }
    /// <summary>
    /// Molecular structural representation.
    /// </summary>
    public List<SubstanceSpecificationStructureRepresentation> Representation { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Stereochemistry type.
    /// </summary>
    public CodeableConcept Stereochemistry { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        Stereochemistry.SerializeJson(writer, options);
      }

      if (OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        OpticalActivity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MolecularFormula))
      {
        writer.WriteString("molecularFormula", (string)MolecularFormula!);
      }

      if (_MolecularFormula != null)
      {
        writer.WritePropertyName("_molecularFormula");
        _MolecularFormula.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MolecularFormulaByMoiety))
      {
        writer.WriteString("molecularFormulaByMoiety", (string)MolecularFormulaByMoiety!);
      }

      if (_MolecularFormulaByMoiety != null)
      {
        writer.WritePropertyName("_molecularFormulaByMoiety");
        _MolecularFormulaByMoiety.SerializeJson(writer, options);
      }

      if ((Isotope != null) && (Isotope.Count != 0))
      {
        writer.WritePropertyName("isotope");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationStructureIsotope valIsotope in Isotope)
        {
          valIsotope.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        MolecularWeight.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Representation != null) && (Representation.Count != 0))
      {
        writer.WritePropertyName("representation");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationStructureRepresentation valRepresentation in Representation)
        {
          valRepresentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "isotope":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Isotope = new List<SubstanceSpecificationStructureIsotope>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationStructureIsotope objIsotope = new Fhir.R4.Models.SubstanceSpecificationStructureIsotope();
            objIsotope.DeserializeJson(ref reader, options);
            Isotope.Add(objIsotope);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Isotope.Count == 0)
          {
            Isotope = null;
          }

          break;

        case "molecularFormula":
          MolecularFormula = reader.GetString();
          break;

        case "_molecularFormula":
          _MolecularFormula = new Fhir.R4.Models.Element();
          _MolecularFormula.DeserializeJson(ref reader, options);
          break;

        case "molecularFormulaByMoiety":
          MolecularFormulaByMoiety = reader.GetString();
          break;

        case "_molecularFormulaByMoiety":
          _MolecularFormulaByMoiety = new Fhir.R4.Models.Element();
          _MolecularFormulaByMoiety.DeserializeJson(ref reader, options);
          break;

        case "molecularWeight":
          MolecularWeight = new Fhir.R4.Models.SubstanceSpecificationStructureIsotopeMolecularWeight();
          MolecularWeight.DeserializeJson(ref reader, options);
          break;

        case "opticalActivity":
          OpticalActivity = new Fhir.R4.Models.CodeableConcept();
          OpticalActivity.DeserializeJson(ref reader, options);
          break;

        case "representation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Representation = new List<SubstanceSpecificationStructureRepresentation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationStructureRepresentation objRepresentation = new Fhir.R4.Models.SubstanceSpecificationStructureRepresentation();
            objRepresentation.DeserializeJson(ref reader, options);
            Representation.Add(objRepresentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Representation.Count == 0)
          {
            Representation = null;
          }

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "stereochemistry":
          Stereochemistry = new Fhir.R4.Models.CodeableConcept();
          Stereochemistry.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Codes associated with the substance.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationCode>))]
  public class SubstanceSpecificationCode : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specific code.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Any comment can be provided in this field, if necessary.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Status of the code assignment.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The date at which the code status is changed as part of the terminology maintenance.
    /// </summary>
    public string StatusDate { get; set; }
    /// <summary>
    /// Extension container element for StatusDate
    /// </summary>
    public Element _StatusDate { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StatusDate))
      {
        writer.WriteString("statusDate", (string)StatusDate!);
      }

      if (_StatusDate != null)
      {
        writer.WritePropertyName("_statusDate");
        _StatusDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new Fhir.R4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new Fhir.R4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "status":
          Status = new Fhir.R4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          StatusDate = reader.GetString();
          break;

        case "_statusDate":
          _StatusDate = new Fhir.R4.Models.Element();
          _StatusDate.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details of the official nature of this name.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationNameOfficial>))]
  public class SubstanceSpecificationNameOfficial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Which authority uses this official name.
    /// </summary>
    public CodeableConcept Authority { get; set; }
    /// <summary>
    /// Date of official name change.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The status of the official name.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Authority != null)
      {
        writer.WritePropertyName("authority");
        Authority.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authority":
          Authority = new Fhir.R4.Models.CodeableConcept();
          Authority.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new Fhir.R4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new Fhir.R4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Names applicable to this substance.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationName>))]
  public class SubstanceSpecificationName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
    /// </summary>
    public List<CodeableConcept> Domain { get; set; }
    /// <summary>
    /// The jurisdiction where this name applies.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// Language of the name.
    /// </summary>
    public List<CodeableConcept> Language { get; set; }
    /// <summary>
    /// The actual name.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Details of the official nature of this name.
    /// </summary>
    public List<SubstanceSpecificationNameOfficial> Official { get; set; }
    /// <summary>
    /// If this is the preferred name for this substance.
    /// </summary>
    public bool? Preferred { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// The status of the name.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// A synonym of this name.
    /// </summary>
    public List<SubstanceSpecificationName> Synonym { get; set; }
    /// <summary>
    /// A translation for this name.
    /// </summary>
    public List<SubstanceSpecificationName> Translation { get; set; }
    /// <summary>
    /// Name type.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (Preferred != null)
      {
        writer.WriteBoolean("preferred", (bool)Preferred!);
      }

      if ((Language != null) && (Language.Count != 0))
      {
        writer.WritePropertyName("language");
        writer.WriteStartArray();

        foreach (CodeableConcept valLanguage in Language)
        {
          valLanguage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Domain != null) && (Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();

        foreach (CodeableConcept valDomain in Domain)
        {
          valDomain.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Synonym != null) && (Synonym.Count != 0))
      {
        writer.WritePropertyName("synonym");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationName valSynonym in Synonym)
        {
          valSynonym.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Translation != null) && (Translation.Count != 0))
      {
        writer.WritePropertyName("translation");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationName valTranslation in Translation)
        {
          valTranslation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Official != null) && (Official.Count != 0))
      {
        writer.WritePropertyName("official");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationNameOfficial valOfficial in Official)
        {
          valOfficial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Domain = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objDomain = new Fhir.R4.Models.CodeableConcept();
            objDomain.DeserializeJson(ref reader, options);
            Domain.Add(objDomain);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Domain.Count == 0)
          {
            Domain = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objJurisdiction = new Fhir.R4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Language = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objLanguage = new Fhir.R4.Models.CodeableConcept();
            objLanguage.DeserializeJson(ref reader, options);
            Language.Add(objLanguage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Language.Count == 0)
          {
            Language = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "official":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Official = new List<SubstanceSpecificationNameOfficial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationNameOfficial objOfficial = new Fhir.R4.Models.SubstanceSpecificationNameOfficial();
            objOfficial.DeserializeJson(ref reader, options);
            Official.Add(objOfficial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Official.Count == 0)
          {
            Official = null;
          }

          break;

        case "preferred":
          Preferred = reader.GetBoolean();
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "status":
          Status = new Fhir.R4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Synonym = new List<SubstanceSpecificationName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationName objSynonym = new Fhir.R4.Models.SubstanceSpecificationName();
            objSynonym.DeserializeJson(ref reader, options);
            Synonym.Add(objSynonym);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Synonym.Count == 0)
          {
            Synonym = null;
          }

          break;

        case "translation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Translation = new List<SubstanceSpecificationName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationName objTranslation = new Fhir.R4.Models.SubstanceSpecificationName();
            objTranslation.DeserializeJson(ref reader, options);
            Translation.Add(objTranslation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Translation.Count == 0)
          {
            Translation = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A link between this substance and another, with details of the relationship.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecificationRelationship>))]
  public class SubstanceSpecificationRelationship : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public Range AmountRange { get; set; }
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public Ratio AmountRatio { get; set; }
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// For use when the numeric.
    /// </summary>
    public Ratio AmountRatioLowLimit { get; set; }
    /// <summary>
    /// An operator for the amount, for example "average", "approximately", "less than".
    /// </summary>
    public CodeableConcept AmountType { get; set; }
    /// <summary>
    /// For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
    /// </summary>
    public bool? IsDefining { get; set; }
    /// <summary>
    /// For example "salt to parent", "active moiety", "starting material".
    /// </summary>
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// A pointer to another substance, as a resource or just a representational code.
    /// </summary>
    public Reference SubstanceReference { get; set; }
    /// <summary>
    /// A pointer to another substance, as a resource or just a representational code.
    /// </summary>
    public CodeableConcept SubstanceCodeableConcept { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (SubstanceReference != null)
      {
        writer.WritePropertyName("substanceReference");
        SubstanceReference.SerializeJson(writer, options);
      }

      if (SubstanceCodeableConcept != null)
      {
        writer.WritePropertyName("substanceCodeableConcept");
        SubstanceCodeableConcept.SerializeJson(writer, options);
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if (IsDefining != null)
      {
        writer.WriteBoolean("isDefining", (bool)IsDefining!);
      }

      if (AmountQuantity != null)
      {
        writer.WritePropertyName("amountQuantity");
        AmountQuantity.SerializeJson(writer, options);
      }

      if (AmountRange != null)
      {
        writer.WritePropertyName("amountRange");
        AmountRange.SerializeJson(writer, options);
      }

      if (AmountRatio != null)
      {
        writer.WritePropertyName("amountRatio");
        AmountRatio.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AmountString))
      {
        writer.WriteString("amountString", (string)AmountString!);
      }

      if (_AmountString != null)
      {
        writer.WritePropertyName("_amountString");
        _AmountString.SerializeJson(writer, options);
      }

      if (AmountRatioLowLimit != null)
      {
        writer.WritePropertyName("amountRatioLowLimit");
        AmountRatioLowLimit.SerializeJson(writer, options);
      }

      if (AmountType != null)
      {
        writer.WritePropertyName("amountType");
        AmountType.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new Fhir.R4.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountRange":
          AmountRange = new Fhir.R4.Models.Range();
          AmountRange.DeserializeJson(ref reader, options);
          break;

        case "amountRatio":
          AmountRatio = new Fhir.R4.Models.Ratio();
          AmountRatio.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new Fhir.R4.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "amountRatioLowLimit":
          AmountRatioLowLimit = new Fhir.R4.Models.Ratio();
          AmountRatioLowLimit.DeserializeJson(ref reader, options);
          break;

        case "amountType":
          AmountType = new Fhir.R4.Models.CodeableConcept();
          AmountType.DeserializeJson(ref reader, options);
          break;

        case "isDefining":
          IsDefining = reader.GetBoolean();
          break;

        case "relationship":
          Relationship = new Fhir.R4.Models.CodeableConcept();
          Relationship.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "substanceReference":
          SubstanceReference = new Fhir.R4.Models.Reference();
          SubstanceReference.DeserializeJson(ref reader, options);
          break;

        case "substanceCodeableConcept":
          SubstanceCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          SubstanceCodeableConcept.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The detailed description of a substance, typically at a level beyond what is used for prescribing.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonStreamComponentConverter<SubstanceSpecification>))]
  public class SubstanceSpecification : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "SubstanceSpecification";
    /// <summary>
    /// Codes associated with the substance.
    /// </summary>
    public List<SubstanceSpecificationCode> Code { get; set; }
    /// <summary>
    /// Textual comment about this record of a substance.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// Textual description of the substance.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// If the substance applies to only human or veterinary use.
    /// </summary>
    public CodeableConcept Domain { get; set; }
    /// <summary>
    /// Identifier by which this substance is known.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Moiety, for structural modifications.
    /// </summary>
    public List<SubstanceSpecificationMoiety> Moiety { get; set; }
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    public List<SubstanceSpecificationStructureIsotopeMolecularWeight> MolecularWeight { get; set; }
    /// <summary>
    /// Names applicable to this substance.
    /// </summary>
    public List<SubstanceSpecificationName> Name { get; set; }
    /// <summary>
    /// Data items specific to nucleic acids.
    /// </summary>
    public Reference NucleicAcid { get; set; }
    /// <summary>
    /// Data items specific to polymers.
    /// </summary>
    public Reference Polymer { get; set; }
    /// <summary>
    /// General specifications for this substance, including how it is related to other substances.
    /// </summary>
    public List<SubstanceSpecificationProperty> Property { get; set; }
    /// <summary>
    /// Data items specific to proteins.
    /// </summary>
    public Reference Protein { get; set; }
    /// <summary>
    /// General information detailing this substance.
    /// </summary>
    public Reference ReferenceInformation { get; set; }
    /// <summary>
    /// A link between this substance and another, with details of the relationship.
    /// </summary>
    public List<SubstanceSpecificationRelationship> Relationship { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Material or taxonomic/anatomical source for the substance.
    /// </summary>
    public Reference SourceMaterial { get; set; }
    /// <summary>
    /// Status of substance within the catalogue e.g. approved.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// Structural information.
    /// </summary>
    public SubstanceSpecificationStructure Structure { get; set; }
    /// <summary>
    /// High level categorization, e.g. polymer or nucleic acid.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((Fhir.R4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (Domain != null)
      {
        writer.WritePropertyName("domain");
        Domain.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if ((Moiety != null) && (Moiety.Count != 0))
      {
        writer.WritePropertyName("moiety");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationMoiety valMoiety in Moiety)
        {
          valMoiety.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReferenceInformation != null)
      {
        writer.WritePropertyName("referenceInformation");
        ReferenceInformation.SerializeJson(writer, options);
      }

      if (Structure != null)
      {
        writer.WritePropertyName("structure");
        Structure.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationCode valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Name != null) && (Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationName valName in Name)
        {
          valName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MolecularWeight != null) && (MolecularWeight.Count != 0))
      {
        writer.WritePropertyName("molecularWeight");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationStructureIsotopeMolecularWeight valMolecularWeight in MolecularWeight)
        {
          valMolecularWeight.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Relationship != null) && (Relationship.Count != 0))
      {
        writer.WritePropertyName("relationship");
        writer.WriteStartArray();

        foreach (SubstanceSpecificationRelationship valRelationship in Relationship)
        {
          valRelationship.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (NucleicAcid != null)
      {
        writer.WritePropertyName("nucleicAcid");
        NucleicAcid.SerializeJson(writer, options);
      }

      if (Polymer != null)
      {
        writer.WritePropertyName("polymer");
        Polymer.SerializeJson(writer, options);
      }

      if (Protein != null)
      {
        writer.WritePropertyName("protein");
        Protein.SerializeJson(writer, options);
      }

      if (SourceMaterial != null)
      {
        writer.WritePropertyName("sourceMaterial");
        SourceMaterial.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<SubstanceSpecificationCode>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationCode objCode = new Fhir.R4.Models.SubstanceSpecificationCode();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new Fhir.R4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new Fhir.R4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "domain":
          Domain = new Fhir.R4.Models.CodeableConcept();
          Domain.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new Fhir.R4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "moiety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Moiety = new List<SubstanceSpecificationMoiety>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationMoiety objMoiety = new Fhir.R4.Models.SubstanceSpecificationMoiety();
            objMoiety.DeserializeJson(ref reader, options);
            Moiety.Add(objMoiety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Moiety.Count == 0)
          {
            Moiety = null;
          }

          break;

        case "molecularWeight":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MolecularWeight = new List<SubstanceSpecificationStructureIsotopeMolecularWeight>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationStructureIsotopeMolecularWeight objMolecularWeight = new Fhir.R4.Models.SubstanceSpecificationStructureIsotopeMolecularWeight();
            objMolecularWeight.DeserializeJson(ref reader, options);
            MolecularWeight.Add(objMolecularWeight);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MolecularWeight.Count == 0)
          {
            MolecularWeight = null;
          }

          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Name = new List<SubstanceSpecificationName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationName objName = new Fhir.R4.Models.SubstanceSpecificationName();
            objName.DeserializeJson(ref reader, options);
            Name.Add(objName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Name.Count == 0)
          {
            Name = null;
          }

          break;

        case "nucleicAcid":
          NucleicAcid = new Fhir.R4.Models.Reference();
          NucleicAcid.DeserializeJson(ref reader, options);
          break;

        case "polymer":
          Polymer = new Fhir.R4.Models.Reference();
          Polymer.DeserializeJson(ref reader, options);
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<SubstanceSpecificationProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationProperty objProperty = new Fhir.R4.Models.SubstanceSpecificationProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "protein":
          Protein = new Fhir.R4.Models.Reference();
          Protein.DeserializeJson(ref reader, options);
          break;

        case "referenceInformation":
          ReferenceInformation = new Fhir.R4.Models.Reference();
          ReferenceInformation.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Relationship = new List<SubstanceSpecificationRelationship>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceSpecificationRelationship objRelationship = new Fhir.R4.Models.SubstanceSpecificationRelationship();
            objRelationship.DeserializeJson(ref reader, options);
            Relationship.Add(objRelationship);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Relationship.Count == 0)
          {
            Relationship = null;
          }

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "sourceMaterial":
          SourceMaterial = new Fhir.R4.Models.Reference();
          SourceMaterial.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new Fhir.R4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "structure":
          Structure = new Fhir.R4.Models.SubstanceSpecificationStructure();
          Structure.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
