// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapStructure>))]
  public class StructureMapStructure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This is needed if both types have the same name (e.g. version conversion).
    /// </summary>
    public string Alias { get; set; }
    /// <summary>
    /// Extension container element for Alias
    /// </summary>
    public Element _Alias { get; set; }
    /// <summary>
    /// Documentation that describes how the structure is used in the mapping.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// How the referenced structure is used in this mapping.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// The canonical reference to the structure.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "alias":
          Alias = reader.GetString();
          break;

        case "_alias":
          _Alias = new Fhir.R4.Models.Element();
          _Alias.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new Fhir.R4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new Fhir.R4.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new Fhir.R4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// If no inputs are named, then the entry mappings are type based.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapGroupInput>))]
  public class StructureMapGroupInput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Documentation for this instance of data.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Mode for this instance of data.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// Name for this instance of data.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Type for this instance of data.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new Fhir.R4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new Fhir.R4.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new Fhir.R4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Source inputs to the mapping.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapGroupRuleSource>))]
  public class StructureMapGroupRuleSource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
    /// </summary>
    public string Check { get; set; }
    /// <summary>
    /// Extension container element for Check
    /// </summary>
    public Element _Check { get; set; }
    /// <summary>
    /// FHIRPath expression  - must be true or the rule does not apply.
    /// </summary>
    public string Condition { get; set; }
    /// <summary>
    /// Extension container element for Condition
    /// </summary>
    public Element _Condition { get; set; }
    /// <summary>
    /// Type or variable this rule applies to.
    /// </summary>
    public string Context { get; set; }
    /// <summary>
    /// Extension container element for Context
    /// </summary>
    public Element _Context { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueBase64Binary { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueBase64Binary
    /// </summary>
    public Element _DefaultValueBase64Binary { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public bool? DefaultValueBoolean { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueCanonical { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueCanonical
    /// </summary>
    public Element _DefaultValueCanonical { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueCode { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueCode
    /// </summary>
    public Element _DefaultValueCode { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueDate { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueDate
    /// </summary>
    public Element _DefaultValueDate { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueDateTime { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueDateTime
    /// </summary>
    public Element _DefaultValueDateTime { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public decimal? DefaultValueDecimal { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueDecimal
    /// </summary>
    public Element _DefaultValueDecimal { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueId { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueId
    /// </summary>
    public Element _DefaultValueId { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueInstant { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueInstant
    /// </summary>
    public Element _DefaultValueInstant { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public int? DefaultValueInteger { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueMarkdown { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueMarkdown
    /// </summary>
    public Element _DefaultValueMarkdown { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueOid { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueOid
    /// </summary>
    public Element _DefaultValueOid { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public uint? DefaultValuePositiveInt { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueString { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueString
    /// </summary>
    public Element _DefaultValueString { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueTime { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueTime
    /// </summary>
    public Element _DefaultValueTime { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public uint? DefaultValueUnsignedInt { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueUri { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueUri
    /// </summary>
    public Element _DefaultValueUri { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public string DefaultValueUrl { get; set; }
    /// <summary>
    /// Extension container element for DefaultValueUrl
    /// </summary>
    public Element _DefaultValueUrl { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Guid? DefaultValueUuid { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Address DefaultValueAddress { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Age DefaultValueAge { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Annotation DefaultValueAnnotation { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Attachment DefaultValueAttachment { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public CodeableConcept DefaultValueCodeableConcept { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Coding DefaultValueCoding { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public ContactPoint DefaultValueContactPoint { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Count DefaultValueCount { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Distance DefaultValueDistance { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Duration DefaultValueDuration { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public HumanName DefaultValueHumanName { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Identifier DefaultValueIdentifier { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Money DefaultValueMoney { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Period DefaultValuePeriod { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Quantity DefaultValueQuantity { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Range DefaultValueRange { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Ratio DefaultValueRatio { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Reference DefaultValueReference { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public SampledData DefaultValueSampledData { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Signature DefaultValueSignature { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Timing DefaultValueTiming { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public ContactDetail DefaultValueContactDetail { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Contributor DefaultValueContributor { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public DataRequirement DefaultValueDataRequirement { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Expression DefaultValueExpression { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public ParameterDefinition DefaultValueParameterDefinition { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public RelatedArtifact DefaultValueRelatedArtifact { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public TriggerDefinition DefaultValueTriggerDefinition { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public UsageContext DefaultValueUsageContext { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Dosage DefaultValueDosage { get; set; }
    /// <summary>
    /// If there's a default value on an item that can repeat, it will only be used once.
    /// </summary>
    public Meta DefaultValueMeta { get; set; }
    /// <summary>
    /// Optional field for this source.
    /// </summary>
    public string Element { get; set; }
    /// <summary>
    /// Extension container element for Element
    /// </summary>
    public Element _Element { get; set; }
    /// <summary>
    /// How to handle the list mode for this element.
    /// </summary>
    public string ListMode { get; set; }
    /// <summary>
    /// Extension container element for ListMode
    /// </summary>
    public Element _ListMode { get; set; }
    /// <summary>
    /// This is typically used for recording that something Is not transformed to the target for some reason.
    /// </summary>
    public string LogMessage { get; set; }
    /// <summary>
    /// Extension container element for LogMessage
    /// </summary>
    public Element _LogMessage { get; set; }
    /// <summary>
    /// Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
    /// </summary>
    public string Max { get; set; }
    /// <summary>
    /// Extension container element for Max
    /// </summary>
    public Element _Max { get; set; }
    /// <summary>
    /// Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
    /// </summary>
    public int? Min { get; set; }
    /// <summary>
    /// Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Named context for field, if a field is specified.
    /// </summary>
    public string Variable { get; set; }
    /// <summary>
    /// Extension container element for Variable
    /// </summary>
    public Element _Variable { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "check":
          Check = reader.GetString();
          break;

        case "_check":
          _Check = new Fhir.R4.Models.Element();
          _Check.DeserializeJson(ref reader, options);
          break;

        case "condition":
          Condition = reader.GetString();
          break;

        case "_condition":
          _Condition = new Fhir.R4.Models.Element();
          _Condition.DeserializeJson(ref reader, options);
          break;

        case "context":
          Context = reader.GetString();
          break;

        case "_context":
          _Context = new Fhir.R4.Models.Element();
          _Context.DeserializeJson(ref reader, options);
          break;

        case "defaultValueBase64Binary":
          DefaultValueBase64Binary = reader.GetString();
          break;

        case "_defaultValueBase64Binary":
          _DefaultValueBase64Binary = new Fhir.R4.Models.Element();
          _DefaultValueBase64Binary.DeserializeJson(ref reader, options);
          break;

        case "defaultValueBoolean":
          DefaultValueBoolean = reader.GetBoolean();
          break;

        case "defaultValueCanonical":
          DefaultValueCanonical = reader.GetString();
          break;

        case "_defaultValueCanonical":
          _DefaultValueCanonical = new Fhir.R4.Models.Element();
          _DefaultValueCanonical.DeserializeJson(ref reader, options);
          break;

        case "defaultValueCode":
          DefaultValueCode = reader.GetString();
          break;

        case "_defaultValueCode":
          _DefaultValueCode = new Fhir.R4.Models.Element();
          _DefaultValueCode.DeserializeJson(ref reader, options);
          break;

        case "defaultValueDate":
          DefaultValueDate = reader.GetString();
          break;

        case "_defaultValueDate":
          _DefaultValueDate = new Fhir.R4.Models.Element();
          _DefaultValueDate.DeserializeJson(ref reader, options);
          break;

        case "defaultValueDateTime":
          DefaultValueDateTime = reader.GetString();
          break;

        case "_defaultValueDateTime":
          _DefaultValueDateTime = new Fhir.R4.Models.Element();
          _DefaultValueDateTime.DeserializeJson(ref reader, options);
          break;

        case "defaultValueDecimal":
          DefaultValueDecimal = reader.GetDecimal();
          break;

        case "_defaultValueDecimal":
          _DefaultValueDecimal = new Fhir.R4.Models.Element();
          _DefaultValueDecimal.DeserializeJson(ref reader, options);
          break;

        case "defaultValueId":
          DefaultValueId = reader.GetString();
          break;

        case "_defaultValueId":
          _DefaultValueId = new Fhir.R4.Models.Element();
          _DefaultValueId.DeserializeJson(ref reader, options);
          break;

        case "defaultValueInstant":
          DefaultValueInstant = reader.GetString();
          break;

        case "_defaultValueInstant":
          _DefaultValueInstant = new Fhir.R4.Models.Element();
          _DefaultValueInstant.DeserializeJson(ref reader, options);
          break;

        case "defaultValueInteger":
          DefaultValueInteger = reader.GetInt32();
          break;

        case "defaultValueMarkdown":
          DefaultValueMarkdown = reader.GetString();
          break;

        case "_defaultValueMarkdown":
          _DefaultValueMarkdown = new Fhir.R4.Models.Element();
          _DefaultValueMarkdown.DeserializeJson(ref reader, options);
          break;

        case "defaultValueOid":
          DefaultValueOid = reader.GetString();
          break;

        case "_defaultValueOid":
          _DefaultValueOid = new Fhir.R4.Models.Element();
          _DefaultValueOid.DeserializeJson(ref reader, options);
          break;

        case "defaultValuePositiveInt":
          DefaultValuePositiveInt = reader.GetUInt32();
          break;

        case "defaultValueString":
          DefaultValueString = reader.GetString();
          break;

        case "_defaultValueString":
          _DefaultValueString = new Fhir.R4.Models.Element();
          _DefaultValueString.DeserializeJson(ref reader, options);
          break;

        case "defaultValueTime":
          DefaultValueTime = reader.GetString();
          break;

        case "_defaultValueTime":
          _DefaultValueTime = new Fhir.R4.Models.Element();
          _DefaultValueTime.DeserializeJson(ref reader, options);
          break;

        case "defaultValueUnsignedInt":
          DefaultValueUnsignedInt = reader.GetUInt32();
          break;

        case "defaultValueUri":
          DefaultValueUri = reader.GetString();
          break;

        case "_defaultValueUri":
          _DefaultValueUri = new Fhir.R4.Models.Element();
          _DefaultValueUri.DeserializeJson(ref reader, options);
          break;

        case "defaultValueUrl":
          DefaultValueUrl = reader.GetString();
          break;

        case "_defaultValueUrl":
          _DefaultValueUrl = new Fhir.R4.Models.Element();
          _DefaultValueUrl.DeserializeJson(ref reader, options);
          break;

        case "defaultValueUuid":
          DefaultValueUuid = reader.GetGuid();
          break;

        case "defaultValueAddress":
          DefaultValueAddress = new Fhir.R4.Models.Address();
          DefaultValueAddress.DeserializeJson(ref reader, options);
          break;

        case "defaultValueAge":
          DefaultValueAge = new Fhir.R4.Models.Age();
          DefaultValueAge.DeserializeJson(ref reader, options);
          break;

        case "defaultValueAnnotation":
          DefaultValueAnnotation = new Fhir.R4.Models.Annotation();
          DefaultValueAnnotation.DeserializeJson(ref reader, options);
          break;

        case "defaultValueAttachment":
          DefaultValueAttachment = new Fhir.R4.Models.Attachment();
          DefaultValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "defaultValueCodeableConcept":
          DefaultValueCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          DefaultValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "defaultValueCoding":
          DefaultValueCoding = new Fhir.R4.Models.Coding();
          DefaultValueCoding.DeserializeJson(ref reader, options);
          break;

        case "defaultValueContactPoint":
          DefaultValueContactPoint = new Fhir.R4.Models.ContactPoint();
          DefaultValueContactPoint.DeserializeJson(ref reader, options);
          break;

        case "defaultValueCount":
          DefaultValueCount = new Fhir.R4.Models.Count();
          DefaultValueCount.DeserializeJson(ref reader, options);
          break;

        case "defaultValueDistance":
          DefaultValueDistance = new Fhir.R4.Models.Distance();
          DefaultValueDistance.DeserializeJson(ref reader, options);
          break;

        case "defaultValueDuration":
          DefaultValueDuration = new Fhir.R4.Models.Duration();
          DefaultValueDuration.DeserializeJson(ref reader, options);
          break;

        case "defaultValueHumanName":
          DefaultValueHumanName = new Fhir.R4.Models.HumanName();
          DefaultValueHumanName.DeserializeJson(ref reader, options);
          break;

        case "defaultValueIdentifier":
          DefaultValueIdentifier = new Fhir.R4.Models.Identifier();
          DefaultValueIdentifier.DeserializeJson(ref reader, options);
          break;

        case "defaultValueMoney":
          DefaultValueMoney = new Fhir.R4.Models.Money();
          DefaultValueMoney.DeserializeJson(ref reader, options);
          break;

        case "defaultValuePeriod":
          DefaultValuePeriod = new Fhir.R4.Models.Period();
          DefaultValuePeriod.DeserializeJson(ref reader, options);
          break;

        case "defaultValueQuantity":
          DefaultValueQuantity = new Fhir.R4.Models.Quantity();
          DefaultValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "defaultValueRange":
          DefaultValueRange = new Fhir.R4.Models.Range();
          DefaultValueRange.DeserializeJson(ref reader, options);
          break;

        case "defaultValueRatio":
          DefaultValueRatio = new Fhir.R4.Models.Ratio();
          DefaultValueRatio.DeserializeJson(ref reader, options);
          break;

        case "defaultValueReference":
          DefaultValueReference = new Fhir.R4.Models.Reference();
          DefaultValueReference.DeserializeJson(ref reader, options);
          break;

        case "defaultValueSampledData":
          DefaultValueSampledData = new Fhir.R4.Models.SampledData();
          DefaultValueSampledData.DeserializeJson(ref reader, options);
          break;

        case "defaultValueSignature":
          DefaultValueSignature = new Fhir.R4.Models.Signature();
          DefaultValueSignature.DeserializeJson(ref reader, options);
          break;

        case "defaultValueTiming":
          DefaultValueTiming = new Fhir.R4.Models.Timing();
          DefaultValueTiming.DeserializeJson(ref reader, options);
          break;

        case "defaultValueContactDetail":
          DefaultValueContactDetail = new Fhir.R4.Models.ContactDetail();
          DefaultValueContactDetail.DeserializeJson(ref reader, options);
          break;

        case "defaultValueContributor":
          DefaultValueContributor = new Fhir.R4.Models.Contributor();
          DefaultValueContributor.DeserializeJson(ref reader, options);
          break;

        case "defaultValueDataRequirement":
          DefaultValueDataRequirement = new Fhir.R4.Models.DataRequirement();
          DefaultValueDataRequirement.DeserializeJson(ref reader, options);
          break;

        case "defaultValueExpression":
          DefaultValueExpression = new Fhir.R4.Models.Expression();
          DefaultValueExpression.DeserializeJson(ref reader, options);
          break;

        case "defaultValueParameterDefinition":
          DefaultValueParameterDefinition = new Fhir.R4.Models.ParameterDefinition();
          DefaultValueParameterDefinition.DeserializeJson(ref reader, options);
          break;

        case "defaultValueRelatedArtifact":
          DefaultValueRelatedArtifact = new Fhir.R4.Models.RelatedArtifact();
          DefaultValueRelatedArtifact.DeserializeJson(ref reader, options);
          break;

        case "defaultValueTriggerDefinition":
          DefaultValueTriggerDefinition = new Fhir.R4.Models.TriggerDefinition();
          DefaultValueTriggerDefinition.DeserializeJson(ref reader, options);
          break;

        case "defaultValueUsageContext":
          DefaultValueUsageContext = new Fhir.R4.Models.UsageContext();
          DefaultValueUsageContext.DeserializeJson(ref reader, options);
          break;

        case "defaultValueDosage":
          DefaultValueDosage = new Fhir.R4.Models.Dosage();
          DefaultValueDosage.DeserializeJson(ref reader, options);
          break;

        case "defaultValueMeta":
          DefaultValueMeta = new Fhir.R4.Models.Meta();
          DefaultValueMeta.DeserializeJson(ref reader, options);
          break;

        case "element":
          Element = reader.GetString();
          break;

        case "_element":
          _Element = new Fhir.R4.Models.Element();
          _Element.DeserializeJson(ref reader, options);
          break;

        case "listMode":
          ListMode = reader.GetString();
          break;

        case "_listMode":
          _ListMode = new Fhir.R4.Models.Element();
          _ListMode.DeserializeJson(ref reader, options);
          break;

        case "logMessage":
          LogMessage = reader.GetString();
          break;

        case "_logMessage":
          _LogMessage = new Fhir.R4.Models.Element();
          _LogMessage.DeserializeJson(ref reader, options);
          break;

        case "max":
          Max = reader.GetString();
          break;

        case "_max":
          _Max = new Fhir.R4.Models.Element();
          _Max.DeserializeJson(ref reader, options);
          break;

        case "min":
          Min = reader.GetInt32();
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new Fhir.R4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "variable":
          Variable = reader.GetString();
          break;

        case "_variable":
          _Variable = new Fhir.R4.Models.Element();
          _Variable.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Parameters to the transform.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapGroupRuleTargetParameter>))]
  public class StructureMapGroupRuleTargetParameter : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Parameter value - variable or literal.
    /// </summary>
    public string ValueId { get; set; }
    /// <summary>
    /// Extension container element for ValueId
    /// </summary>
    public Element _ValueId { get; set; }
    /// <summary>
    /// Parameter value - variable or literal.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// Parameter value - variable or literal.
    /// </summary>
    public bool ValueBoolean { get; set; }
    /// <summary>
    /// Parameter value - variable or literal.
    /// </summary>
    public int ValueInteger { get; set; }
    /// <summary>
    /// Parameter value - variable or literal.
    /// </summary>
    public decimal ValueDecimal { get; set; }
    /// <summary>
    /// Extension container element for ValueDecimal
    /// </summary>
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueId":
          ValueId = reader.GetString();
          break;

        case "_valueId":
          _ValueId = new Fhir.R4.Models.Element();
          _ValueId.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new Fhir.R4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "valueDecimal":
          ValueDecimal = reader.GetDecimal();
          break;

        case "_valueDecimal":
          _ValueDecimal = new Fhir.R4.Models.Element();
          _ValueDecimal.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Content to create because of this mapping rule.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapGroupRuleTarget>))]
  public class StructureMapGroupRuleTarget : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Type or variable this rule applies to.
    /// </summary>
    public string Context { get; set; }
    /// <summary>
    /// Extension container element for Context
    /// </summary>
    public Element _Context { get; set; }
    /// <summary>
    /// How to interpret the context.
    /// </summary>
    public string ContextType { get; set; }
    /// <summary>
    /// Extension container element for ContextType
    /// </summary>
    public Element _ContextType { get; set; }
    /// <summary>
    /// Field to create in the context.
    /// </summary>
    public string Element { get; set; }
    /// <summary>
    /// Extension container element for Element
    /// </summary>
    public Element _Element { get; set; }
    /// <summary>
    /// If field is a list, how to manage the list.
    /// </summary>
    public List<string> ListMode { get; set; }
    /// <summary>
    /// Extension container element for ListMode
    /// </summary>
    public List<Element> _ListMode { get; set; }
    /// <summary>
    /// Internal rule reference for shared list items.
    /// </summary>
    public string ListRuleId { get; set; }
    /// <summary>
    /// Extension container element for ListRuleId
    /// </summary>
    public Element _ListRuleId { get; set; }
    /// <summary>
    /// Parameters to the transform.
    /// </summary>
    public List<StructureMapGroupRuleTargetParameter> Parameter { get; set; }
    /// <summary>
    /// How the data is copied / created.
    /// </summary>
    public string Transform { get; set; }
    /// <summary>
    /// Extension container element for Transform
    /// </summary>
    public Element _Transform { get; set; }
    /// <summary>
    /// Named context for field, if desired, and a field is specified.
    /// </summary>
    public string Variable { get; set; }
    /// <summary>
    /// Extension container element for Variable
    /// </summary>
    public Element _Variable { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "context":
          Context = reader.GetString();
          break;

        case "_context":
          _Context = new Fhir.R4.Models.Element();
          _Context.DeserializeJson(ref reader, options);
          break;

        case "contextType":
          ContextType = reader.GetString();
          break;

        case "_contextType":
          _ContextType = new Fhir.R4.Models.Element();
          _ContextType.DeserializeJson(ref reader, options);
          break;

        case "element":
          Element = reader.GetString();
          break;

        case "_element":
          _Element = new Fhir.R4.Models.Element();
          _Element.DeserializeJson(ref reader, options);
          break;

        case "listMode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ListMode = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ListMode.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ListMode.Count == 0)
          {
            ListMode = null;
          }

          break;

        case "_listMode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ListMode = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_ListMode = new Fhir.R4.Models.Element();
            obj_ListMode.DeserializeJson(ref reader, options);
            _ListMode.Add(obj_ListMode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ListMode.Count == 0)
          {
            _ListMode = null;
          }

          break;

        case "listRuleId":
          ListRuleId = reader.GetString();
          break;

        case "_listRuleId":
          _ListRuleId = new Fhir.R4.Models.Element();
          _ListRuleId.DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Parameter = new List<StructureMapGroupRuleTargetParameter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroupRuleTargetParameter objParameter = new Fhir.R4.Models.StructureMapGroupRuleTargetParameter();
            objParameter.DeserializeJson(ref reader, options);
            Parameter.Add(objParameter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Parameter.Count == 0)
          {
            Parameter = null;
          }

          break;

        case "transform":
          Transform = reader.GetString();
          break;

        case "_transform":
          _Transform = new Fhir.R4.Models.Element();
          _Transform.DeserializeJson(ref reader, options);
          break;

        case "variable":
          Variable = reader.GetString();
          break;

        case "_variable":
          _Variable = new Fhir.R4.Models.Element();
          _Variable.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Which other rules to apply in the context of this rule.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapGroupRuleDependent>))]
  public class StructureMapGroupRuleDependent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Name of a rule or group to apply.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Variable to pass to the rule or group.
    /// </summary>
    public List<string> Variable { get; set; }
    /// <summary>
    /// Extension container element for Variable
    /// </summary>
    public List<Element> _Variable { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "variable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Variable = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Variable.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Variable.Count == 0)
          {
            Variable = null;
          }

          break;

        case "_variable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Variable = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_Variable = new Fhir.R4.Models.Element();
            obj_Variable.DeserializeJson(ref reader, options);
            _Variable.Add(obj_Variable);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Variable.Count == 0)
          {
            _Variable = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Transform Rule from source to target.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapGroupRule>))]
  public class StructureMapGroupRule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Which other rules to apply in the context of this rule.
    /// </summary>
    public List<StructureMapGroupRuleDependent> Dependent { get; set; }
    /// <summary>
    /// Documentation for this instance of data.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Name of the rule for internal references.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Rules contained in this rule.
    /// </summary>
    public List<StructureMapGroupRule> Rule { get; set; }
    /// <summary>
    /// Source inputs to the mapping.
    /// </summary>
    public List<StructureMapGroupRuleSource> Source { get; set; }
    /// <summary>
    /// Content to create because of this mapping rule.
    /// </summary>
    public List<StructureMapGroupRuleTarget> Target { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dependent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Dependent = new List<StructureMapGroupRuleDependent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroupRuleDependent objDependent = new Fhir.R4.Models.StructureMapGroupRuleDependent();
            objDependent.DeserializeJson(ref reader, options);
            Dependent.Add(objDependent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Dependent.Count == 0)
          {
            Dependent = null;
          }

          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new Fhir.R4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rule = new List<StructureMapGroupRule>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroupRule objRule = new Fhir.R4.Models.StructureMapGroupRule();
            objRule.DeserializeJson(ref reader, options);
            Rule.Add(objRule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rule.Count == 0)
          {
            Rule = null;
          }

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<StructureMapGroupRuleSource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroupRuleSource objSource = new Fhir.R4.Models.StructureMapGroupRuleSource();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<StructureMapGroupRuleTarget>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroupRuleTarget objTarget = new Fhir.R4.Models.StructureMapGroupRuleTarget();
            objTarget.DeserializeJson(ref reader, options);
            Target.Add(objTarget);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Organizes the mapping into manageable chunks for human review/ease of maintenance.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<StructureMapGroup>))]
  public class StructureMapGroup : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Another group that this group adds rules to.
    /// </summary>
    public string Extends { get; set; }
    /// <summary>
    /// Extension container element for Extends
    /// </summary>
    public Element _Extends { get; set; }
    /// <summary>
    /// If no inputs are named, then the entry mappings are type based.
    /// </summary>
    public List<StructureMapGroupInput> Input { get; set; }
    /// <summary>
    /// A unique name for the group for the convenience of human readers.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Transform Rule from source to target.
    /// </summary>
    public List<StructureMapGroupRule> Rule { get; set; }
    /// <summary>
    /// Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
    /// </summary>
    public string TypeMode { get; set; }
    /// <summary>
    /// Extension container element for TypeMode
    /// </summary>
    public Element _TypeMode { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new Fhir.R4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "extends":
          Extends = reader.GetString();
          break;

        case "_extends":
          _Extends = new Fhir.R4.Models.Element();
          _Extends.DeserializeJson(ref reader, options);
          break;

        case "input":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Input = new List<StructureMapGroupInput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroupInput objInput = new Fhir.R4.Models.StructureMapGroupInput();
            objInput.DeserializeJson(ref reader, options);
            Input.Add(objInput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Input.Count == 0)
          {
            Input = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rule = new List<StructureMapGroupRule>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroupRule objRule = new Fhir.R4.Models.StructureMapGroupRule();
            objRule.DeserializeJson(ref reader, options);
            Rule.Add(objRule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rule.Count == 0)
          {
            Rule = null;
          }

          break;

        case "typeMode":
          TypeMode = reader.GetString();
          break;

        case "_typeMode":
          _TypeMode = new Fhir.R4.Models.Element();
          _TypeMode.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A Map of relationships between 2 structures that can be used to transform data.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class StructureMap : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "StructureMap";
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure map is presumed to be the predominant language in the place the structure map was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of structure maps that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Organizes the mapping into manageable chunks for human review/ease of maintenance.
    /// </summary>
    public List<StructureMapGroup> Group { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure map outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Other maps used by this map (canonical URLs).
    /// </summary>
    public List<string> Import { get; set; }
    /// <summary>
    /// Extension container element for Import
    /// </summary>
    public List<Element> _Import { get; set; }
    /// <summary>
    /// It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the structure map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Allows filtering of structure maps that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
    /// </summary>
    public List<StructureMapStructure> Structure { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure map with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ContactDetail objContact = new Fhir.R4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new Fhir.R4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new Fhir.R4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new Fhir.R4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Group = new List<StructureMapGroup>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapGroup objGroup = new Fhir.R4.Models.StructureMapGroup();
            objGroup.DeserializeJson(ref reader, options);
            Group.Add(objGroup);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Group.Count == 0)
          {
            Group = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "import":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Import = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Import.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Import.Count == 0)
          {
            Import = null;
          }

          break;

        case "_import":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Import = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_Import = new Fhir.R4.Models.Element();
            obj_Import.DeserializeJson(ref reader, options);
            _Import.Add(obj_Import);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Import.Count == 0)
          {
            _Import = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objJurisdiction = new Fhir.R4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new Fhir.R4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new Fhir.R4.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new Fhir.R4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "structure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Structure = new List<StructureMapStructure>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.StructureMapStructure objStructure = new Fhir.R4.Models.StructureMapStructure();
            objStructure.DeserializeJson(ref reader, options);
            Structure.Add(objStructure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Structure.Count == 0)
          {
            Structure = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new Fhir.R4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new Fhir.R4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.UsageContext objUseContext = new Fhir.R4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new Fhir.R4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
