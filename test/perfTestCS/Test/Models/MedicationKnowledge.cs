// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Associated or related knowledge about a medication.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeRelatedMedicationKnowledge>))]
  public class MedicationKnowledgeRelatedMedicationKnowledge : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Associated documentation about the associated medication knowledge.
    /// </summary>
    public List<Reference> Reference { get; set; }
    /// <summary>
    /// The category of the associated medication knowledge reference.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objReference = new Fhir.R4.Models.Reference();
            objReference.DeserializeJson(ref reader, options);
            Reference.Add(objReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reference.Count == 0)
          {
            Reference = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Associated documentation about the medication.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeMonograph>))]
  public class MedicationKnowledgeMonograph : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Associated documentation about the medication.
    /// </summary>
    public Reference Source { get; set; }
    /// <summary>
    /// The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          Source = new Fhir.R4.Models.Reference();
          Source.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Identifies a particular constituent of interest in the product.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeIngredient>))]
  public class MedicationKnowledgeIngredient : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indication of whether this ingredient affects the therapeutic action of the drug.
    /// </summary>
    public bool? IsActive { get; set; }
    /// <summary>
    /// The actual ingredient - either a substance (simple ingredient) or another medication.
    /// </summary>
    public CodeableConcept ItemCodeableConcept { get; set; }
    /// <summary>
    /// The actual ingredient - either a substance (simple ingredient) or another medication.
    /// </summary>
    public Reference ItemReference { get; set; }
    /// <summary>
    /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
    /// </summary>
    public Ratio Strength { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "isActive":
          IsActive = reader.GetBoolean();
          break;

        case "itemCodeableConcept":
          ItemCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          ItemCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "itemReference":
          ItemReference = new Fhir.R4.Models.Reference();
          ItemReference.DeserializeJson(ref reader, options);
          break;

        case "strength":
          Strength = new Fhir.R4.Models.Ratio();
          Strength.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The price of the medication.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeCost>))]
  public class MedicationKnowledgeCost : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The price of the medication.
    /// </summary>
    public Money Cost { get; set; }
    /// <summary>
    /// The source or owner that assigns the price to the medication.
    /// </summary>
    public string Source { get; set; }
    /// <summary>
    /// Extension container element for Source
    /// </summary>
    public Element _Source { get; set; }
    /// <summary>
    /// The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cost":
          Cost = new Fhir.R4.Models.Money();
          Cost.DeserializeJson(ref reader, options);
          break;

        case "source":
          Source = reader.GetString();
          break;

        case "_source":
          _Source = new Fhir.R4.Models.Element();
          _Source.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The program under which the medication is reviewed.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeMonitoringProgram>))]
  public class MedicationKnowledgeMonitoringProgram : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Name of the reviewing program.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Type of program under which the medication is monitored.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Dosage for the medication for the specific guidelines.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeAdministrationGuidelinesDosage>))]
  public class MedicationKnowledgeAdministrationGuidelinesDosage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Dosage for the medication for the specific guidelines.
    /// </summary>
    public List<Dosage> Dosage { get; set; }
    /// <summary>
    /// The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Dosage = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Dosage objDosage = new Fhir.R4.Models.Dosage();
            objDosage.DeserializeJson(ref reader, options);
            Dosage.Add(objDosage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Dosage.Count == 0)
          {
            Dosage = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics>))]
  public class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
    /// </summary>
    public CodeableConcept CharacteristicCodeableConcept { get; set; }
    /// <summary>
    /// Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
    /// </summary>
    public Quantity CharacteristicQuantity { get; set; }
    /// <summary>
    /// The specific characteristic (e.g. height, weight, gender, etc.).
    /// </summary>
    public List<string> Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public List<Element> _Value { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "characteristicCodeableConcept":
          CharacteristicCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          CharacteristicCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "characteristicQuantity":
          CharacteristicQuantity = new Fhir.R4.Models.Quantity();
          CharacteristicQuantity.DeserializeJson(ref reader, options);
          break;

        case "value":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Value = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Value.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Value.Count == 0)
          {
            Value = null;
          }

          break;

        case "_value":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Value = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_Value = new Fhir.R4.Models.Element();
            obj_Value.DeserializeJson(ref reader, options);
            _Value.Add(obj_Value);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Value.Count == 0)
          {
            _Value = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Guidelines for the administration of the medication.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeAdministrationGuidelines>))]
  public class MedicationKnowledgeAdministrationGuidelines : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Dosage for the medication for the specific guidelines.
    /// </summary>
    public List<MedicationKnowledgeAdministrationGuidelinesDosage> Dosage { get; set; }
    /// <summary>
    /// Indication for use that apply to the specific administration guidelines.
    /// </summary>
    public CodeableConcept IndicationCodeableConcept { get; set; }
    /// <summary>
    /// Indication for use that apply to the specific administration guidelines.
    /// </summary>
    public Reference IndicationReference { get; set; }
    /// <summary>
    /// Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
    /// </summary>
    public List<MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics> PatientCharacteristics { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Dosage = new List<MedicationKnowledgeAdministrationGuidelinesDosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeAdministrationGuidelinesDosage objDosage = new Fhir.R4.Models.MedicationKnowledgeAdministrationGuidelinesDosage();
            objDosage.DeserializeJson(ref reader, options);
            Dosage.Add(objDosage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Dosage.Count == 0)
          {
            Dosage = null;
          }

          break;

        case "indicationCodeableConcept":
          IndicationCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          IndicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "indicationReference":
          IndicationReference = new Fhir.R4.Models.Reference();
          IndicationReference.DeserializeJson(ref reader, options);
          break;

        case "patientCharacteristics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PatientCharacteristics = new List<MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics objPatientCharacteristics = new Fhir.R4.Models.MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics();
            objPatientCharacteristics.DeserializeJson(ref reader, options);
            PatientCharacteristics.Add(objPatientCharacteristics);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PatientCharacteristics.Count == 0)
          {
            PatientCharacteristics = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Categorization of the medication within a formulary or classification system.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeMedicineClassification>))]
  public class MedicationKnowledgeMedicineClassification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
    /// </summary>
    public List<CodeableConcept> Classification { get; set; }
    /// <summary>
    /// The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objClassification = new Fhir.R4.Models.CodeableConcept();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information that only applies to packages (not products).
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgePackaging>))]
  public class MedicationKnowledgePackaging : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The number of product units the package would contain if fully loaded.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A code that defines the specific type of packaging that the medication can be found in (e.g. blister sleeve, tube, bottle).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeDrugCharacteristic>))]
  public class MedicationKnowledgeDrugCharacteristic : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
    /// </summary>
    public string ValueBase64Binary { get; set; }
    /// <summary>
    /// Extension container element for ValueBase64Binary
    /// </summary>
    public Element _ValueBase64Binary { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new Fhir.R4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new Fhir.R4.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          ValueBase64Binary = reader.GetString();
          break;

        case "_valueBase64Binary":
          _ValueBase64Binary = new Fhir.R4.Models.Element();
          _ValueBase64Binary.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeRegulatorySubstitution>))]
  public class MedicationKnowledgeRegulatorySubstitution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specifies if regulation allows for changes in the medication when dispensing.
    /// </summary>
    public bool Allowed { get; set; }
    /// <summary>
    /// Specifies the type of substitution allowed.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowed":
          Allowed = reader.GetBoolean();
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specifies the schedule of a medication in jurisdiction.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeRegulatorySchedule>))]
  public class MedicationKnowledgeRegulatorySchedule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specifies the specific drug schedule.
    /// </summary>
    public CodeableConcept Schedule { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "schedule":
          Schedule = new Fhir.R4.Models.CodeableConcept();
          Schedule.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The maximum number of units of the medication that can be dispensed in a period.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeRegulatoryMaxDispense>))]
  public class MedicationKnowledgeRegulatoryMaxDispense : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The period that applies to the maximum number of units.
    /// </summary>
    public Duration Period { get; set; }
    /// <summary>
    /// The maximum number of units of the medication that can be dispensed.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "period":
          Period = new Fhir.R4.Models.Duration();
          Period.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Regulatory information about a medication.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeRegulatory>))]
  public class MedicationKnowledgeRegulatory : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The maximum number of units of the medication that can be dispensed in a period.
    /// </summary>
    public MedicationKnowledgeRegulatoryMaxDispense MaxDispense { get; set; }
    /// <summary>
    /// The authority that is specifying the regulations.
    /// </summary>
    public Reference RegulatoryAuthority { get; set; }
    /// <summary>
    /// Specifies the schedule of a medication in jurisdiction.
    /// </summary>
    public List<MedicationKnowledgeRegulatorySchedule> Schedule { get; set; }
    /// <summary>
    /// Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
    /// </summary>
    public List<MedicationKnowledgeRegulatorySubstitution> Substitution { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "maxDispense":
          MaxDispense = new Fhir.R4.Models.MedicationKnowledgeRegulatoryMaxDispense();
          MaxDispense.DeserializeJson(ref reader, options);
          break;

        case "regulatoryAuthority":
          RegulatoryAuthority = new Fhir.R4.Models.Reference();
          RegulatoryAuthority.DeserializeJson(ref reader, options);
          break;

        case "schedule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Schedule = new List<MedicationKnowledgeRegulatorySchedule>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeRegulatorySchedule objSchedule = new Fhir.R4.Models.MedicationKnowledgeRegulatorySchedule();
            objSchedule.DeserializeJson(ref reader, options);
            Schedule.Add(objSchedule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Schedule.Count == 0)
          {
            Schedule = null;
          }

          break;

        case "substitution":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Substitution = new List<MedicationKnowledgeRegulatorySubstitution>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeRegulatorySubstitution objSubstitution = new Fhir.R4.Models.MedicationKnowledgeRegulatorySubstitution();
            objSubstitution.DeserializeJson(ref reader, options);
            Substitution.Add(objSubstitution);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Substitution.Count == 0)
          {
            Substitution = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicationKnowledgeKinetics>))]
  public class MedicationKnowledgeKinetics : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The drug concentration measured at certain discrete points in time.
    /// </summary>
    public List<Quantity> AreaUnderCurve { get; set; }
    /// <summary>
    /// The time required for any specified property (e.g., the concentration of a substance in the body) to decrease by half.
    /// </summary>
    public Duration HalfLifePeriod { get; set; }
    /// <summary>
    /// The median lethal dose of a drug.
    /// </summary>
    public List<Quantity> LethalDose50 { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "areaUnderCurve":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AreaUnderCurve = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Quantity objAreaUnderCurve = new Fhir.R4.Models.Quantity();
            objAreaUnderCurve.DeserializeJson(ref reader, options);
            AreaUnderCurve.Add(objAreaUnderCurve);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AreaUnderCurve.Count == 0)
          {
            AreaUnderCurve = null;
          }

          break;

        case "halfLifePeriod":
          HalfLifePeriod = new Fhir.R4.Models.Duration();
          HalfLifePeriod.DeserializeJson(ref reader, options);
          break;

        case "lethalDose50":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LethalDose50 = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Quantity objLethalDose50 = new Fhir.R4.Models.Quantity();
            objLethalDose50.DeserializeJson(ref reader, options);
            LethalDose50.Add(objLethalDose50);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LethalDose50.Count == 0)
          {
            LethalDose50 = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about a medication that is used to support knowledge.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class MedicationKnowledge : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "MedicationKnowledge";
    /// <summary>
    /// Guidelines for the administration of the medication.
    /// </summary>
    public List<MedicationKnowledgeAdministrationGuidelines> AdministrationGuidelines { get; set; }
    /// <summary>
    /// This is the quantity of medication in a package.  To specify the strength of the medication, the Ingredient.strength attribute is used.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
    /// </summary>
    public List<Reference> AssociatedMedication { get; set; }
    /// <summary>
    /// Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
    /// </summary>
    public List<Reference> Contraindication { get; set; }
    /// <summary>
    /// The price of the medication.
    /// </summary>
    public List<MedicationKnowledgeCost> Cost { get; set; }
    /// <summary>
    /// When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
    /// </summary>
    public CodeableConcept DoseForm { get; set; }
    /// <summary>
    /// Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
    /// </summary>
    public List<MedicationKnowledgeDrugCharacteristic> DrugCharacteristic { get; set; }
    /// <summary>
    /// Identifies a particular constituent of interest in the product.
    /// </summary>
    public List<MedicationKnowledgeIngredient> Ingredient { get; set; }
    /// <summary>
    /// The intended or approved route of administration.
    /// </summary>
    public List<CodeableConcept> IntendedRoute { get; set; }
    /// <summary>
    /// The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
    /// </summary>
    public List<MedicationKnowledgeKinetics> Kinetics { get; set; }
    /// <summary>
    /// Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
    /// </summary>
    public Reference Manufacturer { get; set; }
    /// <summary>
    /// Categorization of the medication within a formulary or classification system.
    /// </summary>
    public List<MedicationKnowledgeMedicineClassification> MedicineClassification { get; set; }
    /// <summary>
    /// The program under which the medication is reviewed.
    /// </summary>
    public List<MedicationKnowledgeMonitoringProgram> MonitoringProgram { get; set; }
    /// <summary>
    /// Associated documentation about the medication.
    /// </summary>
    public List<MedicationKnowledgeMonograph> Monograph { get; set; }
    /// <summary>
    /// Information that only applies to packages (not products).
    /// </summary>
    public MedicationKnowledgePackaging Packaging { get; set; }
    /// <summary>
    /// The instructions for preparing the medication.
    /// </summary>
    public string PreparationInstruction { get; set; }
    /// <summary>
    /// Extension container element for PreparationInstruction
    /// </summary>
    public Element _PreparationInstruction { get; set; }
    /// <summary>
    /// Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
    /// </summary>
    public List<CodeableConcept> ProductType { get; set; }
    /// <summary>
    /// Regulatory information about a medication.
    /// </summary>
    public List<MedicationKnowledgeRegulatory> Regulatory { get; set; }
    /// <summary>
    /// Associated or related knowledge about a medication.
    /// </summary>
    public List<MedicationKnowledgeRelatedMedicationKnowledge> RelatedMedicationKnowledge { get; set; }
    /// <summary>
    /// This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
    /// </summary>
    public List<string> Synonym { get; set; }
    /// <summary>
    /// Extension container element for Synonym
    /// </summary>
    public List<Element> _Synonym { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "administrationGuidelines":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AdministrationGuidelines = new List<MedicationKnowledgeAdministrationGuidelines>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeAdministrationGuidelines objAdministrationGuidelines = new Fhir.R4.Models.MedicationKnowledgeAdministrationGuidelines();
            objAdministrationGuidelines.DeserializeJson(ref reader, options);
            AdministrationGuidelines.Add(objAdministrationGuidelines);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AdministrationGuidelines.Count == 0)
          {
            AdministrationGuidelines = null;
          }

          break;

        case "amount":
          Amount = new Fhir.R4.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "associatedMedication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AssociatedMedication = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objAssociatedMedication = new Fhir.R4.Models.Reference();
            objAssociatedMedication.DeserializeJson(ref reader, options);
            AssociatedMedication.Add(objAssociatedMedication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AssociatedMedication.Count == 0)
          {
            AssociatedMedication = null;
          }

          break;

        case "code":
          Code = new Fhir.R4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "contraindication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contraindication = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objContraindication = new Fhir.R4.Models.Reference();
            objContraindication.DeserializeJson(ref reader, options);
            Contraindication.Add(objContraindication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contraindication.Count == 0)
          {
            Contraindication = null;
          }

          break;

        case "cost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Cost = new List<MedicationKnowledgeCost>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeCost objCost = new Fhir.R4.Models.MedicationKnowledgeCost();
            objCost.DeserializeJson(ref reader, options);
            Cost.Add(objCost);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Cost.Count == 0)
          {
            Cost = null;
          }

          break;

        case "doseForm":
          DoseForm = new Fhir.R4.Models.CodeableConcept();
          DoseForm.DeserializeJson(ref reader, options);
          break;

        case "drugCharacteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DrugCharacteristic = new List<MedicationKnowledgeDrugCharacteristic>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeDrugCharacteristic objDrugCharacteristic = new Fhir.R4.Models.MedicationKnowledgeDrugCharacteristic();
            objDrugCharacteristic.DeserializeJson(ref reader, options);
            DrugCharacteristic.Add(objDrugCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DrugCharacteristic.Count == 0)
          {
            DrugCharacteristic = null;
          }

          break;

        case "ingredient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Ingredient = new List<MedicationKnowledgeIngredient>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeIngredient objIngredient = new Fhir.R4.Models.MedicationKnowledgeIngredient();
            objIngredient.DeserializeJson(ref reader, options);
            Ingredient.Add(objIngredient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Ingredient.Count == 0)
          {
            Ingredient = null;
          }

          break;

        case "intendedRoute":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IntendedRoute = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objIntendedRoute = new Fhir.R4.Models.CodeableConcept();
            objIntendedRoute.DeserializeJson(ref reader, options);
            IntendedRoute.Add(objIntendedRoute);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IntendedRoute.Count == 0)
          {
            IntendedRoute = null;
          }

          break;

        case "kinetics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Kinetics = new List<MedicationKnowledgeKinetics>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeKinetics objKinetics = new Fhir.R4.Models.MedicationKnowledgeKinetics();
            objKinetics.DeserializeJson(ref reader, options);
            Kinetics.Add(objKinetics);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Kinetics.Count == 0)
          {
            Kinetics = null;
          }

          break;

        case "manufacturer":
          Manufacturer = new Fhir.R4.Models.Reference();
          Manufacturer.DeserializeJson(ref reader, options);
          break;

        case "medicineClassification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MedicineClassification = new List<MedicationKnowledgeMedicineClassification>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeMedicineClassification objMedicineClassification = new Fhir.R4.Models.MedicationKnowledgeMedicineClassification();
            objMedicineClassification.DeserializeJson(ref reader, options);
            MedicineClassification.Add(objMedicineClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MedicineClassification.Count == 0)
          {
            MedicineClassification = null;
          }

          break;

        case "monitoringProgram":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MonitoringProgram = new List<MedicationKnowledgeMonitoringProgram>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeMonitoringProgram objMonitoringProgram = new Fhir.R4.Models.MedicationKnowledgeMonitoringProgram();
            objMonitoringProgram.DeserializeJson(ref reader, options);
            MonitoringProgram.Add(objMonitoringProgram);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MonitoringProgram.Count == 0)
          {
            MonitoringProgram = null;
          }

          break;

        case "monograph":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Monograph = new List<MedicationKnowledgeMonograph>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeMonograph objMonograph = new Fhir.R4.Models.MedicationKnowledgeMonograph();
            objMonograph.DeserializeJson(ref reader, options);
            Monograph.Add(objMonograph);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Monograph.Count == 0)
          {
            Monograph = null;
          }

          break;

        case "packaging":
          Packaging = new Fhir.R4.Models.MedicationKnowledgePackaging();
          Packaging.DeserializeJson(ref reader, options);
          break;

        case "preparationInstruction":
          PreparationInstruction = reader.GetString();
          break;

        case "_preparationInstruction":
          _PreparationInstruction = new Fhir.R4.Models.Element();
          _PreparationInstruction.DeserializeJson(ref reader, options);
          break;

        case "productType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProductType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objProductType = new Fhir.R4.Models.CodeableConcept();
            objProductType.DeserializeJson(ref reader, options);
            ProductType.Add(objProductType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProductType.Count == 0)
          {
            ProductType = null;
          }

          break;

        case "regulatory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Regulatory = new List<MedicationKnowledgeRegulatory>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeRegulatory objRegulatory = new Fhir.R4.Models.MedicationKnowledgeRegulatory();
            objRegulatory.DeserializeJson(ref reader, options);
            Regulatory.Add(objRegulatory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Regulatory.Count == 0)
          {
            Regulatory = null;
          }

          break;

        case "relatedMedicationKnowledge":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedMedicationKnowledge = new List<MedicationKnowledgeRelatedMedicationKnowledge>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicationKnowledgeRelatedMedicationKnowledge objRelatedMedicationKnowledge = new Fhir.R4.Models.MedicationKnowledgeRelatedMedicationKnowledge();
            objRelatedMedicationKnowledge.DeserializeJson(ref reader, options);
            RelatedMedicationKnowledge.Add(objRelatedMedicationKnowledge);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedMedicationKnowledge.Count == 0)
          {
            RelatedMedicationKnowledge = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new Fhir.R4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Synonym = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Synonym.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Synonym.Count == 0)
          {
            Synonym = null;
          }

          break;

        case "_synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Synonym = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_Synonym = new Fhir.R4.Models.Element();
            obj_Synonym.DeserializeJson(ref reader, options);
            _Synonym.Add(obj_Synonym);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Synonym.Count == 0)
          {
            _Synonym = null;
          }

          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
