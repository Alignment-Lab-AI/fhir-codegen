// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Batch numbering.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductPackagedBatchIdentifier>))]
  public class MedicinalProductPackagedBatchIdentifier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A number appearing on the immediate packaging (and not the outer packaging).
    /// </summary>
    public Identifier ImmediatePackaging { get; set; }
    /// <summary>
    /// A number appearing on the outer packaging of a specific batch.
    /// </summary>
    public Identifier OuterPackaging { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(ref Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(ref writer, options, false);

      writer.WritePropertyName("outerPackaging");
      OuterPackaging.SerializeJson(ref writer, options);

      if (ImmediatePackaging != null)
      {
        writer.WritePropertyName("immediatePackaging");
        ImmediatePackaging.SerializeJson(ref writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "immediatePackaging":
          ImmediatePackaging = new Fhir.R4.Models.Identifier();
          ImmediatePackaging.DeserializeJson(ref reader, options);
          break;

        case "outerPackaging":
          OuterPackaging = new Fhir.R4.Models.Identifier();
          OuterPackaging.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A packaging item, as a contained for medicine, possibly with other packaging items within.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductPackagedPackageItem>))]
  public class MedicinalProductPackagedPackageItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A possible alternate material for the packaging.
    /// </summary>
    public List<CodeableConcept> AlternateMaterial { get; set; }
    /// <summary>
    /// A device accompanying a medicinal product.
    /// </summary>
    public List<Reference> Device { get; set; }
    /// <summary>
    /// Including possibly Data Carrier Identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The manufactured item as contained in the packaged medicinal product.
    /// </summary>
    public List<Reference> ManufacturedItem { get; set; }
    /// <summary>
    /// Manufacturer of this Package Item.
    /// </summary>
    public List<Reference> Manufacturer { get; set; }
    /// <summary>
    /// Material type of the package item.
    /// </summary>
    public List<CodeableConcept> Material { get; set; }
    /// <summary>
    /// Other codeable characteristics.
    /// </summary>
    public List<CodeableConcept> OtherCharacteristics { get; set; }
    /// <summary>
    /// Allows containers within containers.
    /// </summary>
    public List<MedicinalProductPackagedPackageItem> PackageItem { get; set; }
    /// <summary>
    /// Dimensions, color etc.
    /// </summary>
    public ProdCharacteristic PhysicalCharacteristics { get; set; }
    /// <summary>
    /// The quantity of this package in the medicinal product, at the current level of packaging. The outermost is always 1.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Shelf Life and storage information.
    /// </summary>
    public List<ProductShelfLife> ShelfLifeStorage { get; set; }
    /// <summary>
    /// The physical type of the container of the medicine.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(ref Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(ref writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      writer.WritePropertyName("type");
      Type.SerializeJson(ref writer, options);

      writer.WritePropertyName("quantity");
      Quantity.SerializeJson(ref writer, options);

      if ((Material != null) && (Material.Count != 0))
      {
        writer.WritePropertyName("material");
        writer.WriteStartArray();

        foreach (CodeableConcept valMaterial in Material)
        {
          valMaterial.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AlternateMaterial != null) && (AlternateMaterial.Count != 0))
      {
        writer.WritePropertyName("alternateMaterial");
        writer.WriteStartArray();

        foreach (CodeableConcept valAlternateMaterial in AlternateMaterial)
        {
          valAlternateMaterial.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Device != null) && (Device.Count != 0))
      {
        writer.WritePropertyName("device");
        writer.WriteStartArray();

        foreach (Reference valDevice in Device)
        {
          valDevice.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ManufacturedItem != null) && (ManufacturedItem.Count != 0))
      {
        writer.WritePropertyName("manufacturedItem");
        writer.WriteStartArray();

        foreach (Reference valManufacturedItem in ManufacturedItem)
        {
          valManufacturedItem.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PackageItem != null) && (PackageItem.Count != 0))
      {
        writer.WritePropertyName("packageItem");
        writer.WriteStartArray();

        foreach (MedicinalProductPackagedPackageItem valPackageItem in PackageItem)
        {
          valPackageItem.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PhysicalCharacteristics != null)
      {
        writer.WritePropertyName("physicalCharacteristics");
        PhysicalCharacteristics.SerializeJson(ref writer, options);
      }

      if ((OtherCharacteristics != null) && (OtherCharacteristics.Count != 0))
      {
        writer.WritePropertyName("otherCharacteristics");
        writer.WriteStartArray();

        foreach (CodeableConcept valOtherCharacteristics in OtherCharacteristics)
        {
          valOtherCharacteristics.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ShelfLifeStorage != null) && (ShelfLifeStorage.Count != 0))
      {
        writer.WritePropertyName("shelfLifeStorage");
        writer.WriteStartArray();

        foreach (ProductShelfLife valShelfLifeStorage in ShelfLifeStorage)
        {
          valShelfLifeStorage.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (Reference valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "alternateMaterial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AlternateMaterial = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objAlternateMaterial = new Fhir.R4.Models.CodeableConcept();
            objAlternateMaterial.DeserializeJson(ref reader, options);
            AlternateMaterial.Add(objAlternateMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AlternateMaterial.Count == 0)
          {
            AlternateMaterial = null;
          }

          break;

        case "device":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Device = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objDevice = new Fhir.R4.Models.Reference();
            objDevice.DeserializeJson(ref reader, options);
            Device.Add(objDevice);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Device.Count == 0)
          {
            Device = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "manufacturedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ManufacturedItem = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objManufacturedItem = new Fhir.R4.Models.Reference();
            objManufacturedItem.DeserializeJson(ref reader, options);
            ManufacturedItem.Add(objManufacturedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ManufacturedItem.Count == 0)
          {
            ManufacturedItem = null;
          }

          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objManufacturer = new Fhir.R4.Models.Reference();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "material":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Material = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objMaterial = new Fhir.R4.Models.CodeableConcept();
            objMaterial.DeserializeJson(ref reader, options);
            Material.Add(objMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Material.Count == 0)
          {
            Material = null;
          }

          break;

        case "otherCharacteristics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OtherCharacteristics = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objOtherCharacteristics = new Fhir.R4.Models.CodeableConcept();
            objOtherCharacteristics.DeserializeJson(ref reader, options);
            OtherCharacteristics.Add(objOtherCharacteristics);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OtherCharacteristics.Count == 0)
          {
            OtherCharacteristics = null;
          }

          break;

        case "packageItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PackageItem = new List<MedicinalProductPackagedPackageItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductPackagedPackageItem objPackageItem = new Fhir.R4.Models.MedicinalProductPackagedPackageItem();
            objPackageItem.DeserializeJson(ref reader, options);
            PackageItem.Add(objPackageItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PackageItem.Count == 0)
          {
            PackageItem = null;
          }

          break;

        case "physicalCharacteristics":
          PhysicalCharacteristics = new Fhir.R4.Models.ProdCharacteristic();
          PhysicalCharacteristics.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "shelfLifeStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ShelfLifeStorage = new List<ProductShelfLife>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ProductShelfLife objShelfLifeStorage = new Fhir.R4.Models.ProductShelfLife();
            objShelfLifeStorage.DeserializeJson(ref reader, options);
            ShelfLifeStorage.Add(objShelfLifeStorage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ShelfLifeStorage.Count == 0)
          {
            ShelfLifeStorage = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A medicinal product in a container or package.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductPackaged>))]
  public class MedicinalProductPackaged : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "MedicinalProductPackaged";
    /// <summary>
    /// Batch numbering.
    /// </summary>
    public List<MedicinalProductPackagedBatchIdentifier> BatchIdentifier { get; set; }
    /// <summary>
    /// Textual description.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Unique identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The legal status of supply of the medicinal product as classified by the regulator.
    /// </summary>
    public CodeableConcept LegalStatusOfSupply { get; set; }
    /// <summary>
    /// Manufacturer of this Package Item.
    /// </summary>
    public List<Reference> Manufacturer { get; set; }
    /// <summary>
    /// Manufacturer of this Package Item.
    /// </summary>
    public Reference MarketingAuthorization { get; set; }
    /// <summary>
    /// Marketing information.
    /// </summary>
    public List<MarketingStatus> MarketingStatus { get; set; }
    /// <summary>
    /// A packaging item, as a contained for medicine, possibly with other packaging items within.
    /// </summary>
    public List<MedicinalProductPackagedPackageItem> PackageItem { get; set; }
    /// <summary>
    /// The product with this is a pack for.
    /// </summary>
    public List<Reference> Subject { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(ref Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((Fhir.R4.Models.DomainResource)this).SerializeJson(ref writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Subject != null) && (Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();

        foreach (Reference valSubject in Subject)
        {
          valSubject.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(ref writer, options);
      }

      if (LegalStatusOfSupply != null)
      {
        writer.WritePropertyName("legalStatusOfSupply");
        LegalStatusOfSupply.SerializeJson(ref writer, options);
      }

      if ((MarketingStatus != null) && (MarketingStatus.Count != 0))
      {
        writer.WritePropertyName("marketingStatus");
        writer.WriteStartArray();

        foreach (MarketingStatus valMarketingStatus in MarketingStatus)
        {
          valMarketingStatus.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MarketingAuthorization != null)
      {
        writer.WritePropertyName("marketingAuthorization");
        MarketingAuthorization.SerializeJson(ref writer, options);
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (Reference valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BatchIdentifier != null) && (BatchIdentifier.Count != 0))
      {
        writer.WritePropertyName("batchIdentifier");
        writer.WriteStartArray();

        foreach (MedicinalProductPackagedBatchIdentifier valBatchIdentifier in BatchIdentifier)
        {
          valBatchIdentifier.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PackageItem != null) && (PackageItem.Count != 0))
      {
        writer.WritePropertyName("packageItem");
        writer.WriteStartArray();

        foreach (MedicinalProductPackagedPackageItem valPackageItem in PackageItem)
        {
          valPackageItem.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "batchIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BatchIdentifier = new List<MedicinalProductPackagedBatchIdentifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductPackagedBatchIdentifier objBatchIdentifier = new Fhir.R4.Models.MedicinalProductPackagedBatchIdentifier();
            objBatchIdentifier.DeserializeJson(ref reader, options);
            BatchIdentifier.Add(objBatchIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BatchIdentifier.Count == 0)
          {
            BatchIdentifier = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new Fhir.R4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "legalStatusOfSupply":
          LegalStatusOfSupply = new Fhir.R4.Models.CodeableConcept();
          LegalStatusOfSupply.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objManufacturer = new Fhir.R4.Models.Reference();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "marketingAuthorization":
          MarketingAuthorization = new Fhir.R4.Models.Reference();
          MarketingAuthorization.DeserializeJson(ref reader, options);
          break;

        case "marketingStatus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MarketingStatus = new List<MarketingStatus>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MarketingStatus objMarketingStatus = new Fhir.R4.Models.MarketingStatus();
            objMarketingStatus.DeserializeJson(ref reader, options);
            MarketingStatus.Add(objMarketingStatus);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MarketingStatus.Count == 0)
          {
            MarketingStatus = null;
          }

          break;

        case "packageItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PackageItem = new List<MedicinalProductPackagedPackageItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductPackagedPackageItem objPackageItem = new Fhir.R4.Models.MedicinalProductPackagedPackageItem();
            objPackageItem.DeserializeJson(ref reader, options);
            PackageItem.Add(objPackageItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PackageItem.Count == 0)
          {
            PackageItem = null;
          }

          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subject = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSubject = new Fhir.R4.Models.Reference();
            objSubject.DeserializeJson(ref reader, options);
            Subject.Add(objSubject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subject.Count == 0)
          {
            Subject = null;
          }

          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
