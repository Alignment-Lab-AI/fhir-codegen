// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstancePolymerMonomerSetStartingMaterial>))]
  public class SubstancePolymerMonomerSetStartingMaterial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public SubstanceAmount Amount { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public bool? IsDefining { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Material { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new Fhir.R4.Models.SubstanceAmount();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "isDefining":
          IsDefining = reader.GetBoolean();
          break;

        case "material":
          Material = new Fhir.R4.Models.CodeableConcept();
          Material.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstancePolymerMonomerSet>))]
  public class SubstancePolymerMonomerSet : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept RatioType { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstancePolymerMonomerSetStartingMaterial> StartingMaterial { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "ratioType":
          RatioType = new Fhir.R4.Models.CodeableConcept();
          RatioType.DeserializeJson(ref reader, options);
          break;

        case "startingMaterial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StartingMaterial = new List<SubstancePolymerMonomerSetStartingMaterial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstancePolymerMonomerSetStartingMaterial objStartingMaterial = new Fhir.R4.Models.SubstancePolymerMonomerSetStartingMaterial();
            objStartingMaterial.DeserializeJson(ref reader, options);
            StartingMaterial.Add(objStartingMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StartingMaterial.Count == 0)
          {
            StartingMaterial = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation>))]
  public class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public SubstanceAmount Amount { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Degree { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new Fhir.R4.Models.SubstanceAmount();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "degree":
          Degree = new Fhir.R4.Models.CodeableConcept();
          Degree.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstancePolymerRepeatRepeatUnitStructuralRepresentation>))]
  public class SubstancePolymerRepeatRepeatUnitStructuralRepresentation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public Attachment Attachment { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public string Representation { get; set; }
    /// <summary>
    /// Extension container element for Representation
    /// </summary>
    public Element _Representation { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "attachment":
          Attachment = new Fhir.R4.Models.Attachment();
          Attachment.DeserializeJson(ref reader, options);
          break;

        case "representation":
          Representation = reader.GetString();
          break;

        case "_representation":
          _Representation = new Fhir.R4.Models.Element();
          _Representation.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstancePolymerRepeatRepeatUnit>))]
  public class SubstancePolymerRepeatRepeatUnit : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public SubstanceAmount Amount { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation> DegreeOfPolymerisation { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept OrientationOfPolymerisation { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public string RepeatUnit { get; set; }
    /// <summary>
    /// Extension container element for RepeatUnit
    /// </summary>
    public Element _RepeatUnit { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstancePolymerRepeatRepeatUnitStructuralRepresentation> StructuralRepresentation { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new Fhir.R4.Models.SubstanceAmount();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "degreeOfPolymerisation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DegreeOfPolymerisation = new List<SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation objDegreeOfPolymerisation = new Fhir.R4.Models.SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation();
            objDegreeOfPolymerisation.DeserializeJson(ref reader, options);
            DegreeOfPolymerisation.Add(objDegreeOfPolymerisation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DegreeOfPolymerisation.Count == 0)
          {
            DegreeOfPolymerisation = null;
          }

          break;

        case "orientationOfPolymerisation":
          OrientationOfPolymerisation = new Fhir.R4.Models.CodeableConcept();
          OrientationOfPolymerisation.DeserializeJson(ref reader, options);
          break;

        case "repeatUnit":
          RepeatUnit = reader.GetString();
          break;

        case "_repeatUnit":
          _RepeatUnit = new Fhir.R4.Models.Element();
          _RepeatUnit.DeserializeJson(ref reader, options);
          break;

        case "structuralRepresentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StructuralRepresentation = new List<SubstancePolymerRepeatRepeatUnitStructuralRepresentation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstancePolymerRepeatRepeatUnitStructuralRepresentation objStructuralRepresentation = new Fhir.R4.Models.SubstancePolymerRepeatRepeatUnitStructuralRepresentation();
            objStructuralRepresentation.DeserializeJson(ref reader, options);
            StructuralRepresentation.Add(objStructuralRepresentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StructuralRepresentation.Count == 0)
          {
            StructuralRepresentation = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstancePolymerRepeat>))]
  public class SubstancePolymerRepeat : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public string AverageMolecularFormula { get; set; }
    /// <summary>
    /// Extension container element for AverageMolecularFormula
    /// </summary>
    public Element _AverageMolecularFormula { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public int? NumberOfUnits { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstancePolymerRepeatRepeatUnit> RepeatUnit { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept RepeatUnitAmountType { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "averageMolecularFormula":
          AverageMolecularFormula = reader.GetString();
          break;

        case "_averageMolecularFormula":
          _AverageMolecularFormula = new Fhir.R4.Models.Element();
          _AverageMolecularFormula.DeserializeJson(ref reader, options);
          break;

        case "numberOfUnits":
          NumberOfUnits = reader.GetInt32();
          break;

        case "repeatUnit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RepeatUnit = new List<SubstancePolymerRepeatRepeatUnit>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstancePolymerRepeatRepeatUnit objRepeatUnit = new Fhir.R4.Models.SubstancePolymerRepeatRepeatUnit();
            objRepeatUnit.DeserializeJson(ref reader, options);
            RepeatUnit.Add(objRepeatUnit);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RepeatUnit.Count == 0)
          {
            RepeatUnit = null;
          }

          break;

        case "repeatUnitAmountType":
          RepeatUnitAmountType = new Fhir.R4.Models.CodeableConcept();
          RepeatUnitAmountType.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class SubstancePolymer : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "SubstancePolymer";
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Class { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<CodeableConcept> CopolymerConnectivity { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Geometry { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<string> Modification { get; set; }
    /// <summary>
    /// Extension container element for Modification
    /// </summary>
    public List<Element> _Modification { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstancePolymerMonomerSet> MonomerSet { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstancePolymerRepeat> Repeat { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "class":
          Class = new Fhir.R4.Models.CodeableConcept();
          Class.DeserializeJson(ref reader, options);
          break;

        case "copolymerConnectivity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CopolymerConnectivity = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objCopolymerConnectivity = new Fhir.R4.Models.CodeableConcept();
            objCopolymerConnectivity.DeserializeJson(ref reader, options);
            CopolymerConnectivity.Add(objCopolymerConnectivity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CopolymerConnectivity.Count == 0)
          {
            CopolymerConnectivity = null;
          }

          break;

        case "geometry":
          Geometry = new Fhir.R4.Models.CodeableConcept();
          Geometry.DeserializeJson(ref reader, options);
          break;

        case "modification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modification = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Modification.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modification.Count == 0)
          {
            Modification = null;
          }

          break;

        case "_modification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Modification = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_Modification = new Fhir.R4.Models.Element();
            obj_Modification.DeserializeJson(ref reader, options);
            _Modification.Add(obj_Modification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Modification.Count == 0)
          {
            _Modification = null;
          }

          break;

        case "monomerSet":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MonomerSet = new List<SubstancePolymerMonomerSet>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstancePolymerMonomerSet objMonomerSet = new Fhir.R4.Models.SubstancePolymerMonomerSet();
            objMonomerSet.DeserializeJson(ref reader, options);
            MonomerSet.Add(objMonomerSet);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MonomerSet.Count == 0)
          {
            MonomerSet = null;
          }

          break;

        case "repeat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Repeat = new List<SubstancePolymerRepeat>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstancePolymerRepeat objRepeat = new Fhir.R4.Models.SubstancePolymerRepeat();
            objRepeat.DeserializeJson(ref reader, options);
            Repeat.Add(objRepeat);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Repeat.Count == 0)
          {
            Repeat = null;
          }

          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
