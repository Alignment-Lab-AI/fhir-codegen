// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstanceReferenceInformationGene>))]
  public class SubstanceReferenceInformationGene : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Gene { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept GeneSequenceOrigin { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "gene":
          Gene = new Fhir.R4.Models.CodeableConcept();
          Gene.DeserializeJson(ref reader, options);
          break;

        case "geneSequenceOrigin":
          GeneSequenceOrigin = new Fhir.R4.Models.CodeableConcept();
          GeneSequenceOrigin.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstanceReferenceInformationGeneElement>))]
  public class SubstanceReferenceInformationGeneElement : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public Identifier Element { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "element":
          Element = new Fhir.R4.Models.Identifier();
          Element.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstanceReferenceInformationClassification>))]
  public class SubstanceReferenceInformationClassification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Classification { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Domain { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<CodeableConcept> Subtype { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classification":
          Classification = new Fhir.R4.Models.CodeableConcept();
          Classification.DeserializeJson(ref reader, options);
          break;

        case "domain":
          Domain = new Fhir.R4.Models.CodeableConcept();
          Domain.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subtype = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objSubtype = new Fhir.R4.Models.CodeableConcept();
            objSubtype.DeserializeJson(ref reader, options);
            Subtype.Add(objSubtype);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subtype.Count == 0)
          {
            Subtype = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<SubstanceReferenceInformationTarget>))]
  public class SubstanceReferenceInformationTarget : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Todo.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public Range AmountRange { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept AmountType { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Interaction { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Organism { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept OrganismType { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public Identifier Target { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new Fhir.R4.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountRange":
          AmountRange = new Fhir.R4.Models.Range();
          AmountRange.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new Fhir.R4.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "amountType":
          AmountType = new Fhir.R4.Models.CodeableConcept();
          AmountType.DeserializeJson(ref reader, options);
          break;

        case "interaction":
          Interaction = new Fhir.R4.Models.CodeableConcept();
          Interaction.DeserializeJson(ref reader, options);
          break;

        case "organism":
          Organism = new Fhir.R4.Models.CodeableConcept();
          Organism.DeserializeJson(ref reader, options);
          break;

        case "organismType":
          OrganismType = new Fhir.R4.Models.CodeableConcept();
          OrganismType.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objSource = new Fhir.R4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "target":
          Target = new Fhir.R4.Models.Identifier();
          Target.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class SubstanceReferenceInformation : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "SubstanceReferenceInformation";
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstanceReferenceInformationClassification> Classification { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstanceReferenceInformationGene> Gene { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstanceReferenceInformationGeneElement> GeneElement { get; set; }
    /// <summary>
    /// Todo.
    /// </summary>
    public List<SubstanceReferenceInformationTarget> Target { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<SubstanceReferenceInformationClassification>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceReferenceInformationClassification objClassification = new Fhir.R4.Models.SubstanceReferenceInformationClassification();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new Fhir.R4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "gene":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Gene = new List<SubstanceReferenceInformationGene>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceReferenceInformationGene objGene = new Fhir.R4.Models.SubstanceReferenceInformationGene();
            objGene.DeserializeJson(ref reader, options);
            Gene.Add(objGene);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Gene.Count == 0)
          {
            Gene = null;
          }

          break;

        case "geneElement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          GeneElement = new List<SubstanceReferenceInformationGeneElement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceReferenceInformationGeneElement objGeneElement = new Fhir.R4.Models.SubstanceReferenceInformationGeneElement();
            objGeneElement.DeserializeJson(ref reader, options);
            GeneElement.Add(objGeneElement);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (GeneElement.Count == 0)
          {
            GeneElement = null;
          }

          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<SubstanceReferenceInformationTarget>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.SubstanceReferenceInformationTarget objTarget = new Fhir.R4.Models.SubstanceReferenceInformationTarget();
            objTarget.DeserializeJson(ref reader, options);
            Target.Add(objTarget);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
