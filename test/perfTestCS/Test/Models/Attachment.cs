// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// For referring to data content defined in other formats.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<Attachment>))]
  public class Attachment : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// The date that the attachment was first created.
    /// </summary>
    public string Creation { get; set; }
    /// <summary>
    /// Extension container element for Creation
    /// </summary>
    public Element _Creation { get; set; }
    /// <summary>
    /// The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
    /// </summary>
    public string Data { get; set; }
    /// <summary>
    /// Extension container element for Data
    /// </summary>
    public Element _Data { get; set; }
    /// <summary>
    /// The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded. The hash is not intended to support digital signatures. Where protection against malicious threats a digital signature should be considered, see [Provenance.signature](provenance-definitions.html#Provenance.signature) for mechanism to protect a resource with a digital signature.
    /// </summary>
    public string Hash { get; set; }
    /// <summary>
    /// Extension container element for Hash
    /// </summary>
    public Element _Hash { get; set; }
    /// <summary>
    /// The human language of the content. The value can be any valid value according to BCP 47.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
    /// </summary>
    public uint? Size { get; set; }
    /// <summary>
    /// A label or set of text to display in place of the data.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(ref Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.Element)this).SerializeJson(ref writer, options, false);

      writer.WriteString("contentType", ContentType);

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(ref writer, options);
      }

      writer.WriteString("creation", Creation);

      if (_Creation != null)
      {
        writer.WritePropertyName("_creation");
        _Creation.SerializeJson(ref writer, options);
      }

      writer.WriteString("data", Data);

      if (_Data != null)
      {
        writer.WritePropertyName("_data");
        _Data.SerializeJson(ref writer, options);
      }

      writer.WriteString("hash", Hash);

      if (_Hash != null)
      {
        writer.WritePropertyName("_hash");
        _Hash.SerializeJson(ref writer, options);
      }

      writer.WriteString("language", Language);

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(ref writer, options);
      }

      if (Size != null)
      {
        writer.WriteNumber("size", (uint)Size!);
      }

      writer.WriteString("title", Title);

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(ref writer, options);
      }

      writer.WriteString("url", Url);

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(ref writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new Fhir.R4.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "creation":
          Creation = reader.GetString();
          break;

        case "_creation":
          _Creation = new Fhir.R4.Models.Element();
          _Creation.DeserializeJson(ref reader, options);
          break;

        case "data":
          Data = reader.GetString();
          break;

        case "_data":
          _Data = new Fhir.R4.Models.Element();
          _Data.DeserializeJson(ref reader, options);
          break;

        case "hash":
          Hash = reader.GetString();
          break;

        case "_hash":
          _Hash = new Fhir.R4.Models.Element();
          _Hash.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new Fhir.R4.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        case "size":
          Size = reader.GetUInt32();
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new Fhir.R4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new Fhir.R4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
