// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Indicates who or what performed or participated in the charged service.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<InvoiceParticipant>))]
  public class InvoiceParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The device, practitioner, etc. who performed or participated in the service.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new Fhir.R4.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new Fhir.R4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<InvoiceLineItemPriceComponent>))]
  public class InvoiceLineItemPriceComponent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// This code identifies the type of the component.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new Fhir.R4.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new Fhir.R4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new Fhir.R4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new Fhir.R4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<InvoiceLineItem>))]
  public class InvoiceLineItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
    /// </summary>
    public Reference ChargeItemReference { get; set; }
    /// <summary>
    /// The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
    /// </summary>
    public CodeableConcept ChargeItemCodeableConcept { get; set; }
    /// <summary>
    /// The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
    /// </summary>
    public List<InvoiceLineItemPriceComponent> PriceComponent { get; set; }
    /// <summary>
    /// Sequence in which the items appear on the invoice.
    /// </summary>
    public uint? Sequence { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chargeItemReference":
          ChargeItemReference = new Fhir.R4.Models.Reference();
          ChargeItemReference.DeserializeJson(ref reader, options);
          break;

        case "chargeItemCodeableConcept":
          ChargeItemCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          ChargeItemCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "priceComponent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PriceComponent = new List<InvoiceLineItemPriceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.InvoiceLineItemPriceComponent objPriceComponent = new Fhir.R4.Models.InvoiceLineItemPriceComponent();
            objPriceComponent.DeserializeJson(ref reader, options);
            PriceComponent.Add(objPriceComponent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PriceComponent.Count == 0)
          {
            PriceComponent = null;
          }

          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class Invoice : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "Invoice";
    /// <summary>
    /// Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the potprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
    /// </summary>
    public Reference Account { get; set; }
    /// <summary>
    /// Derived Profiles may choose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
    /// </summary>
    public string CancelledReason { get; set; }
    /// <summary>
    /// Extension container element for CancelledReason
    /// </summary>
    public Element _CancelledReason { get; set; }
    /// <summary>
    /// The list of types may be constrained as appropriate for the type of charge item.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
    /// </summary>
    public Reference Issuer { get; set; }
    /// <summary>
    /// Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
    /// </summary>
    public List<InvoiceLineItem> LineItem { get; set; }
    /// <summary>
    /// Comments made about the invoice by the issuer, subject, or other participants.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Indicates who or what performed or participated in the charged service.
    /// </summary>
    public List<InvoiceParticipant> Participant { get; set; }
    /// <summary>
    /// Derived Profiles may chose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
    /// </summary>
    public string PaymentTerms { get; set; }
    /// <summary>
    /// Extension container element for PaymentTerms
    /// </summary>
    public Element _PaymentTerms { get; set; }
    /// <summary>
    /// The individual or Organization responsible for balancing of this invoice.
    /// </summary>
    public Reference Recipient { get; set; }
    /// <summary>
    /// The current state of the Invoice.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The individual or set of individuals receiving the goods and services billed in this invoice.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
    /// </summary>
    public Money TotalGross { get; set; }
    /// <summary>
    /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
    /// </summary>
    public Money TotalNet { get; set; }
    /// <summary>
    /// The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
    /// </summary>
    public List<InvoiceLineItemPriceComponent> TotalPriceComponent { get; set; }
    /// <summary>
    /// Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "account":
          Account = new Fhir.R4.Models.Reference();
          Account.DeserializeJson(ref reader, options);
          break;

        case "cancelledReason":
          CancelledReason = reader.GetString();
          break;

        case "_cancelledReason":
          _CancelledReason = new Fhir.R4.Models.Element();
          _CancelledReason.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new Fhir.R4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "issuer":
          Issuer = new Fhir.R4.Models.Reference();
          Issuer.DeserializeJson(ref reader, options);
          break;

        case "lineItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LineItem = new List<InvoiceLineItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.InvoiceLineItem objLineItem = new Fhir.R4.Models.InvoiceLineItem();
            objLineItem.DeserializeJson(ref reader, options);
            LineItem.Add(objLineItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LineItem.Count == 0)
          {
            LineItem = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Annotation objNote = new Fhir.R4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<InvoiceParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.InvoiceParticipant objParticipant = new Fhir.R4.Models.InvoiceParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "paymentTerms":
          PaymentTerms = reader.GetString();
          break;

        case "_paymentTerms":
          _PaymentTerms = new Fhir.R4.Models.Element();
          _PaymentTerms.DeserializeJson(ref reader, options);
          break;

        case "recipient":
          Recipient = new Fhir.R4.Models.Reference();
          Recipient.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new Fhir.R4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new Fhir.R4.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "totalGross":
          TotalGross = new Fhir.R4.Models.Money();
          TotalGross.DeserializeJson(ref reader, options);
          break;

        case "totalNet":
          TotalNet = new Fhir.R4.Models.Money();
          TotalNet.DeserializeJson(ref reader, options);
          break;

        case "totalPriceComponent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TotalPriceComponent = new List<InvoiceLineItemPriceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.InvoiceLineItemPriceComponent objTotalPriceComponent = new Fhir.R4.Models.InvoiceLineItemPriceComponent();
            objTotalPriceComponent.DeserializeJson(ref reader, options);
            TotalPriceComponent.Add(objTotalPriceComponent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TotalPriceComponent.Count == 0)
          {
            TotalPriceComponent = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
