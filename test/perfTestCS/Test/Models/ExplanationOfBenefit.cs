// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// For example,  for the original treatment and follow-up exams.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitRelated>))]
  public class ExplanationOfBenefitRelated : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Reference to a related claim.
    /// </summary>
    public Reference Claim { get; set; }
    /// <summary>
    /// For example, Property/Casualty insurer claim number or Workers Compensation case number.
    /// </summary>
    public Identifier Reference { get; set; }
    /// <summary>
    /// For example, prior claim or umbrella.
    /// </summary>
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "claim":
          Claim = new Fhir.R4.Models.Reference();
          Claim.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new Fhir.R4.Models.Identifier();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = new Fhir.R4.Models.CodeableConcept();
          Relationship.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitPayee>))]
  public class ExplanationOfBenefitPayee : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Not required if the payee is 'subscriber' or 'provider'.
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// Type of Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "party":
          Party = new Fhir.R4.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The members of the team who provided the products and services.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitCareTeam>))]
  public class ExplanationOfBenefitCareTeam : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Member of the team who provided the product or service.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The qualification of the practitioner which is applicable for this service.
    /// </summary>
    public CodeableConcept Qualification { get; set; }
    /// <summary>
    /// Responsible might not be required when there is only a single provider listed.
    /// </summary>
    public bool? Responsible { get; set; }
    /// <summary>
    /// Role might not be required when there is only a single provider listed.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// A number to uniquely identify care team entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "provider":
          Provider = new Fhir.R4.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "qualification":
          Qualification = new Fhir.R4.Models.CodeableConcept();
          Qualification.DeserializeJson(ref reader, options);
          break;

        case "responsible":
          Responsible = reader.GetBoolean();
          break;

        case "role":
          Role = new Fhir.R4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Often there are multiple jurisdiction specific valuesets which are required.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitSupportingInfo>))]
  public class ExplanationOfBenefitSupportingInfo : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This may contain a category for the local bill type codes.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// This may contain the local bill type codes such as the US UB-04 bill type code.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// For example: the reason for the additional stay, or why a tooth is  missing.
    /// </summary>
    public Coding Reason { get; set; }
    /// <summary>
    /// A number to uniquely identify supporting information entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// The date when or period to which this information refers.
    /// </summary>
    public string TimingDate { get; set; }
    /// <summary>
    /// Extension container element for TimingDate
    /// </summary>
    public Element _TimingDate { get; set; }
    /// <summary>
    /// The date when or period to which this information refers.
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new Fhir.R4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new Fhir.R4.Models.Coding();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "timingDate":
          TimingDate = reader.GetString();
          break;

        case "_timingDate":
          _TimingDate = new Fhir.R4.Models.Element();
          _TimingDate.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new Fhir.R4.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new Fhir.R4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new Fhir.R4.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new Fhir.R4.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new Fhir.R4.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about diagnoses relevant to the claim items.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitDiagnosis>))]
  public class ExplanationOfBenefitDiagnosis : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
    /// </summary>
    public CodeableConcept DiagnosisCodeableConcept { get; set; }
    /// <summary>
    /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
    /// </summary>
    public Reference DiagnosisReference { get; set; }
    /// <summary>
    /// Indication of whether the diagnosis was present on admission to a facility.
    /// </summary>
    public CodeableConcept OnAdmission { get; set; }
    /// <summary>
    /// For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
    /// </summary>
    public CodeableConcept PackageCode { get; set; }
    /// <summary>
    /// Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// For example: admitting, primary, secondary, discharge.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "diagnosisCodeableConcept":
          DiagnosisCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          DiagnosisCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "diagnosisReference":
          DiagnosisReference = new Fhir.R4.Models.Reference();
          DiagnosisReference.DeserializeJson(ref reader, options);
          break;

        case "onAdmission":
          OnAdmission = new Fhir.R4.Models.CodeableConcept();
          OnAdmission.DeserializeJson(ref reader, options);
          break;

        case "packageCode":
          PackageCode = new Fhir.R4.Models.CodeableConcept();
          PackageCode.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objType = new Fhir.R4.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Procedures performed on the patient relevant to the billing items with the claim.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitProcedure>))]
  public class ExplanationOfBenefitProcedure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Date and optionally time the procedure was performed.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
    /// </summary>
    public CodeableConcept ProcedureCodeableConcept { get; set; }
    /// <summary>
    /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
    /// </summary>
    public Reference ProcedureReference { get; set; }
    /// <summary>
    /// A number to uniquely identify procedure entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// When the condition was observed or the relative ranking.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new Fhir.R4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "procedureCodeableConcept":
          ProcedureCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          ProcedureCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "procedureReference":
          ProcedureReference = new Fhir.R4.Models.Reference();
          ProcedureReference.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objType = new Fhir.R4.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objUdi = new Fhir.R4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitInsurance>))]
  public class ExplanationOfBenefitInsurance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
    /// </summary>
    public bool Focal { get; set; }
    /// <summary>
    /// This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
    /// </summary>
    public List<string> PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coverage":
          Coverage = new Fhir.R4.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "focal":
          Focal = reader.GetBoolean();
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRef = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PreAuthRef.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRef.Count == 0)
          {
            PreAuthRef = null;
          }

          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PreAuthRef = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_PreAuthRef = new Fhir.R4.Models.Element();
            obj_PreAuthRef.DeserializeJson(ref reader, options);
            _PreAuthRef.Add(obj_PreAuthRef);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PreAuthRef.Count == 0)
          {
            _PreAuthRef = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details of a accident which resulted in injuries which required the products and services listed in the claim.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitAccident>))]
  public class ExplanationOfBenefitAccident : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The physical location of the accident event.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// The physical location of the accident event.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new Fhir.R4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new Fhir.R4.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new Fhir.R4.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitItemAdjudication>))]
  public class ExplanationOfBenefitItemAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For example, amount submitted, eligible amount, co-payment, and benefit payable.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// For example, may indicate that the funds for this benefit type have been exhausted.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// For example: eligible percentage or co-payment percentage.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new Fhir.R4.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new Fhir.R4.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new Fhir.R4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Third-tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitItemDetailSubDetail>))]
  public class ExplanationOfBenefitItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of revenue or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new Fhir.R4.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new Fhir.R4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objModifier = new Fhir.R4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new Fhir.R4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new Fhir.R4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objProgramCode = new Fhir.R4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new Fhir.R4.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objUdi = new Fhir.R4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new Fhir.R4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Second-tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitItemDetail>))]
  public class ExplanationOfBenefitItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of revenue or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Third-tier of goods and services.
    /// </summary>
    public List<ExplanationOfBenefitItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new Fhir.R4.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new Fhir.R4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objModifier = new Fhir.R4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new Fhir.R4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new Fhir.R4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objProgramCode = new Fhir.R4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new Fhir.R4.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ExplanationOfBenefitItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemDetailSubDetail objSubDetail = new Fhir.R4.Models.ExplanationOfBenefitItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objUdi = new Fhir.R4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new Fhir.R4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitItem>))]
  public class ExplanationOfBenefitItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
    /// </summary>
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// Care team members related to this service or product.
    /// </summary>
    public List<uint> CareTeamSequence { get; set; }
    /// <summary>
    /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Second-tier of goods and services.
    /// </summary>
    public List<ExplanationOfBenefitItemDetail> Detail { get; set; }
    /// <summary>
    /// Diagnoses applicable for this service or product.
    /// </summary>
    public List<uint> DiagnosisSequence { get; set; }
    /// <summary>
    /// A billed item may include goods or services provided in multiple encounters.
    /// </summary>
    public List<Reference> Encounter { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Exceptions, special conditions and supporting information applicable for this service or product.
    /// </summary>
    public List<uint> InformationSequence { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public CodeableConcept LocationCodeableConcept { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// Procedures applicable for this service or product.
    /// </summary>
    public List<uint> ProcedureSequence { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of revenue or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A number to uniquely identify item entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public string ServicedDate { get; set; }
    /// <summary>
    /// Extension container element for ServicedDate
    /// </summary>
    public Element _ServicedDate { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public Period ServicedPeriod { get; set; }
    /// <summary>
    /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
    /// </summary>
    public List<CodeableConcept> SubSite { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new Fhir.R4.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "bodySite":
          BodySite = new Fhir.R4.Models.CodeableConcept();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CareTeamSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            CareTeamSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CareTeamSequence.Count == 0)
          {
            CareTeamSequence = null;
          }

          break;

        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ExplanationOfBenefitItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemDetail objDetail = new Fhir.R4.Models.ExplanationOfBenefitItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DiagnosisSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DiagnosisSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DiagnosisSequence.Count == 0)
          {
            DiagnosisSequence = null;
          }

          break;

        case "encounter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Encounter = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objEncounter = new Fhir.R4.Models.Reference();
            objEncounter.DeserializeJson(ref reader, options);
            Encounter.Add(objEncounter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Encounter.Count == 0)
          {
            Encounter = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new Fhir.R4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InformationSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InformationSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InformationSequence.Count == 0)
          {
            InformationSequence = null;
          }

          break;

        case "locationCodeableConcept":
          LocationCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          LocationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new Fhir.R4.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new Fhir.R4.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objModifier = new Fhir.R4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new Fhir.R4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcedureSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ProcedureSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcedureSequence.Count == 0)
          {
            ProcedureSequence = null;
          }

          break;

        case "productOrService":
          ProductOrService = new Fhir.R4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objProgramCode = new Fhir.R4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new Fhir.R4.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "servicedDate":
          ServicedDate = reader.GetString();
          break;

        case "_servicedDate":
          _ServicedDate = new Fhir.R4.Models.Element();
          _ServicedDate.DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          ServicedPeriod = new Fhir.R4.Models.Period();
          ServicedPeriod.DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objSubSite = new Fhir.R4.Models.CodeableConcept();
            objSubSite.DeserializeJson(ref reader, options);
            SubSite.Add(objSubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubSite.Count == 0)
          {
            SubSite = null;
          }

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objUdi = new Fhir.R4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new Fhir.R4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The third-tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitAddItemDetailSubDetail>))]
  public class ExplanationOfBenefitAddItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new Fhir.R4.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new Fhir.R4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objModifier = new Fhir.R4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new Fhir.R4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new Fhir.R4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new Fhir.R4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The second-tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitAddItemDetail>))]
  public class ExplanationOfBenefitAddItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The third-tier service adjudications for payor added services.
    /// </summary>
    public List<ExplanationOfBenefitAddItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new Fhir.R4.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new Fhir.R4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objModifier = new Fhir.R4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new Fhir.R4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new Fhir.R4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ExplanationOfBenefitAddItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitAddItemDetailSubDetail objSubDetail = new Fhir.R4.Models.ExplanationOfBenefitAddItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new Fhir.R4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The first-tier service adjudications for payor added product or service lines.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitAddItem>))]
  public class ExplanationOfBenefitAddItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
    /// </summary>
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// The second-tier service adjudications for payor added services.
    /// </summary>
    public List<ExplanationOfBenefitAddItemDetail> Detail { get; set; }
    /// <summary>
    /// The sequence number of the details within the claim item which this line is intended to replace.
    /// </summary>
    public List<uint> DetailSequence { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Claim items which this service line is intended to replace.
    /// </summary>
    public List<uint> ItemSequence { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public CodeableConcept LocationCodeableConcept { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The providers who are authorized for the services rendered to the patient.
    /// </summary>
    public List<Reference> Provider { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public string ServicedDate { get; set; }
    /// <summary>
    /// Extension container element for ServicedDate
    /// </summary>
    public Element _ServicedDate { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public Period ServicedPeriod { get; set; }
    /// <summary>
    /// The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
    /// </summary>
    public List<uint> SubDetailSequence { get; set; }
    /// <summary>
    /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
    /// </summary>
    public List<CodeableConcept> SubSite { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new Fhir.R4.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "bodySite":
          BodySite = new Fhir.R4.Models.CodeableConcept();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ExplanationOfBenefitAddItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitAddItemDetail objDetail = new Fhir.R4.Models.ExplanationOfBenefitAddItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DetailSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DetailSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DetailSequence.Count == 0)
          {
            DetailSequence = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new Fhir.R4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ItemSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ItemSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ItemSequence.Count == 0)
          {
            ItemSequence = null;
          }

          break;

        case "locationCodeableConcept":
          LocationCodeableConcept = new Fhir.R4.Models.CodeableConcept();
          LocationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new Fhir.R4.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new Fhir.R4.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objModifier = new Fhir.R4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new Fhir.R4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new Fhir.R4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objProgramCode = new Fhir.R4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "provider":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Provider = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objProvider = new Fhir.R4.Models.Reference();
            objProvider.DeserializeJson(ref reader, options);
            Provider.Add(objProvider);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Provider.Count == 0)
          {
            Provider = null;
          }

          break;

        case "quantity":
          Quantity = new Fhir.R4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "servicedDate":
          ServicedDate = reader.GetString();
          break;

        case "_servicedDate":
          _ServicedDate = new Fhir.R4.Models.Element();
          _ServicedDate.DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          ServicedPeriod = new Fhir.R4.Models.Period();
          ServicedPeriod.DeserializeJson(ref reader, options);
          break;

        case "subDetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetailSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SubDetailSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetailSequence.Count == 0)
          {
            SubDetailSequence = null;
          }

          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objSubSite = new Fhir.R4.Models.CodeableConcept();
            objSubSite.DeserializeJson(ref reader, options);
            SubSite.Add(objSubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubSite.Count == 0)
          {
            SubSite = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new Fhir.R4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Totals for amounts submitted, co-pays, benefits payable etc.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitTotal>))]
  public class ExplanationOfBenefitTotal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary total amount associated with the category.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new Fhir.R4.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Payment details for the adjudication of the claim.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitPayment>))]
  public class ExplanationOfBenefitPayment : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
    /// </summary>
    public Money Adjustment { get; set; }
    /// <summary>
    /// Reason for the payment adjustment.
    /// </summary>
    public CodeableConcept AdjustmentReason { get; set; }
    /// <summary>
    /// Benefits payable less any payment adjustment.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// Estimated date the payment will be issued or the actual issue date of payment.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// For example: EFT number or check number.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Whether this represents partial or complete payment of the benefits payable.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjustment":
          Adjustment = new Fhir.R4.Models.Money();
          Adjustment.DeserializeJson(ref reader, options);
          break;

        case "adjustmentReason":
          AdjustmentReason = new Fhir.R4.Models.CodeableConcept();
          AdjustmentReason.DeserializeJson(ref reader, options);
          break;

        case "amount":
          Amount = new Fhir.R4.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new Fhir.R4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new Fhir.R4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A note that describes or explains adjudication results in a human readable form.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitProcessNote>))]
  public class ExplanationOfBenefitProcessNote : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Only required if the language is different from the resource language.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// A number to uniquely identify a note entry.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// The explanation or description associated with the processing.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The business purpose of the note text.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = new Fhir.R4.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "number":
          Number = reader.GetUInt32();
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new Fhir.R4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new Fhir.R4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Benefits Used to date.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitBenefitBalanceFinancial>))]
  public class ExplanationOfBenefitBenefitBalanceFinancial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The quantity of the benefit which is permitted under the coverage.
    /// </summary>
    public uint? AllowedUnsignedInt { get; set; }
    /// <summary>
    /// The quantity of the benefit which is permitted under the coverage.
    /// </summary>
    public string AllowedString { get; set; }
    /// <summary>
    /// Extension container element for AllowedString
    /// </summary>
    public Element _AllowedString { get; set; }
    /// <summary>
    /// The quantity of the benefit which is permitted under the coverage.
    /// </summary>
    public Money AllowedMoney { get; set; }
    /// <summary>
    /// For example: deductible, visits, benefit amount.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The quantity of the benefit which have been consumed to date.
    /// </summary>
    public uint? UsedUnsignedInt { get; set; }
    /// <summary>
    /// The quantity of the benefit which have been consumed to date.
    /// </summary>
    public Money UsedMoney { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowedUnsignedInt":
          AllowedUnsignedInt = reader.GetUInt32();
          break;

        case "allowedString":
          AllowedString = reader.GetString();
          break;

        case "_allowedString":
          _AllowedString = new Fhir.R4.Models.Element();
          _AllowedString.DeserializeJson(ref reader, options);
          break;

        case "allowedMoney":
          AllowedMoney = new Fhir.R4.Models.Money();
          AllowedMoney.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "usedUnsignedInt":
          UsedUnsignedInt = reader.GetUInt32();
          break;

        case "usedMoney":
          UsedMoney = new Fhir.R4.Models.Money();
          UsedMoney.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Balance by Benefit Category.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<ExplanationOfBenefitBenefitBalance>))]
  public class ExplanationOfBenefitBenefitBalance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
    /// </summary>
    public bool? Excluded { get; set; }
    /// <summary>
    /// Benefits Used to date.
    /// </summary>
    public List<ExplanationOfBenefitBenefitBalanceFinancial> Financial { get; set; }
    /// <summary>
    /// For example: MED01, or DENT2.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
    /// </summary>
    public CodeableConcept Network { get; set; }
    /// <summary>
    /// The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
    /// </summary>
    public CodeableConcept Term { get; set; }
    /// <summary>
    /// Indicates if the benefits apply to an individual or to the family.
    /// </summary>
    public CodeableConcept Unit { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new Fhir.R4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new Fhir.R4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "excluded":
          Excluded = reader.GetBoolean();
          break;

        case "financial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Financial = new List<ExplanationOfBenefitBenefitBalanceFinancial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitBenefitBalanceFinancial objFinancial = new Fhir.R4.Models.ExplanationOfBenefitBenefitBalanceFinancial();
            objFinancial.DeserializeJson(ref reader, options);
            Financial.Add(objFinancial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Financial.Count == 0)
          {
            Financial = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "network":
          Network = new Fhir.R4.Models.CodeableConcept();
          Network.DeserializeJson(ref reader, options);
          break;

        case "term":
          Term = new Fhir.R4.Models.CodeableConcept();
          Term.DeserializeJson(ref reader, options);
          break;

        case "unit":
          Unit = new Fhir.R4.Models.CodeableConcept();
          Unit.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class ExplanationOfBenefit : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "ExplanationOfBenefit";
    /// <summary>
    /// Details of a accident which resulted in injuries which required the products and services listed in the claim.
    /// </summary>
    public ExplanationOfBenefitAccident Accident { get; set; }
    /// <summary>
    /// The first-tier service adjudications for payor added product or service lines.
    /// </summary>
    public List<ExplanationOfBenefitAddItem> AddItem { get; set; }
    /// <summary>
    /// The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Balance by Benefit Category.
    /// </summary>
    public List<ExplanationOfBenefitBenefitBalance> BenefitBalance { get; set; }
    /// <summary>
    /// Not applicable when use=claim.
    /// </summary>
    public Period BenefitPeriod { get; set; }
    /// <summary>
    /// Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
    /// </summary>
    public Period BillablePeriod { get; set; }
    /// <summary>
    /// The members of the team who provided the products and services.
    /// </summary>
    public List<ExplanationOfBenefitCareTeam> CareTeam { get; set; }
    /// <summary>
    /// The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
    /// </summary>
    public Reference Claim { get; set; }
    /// <summary>
    /// The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
    /// </summary>
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// Information about diagnoses relevant to the claim items.
    /// </summary>
    public List<ExplanationOfBenefitDiagnosis> Diagnosis { get; set; }
    /// <summary>
    /// A human readable description of the status of the adjudication.
    /// </summary>
    public string Disposition { get; set; }
    /// <summary>
    /// Extension container element for Disposition
    /// </summary>
    public Element _Disposition { get; set; }
    /// <summary>
    /// Individual who created the claim, predetermination or preauthorization.
    /// </summary>
    public Reference Enterer { get; set; }
    /// <summary>
    /// Facility where the services were provided.
    /// </summary>
    public Reference Facility { get; set; }
    /// <summary>
    /// Needed to permit insurers to include the actual form.
    /// </summary>
    public Attachment Form { get; set; }
    /// <summary>
    /// May be needed to identify specific jurisdictional forms.
    /// </summary>
    public CodeableConcept FormCode { get; set; }
    /// <summary>
    /// Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
    /// </summary>
    public CodeableConcept FundsReserve { get; set; }
    /// <summary>
    /// This field is only used for preauthorizations.
    /// </summary>
    public CodeableConcept FundsReserveRequested { get; set; }
    /// <summary>
    /// A unique identifier assigned to this explanation of benefit.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
    /// </summary>
    public List<ExplanationOfBenefitInsurance> Insurance { get; set; }
    /// <summary>
    /// The party responsible for authorization, adjudication and reimbursement.
    /// </summary>
    public Reference Insurer { get; set; }
    /// <summary>
    /// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
    /// </summary>
    public List<ExplanationOfBenefitItem> Item { get; set; }
    /// <summary>
    /// For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
    /// </summary>
    public Reference OriginalPrescription { get; set; }
    /// <summary>
    /// The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
    /// </summary>
    public string Outcome { get; set; }
    /// <summary>
    /// Extension container element for Outcome
    /// </summary>
    public Element _Outcome { get; set; }
    /// <summary>
    /// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
    /// </summary>
    public ExplanationOfBenefitPayee Payee { get; set; }
    /// <summary>
    /// Payment details for the adjudication of the claim.
    /// </summary>
    public ExplanationOfBenefitPayment Payment { get; set; }
    /// <summary>
    /// This value is only present on preauthorization adjudications.
    /// </summary>
    public List<string> PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// This value is only present on preauthorization adjudications.
    /// </summary>
    public List<Period> PreAuthRefPeriod { get; set; }
    /// <summary>
    /// This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
    /// </summary>
    public uint? Precedence { get; set; }
    /// <summary>
    /// Prescription to support the dispensing of pharmacy, device or vision products.
    /// </summary>
    public Reference Prescription { get; set; }
    /// <summary>
    /// If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Procedures performed on the patient relevant to the billing items with the claim.
    /// </summary>
    public List<ExplanationOfBenefitProcedure> Procedure { get; set; }
    /// <summary>
    /// A note that describes or explains adjudication results in a human readable form.
    /// </summary>
    public List<ExplanationOfBenefitProcessNote> ProcessNote { get; set; }
    /// <summary>
    /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The referral resource which lists the date, practitioner, reason and other supporting information.
    /// </summary>
    public Reference Referral { get; set; }
    /// <summary>
    /// For example,  for the original treatment and follow-up exams.
    /// </summary>
    public List<ExplanationOfBenefitRelated> Related { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This may contain the local bill type codes such as the US UB-04 bill type code.
    /// </summary>
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Often there are multiple jurisdiction specific valuesets which are required.
    /// </summary>
    public List<ExplanationOfBenefitSupportingInfo> SupportingInfo { get; set; }
    /// <summary>
    /// Totals for amounts submitted, co-pays, benefits payable etc.
    /// </summary>
    public List<ExplanationOfBenefitTotal> Total { get; set; }
    /// <summary>
    /// The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
    /// </summary>
    public string Use { get; set; }
    /// <summary>
    /// Extension container element for Use
    /// </summary>
    public Element _Use { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accident":
          Accident = new Fhir.R4.Models.ExplanationOfBenefitAccident();
          Accident.DeserializeJson(ref reader, options);
          break;

        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AddItem = new List<ExplanationOfBenefitAddItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitAddItem objAddItem = new Fhir.R4.Models.ExplanationOfBenefitAddItem();
            objAddItem.DeserializeJson(ref reader, options);
            AddItem.Add(objAddItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AddItem.Count == 0)
          {
            AddItem = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new Fhir.R4.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "benefitBalance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BenefitBalance = new List<ExplanationOfBenefitBenefitBalance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitBenefitBalance objBenefitBalance = new Fhir.R4.Models.ExplanationOfBenefitBenefitBalance();
            objBenefitBalance.DeserializeJson(ref reader, options);
            BenefitBalance.Add(objBenefitBalance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BenefitBalance.Count == 0)
          {
            BenefitBalance = null;
          }

          break;

        case "benefitPeriod":
          BenefitPeriod = new Fhir.R4.Models.Period();
          BenefitPeriod.DeserializeJson(ref reader, options);
          break;

        case "billablePeriod":
          BillablePeriod = new Fhir.R4.Models.Period();
          BillablePeriod.DeserializeJson(ref reader, options);
          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CareTeam = new List<ExplanationOfBenefitCareTeam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitCareTeam objCareTeam = new Fhir.R4.Models.ExplanationOfBenefitCareTeam();
            objCareTeam.DeserializeJson(ref reader, options);
            CareTeam.Add(objCareTeam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CareTeam.Count == 0)
          {
            CareTeam = null;
          }

          break;

        case "claim":
          Claim = new Fhir.R4.Models.Reference();
          Claim.DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          ClaimResponse = new Fhir.R4.Models.Reference();
          ClaimResponse.DeserializeJson(ref reader, options);
          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new Fhir.R4.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Diagnosis = new List<ExplanationOfBenefitDiagnosis>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitDiagnosis objDiagnosis = new Fhir.R4.Models.ExplanationOfBenefitDiagnosis();
            objDiagnosis.DeserializeJson(ref reader, options);
            Diagnosis.Add(objDiagnosis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Diagnosis.Count == 0)
          {
            Diagnosis = null;
          }

          break;

        case "disposition":
          Disposition = reader.GetString();
          break;

        case "_disposition":
          _Disposition = new Fhir.R4.Models.Element();
          _Disposition.DeserializeJson(ref reader, options);
          break;

        case "enterer":
          Enterer = new Fhir.R4.Models.Reference();
          Enterer.DeserializeJson(ref reader, options);
          break;

        case "facility":
          Facility = new Fhir.R4.Models.Reference();
          Facility.DeserializeJson(ref reader, options);
          break;

        case "form":
          Form = new Fhir.R4.Models.Attachment();
          Form.DeserializeJson(ref reader, options);
          break;

        case "formCode":
          FormCode = new Fhir.R4.Models.CodeableConcept();
          FormCode.DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          FundsReserve = new Fhir.R4.Models.CodeableConcept();
          FundsReserve.DeserializeJson(ref reader, options);
          break;

        case "fundsReserveRequested":
          FundsReserveRequested = new Fhir.R4.Models.CodeableConcept();
          FundsReserveRequested.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<ExplanationOfBenefitInsurance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitInsurance objInsurance = new Fhir.R4.Models.ExplanationOfBenefitInsurance();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "insurer":
          Insurer = new Fhir.R4.Models.Reference();
          Insurer.DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<ExplanationOfBenefitItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitItem objItem = new Fhir.R4.Models.ExplanationOfBenefitItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "originalPrescription":
          OriginalPrescription = new Fhir.R4.Models.Reference();
          OriginalPrescription.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = reader.GetString();
          break;

        case "_outcome":
          _Outcome = new Fhir.R4.Models.Element();
          _Outcome.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new Fhir.R4.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "payee":
          Payee = new Fhir.R4.Models.ExplanationOfBenefitPayee();
          Payee.DeserializeJson(ref reader, options);
          break;

        case "payment":
          Payment = new Fhir.R4.Models.ExplanationOfBenefitPayment();
          Payment.DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRef = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PreAuthRef.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRef.Count == 0)
          {
            PreAuthRef = null;
          }

          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PreAuthRef = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_PreAuthRef = new Fhir.R4.Models.Element();
            obj_PreAuthRef.DeserializeJson(ref reader, options);
            _PreAuthRef.Add(obj_PreAuthRef);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PreAuthRef.Count == 0)
          {
            _PreAuthRef = null;
          }

          break;

        case "preAuthRefPeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRefPeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Period objPreAuthRefPeriod = new Fhir.R4.Models.Period();
            objPreAuthRefPeriod.DeserializeJson(ref reader, options);
            PreAuthRefPeriod.Add(objPreAuthRefPeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRefPeriod.Count == 0)
          {
            PreAuthRefPeriod = null;
          }

          break;

        case "precedence":
          Precedence = reader.GetUInt32();
          break;

        case "prescription":
          Prescription = new Fhir.R4.Models.Reference();
          Prescription.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = new Fhir.R4.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "procedure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Procedure = new List<ExplanationOfBenefitProcedure>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitProcedure objProcedure = new Fhir.R4.Models.ExplanationOfBenefitProcedure();
            objProcedure.DeserializeJson(ref reader, options);
            Procedure.Add(objProcedure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Procedure.Count == 0)
          {
            Procedure = null;
          }

          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcessNote = new List<ExplanationOfBenefitProcessNote>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitProcessNote objProcessNote = new Fhir.R4.Models.ExplanationOfBenefitProcessNote();
            objProcessNote.DeserializeJson(ref reader, options);
            ProcessNote.Add(objProcessNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcessNote.Count == 0)
          {
            ProcessNote = null;
          }

          break;

        case "provider":
          Provider = new Fhir.R4.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "referral":
          Referral = new Fhir.R4.Models.Reference();
          Referral.DeserializeJson(ref reader, options);
          break;

        case "related":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Related = new List<ExplanationOfBenefitRelated>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitRelated objRelated = new Fhir.R4.Models.ExplanationOfBenefitRelated();
            objRelated.DeserializeJson(ref reader, options);
            Related.Add(objRelated);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Related.Count == 0)
          {
            Related = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new Fhir.R4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subType":
          SubType = new Fhir.R4.Models.CodeableConcept();
          SubType.DeserializeJson(ref reader, options);
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInfo = new List<ExplanationOfBenefitSupportingInfo>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitSupportingInfo objSupportingInfo = new Fhir.R4.Models.ExplanationOfBenefitSupportingInfo();
            objSupportingInfo.DeserializeJson(ref reader, options);
            SupportingInfo.Add(objSupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInfo.Count == 0)
          {
            SupportingInfo = null;
          }

          break;

        case "total":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Total = new List<ExplanationOfBenefitTotal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ExplanationOfBenefitTotal objTotal = new Fhir.R4.Models.ExplanationOfBenefitTotal();
            objTotal.DeserializeJson(ref reader, options);
            Total.Add(objTotal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Total.Count == 0)
          {
            Total = null;
          }

          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = reader.GetString();
          break;

        case "_use":
          _Use = new Fhir.R4.Models.Element();
          _Use.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
