// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Authorization in areas within a country.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductAuthorizationJurisdictionalAuthorization>))]
  public class MedicinalProductAuthorizationJurisdictionalAuthorization : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Country of authorization.
    /// </summary>
    public CodeableConcept Country { get; set; }
    /// <summary>
    /// The assigned number for the marketing authorization.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Jurisdiction within a country.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The legal status of supply in a jurisdiction or region.
    /// </summary>
    public CodeableConcept LegalStatusOfSupply { get; set; }
    /// <summary>
    /// The start and expected end date of the authorization.
    /// </summary>
    public Period ValidityPeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(ref Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(ref writer, options, false);

      if (Country != null)
      {
        writer.WritePropertyName("country");
        Country.SerializeJson(ref writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (LegalStatusOfSupply != null)
      {
        writer.WritePropertyName("legalStatusOfSupply");
        LegalStatusOfSupply.SerializeJson(ref writer, options);
      }

      if (ValidityPeriod != null)
      {
        writer.WritePropertyName("validityPeriod");
        ValidityPeriod.SerializeJson(ref writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          Country = new Fhir.R4.Models.CodeableConcept();
          Country.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objJurisdiction = new Fhir.R4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "legalStatusOfSupply":
          LegalStatusOfSupply = new Fhir.R4.Models.CodeableConcept();
          LegalStatusOfSupply.DeserializeJson(ref reader, options);
          break;

        case "validityPeriod":
          ValidityPeriod = new Fhir.R4.Models.Period();
          ValidityPeriod.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The regulatory procedure for granting or amending a marketing authorization.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<MedicinalProductAuthorizationProcedure>))]
  public class MedicinalProductAuthorizationProcedure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Applcations submitted to obtain a marketing authorization.
    /// </summary>
    public List<MedicinalProductAuthorizationProcedure> Application { get; set; }
    /// <summary>
    /// Date of procedure.
    /// </summary>
    public Period DatePeriod { get; set; }
    /// <summary>
    /// Date of procedure.
    /// </summary>
    public string DateDateTime { get; set; }
    /// <summary>
    /// Extension container element for DateDateTime
    /// </summary>
    public Element _DateDateTime { get; set; }
    /// <summary>
    /// Identifier for this procedure.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Type of procedure.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(ref Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      ((Fhir.R4.Models.BackboneElement)this).SerializeJson(ref writer, options, false);

      if ((Application != null) && (Application.Count != 0))
      {
        writer.WritePropertyName("application");
        writer.WriteStartArray();

        foreach (MedicinalProductAuthorizationProcedure valApplication in Application)
        {
          valApplication.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DatePeriod != null)
      {
        writer.WritePropertyName("datePeriod");
        DatePeriod.SerializeJson(ref writer, options);
      }

      writer.WriteString("dateDateTime", DateDateTime);

      if (_DateDateTime != null)
      {
        writer.WritePropertyName("_dateDateTime");
        _DateDateTime.SerializeJson(ref writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(ref writer, options);
      }

      writer.WritePropertyName("type");
      Type.SerializeJson(ref writer, options);

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "application":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Application = new List<MedicinalProductAuthorizationProcedure>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductAuthorizationProcedure objApplication = new Fhir.R4.Models.MedicinalProductAuthorizationProcedure();
            objApplication.DeserializeJson(ref reader, options);
            Application.Add(objApplication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Application.Count == 0)
          {
            Application = null;
          }

          break;

        case "datePeriod":
          DatePeriod = new Fhir.R4.Models.Period();
          DatePeriod.DeserializeJson(ref reader, options);
          break;

        case "dateDateTime":
          DateDateTime = reader.GetString();
          break;

        case "_dateDateTime":
          _DateDateTime = new Fhir.R4.Models.Element();
          _DateDateTime.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new Fhir.R4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The regulatory authorization of a medicinal product.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class MedicinalProductAuthorization : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "MedicinalProductAuthorization";
    /// <summary>
    /// The country in which the marketing authorization has been granted.
    /// </summary>
    public List<CodeableConcept> Country { get; set; }
    /// <summary>
    /// A period of time after authorization before generic product applicatiosn can be submitted.
    /// </summary>
    public Period DataExclusivityPeriod { get; set; }
    /// <summary>
    /// The date when the first authorization was granted by a Medicines Regulatory Agency.
    /// </summary>
    public string DateOfFirstAuthorization { get; set; }
    /// <summary>
    /// Extension container element for DateOfFirstAuthorization
    /// </summary>
    public Element _DateOfFirstAuthorization { get; set; }
    /// <summary>
    /// Marketing Authorization Holder.
    /// </summary>
    public Reference Holder { get; set; }
    /// <summary>
    /// Business identifier for the marketing authorization, as assigned by a regulator.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Date of first marketing authorization for a company's new medicinal product in any country in the World.
    /// </summary>
    public string InternationalBirthDate { get; set; }
    /// <summary>
    /// Extension container element for InternationalBirthDate
    /// </summary>
    public Element _InternationalBirthDate { get; set; }
    /// <summary>
    /// Jurisdiction within a country.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// Authorization in areas within a country.
    /// </summary>
    public List<MedicinalProductAuthorizationJurisdictionalAuthorization> JurisdictionalAuthorization { get; set; }
    /// <summary>
    /// The legal framework against which this authorization is granted.
    /// </summary>
    public CodeableConcept LegalBasis { get; set; }
    /// <summary>
    /// The regulatory procedure for granting or amending a marketing authorization.
    /// </summary>
    public MedicinalProductAuthorizationProcedure Procedure { get; set; }
    /// <summary>
    /// Medicines Regulatory Agency.
    /// </summary>
    public Reference Regulator { get; set; }
    /// <summary>
    /// The date when a suspended the marketing or the marketing authorization of the product is anticipated to be restored.
    /// </summary>
    public string RestoreDate { get; set; }
    /// <summary>
    /// Extension container element for RestoreDate
    /// </summary>
    public Element _RestoreDate { get; set; }
    /// <summary>
    /// The status of the marketing authorization.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The date at which the given status has become applicable.
    /// </summary>
    public string StatusDate { get; set; }
    /// <summary>
    /// Extension container element for StatusDate
    /// </summary>
    public Element _StatusDate { get; set; }
    /// <summary>
    /// The medicinal product that is being authorized.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// The beginning of the time period in which the marketing authorization is in the specific status shall be specified A complete date consisting of day, month and year shall be specified using the ISO 8601 date format.
    /// </summary>
    public Period ValidityPeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(ref Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }

      writer.WriteString("resourceType", ResourceType);


      ((Fhir.R4.Models.DomainResource)this).SerializeJson(ref writer, options, false);

      if ((Country != null) && (Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountry in Country)
        {
          valCountry.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DataExclusivityPeriod != null)
      {
        writer.WritePropertyName("dataExclusivityPeriod");
        DataExclusivityPeriod.SerializeJson(ref writer, options);
      }

      writer.WriteString("dateOfFirstAuthorization", DateOfFirstAuthorization);

      if (_DateOfFirstAuthorization != null)
      {
        writer.WritePropertyName("_dateOfFirstAuthorization");
        _DateOfFirstAuthorization.SerializeJson(ref writer, options);
      }

      if (Holder != null)
      {
        writer.WritePropertyName("holder");
        Holder.SerializeJson(ref writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      writer.WriteString("internationalBirthDate", InternationalBirthDate);

      if (_InternationalBirthDate != null)
      {
        writer.WritePropertyName("_internationalBirthDate");
        _InternationalBirthDate.SerializeJson(ref writer, options);
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((JurisdictionalAuthorization != null) && (JurisdictionalAuthorization.Count != 0))
      {
        writer.WritePropertyName("jurisdictionalAuthorization");
        writer.WriteStartArray();

        foreach (MedicinalProductAuthorizationJurisdictionalAuthorization valJurisdictionalAuthorization in JurisdictionalAuthorization)
        {
          valJurisdictionalAuthorization.SerializeJson(ref writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (LegalBasis != null)
      {
        writer.WritePropertyName("legalBasis");
        LegalBasis.SerializeJson(ref writer, options);
      }

      if (Procedure != null)
      {
        writer.WritePropertyName("procedure");
        Procedure.SerializeJson(ref writer, options);
      }

      if (Regulator != null)
      {
        writer.WritePropertyName("regulator");
        Regulator.SerializeJson(ref writer, options);
      }

      writer.WriteString("restoreDate", RestoreDate);

      if (_RestoreDate != null)
      {
        writer.WritePropertyName("_restoreDate");
        _RestoreDate.SerializeJson(ref writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(ref writer, options);
      }

      writer.WriteString("statusDate", StatusDate);

      if (_StatusDate != null)
      {
        writer.WritePropertyName("_statusDate");
        _StatusDate.SerializeJson(ref writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(ref writer, options);
      }

      if (ValidityPeriod != null)
      {
        writer.WritePropertyName("validityPeriod");
        ValidityPeriod.SerializeJson(ref writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objCountry = new Fhir.R4.Models.CodeableConcept();
            objCountry.DeserializeJson(ref reader, options);
            Country.Add(objCountry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Country.Count == 0)
          {
            Country = null;
          }

          break;

        case "dataExclusivityPeriod":
          DataExclusivityPeriod = new Fhir.R4.Models.Period();
          DataExclusivityPeriod.DeserializeJson(ref reader, options);
          break;

        case "dateOfFirstAuthorization":
          DateOfFirstAuthorization = reader.GetString();
          break;

        case "_dateOfFirstAuthorization":
          _DateOfFirstAuthorization = new Fhir.R4.Models.Element();
          _DateOfFirstAuthorization.DeserializeJson(ref reader, options);
          break;

        case "holder":
          Holder = new Fhir.R4.Models.Reference();
          Holder.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "internationalBirthDate":
          InternationalBirthDate = reader.GetString();
          break;

        case "_internationalBirthDate":
          _InternationalBirthDate = new Fhir.R4.Models.Element();
          _InternationalBirthDate.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objJurisdiction = new Fhir.R4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "jurisdictionalAuthorization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          JurisdictionalAuthorization = new List<MedicinalProductAuthorizationJurisdictionalAuthorization>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.MedicinalProductAuthorizationJurisdictionalAuthorization objJurisdictionalAuthorization = new Fhir.R4.Models.MedicinalProductAuthorizationJurisdictionalAuthorization();
            objJurisdictionalAuthorization.DeserializeJson(ref reader, options);
            JurisdictionalAuthorization.Add(objJurisdictionalAuthorization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (JurisdictionalAuthorization.Count == 0)
          {
            JurisdictionalAuthorization = null;
          }

          break;

        case "legalBasis":
          LegalBasis = new Fhir.R4.Models.CodeableConcept();
          LegalBasis.DeserializeJson(ref reader, options);
          break;

        case "procedure":
          Procedure = new Fhir.R4.Models.MedicinalProductAuthorizationProcedure();
          Procedure.DeserializeJson(ref reader, options);
          break;

        case "regulator":
          Regulator = new Fhir.R4.Models.Reference();
          Regulator.DeserializeJson(ref reader, options);
          break;

        case "restoreDate":
          RestoreDate = reader.GetString();
          break;

        case "_restoreDate":
          _RestoreDate = new Fhir.R4.Models.Element();
          _RestoreDate.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new Fhir.R4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          StatusDate = reader.GetString();
          break;

        case "_statusDate":
          _StatusDate = new Fhir.R4.Models.Element();
          _StatusDate.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new Fhir.R4.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "validityPeriod":
          ValidityPeriod = new Fhir.R4.Models.Period();
          ValidityPeriod.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
