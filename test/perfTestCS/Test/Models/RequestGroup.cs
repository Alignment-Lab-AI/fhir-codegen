// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<RequestGroupActionCondition>))]
  public class RequestGroupActionCondition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public Expression Expression { get; set; }
    /// <summary>
    /// Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "expression":
          Expression = new Fhir.R4.Models.Expression();
          Expression.DeserializeJson(ref reader, options);
          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new Fhir.R4.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A relationship to another action such as "before" or "30-60 minutes after start of".
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<RequestGroupActionRelatedAction>))]
  public class RequestGroupActionRelatedAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The element id of the action this is related to.
    /// </summary>
    public string ActionId { get; set; }
    /// <summary>
    /// Extension container element for ActionId
    /// </summary>
    public Element _ActionId { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Duration OffsetDuration { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Range OffsetRange { get; set; }
    /// <summary>
    /// The relationship of this action to the related action.
    /// </summary>
    public string Relationship { get; set; }
    /// <summary>
    /// Extension container element for Relationship
    /// </summary>
    public Element _Relationship { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actionId":
          ActionId = reader.GetString();
          break;

        case "_actionId":
          _ActionId = new Fhir.R4.Models.Element();
          _ActionId.DeserializeJson(ref reader, options);
          break;

        case "offsetDuration":
          OffsetDuration = new Fhir.R4.Models.Duration();
          OffsetDuration.DeserializeJson(ref reader, options);
          break;

        case "offsetRange":
          OffsetRange = new Fhir.R4.Models.Range();
          OffsetRange.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = reader.GetString();
          break;

        case "_relationship":
          _Relationship = new Fhir.R4.Models.Element();
          _Relationship.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The actions, if any, produced by the evaluation of the artifact.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<RequestGroupAction>))]
  public class RequestGroupAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Sub actions.
    /// </summary>
    public List<RequestGroupAction> Action { get; set; }
    /// <summary>
    /// Defines whether the action can be selected multiple times.
    /// </summary>
    public string CardinalityBehavior { get; set; }
    /// <summary>
    /// Extension container element for CardinalityBehavior
    /// </summary>
    public Element _CardinalityBehavior { get; set; }
    /// <summary>
    /// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
    /// </summary>
    public List<RequestGroupActionCondition> Condition { get; set; }
    /// <summary>
    /// A short description of the action used to provide a summary to display to the user.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
    /// </summary>
    public List<RelatedArtifact> Documentation { get; set; }
    /// <summary>
    /// Defines the grouping behavior for the action and its children.
    /// </summary>
    public string GroupingBehavior { get; set; }
    /// <summary>
    /// Extension container element for GroupingBehavior
    /// </summary>
    public Element _GroupingBehavior { get; set; }
    /// <summary>
    /// The participant that should perform or be responsible for this action.
    /// </summary>
    public List<Reference> Participant { get; set; }
    /// <summary>
    /// Defines whether the action should usually be preselected.
    /// </summary>
    public string PrecheckBehavior { get; set; }
    /// <summary>
    /// Extension container element for PrecheckBehavior
    /// </summary>
    public Element _PrecheckBehavior { get; set; }
    /// <summary>
    /// A user-visible prefix for the action.
    /// </summary>
    public string Prefix { get; set; }
    /// <summary>
    /// Extension container element for Prefix
    /// </summary>
    public Element _Prefix { get; set; }
    /// <summary>
    /// Indicates how quickly the action should be addressed with respect to other actions.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// A relationship to another action such as "before" or "30-60 minutes after start of".
    /// </summary>
    public List<RequestGroupActionRelatedAction> RelatedAction { get; set; }
    /// <summary>
    /// Defines expectations around whether an action is required.
    /// </summary>
    public string RequiredBehavior { get; set; }
    /// <summary>
    /// Extension container element for RequiredBehavior
    /// </summary>
    public Element _RequiredBehavior { get; set; }
    /// <summary>
    /// The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
    /// </summary>
    public Reference Resource { get; set; }
    /// <summary>
    /// Defines the selection behavior for the action and its children.
    /// </summary>
    public string SelectionBehavior { get; set; }
    /// <summary>
    /// Extension container element for SelectionBehavior
    /// </summary>
    public Element _SelectionBehavior { get; set; }
    /// <summary>
    /// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
    /// </summary>
    public string TextEquivalent { get; set; }
    /// <summary>
    /// Extension container element for TextEquivalent
    /// </summary>
    public Element _TextEquivalent { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public string TimingDateTime { get; set; }
    /// <summary>
    /// Extension container element for TimingDateTime
    /// </summary>
    public Element _TimingDateTime { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Age TimingAge { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Duration TimingDuration { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Range TimingRange { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// The title of the action displayed to a user.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// The type of action to perform (create, update, remove).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<RequestGroupAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.RequestGroupAction objAction = new Fhir.R4.Models.RequestGroupAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "cardinalityBehavior":
          CardinalityBehavior = reader.GetString();
          break;

        case "_cardinalityBehavior":
          _CardinalityBehavior = new Fhir.R4.Models.Element();
          _CardinalityBehavior.DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objCode = new Fhir.R4.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<RequestGroupActionCondition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.RequestGroupActionCondition objCondition = new Fhir.R4.Models.RequestGroupActionCondition();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new Fhir.R4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.RelatedArtifact objDocumentation = new Fhir.R4.Models.RelatedArtifact();
            objDocumentation.DeserializeJson(ref reader, options);
            Documentation.Add(objDocumentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Documentation.Count == 0)
          {
            Documentation = null;
          }

          break;

        case "groupingBehavior":
          GroupingBehavior = reader.GetString();
          break;

        case "_groupingBehavior":
          _GroupingBehavior = new Fhir.R4.Models.Element();
          _GroupingBehavior.DeserializeJson(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objParticipant = new Fhir.R4.Models.Reference();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "precheckBehavior":
          PrecheckBehavior = reader.GetString();
          break;

        case "_precheckBehavior":
          _PrecheckBehavior = new Fhir.R4.Models.Element();
          _PrecheckBehavior.DeserializeJson(ref reader, options);
          break;

        case "prefix":
          Prefix = reader.GetString();
          break;

        case "_prefix":
          _Prefix = new Fhir.R4.Models.Element();
          _Prefix.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new Fhir.R4.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "relatedAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedAction = new List<RequestGroupActionRelatedAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.RequestGroupActionRelatedAction objRelatedAction = new Fhir.R4.Models.RequestGroupActionRelatedAction();
            objRelatedAction.DeserializeJson(ref reader, options);
            RelatedAction.Add(objRelatedAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedAction.Count == 0)
          {
            RelatedAction = null;
          }

          break;

        case "requiredBehavior":
          RequiredBehavior = reader.GetString();
          break;

        case "_requiredBehavior":
          _RequiredBehavior = new Fhir.R4.Models.Element();
          _RequiredBehavior.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = new Fhir.R4.Models.Reference();
          Resource.DeserializeJson(ref reader, options);
          break;

        case "selectionBehavior":
          SelectionBehavior = reader.GetString();
          break;

        case "_selectionBehavior":
          _SelectionBehavior = new Fhir.R4.Models.Element();
          _SelectionBehavior.DeserializeJson(ref reader, options);
          break;

        case "textEquivalent":
          TextEquivalent = reader.GetString();
          break;

        case "_textEquivalent":
          _TextEquivalent = new Fhir.R4.Models.Element();
          _TextEquivalent.DeserializeJson(ref reader, options);
          break;

        case "timingDateTime":
          TimingDateTime = reader.GetString();
          break;

        case "_timingDateTime":
          _TimingDateTime = new Fhir.R4.Models.Element();
          _TimingDateTime.DeserializeJson(ref reader, options);
          break;

        case "timingAge":
          TimingAge = new Fhir.R4.Models.Age();
          TimingAge.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new Fhir.R4.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "timingDuration":
          TimingDuration = new Fhir.R4.Models.Duration();
          TimingDuration.DeserializeJson(ref reader, options);
          break;

        case "timingRange":
          TimingRange = new Fhir.R4.Models.Range();
          TimingRange.DeserializeJson(ref reader, options);
          break;

        case "timingTiming":
          TimingTiming = new Fhir.R4.Models.Timing();
          TimingTiming.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new Fhir.R4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new Fhir.R4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class RequestGroup : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "RequestGroup";
    /// <summary>
    /// The actions, if any, produced by the evaluation of the artifact.
    /// </summary>
    public List<RequestGroupAction> Action { get; set; }
    /// <summary>
    /// Provides a reference to the author of the request group.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// Indicates when the request group was created.
    /// </summary>
    public string AuthoredOn { get; set; }
    /// <summary>
    /// Extension container element for AuthoredOn
    /// </summary>
    public Element _AuthoredOn { get; set; }
    /// <summary>
    /// A plan, proposal or order that is fulfilled in whole or in part by this request.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// This element can be used to provide a code that captures the meaning of the request group as a whole, as opposed to the code of the action element, which captures the meaning of the individual actions within the request group.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Describes the context of the request group, if any.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
    /// </summary>
    public Identifier GroupIdentifier { get; set; }
    /// <summary>
    /// Allows a service to provide a unique, business identifier for the request.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
    /// </summary>
    public List<string> InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public List<Element> _InstantiatesCanonical { get; set; }
    /// <summary>
    /// A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
    /// </summary>
    public List<string> InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public List<Element> _InstantiatesUri { get; set; }
    /// <summary>
    /// Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// Provides a mechanism to communicate additional information about the response.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Indicates how quickly the request should be addressed with respect to other requests.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// Describes the reason for the request group in coded or textual form.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// Indicates another resource whose existence justifies this request group.
    /// </summary>
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
    /// </summary>
    public List<Reference> Replaces { get; set; }
    /// <summary>
    /// The current state of the request. For request groups, the status reflects the status of all the requests in the group.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The subject for which the request group was created.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<RequestGroupAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.RequestGroupAction objAction = new Fhir.R4.Models.RequestGroupAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "author":
          Author = new Fhir.R4.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "authoredOn":
          AuthoredOn = reader.GetString();
          break;

        case "_authoredOn":
          _AuthoredOn = new Fhir.R4.Models.Element();
          _AuthoredOn.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objBasedOn = new Fhir.R4.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "code":
          Code = new Fhir.R4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new Fhir.R4.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "groupIdentifier":
          GroupIdentifier = new Fhir.R4.Models.Identifier();
          GroupIdentifier.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesCanonical = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesCanonical.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesCanonical.Count == 0)
          {
            InstantiatesCanonical = null;
          }

          break;

        case "_instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesCanonical = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_InstantiatesCanonical = new Fhir.R4.Models.Element();
            obj_InstantiatesCanonical.DeserializeJson(ref reader, options);
            _InstantiatesCanonical.Add(obj_InstantiatesCanonical);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesCanonical.Count == 0)
          {
            _InstantiatesCanonical = null;
          }

          break;

        case "instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesUri = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesUri.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesUri.Count == 0)
          {
            InstantiatesUri = null;
          }

          break;

        case "_instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesUri = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_InstantiatesUri = new Fhir.R4.Models.Element();
            obj_InstantiatesUri.DeserializeJson(ref reader, options);
            _InstantiatesUri.Add(obj_InstantiatesUri);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesUri.Count == 0)
          {
            _InstantiatesUri = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new Fhir.R4.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Annotation objNote = new Fhir.R4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new Fhir.R4.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objReasonCode = new Fhir.R4.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objReasonReference = new Fhir.R4.Models.Reference();
            objReasonReference.DeserializeJson(ref reader, options);
            ReasonReference.Add(objReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonReference.Count == 0)
          {
            ReasonReference = null;
          }

          break;

        case "replaces":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Replaces = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objReplaces = new Fhir.R4.Models.Reference();
            objReplaces.DeserializeJson(ref reader, options);
            Replaces.Add(objReplaces);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Replaces.Count == 0)
          {
            Replaces = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new Fhir.R4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new Fhir.R4.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
