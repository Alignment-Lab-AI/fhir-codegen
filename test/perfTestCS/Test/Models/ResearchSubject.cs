// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// A physical entity which is the primary unit of operational and/or administrative interest in a study.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class ResearchSubject : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "ResearchSubject";
    /// <summary>
    /// The name of the arm in the study the subject actually followed as part of this study.
    /// </summary>
    public string ActualArm { get; set; }
    /// <summary>
    /// Extension container element for ActualArm
    /// </summary>
    public Element _ActualArm { get; set; }
    /// <summary>
    /// The name of the arm in the study the subject is expected to follow as part of this study.
    /// </summary>
    public string AssignedArm { get; set; }
    /// <summary>
    /// Extension container element for AssignedArm
    /// </summary>
    public Element _AssignedArm { get; set; }
    /// <summary>
    /// A record of the patient's informed agreement to participate in the study.
    /// </summary>
    public Reference Consent { get; set; }
    /// <summary>
    /// Identifiers assigned to this research subject for a study.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The record of the person or animal who is involved in the study.
    /// </summary>
    public Reference Individual { get; set; }
    /// <summary>
    /// The dates the subject began and ended their participation in the study.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// The current state of the subject.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Reference to the study the subject is participating in.
    /// </summary>
    public Reference Study { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actualArm":
          ActualArm = reader.GetString();
          break;

        case "_actualArm":
          _ActualArm = new Fhir.R4.Models.Element();
          _ActualArm.DeserializeJson(ref reader, options);
          break;

        case "assignedArm":
          AssignedArm = reader.GetString();
          break;

        case "_assignedArm":
          _AssignedArm = new Fhir.R4.Models.Element();
          _AssignedArm.DeserializeJson(ref reader, options);
          break;

        case "consent":
          Consent = new Fhir.R4.Models.Reference();
          Consent.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "individual":
          Individual = new Fhir.R4.Models.Reference();
          Individual.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new Fhir.R4.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new Fhir.R4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "study":
          Study = new Fhir.R4.Models.Reference();
          Study.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
