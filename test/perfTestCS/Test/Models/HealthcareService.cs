// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.ValueSets;
using Fhir.R4.Serialization;

namespace Fhir.R4.Models
{
  /// <summary>
  /// Does this service have specific eligibility requirements that need to be met in order to use the service?
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<HealthcareServiceEligibility>))]
  public class HealthcareServiceEligibility : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coded value for the eligibility.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The description of service eligibility should, in general, not exceed one or two paragraphs. It should be sufficient for a prospective consumer to determine if they are likely to be eligible or not. Where eligibility requirements and conditions are complex, it may simply be noted that an eligibility assessment is required. Where eligibility is determined by an outside source, such as an Act of Parliament, this should be noted, preferably with a reference to a commonly available copy of the source document such as a web page.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new Fhir.R4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new Fhir.R4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// More detailed availability information may be provided in associated Schedule/Slot resources.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<HealthcareServiceAvailableTime>))]
  public class HealthcareServiceAvailableTime : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
    /// </summary>
    public bool? AllDay { get; set; }
    /// <summary>
    /// The time zone is expected to be for where this HealthcareService is provided at.
    /// </summary>
    public string AvailableEndTime { get; set; }
    /// <summary>
    /// Extension container element for AvailableEndTime
    /// </summary>
    public Element _AvailableEndTime { get; set; }
    /// <summary>
    /// The time zone is expected to be for where this HealthcareService is provided at.
    /// </summary>
    public string AvailableStartTime { get; set; }
    /// <summary>
    /// Extension container element for AvailableStartTime
    /// </summary>
    public Element _AvailableStartTime { get; set; }
    /// <summary>
    /// Indicates which days of the week are available between the start and end Times.
    /// </summary>
    public List<string> DaysOfWeek { get; set; }
    /// <summary>
    /// Extension container element for DaysOfWeek
    /// </summary>
    public List<Element> _DaysOfWeek { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allDay":
          AllDay = reader.GetBoolean();
          break;

        case "availableEndTime":
          AvailableEndTime = reader.GetString();
          break;

        case "_availableEndTime":
          _AvailableEndTime = new Fhir.R4.Models.Element();
          _AvailableEndTime.DeserializeJson(ref reader, options);
          break;

        case "availableStartTime":
          AvailableStartTime = reader.GetString();
          break;

        case "_availableStartTime":
          _AvailableStartTime = new Fhir.R4.Models.Element();
          _AvailableStartTime.DeserializeJson(ref reader, options);
          break;

        case "daysOfWeek":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DaysOfWeek = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DaysOfWeek.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DaysOfWeek.Count == 0)
          {
            DaysOfWeek = null;
          }

          break;

        case "_daysOfWeek":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _DaysOfWeek = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Element obj_DaysOfWeek = new Fhir.R4.Models.Element();
            obj_DaysOfWeek.DeserializeJson(ref reader, options);
            _DaysOfWeek.Add(obj_DaysOfWeek);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_DaysOfWeek.Count == 0)
          {
            _DaysOfWeek = null;
          }

          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The HealthcareService is not available during this period of time due to the provided reason.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonComponentConverter<HealthcareServiceNotAvailable>))]
  public class HealthcareServiceNotAvailable : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The reason that can be presented to the user as to why this time is not available.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Service is not available (seasonally or for a public holiday) from this date.
    /// </summary>
    public Period During { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new Fhir.R4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "during":
          During = new Fhir.R4.Models.Period();
          During.DeserializeJson(ref reader, options);
          break;

        default:
          ((Fhir.R4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The details of a healthcare service available at a location.
  /// </summary>
  [JsonConverter(typeof(Fhir.R4.Serialization.JsonResourceConverter))]
  public class HealthcareService : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public string ResourceType => "HealthcareService";
    /// <summary>
    /// This element is labeled as a modifier because it may be used to mark that the resource was created in error.
    /// </summary>
    public bool? Active { get; set; }
    /// <summary>
    /// Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
    /// </summary>
    public bool? AppointmentRequired { get; set; }
    /// <summary>
    /// A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
    /// </summary>
    public string AvailabilityExceptions { get; set; }
    /// <summary>
    /// Extension container element for AvailabilityExceptions
    /// </summary>
    public Element _AvailabilityExceptions { get; set; }
    /// <summary>
    /// More detailed availability information may be provided in associated Schedule/Slot resources.
    /// </summary>
    public List<HealthcareServiceAvailableTime> AvailableTime { get; set; }
    /// <summary>
    /// Selecting a Service Category then determines the list of relevant service types that can be selected in the primary service type.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// These could be such things as is wheelchair accessible.
    /// </summary>
    public List<CodeableConcept> Characteristic { get; set; }
    /// <summary>
    /// Would expect that a user would not see this information on a search results, and it would only be available when viewing the complete details of the service.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// When using this property it indicates that the service is available with this language, it is not derived from the practitioners, and not all are required to use this language, just that this language is available while scheduling.
    /// </summary>
    public List<CodeableConcept> Communication { get; set; }
    /// <summary>
    /// The locations referenced by the coverage area can include both specific locations, including areas, and also conceptual domains too (mode = kind), such as a physical area (tri-state area) and some other attribute (covered by Example Care Organization). These types of Locations are often not managed by any specific organization. This could also include generic locations such as "in-home".
    /// </summary>
    public List<Reference> CoverageArea { get; set; }
    /// <summary>
    /// Does this service have specific eligibility requirements that need to be met in order to use the service?
    /// </summary>
    public List<HealthcareServiceEligibility> Eligibility { get; set; }
    /// <summary>
    /// Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// Extra details about the service that can't be placed in the other fields.
    /// </summary>
    public string ExtraDetails { get; set; }
    /// <summary>
    /// Extension container element for ExtraDetails
    /// </summary>
    public Element _ExtraDetails { get; set; }
    /// <summary>
    /// External identifiers for this item.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The location(s) where this healthcare service may be provided.
    /// </summary>
    public List<Reference> Location { get; set; }
    /// <summary>
    /// Further description of the service as it would be presented to a consumer while searching.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The HealthcareService is not available during this period of time due to the provided reason.
    /// </summary>
    public List<HealthcareServiceNotAvailable> NotAvailable { get; set; }
    /// <summary>
    /// If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
    /// </summary>
    public Attachment Photo { get; set; }
    /// <summary>
    /// Programs are often defined externally to an Organization, commonly by governments; e.g. Home and Community Care Programs, Homeless Program, ….
    /// </summary>
    public List<CodeableConcept> Program { get; set; }
    /// <summary>
    /// This property is recommended to be the same as the Location's managingOrganization, and if not provided should be interpreted as such. If the Location does not have a managing Organization, then this property should be populated.
    /// </summary>
    public Reference ProvidedBy { get; set; }
    /// <summary>
    /// Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
    /// </summary>
    public List<CodeableConcept> ReferralMethod { get; set; }
    /// <summary>
    /// The provision means being commissioned by, contractually obliged or financially sourced. Types of costings that may apply to this healthcare service, such if the service may be available for free, some discounts available, or fees apply.
    /// </summary>
    public List<CodeableConcept> ServiceProvisionCode { get; set; }
    /// <summary>
    /// Collection of specialties handled by the service site. This is more of a medical term.
    /// </summary>
    public List<CodeableConcept> Specialty { get; set; }
    /// <summary>
    /// If this is empty, then refer to the location's contacts.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// The specific type of service that may be delivered or performed.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "active":
          Active = reader.GetBoolean();
          break;

        case "appointmentRequired":
          AppointmentRequired = reader.GetBoolean();
          break;

        case "availabilityExceptions":
          AvailabilityExceptions = reader.GetString();
          break;

        case "_availabilityExceptions":
          _AvailabilityExceptions = new Fhir.R4.Models.Element();
          _AvailabilityExceptions.DeserializeJson(ref reader, options);
          break;

        case "availableTime":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AvailableTime = new List<HealthcareServiceAvailableTime>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.HealthcareServiceAvailableTime objAvailableTime = new Fhir.R4.Models.HealthcareServiceAvailableTime();
            objAvailableTime.DeserializeJson(ref reader, options);
            AvailableTime.Add(objAvailableTime);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AvailableTime.Count == 0)
          {
            AvailableTime = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objCategory = new Fhir.R4.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "characteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Characteristic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objCharacteristic = new Fhir.R4.Models.CodeableConcept();
            objCharacteristic.DeserializeJson(ref reader, options);
            Characteristic.Add(objCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Characteristic.Count == 0)
          {
            Characteristic = null;
          }

          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new Fhir.R4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "communication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Communication = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objCommunication = new Fhir.R4.Models.CodeableConcept();
            objCommunication.DeserializeJson(ref reader, options);
            Communication.Add(objCommunication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Communication.Count == 0)
          {
            Communication = null;
          }

          break;

        case "coverageArea":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CoverageArea = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objCoverageArea = new Fhir.R4.Models.Reference();
            objCoverageArea.DeserializeJson(ref reader, options);
            CoverageArea.Add(objCoverageArea);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CoverageArea.Count == 0)
          {
            CoverageArea = null;
          }

          break;

        case "eligibility":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Eligibility = new List<HealthcareServiceEligibility>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.HealthcareServiceEligibility objEligibility = new Fhir.R4.Models.HealthcareServiceEligibility();
            objEligibility.DeserializeJson(ref reader, options);
            Eligibility.Add(objEligibility);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Eligibility.Count == 0)
          {
            Eligibility = null;
          }

          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objEndpoint = new Fhir.R4.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "extraDetails":
          ExtraDetails = reader.GetString();
          break;

        case "_extraDetails":
          _ExtraDetails = new Fhir.R4.Models.Element();
          _ExtraDetails.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Identifier objIdentifier = new Fhir.R4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "location":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Location = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.Reference objLocation = new Fhir.R4.Models.Reference();
            objLocation.DeserializeJson(ref reader, options);
            Location.Add(objLocation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Location.Count == 0)
          {
            Location = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new Fhir.R4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "notAvailable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NotAvailable = new List<HealthcareServiceNotAvailable>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.HealthcareServiceNotAvailable objNotAvailable = new Fhir.R4.Models.HealthcareServiceNotAvailable();
            objNotAvailable.DeserializeJson(ref reader, options);
            NotAvailable.Add(objNotAvailable);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NotAvailable.Count == 0)
          {
            NotAvailable = null;
          }

          break;

        case "photo":
          Photo = new Fhir.R4.Models.Attachment();
          Photo.DeserializeJson(ref reader, options);
          break;

        case "program":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Program = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objProgram = new Fhir.R4.Models.CodeableConcept();
            objProgram.DeserializeJson(ref reader, options);
            Program.Add(objProgram);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Program.Count == 0)
          {
            Program = null;
          }

          break;

        case "providedBy":
          ProvidedBy = new Fhir.R4.Models.Reference();
          ProvidedBy.DeserializeJson(ref reader, options);
          break;

        case "referralMethod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReferralMethod = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objReferralMethod = new Fhir.R4.Models.CodeableConcept();
            objReferralMethod.DeserializeJson(ref reader, options);
            ReferralMethod.Add(objReferralMethod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReferralMethod.Count == 0)
          {
            ReferralMethod = null;
          }

          break;

        case "serviceProvisionCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ServiceProvisionCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objServiceProvisionCode = new Fhir.R4.Models.CodeableConcept();
            objServiceProvisionCode.DeserializeJson(ref reader, options);
            ServiceProvisionCode.Add(objServiceProvisionCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ServiceProvisionCode.Count == 0)
          {
            ServiceProvisionCode = null;
          }

          break;

        case "specialty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialty = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objSpecialty = new Fhir.R4.Models.CodeableConcept();
            objSpecialty.DeserializeJson(ref reader, options);
            Specialty.Add(objSpecialty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialty.Count == 0)
          {
            Specialty = null;
          }

          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.ContactPoint objTelecom = new Fhir.R4.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir.R4.Models.CodeableConcept objType = new Fhir.R4.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((Fhir.R4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
