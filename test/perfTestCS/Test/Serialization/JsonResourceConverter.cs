// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Fhir.R4.Models;

namespace Fhir.R4.Serialization
{
  /// <summary>
  /// Common resource converter to support polymorphic deserialization.
  /// </summary>
  public class JsonResourceConverter : JsonConverter<Resource>
  {
    /// <summary>
    /// Determines whether the specified type can be converted.
    /// </summary>
    public override bool CanConvert(Type objectType) =>
      typeof(Resource).IsAssignableFrom(objectType);

    /// <summary>
    /// Writes a specified value as JSON.
    /// </summary>
    public override void Write(Utf8JsonWriter writer, Resource resource, JsonSerializerOptions options)
    {
    }
    /// <summary>
    /// Reads and converts the JSON to a typed object.
    /// </summary>
    public override Resource Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      return PolymorphicRead(ref reader, typeToConvert, options);
    }
    /// <summary>
    /// Read override to handle polymorphic reading of resources (allowing for open reader).
    /// </summary>
    public static Resource PolymorphicRead(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      if (reader.TokenType != JsonTokenType.StartObject)
      {
        throw new JsonException();
      }

      reader.Read();
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      string propertyName = reader.GetString();
      if (propertyName != "resourceType")
      {
        throw new JsonException();
      }

      reader.Read();
      if (reader.TokenType != JsonTokenType.String)
      {
        throw new JsonException();
      }

      string resourceType = reader.GetString();
      IFhirJsonSerializable target = null;
      switch (resourceType)
      {
        case "Account":
          target = new Fhir.R4.Models.Account();
          target.DeserializeJson(ref reader, options);
          break;
        case "ActivityDefinition":
          target = new Fhir.R4.Models.ActivityDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "AdverseEvent":
          target = new Fhir.R4.Models.AdverseEvent();
          target.DeserializeJson(ref reader, options);
          break;
        case "AllergyIntolerance":
          target = new Fhir.R4.Models.AllergyIntolerance();
          target.DeserializeJson(ref reader, options);
          break;
        case "Appointment":
          target = new Fhir.R4.Models.Appointment();
          target.DeserializeJson(ref reader, options);
          break;
        case "AppointmentResponse":
          target = new Fhir.R4.Models.AppointmentResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "AuditEvent":
          target = new Fhir.R4.Models.AuditEvent();
          target.DeserializeJson(ref reader, options);
          break;
        case "Basic":
          target = new Fhir.R4.Models.Basic();
          target.DeserializeJson(ref reader, options);
          break;
        case "Binary":
          target = new Fhir.R4.Models.Binary();
          target.DeserializeJson(ref reader, options);
          break;
        case "BiologicallyDerivedProduct":
          target = new Fhir.R4.Models.BiologicallyDerivedProduct();
          target.DeserializeJson(ref reader, options);
          break;
        case "BodyStructure":
          target = new Fhir.R4.Models.BodyStructure();
          target.DeserializeJson(ref reader, options);
          break;
        case "Bundle":
          target = new Fhir.R4.Models.Bundle();
          target.DeserializeJson(ref reader, options);
          break;
        case "CapabilityStatement":
          target = new Fhir.R4.Models.CapabilityStatement();
          target.DeserializeJson(ref reader, options);
          break;
        case "CarePlan":
          target = new Fhir.R4.Models.CarePlan();
          target.DeserializeJson(ref reader, options);
          break;
        case "CareTeam":
          target = new Fhir.R4.Models.CareTeam();
          target.DeserializeJson(ref reader, options);
          break;
        case "CatalogEntry":
          target = new Fhir.R4.Models.CatalogEntry();
          target.DeserializeJson(ref reader, options);
          break;
        case "ChargeItem":
          target = new Fhir.R4.Models.ChargeItem();
          target.DeserializeJson(ref reader, options);
          break;
        case "ChargeItemDefinition":
          target = new Fhir.R4.Models.ChargeItemDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Claim":
          target = new Fhir.R4.Models.Claim();
          target.DeserializeJson(ref reader, options);
          break;
        case "ClaimResponse":
          target = new Fhir.R4.Models.ClaimResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "ClinicalImpression":
          target = new Fhir.R4.Models.ClinicalImpression();
          target.DeserializeJson(ref reader, options);
          break;
        case "CodeSystem":
          target = new Fhir.R4.Models.CodeSystem();
          target.DeserializeJson(ref reader, options);
          break;
        case "Communication":
          target = new Fhir.R4.Models.Communication();
          target.DeserializeJson(ref reader, options);
          break;
        case "CommunicationRequest":
          target = new Fhir.R4.Models.CommunicationRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "CompartmentDefinition":
          target = new Fhir.R4.Models.CompartmentDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Composition":
          target = new Fhir.R4.Models.Composition();
          target.DeserializeJson(ref reader, options);
          break;
        case "ConceptMap":
          target = new Fhir.R4.Models.ConceptMap();
          target.DeserializeJson(ref reader, options);
          break;
        case "Condition":
          target = new Fhir.R4.Models.Condition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Consent":
          target = new Fhir.R4.Models.Consent();
          target.DeserializeJson(ref reader, options);
          break;
        case "Contract":
          target = new Fhir.R4.Models.Contract();
          target.DeserializeJson(ref reader, options);
          break;
        case "Coverage":
          target = new Fhir.R4.Models.Coverage();
          target.DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityRequest":
          target = new Fhir.R4.Models.CoverageEligibilityRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityResponse":
          target = new Fhir.R4.Models.CoverageEligibilityResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "DetectedIssue":
          target = new Fhir.R4.Models.DetectedIssue();
          target.DeserializeJson(ref reader, options);
          break;
        case "Device":
          target = new Fhir.R4.Models.Device();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceDefinition":
          target = new Fhir.R4.Models.DeviceDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceMetric":
          target = new Fhir.R4.Models.DeviceMetric();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceRequest":
          target = new Fhir.R4.Models.DeviceRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceUseStatement":
          target = new Fhir.R4.Models.DeviceUseStatement();
          target.DeserializeJson(ref reader, options);
          break;
        case "DiagnosticReport":
          target = new Fhir.R4.Models.DiagnosticReport();
          target.DeserializeJson(ref reader, options);
          break;
        case "DocumentManifest":
          target = new Fhir.R4.Models.DocumentManifest();
          target.DeserializeJson(ref reader, options);
          break;
        case "DocumentReference":
          target = new Fhir.R4.Models.DocumentReference();
          target.DeserializeJson(ref reader, options);
          break;
        case "EffectEvidenceSynthesis":
          target = new Fhir.R4.Models.EffectEvidenceSynthesis();
          target.DeserializeJson(ref reader, options);
          break;
        case "Encounter":
          target = new Fhir.R4.Models.Encounter();
          target.DeserializeJson(ref reader, options);
          break;
        case "Endpoint":
          target = new Fhir.R4.Models.Endpoint();
          target.DeserializeJson(ref reader, options);
          break;
        case "EnrollmentRequest":
          target = new Fhir.R4.Models.EnrollmentRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "EnrollmentResponse":
          target = new Fhir.R4.Models.EnrollmentResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "EpisodeOfCare":
          target = new Fhir.R4.Models.EpisodeOfCare();
          target.DeserializeJson(ref reader, options);
          break;
        case "EventDefinition":
          target = new Fhir.R4.Models.EventDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Evidence":
          target = new Fhir.R4.Models.Evidence();
          target.DeserializeJson(ref reader, options);
          break;
        case "EvidenceVariable":
          target = new Fhir.R4.Models.EvidenceVariable();
          target.DeserializeJson(ref reader, options);
          break;
        case "ExampleScenario":
          target = new Fhir.R4.Models.ExampleScenario();
          target.DeserializeJson(ref reader, options);
          break;
        case "ExplanationOfBenefit":
          target = new Fhir.R4.Models.ExplanationOfBenefit();
          target.DeserializeJson(ref reader, options);
          break;
        case "FamilyMemberHistory":
          target = new Fhir.R4.Models.FamilyMemberHistory();
          target.DeserializeJson(ref reader, options);
          break;
        case "Flag":
          target = new Fhir.R4.Models.Flag();
          target.DeserializeJson(ref reader, options);
          break;
        case "Goal":
          target = new Fhir.R4.Models.Goal();
          target.DeserializeJson(ref reader, options);
          break;
        case "GraphDefinition":
          target = new Fhir.R4.Models.GraphDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Group":
          target = new Fhir.R4.Models.Group();
          target.DeserializeJson(ref reader, options);
          break;
        case "GuidanceResponse":
          target = new Fhir.R4.Models.GuidanceResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "HealthcareService":
          target = new Fhir.R4.Models.HealthcareService();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImagingStudy":
          target = new Fhir.R4.Models.ImagingStudy();
          target.DeserializeJson(ref reader, options);
          break;
        case "Immunization":
          target = new Fhir.R4.Models.Immunization();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImmunizationEvaluation":
          target = new Fhir.R4.Models.ImmunizationEvaluation();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImmunizationRecommendation":
          target = new Fhir.R4.Models.ImmunizationRecommendation();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImplementationGuide":
          target = new Fhir.R4.Models.ImplementationGuide();
          target.DeserializeJson(ref reader, options);
          break;
        case "InsurancePlan":
          target = new Fhir.R4.Models.InsurancePlan();
          target.DeserializeJson(ref reader, options);
          break;
        case "Invoice":
          target = new Fhir.R4.Models.Invoice();
          target.DeserializeJson(ref reader, options);
          break;
        case "Library":
          target = new Fhir.R4.Models.Library();
          target.DeserializeJson(ref reader, options);
          break;
        case "Linkage":
          target = new Fhir.R4.Models.Linkage();
          target.DeserializeJson(ref reader, options);
          break;
        case "List":
          target = new Fhir.R4.Models.List();
          target.DeserializeJson(ref reader, options);
          break;
        case "Location":
          target = new Fhir.R4.Models.Location();
          target.DeserializeJson(ref reader, options);
          break;
        case "Measure":
          target = new Fhir.R4.Models.Measure();
          target.DeserializeJson(ref reader, options);
          break;
        case "MeasureReport":
          target = new Fhir.R4.Models.MeasureReport();
          target.DeserializeJson(ref reader, options);
          break;
        case "Media":
          target = new Fhir.R4.Models.Media();
          target.DeserializeJson(ref reader, options);
          break;
        case "Medication":
          target = new Fhir.R4.Models.Medication();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationAdministration":
          target = new Fhir.R4.Models.MedicationAdministration();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationDispense":
          target = new Fhir.R4.Models.MedicationDispense();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationKnowledge":
          target = new Fhir.R4.Models.MedicationKnowledge();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationRequest":
          target = new Fhir.R4.Models.MedicationRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationStatement":
          target = new Fhir.R4.Models.MedicationStatement();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProduct":
          target = new Fhir.R4.Models.MedicinalProduct();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductAuthorization":
          target = new Fhir.R4.Models.MedicinalProductAuthorization();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductContraindication":
          target = new Fhir.R4.Models.MedicinalProductContraindication();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductIndication":
          target = new Fhir.R4.Models.MedicinalProductIndication();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductIngredient":
          target = new Fhir.R4.Models.MedicinalProductIngredient();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductInteraction":
          target = new Fhir.R4.Models.MedicinalProductInteraction();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductManufactured":
          target = new Fhir.R4.Models.MedicinalProductManufactured();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductPackaged":
          target = new Fhir.R4.Models.MedicinalProductPackaged();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductPharmaceutical":
          target = new Fhir.R4.Models.MedicinalProductPharmaceutical();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductUndesirableEffect":
          target = new Fhir.R4.Models.MedicinalProductUndesirableEffect();
          target.DeserializeJson(ref reader, options);
          break;
        case "MessageDefinition":
          target = new Fhir.R4.Models.MessageDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "MessageHeader":
          target = new Fhir.R4.Models.MessageHeader();
          target.DeserializeJson(ref reader, options);
          break;
        case "MolecularSequence":
          target = new Fhir.R4.Models.MolecularSequence();
          target.DeserializeJson(ref reader, options);
          break;
        case "NamingSystem":
          target = new Fhir.R4.Models.NamingSystem();
          target.DeserializeJson(ref reader, options);
          break;
        case "NutritionOrder":
          target = new Fhir.R4.Models.NutritionOrder();
          target.DeserializeJson(ref reader, options);
          break;
        case "Observation":
          target = new Fhir.R4.Models.Observation();
          target.DeserializeJson(ref reader, options);
          break;
        case "ObservationDefinition":
          target = new Fhir.R4.Models.ObservationDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "OperationDefinition":
          target = new Fhir.R4.Models.OperationDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "OperationOutcome":
          target = new Fhir.R4.Models.OperationOutcome();
          target.DeserializeJson(ref reader, options);
          break;
        case "Organization":
          target = new Fhir.R4.Models.Organization();
          target.DeserializeJson(ref reader, options);
          break;
        case "OrganizationAffiliation":
          target = new Fhir.R4.Models.OrganizationAffiliation();
          target.DeserializeJson(ref reader, options);
          break;
        case "Parameters":
          target = new Fhir.R4.Models.Parameters();
          target.DeserializeJson(ref reader, options);
          break;
        case "Patient":
          target = new Fhir.R4.Models.Patient();
          target.DeserializeJson(ref reader, options);
          break;
        case "PaymentNotice":
          target = new Fhir.R4.Models.PaymentNotice();
          target.DeserializeJson(ref reader, options);
          break;
        case "PaymentReconciliation":
          target = new Fhir.R4.Models.PaymentReconciliation();
          target.DeserializeJson(ref reader, options);
          break;
        case "Person":
          target = new Fhir.R4.Models.Person();
          target.DeserializeJson(ref reader, options);
          break;
        case "PlanDefinition":
          target = new Fhir.R4.Models.PlanDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Practitioner":
          target = new Fhir.R4.Models.Practitioner();
          target.DeserializeJson(ref reader, options);
          break;
        case "PractitionerRole":
          target = new Fhir.R4.Models.PractitionerRole();
          target.DeserializeJson(ref reader, options);
          break;
        case "Procedure":
          target = new Fhir.R4.Models.Procedure();
          target.DeserializeJson(ref reader, options);
          break;
        case "Provenance":
          target = new Fhir.R4.Models.Provenance();
          target.DeserializeJson(ref reader, options);
          break;
        case "Questionnaire":
          target = new Fhir.R4.Models.Questionnaire();
          target.DeserializeJson(ref reader, options);
          break;
        case "QuestionnaireResponse":
          target = new Fhir.R4.Models.QuestionnaireResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "RelatedPerson":
          target = new Fhir.R4.Models.RelatedPerson();
          target.DeserializeJson(ref reader, options);
          break;
        case "RequestGroup":
          target = new Fhir.R4.Models.RequestGroup();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchDefinition":
          target = new Fhir.R4.Models.ResearchDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchElementDefinition":
          target = new Fhir.R4.Models.ResearchElementDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchStudy":
          target = new Fhir.R4.Models.ResearchStudy();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchSubject":
          target = new Fhir.R4.Models.ResearchSubject();
          target.DeserializeJson(ref reader, options);
          break;
        case "RiskAssessment":
          target = new Fhir.R4.Models.RiskAssessment();
          target.DeserializeJson(ref reader, options);
          break;
        case "RiskEvidenceSynthesis":
          target = new Fhir.R4.Models.RiskEvidenceSynthesis();
          target.DeserializeJson(ref reader, options);
          break;
        case "Schedule":
          target = new Fhir.R4.Models.Schedule();
          target.DeserializeJson(ref reader, options);
          break;
        case "SearchParameter":
          target = new Fhir.R4.Models.SearchParameter();
          target.DeserializeJson(ref reader, options);
          break;
        case "ServiceRequest":
          target = new Fhir.R4.Models.ServiceRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "Slot":
          target = new Fhir.R4.Models.Slot();
          target.DeserializeJson(ref reader, options);
          break;
        case "Specimen":
          target = new Fhir.R4.Models.Specimen();
          target.DeserializeJson(ref reader, options);
          break;
        case "SpecimenDefinition":
          target = new Fhir.R4.Models.SpecimenDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "StructureDefinition":
          target = new Fhir.R4.Models.StructureDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "StructureMap":
          target = new Fhir.R4.Models.StructureMap();
          target.DeserializeJson(ref reader, options);
          break;
        case "Subscription":
          target = new Fhir.R4.Models.Subscription();
          target.DeserializeJson(ref reader, options);
          break;
        case "Substance":
          target = new Fhir.R4.Models.Substance();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubstanceNucleicAcid":
          target = new Fhir.R4.Models.SubstanceNucleicAcid();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubstancePolymer":
          target = new Fhir.R4.Models.SubstancePolymer();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubstanceProtein":
          target = new Fhir.R4.Models.SubstanceProtein();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubstanceReferenceInformation":
          target = new Fhir.R4.Models.SubstanceReferenceInformation();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubstanceSourceMaterial":
          target = new Fhir.R4.Models.SubstanceSourceMaterial();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubstanceSpecification":
          target = new Fhir.R4.Models.SubstanceSpecification();
          target.DeserializeJson(ref reader, options);
          break;
        case "SupplyDelivery":
          target = new Fhir.R4.Models.SupplyDelivery();
          target.DeserializeJson(ref reader, options);
          break;
        case "SupplyRequest":
          target = new Fhir.R4.Models.SupplyRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "Task":
          target = new Fhir.R4.Models.Task();
          target.DeserializeJson(ref reader, options);
          break;
        case "TerminologyCapabilities":
          target = new Fhir.R4.Models.TerminologyCapabilities();
          target.DeserializeJson(ref reader, options);
          break;
        case "TestReport":
          target = new Fhir.R4.Models.TestReport();
          target.DeserializeJson(ref reader, options);
          break;
        case "TestScript":
          target = new Fhir.R4.Models.TestScript();
          target.DeserializeJson(ref reader, options);
          break;
        case "ValueSet":
          target = new Fhir.R4.Models.ValueSet();
          target.DeserializeJson(ref reader, options);
          break;
        case "VerificationResult":
          target = new Fhir.R4.Models.VerificationResult();
          target.DeserializeJson(ref reader, options);
          break;
        case "VisionPrescription":
          target = new Fhir.R4.Models.VisionPrescription();
          target.DeserializeJson(ref reader, options);
          break;
        default:
          target = new Fhir.R4.Models.Resource();
          target.DeserializeJson(ref reader, options);
          break;
      }

      return (Resource)target;
    }
  }
}
