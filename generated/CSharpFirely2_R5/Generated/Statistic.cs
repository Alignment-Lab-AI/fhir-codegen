// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 4.5.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Single statistic
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Statistic")]
  public partial class Statistic : Hl7.Fhir.Model.BackboneType
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Statistic"; } }

    /// <summary>
    /// Number of samples in the statistic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Statistic#SampleSize", IsNestedType=true)]
    public partial class SampleSizeComponent : Hl7.Fhir.Model.Element
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Statistic#SampleSize"; } }

      /// <summary>
      /// Textual description of sample size for statistic
      /// </summary>
      [FhirElement("description", InSummary=true, Order=30)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Textual description of sample size for statistic
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnote or explanatory note about the sample size
      /// </summary>
      [FhirElement("note", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// Number of contributing studies
      /// </summary>
      [FhirElement("numberOfStudies", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Integer NumberOfStudiesElement
      {
        get { return _NumberOfStudiesElement; }
        set { _NumberOfStudiesElement = value; OnPropertyChanged("NumberOfStudiesElement"); }
      }

      private Hl7.Fhir.Model.Integer _NumberOfStudiesElement;

      /// <summary>
      /// Number of contributing studies
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberOfStudies
      {
        get { return NumberOfStudiesElement != null ? NumberOfStudiesElement.Value : null; }
        set
        {
          if (value == null)
            NumberOfStudiesElement = null;
          else
            NumberOfStudiesElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("NumberOfStudies");
        }
      }

      /// <summary>
      /// Cumulative number of participants
      /// </summary>
      [FhirElement("numberOfParticipants", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer NumberOfParticipantsElement
      {
        get { return _NumberOfParticipantsElement; }
        set { _NumberOfParticipantsElement = value; OnPropertyChanged("NumberOfParticipantsElement"); }
      }

      private Hl7.Fhir.Model.Integer _NumberOfParticipantsElement;

      /// <summary>
      /// Cumulative number of participants
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberOfParticipants
      {
        get { return NumberOfParticipantsElement != null ? NumberOfParticipantsElement.Value : null; }
        set
        {
          if (value == null)
            NumberOfParticipantsElement = null;
          else
            NumberOfParticipantsElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("NumberOfParticipants");
        }
      }

      /// <summary>
      /// Number of participants with known results for measured variables
      /// </summary>
      [FhirElement("knownDataCount", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Integer KnownDataCountElement
      {
        get { return _KnownDataCountElement; }
        set { _KnownDataCountElement = value; OnPropertyChanged("KnownDataCountElement"); }
      }

      private Hl7.Fhir.Model.Integer _KnownDataCountElement;

      /// <summary>
      /// Number of participants with known results for measured variables
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? KnownDataCount
      {
        get { return KnownDataCountElement != null ? KnownDataCountElement.Value : null; }
        set
        {
          if (value == null)
            KnownDataCountElement = null;
          else
            KnownDataCountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("KnownDataCount");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SampleSizeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(NumberOfStudiesElement != null) dest.NumberOfStudiesElement = (Hl7.Fhir.Model.Integer)NumberOfStudiesElement.DeepCopy();
        if(NumberOfParticipantsElement != null) dest.NumberOfParticipantsElement = (Hl7.Fhir.Model.Integer)NumberOfParticipantsElement.DeepCopy();
        if(KnownDataCountElement != null) dest.KnownDataCountElement = (Hl7.Fhir.Model.Integer)KnownDataCountElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SampleSizeComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SampleSizeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(NumberOfStudiesElement, otherT.NumberOfStudiesElement)) return false;
        if( !DeepComparable.Matches(NumberOfParticipantsElement, otherT.NumberOfParticipantsElement)) return false;
        if( !DeepComparable.Matches(KnownDataCountElement, otherT.KnownDataCountElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SampleSizeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(NumberOfStudiesElement, otherT.NumberOfStudiesElement)) return false;
        if( !DeepComparable.IsExactly(NumberOfParticipantsElement, otherT.NumberOfParticipantsElement)) return false;
        if( !DeepComparable.IsExactly(KnownDataCountElement, otherT.KnownDataCountElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (NumberOfStudiesElement != null) yield return NumberOfStudiesElement;
          if (NumberOfParticipantsElement != null) yield return NumberOfParticipantsElement;
          if (KnownDataCountElement != null) yield return KnownDataCountElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (NumberOfStudiesElement != null) yield return new ElementValue("numberOfStudies", NumberOfStudiesElement);
          if (NumberOfParticipantsElement != null) yield return new ElementValue("numberOfParticipants", NumberOfParticipantsElement);
          if (KnownDataCountElement != null) yield return new ElementValue("knownDataCount", KnownDataCountElement);
        }
      }

    }

    /// <summary>
    /// An attribute of the Statistic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Statistic#AttributeEstimate", IsNestedType=true)]
    public partial class AttributeEstimateComponent : Hl7.Fhir.Model.Element
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Statistic#AttributeEstimate"; } }

      /// <summary>
      /// Textual description of the attribute estimate
      /// </summary>
      [FhirElement("description", InSummary=true, Order=30)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Textual description of the attribute estimate
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnote or explanatory note about the estimate
      /// </summary>
      [FhirElement("note", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// The type of attribute estimate, eg confidence interval or p value
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure
      /// </summary>
      [FhirElement("quantity", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Level of confidence interval, eg 0.95 for 95% confidence interval
      /// </summary>
      [FhirElement("level", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal LevelElement
      {
        get { return _LevelElement; }
        set { _LevelElement = value; OnPropertyChanged("LevelElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _LevelElement;

      /// <summary>
      /// Level of confidence interval, eg 0.95 for 95% confidence interval
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Level
      {
        get { return LevelElement != null ? LevelElement.Value : null; }
        set
        {
          if (value == null)
            LevelElement = null;
          else
            LevelElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Level");
        }
      }

      /// <summary>
      /// Lower and upper bound values of the attribute estimate
      /// </summary>
      [FhirElement("range", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Range Range
      {
        get { return _Range; }
        set { _Range = value; OnPropertyChanged("Range"); }
      }

      private Hl7.Fhir.Model.Range _Range;

      /// <summary>
      /// A nested attribute estimate; which is the attribute estimate of an attribute estimate
      /// </summary>
      [FhirElement("attributeEstimate", InSummary=true, Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent> AttributeEstimate
      {
        get { if(_AttributeEstimate==null) _AttributeEstimate = new List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent>(); return _AttributeEstimate; }
        set { _AttributeEstimate = value; OnPropertyChanged("AttributeEstimate"); }
      }

      private List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent> _AttributeEstimate;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AttributeEstimateComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(LevelElement != null) dest.LevelElement = (Hl7.Fhir.Model.FhirDecimal)LevelElement.DeepCopy();
        if(Range != null) dest.Range = (Hl7.Fhir.Model.Range)Range.DeepCopy();
        if(AttributeEstimate != null) dest.AttributeEstimate = new List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent>(AttributeEstimate.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AttributeEstimateComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AttributeEstimateComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(LevelElement, otherT.LevelElement)) return false;
        if( !DeepComparable.Matches(Range, otherT.Range)) return false;
        if( !DeepComparable.Matches(AttributeEstimate, otherT.AttributeEstimate)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AttributeEstimateComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(LevelElement, otherT.LevelElement)) return false;
        if( !DeepComparable.IsExactly(Range, otherT.Range)) return false;
        if( !DeepComparable.IsExactly(AttributeEstimate, otherT.AttributeEstimate)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
          if (Quantity != null) yield return Quantity;
          if (LevelElement != null) yield return LevelElement;
          if (Range != null) yield return Range;
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (LevelElement != null) yield return new ElementValue("level", LevelElement);
          if (Range != null) yield return new ElementValue("range", Range);
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return new ElementValue("attributeEstimate", elem); }
        }
      }

    }

    /// <summary>
    /// A nested attribute estimate; which is the attribute estimate of an attribute estimate
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Statistic#AttributeEstimate", IsNestedType=true)]
    public partial class AttributeEstimateComponent : Hl7.Fhir.Model.Element
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Statistic#AttributeEstimate"; } }

      /// <summary>
      /// Textual description of the attribute estimate
      /// </summary>
      [FhirElement("description", InSummary=true, Order=30)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Textual description of the attribute estimate
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnote or explanatory note about the estimate
      /// </summary>
      [FhirElement("note", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// The type of attribute estimate, eg confidence interval or p value
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure
      /// </summary>
      [FhirElement("quantity", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Level of confidence interval, eg 0.95 for 95% confidence interval
      /// </summary>
      [FhirElement("level", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal LevelElement
      {
        get { return _LevelElement; }
        set { _LevelElement = value; OnPropertyChanged("LevelElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _LevelElement;

      /// <summary>
      /// Level of confidence interval, eg 0.95 for 95% confidence interval
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Level
      {
        get { return LevelElement != null ? LevelElement.Value : null; }
        set
        {
          if (value == null)
            LevelElement = null;
          else
            LevelElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Level");
        }
      }

      /// <summary>
      /// Lower and upper bound values of the attribute estimate
      /// </summary>
      [FhirElement("range", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Range Range
      {
        get { return _Range; }
        set { _Range = value; OnPropertyChanged("Range"); }
      }

      private Hl7.Fhir.Model.Range _Range;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AttributeEstimateComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(LevelElement != null) dest.LevelElement = (Hl7.Fhir.Model.FhirDecimal)LevelElement.DeepCopy();
        if(Range != null) dest.Range = (Hl7.Fhir.Model.Range)Range.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AttributeEstimateComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AttributeEstimateComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(LevelElement, otherT.LevelElement)) return false;
        if( !DeepComparable.Matches(Range, otherT.Range)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AttributeEstimateComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(LevelElement, otherT.LevelElement)) return false;
        if( !DeepComparable.IsExactly(Range, otherT.Range)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
          if (Quantity != null) yield return Quantity;
          if (LevelElement != null) yield return LevelElement;
          if (Range != null) yield return Range;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (LevelElement != null) yield return new ElementValue("level", LevelElement);
          if (Range != null) yield return new ElementValue("range", Range);
        }
      }

    }

    /// <summary>
    /// Model characteristic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Statistic#ModelCharacteristic", IsNestedType=true)]
    public partial class ModelCharacteristicComponent : Hl7.Fhir.Model.Element
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Statistic#ModelCharacteristic"; } }

      /// <summary>
      /// Model specification
      /// </summary>
      [FhirElement("code", InSummary=true, Order=30)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Model specification details
      /// </summary>
      [FhirElement("value", InSummary=true, Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      /// <summary>
      /// A variable adjusted for in the adjusted analysis
      /// </summary>
      [FhirElement("variable", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Statistic.VariableComponent> Variable
      {
        get { if(_Variable==null) _Variable = new List<Hl7.Fhir.Model.Statistic.VariableComponent>(); return _Variable; }
        set { _Variable = value; OnPropertyChanged("Variable"); }
      }

      private List<Hl7.Fhir.Model.Statistic.VariableComponent> _Variable;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ModelCharacteristicComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        if(Variable != null) dest.Variable = new List<Hl7.Fhir.Model.Statistic.VariableComponent>(Variable.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ModelCharacteristicComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ModelCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(Variable, otherT.Variable)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ModelCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(Variable, otherT.Variable)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          if (Value != null) yield return Value;
          foreach (var elem in Variable) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          if (Value != null) yield return new ElementValue("value", Value);
          foreach (var elem in Variable) { if (elem != null) yield return new ElementValue("variable", elem); }
        }
      }

    }

    /// <summary>
    /// A variable adjusted for in the adjusted analysis
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Statistic#Variable", IsNestedType=true)]
    public partial class VariableComponent : Hl7.Fhir.Model.Element
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Statistic#Variable"; } }

      /// <summary>
      /// Description of the variable
      /// </summary>
      [FhirElement("variableDefinition", InSummary=true, Order=30)]
      [CLSCompliant(false)]
      [References("Group","EvidenceVariable")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference VariableDefinition
      {
        get { return _VariableDefinition; }
        set { _VariableDefinition = value; OnPropertyChanged("VariableDefinition"); }
      }

      private Hl7.Fhir.Model.ResourceReference _VariableDefinition;

      /// <summary>
      /// continuous | dichotomous | ordinal | polychotomous
      /// </summary>
      [FhirElement("handling", InSummary=true, Order=40)]
      [DataMember]
      public Code<Hl7.Fhir.Model.EvidenceVariableHandling> HandlingElement
      {
        get { return _HandlingElement; }
        set { _HandlingElement = value; OnPropertyChanged("HandlingElement"); }
      }

      private Code<Hl7.Fhir.Model.EvidenceVariableHandling> _HandlingElement;

      /// <summary>
      /// continuous | dichotomous | ordinal | polychotomous
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.EvidenceVariableHandling? Handling
      {
        get { return HandlingElement != null ? HandlingElement.Value : null; }
        set
        {
          if (value == null)
            HandlingElement = null;
          else
            HandlingElement = new Code<Hl7.Fhir.Model.EvidenceVariableHandling>(value);
          OnPropertyChanged("Handling");
        }
      }

      /// <summary>
      /// Description for grouping of ordinal or polychotomous variables
      /// </summary>
      [FhirElement("valueCategory", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ValueCategory
      {
        get { if(_ValueCategory==null) _ValueCategory = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ValueCategory; }
        set { _ValueCategory = value; OnPropertyChanged("ValueCategory"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ValueCategory;

      /// <summary>
      /// Discrete value for grouping of ordinal or polychotomous variables
      /// </summary>
      [FhirElement("valueQuantity", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Quantity> ValueQuantity
      {
        get { if(_ValueQuantity==null) _ValueQuantity = new List<Hl7.Fhir.Model.Quantity>(); return _ValueQuantity; }
        set { _ValueQuantity = value; OnPropertyChanged("ValueQuantity"); }
      }

      private List<Hl7.Fhir.Model.Quantity> _ValueQuantity;

      /// <summary>
      /// Range of values for grouping of ordinal or polychotomous variables
      /// </summary>
      [FhirElement("valueRange", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Range> ValueRange
      {
        get { if(_ValueRange==null) _ValueRange = new List<Hl7.Fhir.Model.Range>(); return _ValueRange; }
        set { _ValueRange = value; OnPropertyChanged("ValueRange"); }
      }

      private List<Hl7.Fhir.Model.Range> _ValueRange;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VariableComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(VariableDefinition != null) dest.VariableDefinition = (Hl7.Fhir.Model.ResourceReference)VariableDefinition.DeepCopy();
        if(HandlingElement != null) dest.HandlingElement = (Code<Hl7.Fhir.Model.EvidenceVariableHandling>)HandlingElement.DeepCopy();
        if(ValueCategory != null) dest.ValueCategory = new List<Hl7.Fhir.Model.CodeableConcept>(ValueCategory.DeepCopy());
        if(ValueQuantity != null) dest.ValueQuantity = new List<Hl7.Fhir.Model.Quantity>(ValueQuantity.DeepCopy());
        if(ValueRange != null) dest.ValueRange = new List<Hl7.Fhir.Model.Range>(ValueRange.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VariableComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VariableComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(VariableDefinition, otherT.VariableDefinition)) return false;
        if( !DeepComparable.Matches(HandlingElement, otherT.HandlingElement)) return false;
        if( !DeepComparable.Matches(ValueCategory, otherT.ValueCategory)) return false;
        if( !DeepComparable.Matches(ValueQuantity, otherT.ValueQuantity)) return false;
        if( !DeepComparable.Matches(ValueRange, otherT.ValueRange)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VariableComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(VariableDefinition, otherT.VariableDefinition)) return false;
        if( !DeepComparable.IsExactly(HandlingElement, otherT.HandlingElement)) return false;
        if( !DeepComparable.IsExactly(ValueCategory, otherT.ValueCategory)) return false;
        if( !DeepComparable.IsExactly(ValueQuantity, otherT.ValueQuantity)) return false;
        if( !DeepComparable.IsExactly(ValueRange, otherT.ValueRange)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (VariableDefinition != null) yield return VariableDefinition;
          if (HandlingElement != null) yield return HandlingElement;
          foreach (var elem in ValueCategory) { if (elem != null) yield return elem; }
          foreach (var elem in ValueQuantity) { if (elem != null) yield return elem; }
          foreach (var elem in ValueRange) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (VariableDefinition != null) yield return new ElementValue("variableDefinition", VariableDefinition);
          if (HandlingElement != null) yield return new ElementValue("handling", HandlingElement);
          foreach (var elem in ValueCategory) { if (elem != null) yield return new ElementValue("valueCategory", elem); }
          foreach (var elem in ValueQuantity) { if (elem != null) yield return new ElementValue("valueQuantity", elem); }
          foreach (var elem in ValueRange) { if (elem != null) yield return new ElementValue("valueRange", elem); }
        }
      }

    }

    /// <summary>
    /// Description of content
    /// </summary>
    [FhirElement("description", InSummary=true, Order=40)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Description of content
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Footnotes and/or explanatory notes
    /// </summary>
    [FhirElement("note", InSummary=true, Order=50)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Type of statistic, eg relative risk
    /// </summary>
    [FhirElement("statisticType", InSummary=true, Order=60)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept StatisticType
    {
      get { return _StatisticType; }
      set { _StatisticType = value; OnPropertyChanged("StatisticType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _StatisticType;

    /// <summary>
    /// Statistic value
    /// </summary>
    [FhirElement("quantity", InSummary=true, Order=70)]
    [DataMember]
    public Hl7.Fhir.Model.Quantity Quantity
    {
      get { return _Quantity; }
      set { _Quantity = value; OnPropertyChanged("Quantity"); }
    }

    private Hl7.Fhir.Model.Quantity _Quantity;

    /// <summary>
    /// The number of events associated with the statistic
    /// </summary>
    [FhirElement("numberOfEvents", InSummary=true, Order=80)]
    [DataMember]
    public Hl7.Fhir.Model.Integer NumberOfEventsElement
    {
      get { return _NumberOfEventsElement; }
      set { _NumberOfEventsElement = value; OnPropertyChanged("NumberOfEventsElement"); }
    }

    private Hl7.Fhir.Model.Integer _NumberOfEventsElement;

    /// <summary>
    /// The number of events associated with the statistic
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public int? NumberOfEvents
    {
      get { return NumberOfEventsElement != null ? NumberOfEventsElement.Value : null; }
      set
      {
        if (value == null)
          NumberOfEventsElement = null;
        else
          NumberOfEventsElement = new Hl7.Fhir.Model.Integer(value);
        OnPropertyChanged("NumberOfEvents");
      }
    }

    /// <summary>
    /// Number of samples in the statistic
    /// </summary>
    [FhirElement("sampleSize", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.Statistic.SampleSizeComponent SampleSize
    {
      get { return _SampleSize; }
      set { _SampleSize = value; OnPropertyChanged("SampleSize"); }
    }

    private Hl7.Fhir.Model.Statistic.SampleSizeComponent _SampleSize;

    /// <summary>
    /// An attribute of the Statistic
    /// </summary>
    [FhirElement("attributeEstimate", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent> AttributeEstimate
    {
      get { if(_AttributeEstimate==null) _AttributeEstimate = new List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent>(); return _AttributeEstimate; }
      set { _AttributeEstimate = value; OnPropertyChanged("AttributeEstimate"); }
    }

    private List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent> _AttributeEstimate;

    /// <summary>
    /// Model characteristic
    /// </summary>
    [FhirElement("modelCharacteristic", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Statistic.ModelCharacteristicComponent> ModelCharacteristic
    {
      get { if(_ModelCharacteristic==null) _ModelCharacteristic = new List<Hl7.Fhir.Model.Statistic.ModelCharacteristicComponent>(); return _ModelCharacteristic; }
      set { _ModelCharacteristic = value; OnPropertyChanged("ModelCharacteristic"); }
    }

    private List<Hl7.Fhir.Model.Statistic.ModelCharacteristicComponent> _ModelCharacteristic;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Statistic;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(StatisticType != null) dest.StatisticType = (Hl7.Fhir.Model.CodeableConcept)StatisticType.DeepCopy();
      if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
      if(NumberOfEventsElement != null) dest.NumberOfEventsElement = (Hl7.Fhir.Model.Integer)NumberOfEventsElement.DeepCopy();
      if(SampleSize != null) dest.SampleSize = (Hl7.Fhir.Model.Statistic.SampleSizeComponent)SampleSize.DeepCopy();
      if(AttributeEstimate != null) dest.AttributeEstimate = new List<Hl7.Fhir.Model.Statistic.AttributeEstimateComponent>(AttributeEstimate.DeepCopy());
      if(ModelCharacteristic != null) dest.ModelCharacteristic = new List<Hl7.Fhir.Model.Statistic.ModelCharacteristicComponent>(ModelCharacteristic.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Statistic());
    }

    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Statistic;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(StatisticType, otherT.StatisticType)) return false;
      if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.Matches(NumberOfEventsElement, otherT.NumberOfEventsElement)) return false;
      if( !DeepComparable.Matches(SampleSize, otherT.SampleSize)) return false;
      if( !DeepComparable.Matches(AttributeEstimate, otherT.AttributeEstimate)) return false;
      if( !DeepComparable.Matches(ModelCharacteristic, otherT.ModelCharacteristic)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Statistic;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(StatisticType, otherT.StatisticType)) return false;
      if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.IsExactly(NumberOfEventsElement, otherT.NumberOfEventsElement)) return false;
      if( !DeepComparable.IsExactly(SampleSize, otherT.SampleSize)) return false;
      if( !DeepComparable.IsExactly(AttributeEstimate, otherT.AttributeEstimate)) return false;
      if( !DeepComparable.IsExactly(ModelCharacteristic, otherT.ModelCharacteristic)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (StatisticType != null) yield return StatisticType;
        if (Quantity != null) yield return Quantity;
        if (NumberOfEventsElement != null) yield return NumberOfEventsElement;
        if (SampleSize != null) yield return SampleSize;
        foreach (var elem in AttributeEstimate) { if (elem != null) yield return elem; }
        foreach (var elem in ModelCharacteristic) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (StatisticType != null) yield return new ElementValue("statisticType", StatisticType);
        if (Quantity != null) yield return new ElementValue("quantity", Quantity);
        if (NumberOfEventsElement != null) yield return new ElementValue("numberOfEvents", NumberOfEventsElement);
        if (SampleSize != null) yield return new ElementValue("sampleSize", SampleSize);
        foreach (var elem in AttributeEstimate) { if (elem != null) yield return new ElementValue("attributeEstimate", elem); }
        foreach (var elem in ModelCharacteristic) { if (elem != null) yield return new ElementValue("modelCharacteristic", elem); }
      }
    }

  }

}

// end of file
