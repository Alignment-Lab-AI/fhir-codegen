// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-ballot

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product
  /// </summary>
  [FhirType("ManufacturedItemDefinition", IsResource=true)]
  [DataContract]
  public partial class ManufacturedItemDefinition : Hl7.Fhir.Model.DomainResource, System.ComponentModel.INotifyPropertyChanged
  {
    /// <summary>
    /// FHIR Resource Type
    /// </summary>
    [NotMapped]
    public override ResourceType ResourceType { get { return ResourceType.ManufacturedItemDefinition; } }

    /// <summary>
    /// FHIR Type Name
    /// </summary>
    [NotMapped]
    public override string TypeName { get { return "ManufacturedItemDefinition"; } }

    /// <summary>
    /// General characteristics of this item
    /// </summary>
    [FhirType("PropertyComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class PropertyComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "PropertyComponent"; } }

      /// <summary>
      /// A code expressing the type of characteristic
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// A value for the characteristic
      /// </summary>
      [FhirElement("value", InSummary=true, Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Attachment))]
      [DataMember]
      public Hl7.Fhir.Model.Element Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.Element _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.Element)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PropertyComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }

      }

    }

    /// <summary>
    /// Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup
    /// </summary>
    [FhirType("ComponentComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class ComponentComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "ComponentComponent"; } }

      /// <summary>
      /// Defining type of the component e.g. shell, layer, ink
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The function of this component within the item e.g. delivers active ingredient, masks taste
      /// </summary>
      [FhirElement("function", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Function
      {
        get { if(_Function==null) _Function = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Function;

      /// <summary>
      /// The measurable amount of substance in this component, expressable in different ways (e.g. by mass or volume)
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Quantity> Amount
      {
        get { if(_Amount==null) _Amount = new List<Hl7.Fhir.Model.Quantity>(); return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private List<Hl7.Fhir.Model.Quantity> _Amount;

      /// <summary>
      /// A reference to an constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient)
      /// </summary>
      [FhirElement("constituent", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ManufacturedItemDefinition.ConstituentComponent> Constituent
      {
        get { if(_Constituent==null) _Constituent = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.ConstituentComponent>(); return _Constituent; }
        set { _Constituent = value; OnPropertyChanged("Constituent"); }
      }

      private List<Hl7.Fhir.Model.ManufacturedItemDefinition.ConstituentComponent> _Constituent;

      /// <summary>
      /// General characteristics of this component
      /// </summary>
      [FhirElement("property", InSummary=true, Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent> Property
      {
        get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent>(); return _Property; }
        set { _Property = value; OnPropertyChanged("Property"); }
      }

      private List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent> _Property;

      /// <summary>
      /// A component that this component contains or is made from
      /// </summary>
      [FhirElement("component", InSummary=true, Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent> Component
      {
        get { if(_Component==null) _Component = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent>(); return _Component; }
        set { _Component = value; OnPropertyChanged("Component"); }
      }

      private List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent> _Component;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ComponentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Function != null) dest.Function = new List<Hl7.Fhir.Model.CodeableConcept>(Function.DeepCopy());
        if(Amount != null) dest.Amount = new List<Hl7.Fhir.Model.Quantity>(Amount.DeepCopy());
        if(Constituent != null) dest.Constituent = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.ConstituentComponent>(Constituent.DeepCopy());
        if(Property != null) dest.Property = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent>(Property.DeepCopy());
        if(Component != null) dest.Component = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent>(Component.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ComponentComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;
        if( !DeepComparable.Matches(Constituent, otherT.Constituent)) return false;
        if( !DeepComparable.Matches(Property, otherT.Property)) return false;
        if( !DeepComparable.Matches(Component, otherT.Component)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;
        if( !DeepComparable.IsExactly(Constituent, otherT.Constituent)) return false;
        if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
        if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Function) { if (elem != null) yield return elem; }
          foreach (var elem in Amount) { if (elem != null) yield return elem; }
          foreach (var elem in Constituent) { if (elem != null) yield return elem; }
          foreach (var elem in Property) { if (elem != null) yield return elem; }
          foreach (var elem in Component) { if (elem != null) yield return elem; }
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Function) { if (elem != null) yield return new ElementValue("function", elem); }
          foreach (var elem in Amount) { if (elem != null) yield return new ElementValue("amount", elem); }
          foreach (var elem in Constituent) { if (elem != null) yield return new ElementValue("constituent", elem); }
          foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
          foreach (var elem in Component) { if (elem != null) yield return new ElementValue("component", elem); }
        }

      }

    }

    /// <summary>
    /// A reference to an constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient)
    /// </summary>
    [FhirType("ConstituentComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class ConstituentComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "ConstituentComponent"; } }

      /// <summary>
      /// The measurable amount of this constituent in this component, expressable in different ways (e.g. by mass or volume)
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Quantity> Amount
      {
        get { if(_Amount==null) _Amount = new List<Hl7.Fhir.Model.Quantity>(); return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private List<Hl7.Fhir.Model.Quantity> _Amount;

      /// <summary>
      /// The type of location of the constituent within this component e.g. intragranular, blend
      /// </summary>
      [FhirElement("location", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Location
      {
        get { if(_Location==null) _Location = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Location;

      /// <summary>
      /// The function of this constituent within the component e.g. binder
      /// </summary>
      [FhirElement("function", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Function
      {
        get { if(_Function==null) _Function = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Function;

      /// <summary>
      /// An ingredient that this component is the location of in this manufactured item. The component is physically made of this ingredient (and possibly others), rather than just being a container for it
      /// </summary>
      [FhirElement("locationForIngredient", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> LocationForIngredient
      {
        get { if(_LocationForIngredient==null) _LocationForIngredient = new List<Hl7.Fhir.Model.CodeableReference>(); return _LocationForIngredient; }
        set { _LocationForIngredient = value; OnPropertyChanged("LocationForIngredient"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _LocationForIngredient;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConstituentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Amount != null) dest.Amount = new List<Hl7.Fhir.Model.Quantity>(Amount.DeepCopy());
        if(Location != null) dest.Location = new List<Hl7.Fhir.Model.CodeableConcept>(Location.DeepCopy());
        if(Function != null) dest.Function = new List<Hl7.Fhir.Model.CodeableConcept>(Function.DeepCopy());
        if(LocationForIngredient != null) dest.LocationForIngredient = new List<Hl7.Fhir.Model.CodeableReference>(LocationForIngredient.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConstituentComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConstituentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(LocationForIngredient, otherT.LocationForIngredient)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConstituentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(LocationForIngredient, otherT.LocationForIngredient)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Amount) { if (elem != null) yield return elem; }
          foreach (var elem in Location) { if (elem != null) yield return elem; }
          foreach (var elem in Function) { if (elem != null) yield return elem; }
          foreach (var elem in LocationForIngredient) { if (elem != null) yield return elem; }
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Amount) { if (elem != null) yield return new ElementValue("amount", elem); }
          foreach (var elem in Location) { if (elem != null) yield return new ElementValue("location", elem); }
          foreach (var elem in Function) { if (elem != null) yield return new ElementValue("function", elem); }
          foreach (var elem in LocationForIngredient) { if (elem != null) yield return new ElementValue("locationForIngredient", elem); }
        }

      }

    }

    /// <summary>
    /// Unique identifier
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, Order=100)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }

    }

    /// <summary>
    /// A descriptive name applied to this item
    /// </summary>
    [FhirElement("name", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// A descriptive name applied to this item
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }

    }

    /// <summary>
    /// Dose form as manufactured (before any necessary transformation)
    /// </summary>
    [FhirElement("manufacturedDoseForm", InSummary=true, Order=120)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept ManufacturedDoseForm
    {
      get { return _ManufacturedDoseForm; }
      set { _ManufacturedDoseForm = value; OnPropertyChanged("ManufacturedDoseForm"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _ManufacturedDoseForm;

    /// <summary>
    /// The “real world” units in which the quantity of the item is described
    /// </summary>
    [FhirElement("unitOfPresentation", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept UnitOfPresentation
    {
      get { return _UnitOfPresentation; }
      set { _UnitOfPresentation = value; OnPropertyChanged("UnitOfPresentation"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _UnitOfPresentation;

    /// <summary>
    /// Manufacturer of the item, one of several possible
    /// </summary>
    [FhirElement("manufacturer", InSummary=true, Order=140)]
    [CLSCompliant(false)]
    [References("Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Manufacturer
    {
      get { if(_Manufacturer==null) _Manufacturer = new List<Hl7.Fhir.Model.ResourceReference>(); return _Manufacturer; }
      set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Manufacturer;

    /// <summary>
    /// Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated
    /// </summary>
    [FhirElement("marketingStatus", InSummary=true, Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MarketingStatus> MarketingStatus
    {
      get { if(_MarketingStatus==null) _MarketingStatus = new List<Hl7.Fhir.Model.MarketingStatus>(); return _MarketingStatus; }
      set { _MarketingStatus = value; OnPropertyChanged("MarketingStatus"); }
    }

    private List<Hl7.Fhir.Model.MarketingStatus> _MarketingStatus;

    /// <summary>
    /// The ingredients of this manufactured item. Only needed if these are not specified by incoming references from the Ingredient resource
    /// </summary>
    [FhirElement("ingredient", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Ingredient
    {
      get { if(_Ingredient==null) _Ingredient = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Ingredient; }
      set { _Ingredient = value; OnPropertyChanged("Ingredient"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Ingredient;

    /// <summary>
    /// General characteristics of this item
    /// </summary>
    [FhirElement("property", InSummary=true, Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent> Property
    {
      get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent>(); return _Property; }
      set { _Property = value; OnPropertyChanged("Property"); }
    }

    private List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent> _Property;

    /// <summary>
    /// Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup
    /// </summary>
    [FhirElement("component", InSummary=true, Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent> Component
    {
      get { if(_Component==null) _Component = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent>(); return _Component; }
      set { _Component = value; OnPropertyChanged("Component"); }
    }

    private List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent> _Component;

    public override void AddDefaultConstraints()
    {
      base.AddDefaultConstraints();

    }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ManufacturedItemDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(ManufacturedDoseForm != null) dest.ManufacturedDoseForm = (Hl7.Fhir.Model.CodeableConcept)ManufacturedDoseForm.DeepCopy();
      if(UnitOfPresentation != null) dest.UnitOfPresentation = (Hl7.Fhir.Model.CodeableConcept)UnitOfPresentation.DeepCopy();
      if(Manufacturer != null) dest.Manufacturer = new List<Hl7.Fhir.Model.ResourceReference>(Manufacturer.DeepCopy());
      if(MarketingStatus != null) dest.MarketingStatus = new List<Hl7.Fhir.Model.MarketingStatus>(MarketingStatus.DeepCopy());
      if(Ingredient != null) dest.Ingredient = new List<Hl7.Fhir.Model.CodeableConcept>(Ingredient.DeepCopy());
      if(Property != null) dest.Property = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.PropertyComponent>(Property.DeepCopy());
      if(Component != null) dest.Component = new List<Hl7.Fhir.Model.ManufacturedItemDefinition.ComponentComponent>(Component.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ManufacturedItemDefinition());
    }

    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ManufacturedItemDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(ManufacturedDoseForm, otherT.ManufacturedDoseForm)) return false;
      if( !DeepComparable.Matches(UnitOfPresentation, otherT.UnitOfPresentation)) return false;
      if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.Matches(MarketingStatus, otherT.MarketingStatus)) return false;
      if( !DeepComparable.Matches(Ingredient, otherT.Ingredient)) return false;
      if( !DeepComparable.Matches(Property, otherT.Property)) return false;
      if( !DeepComparable.Matches(Component, otherT.Component)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ManufacturedItemDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(ManufacturedDoseForm, otherT.ManufacturedDoseForm)) return false;
      if( !DeepComparable.IsExactly(UnitOfPresentation, otherT.UnitOfPresentation)) return false;
      if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.IsExactly(MarketingStatus, otherT.MarketingStatus)) return false;
      if( !DeepComparable.IsExactly(Ingredient, otherT.Ingredient)) return false;
      if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
      if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;

      return true;
    }

    [NotMapped]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (NameElement != null) yield return NameElement;
        if (ManufacturedDoseForm != null) yield return ManufacturedDoseForm;
        if (UnitOfPresentation != null) yield return UnitOfPresentation;
        foreach (var elem in Manufacturer) { if (elem != null) yield return elem; }
        foreach (var elem in MarketingStatus) { if (elem != null) yield return elem; }
        foreach (var elem in Ingredient) { if (elem != null) yield return elem; }
        foreach (var elem in Property) { if (elem != null) yield return elem; }
        foreach (var elem in Component) { if (elem != null) yield return elem; }
      }

    }

    [NotMapped]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (ManufacturedDoseForm != null) yield return new ElementValue("manufacturedDoseForm", ManufacturedDoseForm);
        if (UnitOfPresentation != null) yield return new ElementValue("unitOfPresentation", UnitOfPresentation);
        foreach (var elem in Manufacturer) { if (elem != null) yield return new ElementValue("manufacturer", elem); }
        foreach (var elem in MarketingStatus) { if (elem != null) yield return new ElementValue("marketingStatus", elem); }
        foreach (var elem in Ingredient) { if (elem != null) yield return new ElementValue("ingredient", elem); }
        foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
        foreach (var elem in Component) { if (elem != null) yield return new ElementValue("component", elem); }
      }

    }

  }

}

// end of file
