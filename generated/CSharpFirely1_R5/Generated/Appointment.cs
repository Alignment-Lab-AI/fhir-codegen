// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-ballot

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s)
  /// </summary>
  [FhirType("Appointment", IsResource=true)]
  [DataContract]
  public partial class Appointment : Hl7.Fhir.Model.DomainResource, System.ComponentModel.INotifyPropertyChanged
  {
    /// <summary>
    /// FHIR Resource Type
    /// </summary>
    [NotMapped]
    public override ResourceType ResourceType { get { return ResourceType.Appointment; } }

    /// <summary>
    /// FHIR Type Name
    /// </summary>
    [NotMapped]
    public override string TypeName { get { return "Appointment"; } }

    /// <summary>
    /// The free/busy status of an appointment.
    /// (url: http://hl7.org/fhir/ValueSet/appointmentstatus)
    /// (system: http://hl7.org/fhir/appointmentstatus)
    /// </summary>
    [FhirEnumeration("AppointmentStatus")]
    public enum AppointmentStatus
    {
      /// <summary>
      /// None of the participant(s) have finalized their acceptance of the appointment request, and the start/end time might not be set yet.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("proposed", "http://hl7.org/fhir/appointmentstatus"), Description("Proposed")]
      Proposed,
      /// <summary>
      /// Some or all of the participant(s) have not finalized their acceptance of the appointment request.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("pending", "http://hl7.org/fhir/appointmentstatus"), Description("Pending")]
      Pending,
      /// <summary>
      /// All participant(s) have been considered and the appointment is confirmed to go ahead at the date/times specified.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("booked", "http://hl7.org/fhir/appointmentstatus"), Description("Booked")]
      Booked,
      /// <summary>
      /// The patient/patients has/have arrived and is/are waiting to be seen.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("arrived", "http://hl7.org/fhir/appointmentstatus"), Description("Arrived")]
      Arrived,
      /// <summary>
      /// The planning stages of the appointment are now complete, the encounter resource will exist and will track further status changes. Note that an encounter may exist before the appointment status is fulfilled for many reasons.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("fulfilled", "http://hl7.org/fhir/appointmentstatus"), Description("Fulfilled")]
      Fulfilled,
      /// <summary>
      /// The appointment has been cancelled.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("cancelled", "http://hl7.org/fhir/appointmentstatus"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// Some or all of the participant(s) have not/did not appear for the appointment (usually the patient).
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("noshow", "http://hl7.org/fhir/appointmentstatus"), Description("No Show")]
      Noshow,
      /// <summary>
      /// This instance should not have been part of this patient's medical record.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/appointmentstatus"), Description("Entered in error")]
      EnteredInError,
      /// <summary>
      /// When checked in, all pre-encounter administrative work is complete, and the encounter may begin. (where multiple patients are involved, they are all present).
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("checked-in", "http://hl7.org/fhir/appointmentstatus"), Description("Checked In")]
      CheckedIn,
      /// <summary>
      /// The appointment has been placed on a waitlist, to be scheduled/confirmed in the future when a slot/service is available.
      /// A specific time might or might not be pre-allocated.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("waitlist", "http://hl7.org/fhir/appointmentstatus"), Description("Waitlisted")]
      Waitlist,
    }

    /// <summary>
    /// An IANA timezone code for  the timezone offset per [BCP 175](https://www.iana.org/go/rfc6557). The offset is specified as part of a dateTime/instant (or using the tzOffset extension on a date if necessary). The timezone code may also be provided to allow for human display of the location associated with the offset. These are codes like 'America/New_York' or 'America/Los_Angeles'. See [IANA Timezones](https://www.iana.org/time-zones) for the official source, and [Wikipedia](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for information
    /// (url: http://hl7.org/fhir/ValueSet/timezones)
    /// (systems: 0)
    /// </summary>
    [FhirEnumeration("IANATimezones")]
    public enum IANATimezones
    {
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Abidjan", "https://www.iana.org/time-zones"), Description("Africa/Abidjan")]
      Africa/Abidjan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Accra", "https://www.iana.org/time-zones"), Description("Africa/Accra")]
      Africa/Accra,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Addis_Ababa", "https://www.iana.org/time-zones"), Description("Africa/Addis_Ababa")]
      Africa/Addis_Ababa,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Algiers", "https://www.iana.org/time-zones"), Description("Africa/Algiers")]
      Africa/Algiers,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Asmara", "https://www.iana.org/time-zones"), Description("Africa/Asmara")]
      Africa/Asmara,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Bamako", "https://www.iana.org/time-zones"), Description("Africa/Bamako")]
      Africa/Bamako,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Bangui", "https://www.iana.org/time-zones"), Description("Africa/Bangui")]
      Africa/Bangui,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Banjul", "https://www.iana.org/time-zones"), Description("Africa/Banjul")]
      Africa/Banjul,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Bissau", "https://www.iana.org/time-zones"), Description("Africa/Bissau")]
      Africa/Bissau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Blantyre", "https://www.iana.org/time-zones"), Description("Africa/Blantyre")]
      Africa/Blantyre,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Brazzaville", "https://www.iana.org/time-zones"), Description("Africa/Brazzaville")]
      Africa/Brazzaville,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Bujumbura", "https://www.iana.org/time-zones"), Description("Africa/Bujumbura")]
      Africa/Bujumbura,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Cairo", "https://www.iana.org/time-zones"), Description("Africa/Cairo")]
      Africa/Cairo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Casablanca", "https://www.iana.org/time-zones"), Description("Africa/Casablanca")]
      Africa/Casablanca,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Ceuta", "https://www.iana.org/time-zones"), Description("Africa/Ceuta")]
      Africa/Ceuta,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Conakry", "https://www.iana.org/time-zones"), Description("Africa/Conakry")]
      Africa/Conakry,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Dakar", "https://www.iana.org/time-zones"), Description("Africa/Dakar")]
      Africa/Dakar,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Dar_es_Salaam", "https://www.iana.org/time-zones"), Description("Africa/Dar_es_Salaam")]
      Africa/Dar_es_Salaam,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Djibouti", "https://www.iana.org/time-zones"), Description("Africa/Djibouti")]
      Africa/Djibouti,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Douala", "https://www.iana.org/time-zones"), Description("Africa/Douala")]
      Africa/Douala,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/El_Aaiun", "https://www.iana.org/time-zones"), Description("Africa/El_Aaiun")]
      Africa/El_Aaiun,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Freetown", "https://www.iana.org/time-zones"), Description("Africa/Freetown")]
      Africa/Freetown,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Gaborone", "https://www.iana.org/time-zones"), Description("Africa/Gaborone")]
      Africa/Gaborone,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Harare", "https://www.iana.org/time-zones"), Description("Africa/Harare")]
      Africa/Harare,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Johannesburg", "https://www.iana.org/time-zones"), Description("Africa/Johannesburg")]
      Africa/Johannesburg,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Juba", "https://www.iana.org/time-zones"), Description("Africa/Juba")]
      Africa/Juba,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Kampala", "https://www.iana.org/time-zones"), Description("Africa/Kampala")]
      Africa/Kampala,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Khartoum", "https://www.iana.org/time-zones"), Description("Africa/Khartoum")]
      Africa/Khartoum,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Kigali", "https://www.iana.org/time-zones"), Description("Africa/Kigali")]
      Africa/Kigali,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Kinshasa", "https://www.iana.org/time-zones"), Description("Africa/Kinshasa")]
      Africa/Kinshasa,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Lagos", "https://www.iana.org/time-zones"), Description("Africa/Lagos")]
      Africa/Lagos,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Libreville", "https://www.iana.org/time-zones"), Description("Africa/Libreville")]
      Africa/Libreville,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Lome", "https://www.iana.org/time-zones"), Description("Africa/Lome")]
      Africa/Lome,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Luanda", "https://www.iana.org/time-zones"), Description("Africa/Luanda")]
      Africa/Luanda,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Lubumbashi", "https://www.iana.org/time-zones"), Description("Africa/Lubumbashi")]
      Africa/Lubumbashi,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Lusaka", "https://www.iana.org/time-zones"), Description("Africa/Lusaka")]
      Africa/Lusaka,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Malabo", "https://www.iana.org/time-zones"), Description("Africa/Malabo")]
      Africa/Malabo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Maputo", "https://www.iana.org/time-zones"), Description("Africa/Maputo")]
      Africa/Maputo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Maseru", "https://www.iana.org/time-zones"), Description("Africa/Maseru")]
      Africa/Maseru,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Mbabane", "https://www.iana.org/time-zones"), Description("Africa/Mbabane")]
      Africa/Mbabane,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Mogadishu", "https://www.iana.org/time-zones"), Description("Africa/Mogadishu")]
      Africa/Mogadishu,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Monrovia", "https://www.iana.org/time-zones"), Description("Africa/Monrovia")]
      Africa/Monrovia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Nairobi", "https://www.iana.org/time-zones"), Description("Africa/Nairobi")]
      Africa/Nairobi,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Ndjamena", "https://www.iana.org/time-zones"), Description("Africa/Ndjamena")]
      Africa/Ndjamena,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Niamey", "https://www.iana.org/time-zones"), Description("Africa/Niamey")]
      Africa/Niamey,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Nouakchott", "https://www.iana.org/time-zones"), Description("Africa/Nouakchott")]
      Africa/Nouakchott,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Ouagadougou", "https://www.iana.org/time-zones"), Description("Africa/Ouagadougou")]
      Africa/Ouagadougou,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Porto-Novo", "https://www.iana.org/time-zones"), Description("Africa/Porto-Novo")]
      Africa/PortoNovo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Sao_Tome", "https://www.iana.org/time-zones"), Description("Africa/Sao_Tome")]
      Africa/Sao_Tome,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Timbuktu", "https://www.iana.org/time-zones"), Description("Africa/Timbuktu")]
      Africa/Timbuktu,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Tripoli", "https://www.iana.org/time-zones"), Description("Africa/Tripoli")]
      Africa/Tripoli,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Tunis", "https://www.iana.org/time-zones"), Description("Africa/Tunis")]
      Africa/Tunis,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Africa/Windhoek", "https://www.iana.org/time-zones"), Description("Africa/Windhoek")]
      Africa/Windhoek,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Adak", "https://www.iana.org/time-zones"), Description("America/Adak")]
      America/Adak,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Anchorage", "https://www.iana.org/time-zones"), Description("America/Anchorage")]
      America/Anchorage,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Anguilla", "https://www.iana.org/time-zones"), Description("America/Anguilla")]
      America/Anguilla,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Antigua", "https://www.iana.org/time-zones"), Description("America/Antigua")]
      America/Antigua,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Araguaina", "https://www.iana.org/time-zones"), Description("America/Araguaina")]
      America/Araguaina,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Buenos_Aires", "https://www.iana.org/time-zones"), Description("America/Argentina/Buenos_Aires")]
      America/Argentina/Buenos_Aires,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Catamarca", "https://www.iana.org/time-zones"), Description("America/Argentina/Catamarca")]
      America/Argentina/Catamarca,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/ComodRivadavia", "https://www.iana.org/time-zones"), Description("America/Argentina/ComodRivadavia")]
      America/Argentina/ComodRivadavia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Cordoba", "https://www.iana.org/time-zones"), Description("America/Argentina/Cordoba")]
      America/Argentina/Cordoba,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Jujuy", "https://www.iana.org/time-zones"), Description("America/Argentina/Jujuy")]
      America/Argentina/Jujuy,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/La_Rioja", "https://www.iana.org/time-zones"), Description("America/Argentina/La_Rioja")]
      America/Argentina/La_Rioja,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Mendoza", "https://www.iana.org/time-zones"), Description("America/Argentina/Mendoza")]
      America/Argentina/Mendoza,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Rio_Gallegos", "https://www.iana.org/time-zones"), Description("America/Argentina/Rio_Gallegos")]
      America/Argentina/Rio_Gallegos,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Salta", "https://www.iana.org/time-zones"), Description("America/Argentina/Salta")]
      America/Argentina/Salta,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/San_Juan", "https://www.iana.org/time-zones"), Description("America/Argentina/San_Juan")]
      America/Argentina/San_Juan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/San_Luis", "https://www.iana.org/time-zones"), Description("America/Argentina/San_Luis")]
      America/Argentina/San_Luis,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Tucuman", "https://www.iana.org/time-zones"), Description("America/Argentina/Tucuman")]
      America/Argentina/Tucuman,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Argentina/Ushuaia", "https://www.iana.org/time-zones"), Description("America/Argentina/Ushuaia")]
      America/Argentina/Ushuaia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Aruba", "https://www.iana.org/time-zones"), Description("America/Aruba")]
      America/Aruba,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Asuncion", "https://www.iana.org/time-zones"), Description("America/Asuncion")]
      America/Asuncion,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Atikokan", "https://www.iana.org/time-zones"), Description("America/Atikokan")]
      America/Atikokan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Bahia", "https://www.iana.org/time-zones"), Description("America/Bahia")]
      America/Bahia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Bahia_Banderas", "https://www.iana.org/time-zones"), Description("America/Bahia_Banderas")]
      America/Bahia_Banderas,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Barbados", "https://www.iana.org/time-zones"), Description("America/Barbados")]
      America/Barbados,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Belem", "https://www.iana.org/time-zones"), Description("America/Belem")]
      America/Belem,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Belize", "https://www.iana.org/time-zones"), Description("America/Belize")]
      America/Belize,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Blanc-Sablon", "https://www.iana.org/time-zones"), Description("America/Blanc-Sablon")]
      America/BlancSablon,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Boa_Vista", "https://www.iana.org/time-zones"), Description("America/Boa_Vista")]
      America/Boa_Vista,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Bogota", "https://www.iana.org/time-zones"), Description("America/Bogota")]
      America/Bogota,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Boise", "https://www.iana.org/time-zones"), Description("America/Boise")]
      America/Boise,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Cambridge_Bay", "https://www.iana.org/time-zones"), Description("America/Cambridge_Bay")]
      America/Cambridge_Bay,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Campo_Grande", "https://www.iana.org/time-zones"), Description("America/Campo_Grande")]
      America/Campo_Grande,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Cancun", "https://www.iana.org/time-zones"), Description("America/Cancun")]
      America/Cancun,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Caracas", "https://www.iana.org/time-zones"), Description("America/Caracas")]
      America/Caracas,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Cayenne", "https://www.iana.org/time-zones"), Description("America/Cayenne")]
      America/Cayenne,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Cayman", "https://www.iana.org/time-zones"), Description("America/Cayman")]
      America/Cayman,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Chicago", "https://www.iana.org/time-zones"), Description("America/Chicago")]
      America/Chicago,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Chihuahua", "https://www.iana.org/time-zones"), Description("America/Chihuahua")]
      America/Chihuahua,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Coral_Harbour", "https://www.iana.org/time-zones"), Description("America/Coral_Harbour")]
      America/Coral_Harbour,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Costa_Rica", "https://www.iana.org/time-zones"), Description("America/Costa_Rica")]
      America/Costa_Rica,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Creston", "https://www.iana.org/time-zones"), Description("America/Creston")]
      America/Creston,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Cuiaba", "https://www.iana.org/time-zones"), Description("America/Cuiaba")]
      America/Cuiaba,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Curacao", "https://www.iana.org/time-zones"), Description("America/Curacao")]
      America/Curacao,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Danmarkshavn", "https://www.iana.org/time-zones"), Description("America/Danmarkshavn")]
      America/Danmarkshavn,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Dawson", "https://www.iana.org/time-zones"), Description("America/Dawson")]
      America/Dawson,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Dawson_Creek", "https://www.iana.org/time-zones"), Description("America/Dawson_Creek")]
      America/Dawson_Creek,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Denver", "https://www.iana.org/time-zones"), Description("America/Denver")]
      America/Denver,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Detroit", "https://www.iana.org/time-zones"), Description("America/Detroit")]
      America/Detroit,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Dominica", "https://www.iana.org/time-zones"), Description("America/Dominica")]
      America/Dominica,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Edmonton", "https://www.iana.org/time-zones"), Description("America/Edmonton")]
      America/Edmonton,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Eirunepe", "https://www.iana.org/time-zones"), Description("America/Eirunepe")]
      America/Eirunepe,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/El_Salvador", "https://www.iana.org/time-zones"), Description("America/El_Salvador")]
      America/El_Salvador,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Ensenada", "https://www.iana.org/time-zones"), Description("America/Ensenada")]
      America/Ensenada,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Fort_Nelson", "https://www.iana.org/time-zones"), Description("America/Fort_Nelson")]
      America/Fort_Nelson,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Fortaleza", "https://www.iana.org/time-zones"), Description("America/Fortaleza")]
      America/Fortaleza,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Glace_Bay", "https://www.iana.org/time-zones"), Description("America/Glace_Bay")]
      America/Glace_Bay,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Goose_Bay", "https://www.iana.org/time-zones"), Description("America/Goose_Bay")]
      America/Goose_Bay,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Grand_Turk", "https://www.iana.org/time-zones"), Description("America/Grand_Turk")]
      America/Grand_Turk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Grenada", "https://www.iana.org/time-zones"), Description("America/Grenada")]
      America/Grenada,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Guadeloupe", "https://www.iana.org/time-zones"), Description("America/Guadeloupe")]
      America/Guadeloupe,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Guatemala", "https://www.iana.org/time-zones"), Description("America/Guatemala")]
      America/Guatemala,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Guayaquil", "https://www.iana.org/time-zones"), Description("America/Guayaquil")]
      America/Guayaquil,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Guyana", "https://www.iana.org/time-zones"), Description("America/Guyana")]
      America/Guyana,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Halifax", "https://www.iana.org/time-zones"), Description("America/Halifax")]
      America/Halifax,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Havana", "https://www.iana.org/time-zones"), Description("America/Havana")]
      America/Havana,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Hermosillo", "https://www.iana.org/time-zones"), Description("America/Hermosillo")]
      America/Hermosillo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Indianapolis", "https://www.iana.org/time-zones"), Description("America/Indiana/Indianapolis")]
      America/Indiana/Indianapolis,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Knox", "https://www.iana.org/time-zones"), Description("America/Indiana/Knox")]
      America/Indiana/Knox,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Marengo", "https://www.iana.org/time-zones"), Description("America/Indiana/Marengo")]
      America/Indiana/Marengo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Petersburg", "https://www.iana.org/time-zones"), Description("America/Indiana/Petersburg")]
      America/Indiana/Petersburg,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Tell_City", "https://www.iana.org/time-zones"), Description("America/Indiana/Tell_City")]
      America/Indiana/Tell_City,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Vevay", "https://www.iana.org/time-zones"), Description("America/Indiana/Vevay")]
      America/Indiana/Vevay,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Vincennes", "https://www.iana.org/time-zones"), Description("America/Indiana/Vincennes")]
      America/Indiana/Vincennes,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Indiana/Winamac", "https://www.iana.org/time-zones"), Description("America/Indiana/Winamac")]
      America/Indiana/Winamac,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Inuvik", "https://www.iana.org/time-zones"), Description("America/Inuvik")]
      America/Inuvik,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Iqaluit", "https://www.iana.org/time-zones"), Description("America/Iqaluit")]
      America/Iqaluit,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Jamaica", "https://www.iana.org/time-zones"), Description("America/Jamaica")]
      America/Jamaica,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Juneau", "https://www.iana.org/time-zones"), Description("America/Juneau")]
      America/Juneau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Kentucky/Louisville", "https://www.iana.org/time-zones"), Description("America/Kentucky/Louisville")]
      America/Kentucky/Louisville,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Kentucky/Monticello", "https://www.iana.org/time-zones"), Description("America/Kentucky/Monticello")]
      America/Kentucky/Monticello,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/La_Paz", "https://www.iana.org/time-zones"), Description("America/La_Paz")]
      America/La_Paz,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Lima", "https://www.iana.org/time-zones"), Description("America/Lima")]
      America/Lima,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Los_Angeles", "https://www.iana.org/time-zones"), Description("America/Los_Angeles")]
      America/Los_Angeles,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Maceio", "https://www.iana.org/time-zones"), Description("America/Maceio")]
      America/Maceio,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Managua", "https://www.iana.org/time-zones"), Description("America/Managua")]
      America/Managua,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Manaus", "https://www.iana.org/time-zones"), Description("America/Manaus")]
      America/Manaus,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Martinique", "https://www.iana.org/time-zones"), Description("America/Martinique")]
      America/Martinique,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Matamoros", "https://www.iana.org/time-zones"), Description("America/Matamoros")]
      America/Matamoros,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Mazatlan", "https://www.iana.org/time-zones"), Description("America/Mazatlan")]
      America/Mazatlan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Menominee", "https://www.iana.org/time-zones"), Description("America/Menominee")]
      America/Menominee,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Merida", "https://www.iana.org/time-zones"), Description("America/Merida")]
      America/Merida,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Metlakatla", "https://www.iana.org/time-zones"), Description("America/Metlakatla")]
      America/Metlakatla,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Mexico_City", "https://www.iana.org/time-zones"), Description("America/Mexico_City")]
      America/Mexico_City,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Miquelon", "https://www.iana.org/time-zones"), Description("America/Miquelon")]
      America/Miquelon,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Moncton", "https://www.iana.org/time-zones"), Description("America/Moncton")]
      America/Moncton,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Monterrey", "https://www.iana.org/time-zones"), Description("America/Monterrey")]
      America/Monterrey,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Montevideo", "https://www.iana.org/time-zones"), Description("America/Montevideo")]
      America/Montevideo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Montreal", "https://www.iana.org/time-zones"), Description("America/Montreal")]
      America/Montreal,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Montserrat", "https://www.iana.org/time-zones"), Description("America/Montserrat")]
      America/Montserrat,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Nassau", "https://www.iana.org/time-zones"), Description("America/Nassau")]
      America/Nassau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/New_York", "https://www.iana.org/time-zones"), Description("America/New_York")]
      America/New_York,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Nipigon", "https://www.iana.org/time-zones"), Description("America/Nipigon")]
      America/Nipigon,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Nome", "https://www.iana.org/time-zones"), Description("America/Nome")]
      America/Nome,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Noronha", "https://www.iana.org/time-zones"), Description("America/Noronha")]
      America/Noronha,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/North_Dakota/Beulah", "https://www.iana.org/time-zones"), Description("America/North_Dakota/Beulah")]
      America/North_Dakota/Beulah,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/North_Dakota/Center", "https://www.iana.org/time-zones"), Description("America/North_Dakota/Center")]
      America/North_Dakota/Center,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/North_Dakota/New_Salem", "https://www.iana.org/time-zones"), Description("America/North_Dakota/New_Salem")]
      America/North_Dakota/New_Salem,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Nuuk", "https://www.iana.org/time-zones"), Description("America/Nuuk")]
      America/Nuuk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Ojinaga", "https://www.iana.org/time-zones"), Description("America/Ojinaga")]
      America/Ojinaga,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Panama", "https://www.iana.org/time-zones"), Description("America/Panama")]
      America/Panama,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Pangnirtung", "https://www.iana.org/time-zones"), Description("America/Pangnirtung")]
      America/Pangnirtung,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Paramaribo", "https://www.iana.org/time-zones"), Description("America/Paramaribo")]
      America/Paramaribo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Phoenix", "https://www.iana.org/time-zones"), Description("America/Phoenix")]
      America/Phoenix,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Port-au-Prince", "https://www.iana.org/time-zones"), Description("America/Port-au-Prince")]
      America/PortAuPrince,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Port_of_Spain", "https://www.iana.org/time-zones"), Description("America/Port_of_Spain")]
      America/Port_of_Spain,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Porto_Velho", "https://www.iana.org/time-zones"), Description("America/Porto_Velho")]
      America/Porto_Velho,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Puerto_Rico", "https://www.iana.org/time-zones"), Description("America/Puerto_Rico")]
      America/Puerto_Rico,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Punta_Arenas", "https://www.iana.org/time-zones"), Description("America/Punta_Arenas")]
      America/Punta_Arenas,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Rainy_River", "https://www.iana.org/time-zones"), Description("America/Rainy_River")]
      America/Rainy_River,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Rankin_Inlet", "https://www.iana.org/time-zones"), Description("America/Rankin_Inlet")]
      America/Rankin_Inlet,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Recife", "https://www.iana.org/time-zones"), Description("America/Recife")]
      America/Recife,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Regina", "https://www.iana.org/time-zones"), Description("America/Regina")]
      America/Regina,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Resolute", "https://www.iana.org/time-zones"), Description("America/Resolute")]
      America/Resolute,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Rio_Branco", "https://www.iana.org/time-zones"), Description("America/Rio_Branco")]
      America/Rio_Branco,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Rosario", "https://www.iana.org/time-zones"), Description("America/Rosario")]
      America/Rosario,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Santarem", "https://www.iana.org/time-zones"), Description("America/Santarem")]
      America/Santarem,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Santiago", "https://www.iana.org/time-zones"), Description("America/Santiago")]
      America/Santiago,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Santo_Domingo", "https://www.iana.org/time-zones"), Description("America/Santo_Domingo")]
      America/Santo_Domingo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Sao_Paulo", "https://www.iana.org/time-zones"), Description("America/Sao_Paulo")]
      America/Sao_Paulo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Scoresbysund", "https://www.iana.org/time-zones"), Description("America/Scoresbysund")]
      America/Scoresbysund,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Sitka", "https://www.iana.org/time-zones"), Description("America/Sitka")]
      America/Sitka,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/St_Johns", "https://www.iana.org/time-zones"), Description("America/St_Johns")]
      America/St_Johns,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/St_Kitts", "https://www.iana.org/time-zones"), Description("America/St_Kitts")]
      America/St_Kitts,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/St_Lucia", "https://www.iana.org/time-zones"), Description("America/St_Lucia")]
      America/St_Lucia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/St_Thomas", "https://www.iana.org/time-zones"), Description("America/St_Thomas")]
      America/St_Thomas,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/St_Vincent", "https://www.iana.org/time-zones"), Description("America/St_Vincent")]
      America/St_Vincent,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Swift_Current", "https://www.iana.org/time-zones"), Description("America/Swift_Current")]
      America/Swift_Current,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Tegucigalpa", "https://www.iana.org/time-zones"), Description("America/Tegucigalpa")]
      America/Tegucigalpa,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Thule", "https://www.iana.org/time-zones"), Description("America/Thule")]
      America/Thule,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Thunder_Bay", "https://www.iana.org/time-zones"), Description("America/Thunder_Bay")]
      America/Thunder_Bay,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Tijuana", "https://www.iana.org/time-zones"), Description("America/Tijuana")]
      America/Tijuana,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Toronto", "https://www.iana.org/time-zones"), Description("America/Toronto")]
      America/Toronto,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Tortola", "https://www.iana.org/time-zones"), Description("America/Tortola")]
      America/Tortola,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Vancouver", "https://www.iana.org/time-zones"), Description("America/Vancouver")]
      America/Vancouver,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Whitehorse", "https://www.iana.org/time-zones"), Description("America/Whitehorse")]
      America/Whitehorse,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Winnipeg", "https://www.iana.org/time-zones"), Description("America/Winnipeg")]
      America/Winnipeg,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Yakutat", "https://www.iana.org/time-zones"), Description("America/Yakutat")]
      America/Yakutat,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("America/Yellowknife", "https://www.iana.org/time-zones"), Description("America/Yellowknife")]
      America/Yellowknife,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Casey", "https://www.iana.org/time-zones"), Description("Antarctica/Casey")]
      Antarctica/Casey,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Davis", "https://www.iana.org/time-zones"), Description("Antarctica/Davis")]
      Antarctica/Davis,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/DumontDUrville", "https://www.iana.org/time-zones"), Description("Antarctica/DumontDUrville")]
      Antarctica/DumontDUrville,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Macquarie", "https://www.iana.org/time-zones"), Description("Antarctica/Macquarie")]
      Antarctica/Macquarie,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Mawson", "https://www.iana.org/time-zones"), Description("Antarctica/Mawson")]
      Antarctica/Mawson,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/McMurdo", "https://www.iana.org/time-zones"), Description("Antarctica/McMurdo")]
      Antarctica/McMurdo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Palmer", "https://www.iana.org/time-zones"), Description("Antarctica/Palmer")]
      Antarctica/Palmer,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Rothera", "https://www.iana.org/time-zones"), Description("Antarctica/Rothera")]
      Antarctica/Rothera,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Syowa", "https://www.iana.org/time-zones"), Description("Antarctica/Syowa")]
      Antarctica/Syowa,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Troll", "https://www.iana.org/time-zones"), Description("Antarctica/Troll")]
      Antarctica/Troll,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Antarctica/Vostok", "https://www.iana.org/time-zones"), Description("Antarctica/Vostok")]
      Antarctica/Vostok,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Aden", "https://www.iana.org/time-zones"), Description("Asia/Aden")]
      Asia/Aden,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Almaty", "https://www.iana.org/time-zones"), Description("Asia/Almaty")]
      Asia/Almaty,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Amman", "https://www.iana.org/time-zones"), Description("Asia/Amman")]
      Asia/Amman,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Anadyr", "https://www.iana.org/time-zones"), Description("Asia/Anadyr")]
      Asia/Anadyr,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Aqtau", "https://www.iana.org/time-zones"), Description("Asia/Aqtau")]
      Asia/Aqtau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Aqtobe", "https://www.iana.org/time-zones"), Description("Asia/Aqtobe")]
      Asia/Aqtobe,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Ashgabat", "https://www.iana.org/time-zones"), Description("Asia/Ashgabat")]
      Asia/Ashgabat,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Atyrau", "https://www.iana.org/time-zones"), Description("Asia/Atyrau")]
      Asia/Atyrau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Baghdad", "https://www.iana.org/time-zones"), Description("Asia/Baghdad")]
      Asia/Baghdad,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Bahrain", "https://www.iana.org/time-zones"), Description("Asia/Bahrain")]
      Asia/Bahrain,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Baku", "https://www.iana.org/time-zones"), Description("Asia/Baku")]
      Asia/Baku,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Bangkok", "https://www.iana.org/time-zones"), Description("Asia/Bangkok")]
      Asia/Bangkok,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Barnaul", "https://www.iana.org/time-zones"), Description("Asia/Barnaul")]
      Asia/Barnaul,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Beirut", "https://www.iana.org/time-zones"), Description("Asia/Beirut")]
      Asia/Beirut,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Bishkek", "https://www.iana.org/time-zones"), Description("Asia/Bishkek")]
      Asia/Bishkek,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Brunei", "https://www.iana.org/time-zones"), Description("Asia/Brunei")]
      Asia/Brunei,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Chita", "https://www.iana.org/time-zones"), Description("Asia/Chita")]
      Asia/Chita,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Choibalsan", "https://www.iana.org/time-zones"), Description("Asia/Choibalsan")]
      Asia/Choibalsan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Chongqing", "https://www.iana.org/time-zones"), Description("Asia/Chongqing")]
      Asia/Chongqing,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Colombo", "https://www.iana.org/time-zones"), Description("Asia/Colombo")]
      Asia/Colombo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Damascus", "https://www.iana.org/time-zones"), Description("Asia/Damascus")]
      Asia/Damascus,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Dhaka", "https://www.iana.org/time-zones"), Description("Asia/Dhaka")]
      Asia/Dhaka,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Dili", "https://www.iana.org/time-zones"), Description("Asia/Dili")]
      Asia/Dili,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Dubai", "https://www.iana.org/time-zones"), Description("Asia/Dubai")]
      Asia/Dubai,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Dushanbe", "https://www.iana.org/time-zones"), Description("Asia/Dushanbe")]
      Asia/Dushanbe,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Famagusta", "https://www.iana.org/time-zones"), Description("Asia/Famagusta")]
      Asia/Famagusta,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Gaza", "https://www.iana.org/time-zones"), Description("Asia/Gaza")]
      Asia/Gaza,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Hanoi", "https://www.iana.org/time-zones"), Description("Asia/Hanoi")]
      Asia/Hanoi,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Harbin", "https://www.iana.org/time-zones"), Description("Asia/Harbin")]
      Asia/Harbin,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Hebron", "https://www.iana.org/time-zones"), Description("Asia/Hebron")]
      Asia/Hebron,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Ho_Chi_Minh", "https://www.iana.org/time-zones"), Description("Asia/Ho_Chi_Minh")]
      Asia/Ho_Chi_Minh,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Hong_Kong", "https://www.iana.org/time-zones"), Description("Asia/Hong_Kong")]
      Asia/Hong_Kong,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Hovd", "https://www.iana.org/time-zones"), Description("Asia/Hovd")]
      Asia/Hovd,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Irkutsk", "https://www.iana.org/time-zones"), Description("Asia/Irkutsk")]
      Asia/Irkutsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Jakarta", "https://www.iana.org/time-zones"), Description("Asia/Jakarta")]
      Asia/Jakarta,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Jayapura", "https://www.iana.org/time-zones"), Description("Asia/Jayapura")]
      Asia/Jayapura,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Jerusalem", "https://www.iana.org/time-zones"), Description("Asia/Jerusalem")]
      Asia/Jerusalem,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kabul", "https://www.iana.org/time-zones"), Description("Asia/Kabul")]
      Asia/Kabul,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kamchatka", "https://www.iana.org/time-zones"), Description("Asia/Kamchatka")]
      Asia/Kamchatka,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Karachi", "https://www.iana.org/time-zones"), Description("Asia/Karachi")]
      Asia/Karachi,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kashgar", "https://www.iana.org/time-zones"), Description("Asia/Kashgar")]
      Asia/Kashgar,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kathmandu", "https://www.iana.org/time-zones"), Description("Asia/Kathmandu")]
      Asia/Kathmandu,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Khandyga", "https://www.iana.org/time-zones"), Description("Asia/Khandyga")]
      Asia/Khandyga,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kolkata", "https://www.iana.org/time-zones"), Description("Asia/Kolkata")]
      Asia/Kolkata,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Krasnoyarsk", "https://www.iana.org/time-zones"), Description("Asia/Krasnoyarsk")]
      Asia/Krasnoyarsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kuala_Lumpur", "https://www.iana.org/time-zones"), Description("Asia/Kuala_Lumpur")]
      Asia/Kuala_Lumpur,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kuching", "https://www.iana.org/time-zones"), Description("Asia/Kuching")]
      Asia/Kuching,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Kuwait", "https://www.iana.org/time-zones"), Description("Asia/Kuwait")]
      Asia/Kuwait,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Macau", "https://www.iana.org/time-zones"), Description("Asia/Macau")]
      Asia/Macau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Magadan", "https://www.iana.org/time-zones"), Description("Asia/Magadan")]
      Asia/Magadan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Makassar", "https://www.iana.org/time-zones"), Description("Asia/Makassar")]
      Asia/Makassar,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Manila", "https://www.iana.org/time-zones"), Description("Asia/Manila")]
      Asia/Manila,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Muscat", "https://www.iana.org/time-zones"), Description("Asia/Muscat")]
      Asia/Muscat,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Nicosia", "https://www.iana.org/time-zones"), Description("Asia/Nicosia")]
      Asia/Nicosia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Novokuznetsk", "https://www.iana.org/time-zones"), Description("Asia/Novokuznetsk")]
      Asia/Novokuznetsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Novosibirsk", "https://www.iana.org/time-zones"), Description("Asia/Novosibirsk")]
      Asia/Novosibirsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Omsk", "https://www.iana.org/time-zones"), Description("Asia/Omsk")]
      Asia/Omsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Oral", "https://www.iana.org/time-zones"), Description("Asia/Oral")]
      Asia/Oral,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Phnom_Penh", "https://www.iana.org/time-zones"), Description("Asia/Phnom_Penh")]
      Asia/Phnom_Penh,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Pontianak", "https://www.iana.org/time-zones"), Description("Asia/Pontianak")]
      Asia/Pontianak,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Pyongyang", "https://www.iana.org/time-zones"), Description("Asia/Pyongyang")]
      Asia/Pyongyang,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Qatar", "https://www.iana.org/time-zones"), Description("Asia/Qatar")]
      Asia/Qatar,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Qostanay", "https://www.iana.org/time-zones"), Description("Asia/Qostanay")]
      Asia/Qostanay,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Qyzylorda", "https://www.iana.org/time-zones"), Description("Asia/Qyzylorda")]
      Asia/Qyzylorda,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Riyadh", "https://www.iana.org/time-zones"), Description("Asia/Riyadh")]
      Asia/Riyadh,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Sakhalin", "https://www.iana.org/time-zones"), Description("Asia/Sakhalin")]
      Asia/Sakhalin,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Samarkand", "https://www.iana.org/time-zones"), Description("Asia/Samarkand")]
      Asia/Samarkand,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Seoul", "https://www.iana.org/time-zones"), Description("Asia/Seoul")]
      Asia/Seoul,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Shanghai", "https://www.iana.org/time-zones"), Description("Asia/Shanghai")]
      Asia/Shanghai,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Singapore", "https://www.iana.org/time-zones"), Description("Asia/Singapore")]
      Asia/Singapore,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Srednekolymsk", "https://www.iana.org/time-zones"), Description("Asia/Srednekolymsk")]
      Asia/Srednekolymsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Taipei", "https://www.iana.org/time-zones"), Description("Asia/Taipei")]
      Asia/Taipei,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Tashkent", "https://www.iana.org/time-zones"), Description("Asia/Tashkent")]
      Asia/Tashkent,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Tbilisi", "https://www.iana.org/time-zones"), Description("Asia/Tbilisi")]
      Asia/Tbilisi,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Tehran", "https://www.iana.org/time-zones"), Description("Asia/Tehran")]
      Asia/Tehran,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Tel_Aviv", "https://www.iana.org/time-zones"), Description("Asia/Tel_Aviv")]
      Asia/Tel_Aviv,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Thimphu", "https://www.iana.org/time-zones"), Description("Asia/Thimphu")]
      Asia/Thimphu,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Tokyo", "https://www.iana.org/time-zones"), Description("Asia/Tokyo")]
      Asia/Tokyo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Tomsk", "https://www.iana.org/time-zones"), Description("Asia/Tomsk")]
      Asia/Tomsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Ulaanbaatar", "https://www.iana.org/time-zones"), Description("Asia/Ulaanbaatar")]
      Asia/Ulaanbaatar,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Urumqi", "https://www.iana.org/time-zones"), Description("Asia/Urumqi")]
      Asia/Urumqi,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Ust-Nera", "https://www.iana.org/time-zones"), Description("Asia/Ust-Nera")]
      Asia/UstNera,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Vientiane", "https://www.iana.org/time-zones"), Description("Asia/Vientiane")]
      Asia/Vientiane,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Vladivostok", "https://www.iana.org/time-zones"), Description("Asia/Vladivostok")]
      Asia/Vladivostok,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Yakutsk", "https://www.iana.org/time-zones"), Description("Asia/Yakutsk")]
      Asia/Yakutsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Yangon", "https://www.iana.org/time-zones"), Description("Asia/Yangon")]
      Asia/Yangon,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Yekaterinburg", "https://www.iana.org/time-zones"), Description("Asia/Yekaterinburg")]
      Asia/Yekaterinburg,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Asia/Yerevan", "https://www.iana.org/time-zones"), Description("Asia/Yerevan")]
      Asia/Yerevan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Azores", "https://www.iana.org/time-zones"), Description("Atlantic/Azores")]
      Atlantic/Azores,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Bermuda", "https://www.iana.org/time-zones"), Description("Atlantic/Bermuda")]
      Atlantic/Bermuda,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Canary", "https://www.iana.org/time-zones"), Description("Atlantic/Canary")]
      Atlantic/Canary,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Cape_Verde", "https://www.iana.org/time-zones"), Description("Atlantic/Cape_Verde")]
      Atlantic/Cape_Verde,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Faroe", "https://www.iana.org/time-zones"), Description("Atlantic/Faroe")]
      Atlantic/Faroe,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Jan_Mayen", "https://www.iana.org/time-zones"), Description("Atlantic/Jan_Mayen")]
      Atlantic/Jan_Mayen,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Madeira", "https://www.iana.org/time-zones"), Description("Atlantic/Madeira")]
      Atlantic/Madeira,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Reykjavik", "https://www.iana.org/time-zones"), Description("Atlantic/Reykjavik")]
      Atlantic/Reykjavik,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/South_Georgia", "https://www.iana.org/time-zones"), Description("Atlantic/South_Georgia")]
      Atlantic/South_Georgia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/St_Helena", "https://www.iana.org/time-zones"), Description("Atlantic/St_Helena")]
      Atlantic/St_Helena,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Atlantic/Stanley", "https://www.iana.org/time-zones"), Description("Atlantic/Stanley")]
      Atlantic/Stanley,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Adelaide", "https://www.iana.org/time-zones"), Description("Australia/Adelaide")]
      Australia/Adelaide,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Brisbane", "https://www.iana.org/time-zones"), Description("Australia/Brisbane")]
      Australia/Brisbane,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Broken_Hill", "https://www.iana.org/time-zones"), Description("Australia/Broken_Hill")]
      Australia/Broken_Hill,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Currie", "https://www.iana.org/time-zones"), Description("Australia/Currie")]
      Australia/Currie,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Darwin", "https://www.iana.org/time-zones"), Description("Australia/Darwin")]
      Australia/Darwin,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Eucla", "https://www.iana.org/time-zones"), Description("Australia/Eucla")]
      Australia/Eucla,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Hobart", "https://www.iana.org/time-zones"), Description("Australia/Hobart")]
      Australia/Hobart,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Lindeman", "https://www.iana.org/time-zones"), Description("Australia/Lindeman")]
      Australia/Lindeman,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Lord_Howe", "https://www.iana.org/time-zones"), Description("Australia/Lord_Howe")]
      Australia/Lord_Howe,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Melbourne", "https://www.iana.org/time-zones"), Description("Australia/Melbourne")]
      Australia/Melbourne,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Perth", "https://www.iana.org/time-zones"), Description("Australia/Perth")]
      Australia/Perth,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Australia/Sydney", "https://www.iana.org/time-zones"), Description("Australia/Sydney")]
      Australia/Sydney,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("CET", "https://www.iana.org/time-zones"), Description("CET")]
      CET,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("CST6CDT", "https://www.iana.org/time-zones"), Description("CST6CDT")]
      CST6CDT,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("EET", "https://www.iana.org/time-zones"), Description("EET")]
      EET,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("EST", "https://www.iana.org/time-zones"), Description("EST")]
      EST,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("EST5EDT", "https://www.iana.org/time-zones"), Description("EST5EDT")]
      EST5EDT,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT", "https://www.iana.org/time-zones"), Description("Etc/GMT")]
      Etc/GMT,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+1", "https://www.iana.org/time-zones"), Description("Etc/GMT+1")]
      Etc/GMT+1,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+10", "https://www.iana.org/time-zones"), Description("Etc/GMT+10")]
      Etc/GMT+10,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+11", "https://www.iana.org/time-zones"), Description("Etc/GMT+11")]
      Etc/GMT+11,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+12", "https://www.iana.org/time-zones"), Description("Etc/GMT+12")]
      Etc/GMT+12,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+2", "https://www.iana.org/time-zones"), Description("Etc/GMT+2")]
      Etc/GMT+2,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+3", "https://www.iana.org/time-zones"), Description("Etc/GMT+3")]
      Etc/GMT+3,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+4", "https://www.iana.org/time-zones"), Description("Etc/GMT+4")]
      Etc/GMT+4,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+5", "https://www.iana.org/time-zones"), Description("Etc/GMT+5")]
      Etc/GMT+5,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+6", "https://www.iana.org/time-zones"), Description("Etc/GMT+6")]
      Etc/GMT+6,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+7", "https://www.iana.org/time-zones"), Description("Etc/GMT+7")]
      Etc/GMT+7,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+8", "https://www.iana.org/time-zones"), Description("Etc/GMT+8")]
      Etc/GMT+8,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT+9", "https://www.iana.org/time-zones"), Description("Etc/GMT+9")]
      Etc/GMT+9,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-1", "https://www.iana.org/time-zones"), Description("Etc/GMT-1")]
      Etc/GMT1,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-10", "https://www.iana.org/time-zones"), Description("Etc/GMT-10")]
      Etc/GMT10,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-11", "https://www.iana.org/time-zones"), Description("Etc/GMT-11")]
      Etc/GMT11,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-12", "https://www.iana.org/time-zones"), Description("Etc/GMT-12")]
      Etc/GMT12,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-13", "https://www.iana.org/time-zones"), Description("Etc/GMT-13")]
      Etc/GMT13,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-14", "https://www.iana.org/time-zones"), Description("Etc/GMT-14")]
      Etc/GMT14,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-2", "https://www.iana.org/time-zones"), Description("Etc/GMT-2")]
      Etc/GMT2,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-3", "https://www.iana.org/time-zones"), Description("Etc/GMT-3")]
      Etc/GMT3,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-4", "https://www.iana.org/time-zones"), Description("Etc/GMT-4")]
      Etc/GMT4,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-5", "https://www.iana.org/time-zones"), Description("Etc/GMT-5")]
      Etc/GMT5,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-6", "https://www.iana.org/time-zones"), Description("Etc/GMT-6")]
      Etc/GMT6,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-7", "https://www.iana.org/time-zones"), Description("Etc/GMT-7")]
      Etc/GMT7,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-8", "https://www.iana.org/time-zones"), Description("Etc/GMT-8")]
      Etc/GMT8,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/GMT-9", "https://www.iana.org/time-zones"), Description("Etc/GMT-9")]
      Etc/GMT9,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Etc/UTC", "https://www.iana.org/time-zones"), Description("Etc/UTC")]
      Etc/UTC,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Amsterdam", "https://www.iana.org/time-zones"), Description("Europe/Amsterdam")]
      Europe/Amsterdam,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Andorra", "https://www.iana.org/time-zones"), Description("Europe/Andorra")]
      Europe/Andorra,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Astrakhan", "https://www.iana.org/time-zones"), Description("Europe/Astrakhan")]
      Europe/Astrakhan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Athens", "https://www.iana.org/time-zones"), Description("Europe/Athens")]
      Europe/Athens,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Belfast", "https://www.iana.org/time-zones"), Description("Europe/Belfast")]
      Europe/Belfast,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Belgrade", "https://www.iana.org/time-zones"), Description("Europe/Belgrade")]
      Europe/Belgrade,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Berlin", "https://www.iana.org/time-zones"), Description("Europe/Berlin")]
      Europe/Berlin,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Brussels", "https://www.iana.org/time-zones"), Description("Europe/Brussels")]
      Europe/Brussels,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Bucharest", "https://www.iana.org/time-zones"), Description("Europe/Bucharest")]
      Europe/Bucharest,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Budapest", "https://www.iana.org/time-zones"), Description("Europe/Budapest")]
      Europe/Budapest,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Chisinau", "https://www.iana.org/time-zones"), Description("Europe/Chisinau")]
      Europe/Chisinau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Copenhagen", "https://www.iana.org/time-zones"), Description("Europe/Copenhagen")]
      Europe/Copenhagen,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Dublin", "https://www.iana.org/time-zones"), Description("Europe/Dublin")]
      Europe/Dublin,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Gibraltar", "https://www.iana.org/time-zones"), Description("Europe/Gibraltar")]
      Europe/Gibraltar,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Guernsey", "https://www.iana.org/time-zones"), Description("Europe/Guernsey")]
      Europe/Guernsey,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Helsinki", "https://www.iana.org/time-zones"), Description("Europe/Helsinki")]
      Europe/Helsinki,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Isle_of_Man", "https://www.iana.org/time-zones"), Description("Europe/Isle_of_Man")]
      Europe/Isle_of_Man,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Istanbul", "https://www.iana.org/time-zones"), Description("Europe/Istanbul")]
      Europe/Istanbul,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Jersey", "https://www.iana.org/time-zones"), Description("Europe/Jersey")]
      Europe/Jersey,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Kaliningrad", "https://www.iana.org/time-zones"), Description("Europe/Kaliningrad")]
      Europe/Kaliningrad,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Kiev", "https://www.iana.org/time-zones"), Description("Europe/Kiev")]
      Europe/Kiev,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Kirov", "https://www.iana.org/time-zones"), Description("Europe/Kirov")]
      Europe/Kirov,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Lisbon", "https://www.iana.org/time-zones"), Description("Europe/Lisbon")]
      Europe/Lisbon,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Ljubljana", "https://www.iana.org/time-zones"), Description("Europe/Ljubljana")]
      Europe/Ljubljana,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/London", "https://www.iana.org/time-zones"), Description("Europe/London")]
      Europe/London,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Luxembourg", "https://www.iana.org/time-zones"), Description("Europe/Luxembourg")]
      Europe/Luxembourg,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Madrid", "https://www.iana.org/time-zones"), Description("Europe/Madrid")]
      Europe/Madrid,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Malta", "https://www.iana.org/time-zones"), Description("Europe/Malta")]
      Europe/Malta,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Minsk", "https://www.iana.org/time-zones"), Description("Europe/Minsk")]
      Europe/Minsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Monaco", "https://www.iana.org/time-zones"), Description("Europe/Monaco")]
      Europe/Monaco,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Moscow", "https://www.iana.org/time-zones"), Description("Europe/Moscow")]
      Europe/Moscow,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Oslo", "https://www.iana.org/time-zones"), Description("Europe/Oslo")]
      Europe/Oslo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Paris", "https://www.iana.org/time-zones"), Description("Europe/Paris")]
      Europe/Paris,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Prague", "https://www.iana.org/time-zones"), Description("Europe/Prague")]
      Europe/Prague,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Riga", "https://www.iana.org/time-zones"), Description("Europe/Riga")]
      Europe/Riga,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Rome", "https://www.iana.org/time-zones"), Description("Europe/Rome")]
      Europe/Rome,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Samara", "https://www.iana.org/time-zones"), Description("Europe/Samara")]
      Europe/Samara,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Sarajevo", "https://www.iana.org/time-zones"), Description("Europe/Sarajevo")]
      Europe/Sarajevo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Saratov", "https://www.iana.org/time-zones"), Description("Europe/Saratov")]
      Europe/Saratov,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Simferopol", "https://www.iana.org/time-zones"), Description("Europe/Simferopol")]
      Europe/Simferopol,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Skopje", "https://www.iana.org/time-zones"), Description("Europe/Skopje")]
      Europe/Skopje,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Sofia", "https://www.iana.org/time-zones"), Description("Europe/Sofia")]
      Europe/Sofia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Stockholm", "https://www.iana.org/time-zones"), Description("Europe/Stockholm")]
      Europe/Stockholm,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Tallinn", "https://www.iana.org/time-zones"), Description("Europe/Tallinn")]
      Europe/Tallinn,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Tirane", "https://www.iana.org/time-zones"), Description("Europe/Tirane")]
      Europe/Tirane,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Tiraspol", "https://www.iana.org/time-zones"), Description("Europe/Tiraspol")]
      Europe/Tiraspol,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Ulyanovsk", "https://www.iana.org/time-zones"), Description("Europe/Ulyanovsk")]
      Europe/Ulyanovsk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Uzhgorod", "https://www.iana.org/time-zones"), Description("Europe/Uzhgorod")]
      Europe/Uzhgorod,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Vaduz", "https://www.iana.org/time-zones"), Description("Europe/Vaduz")]
      Europe/Vaduz,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Vienna", "https://www.iana.org/time-zones"), Description("Europe/Vienna")]
      Europe/Vienna,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Vilnius", "https://www.iana.org/time-zones"), Description("Europe/Vilnius")]
      Europe/Vilnius,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Volgograd", "https://www.iana.org/time-zones"), Description("Europe/Volgograd")]
      Europe/Volgograd,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Warsaw", "https://www.iana.org/time-zones"), Description("Europe/Warsaw")]
      Europe/Warsaw,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Zagreb", "https://www.iana.org/time-zones"), Description("Europe/Zagreb")]
      Europe/Zagreb,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Zaporozhye", "https://www.iana.org/time-zones"), Description("Europe/Zaporozhye")]
      Europe/Zaporozhye,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Europe/Zurich", "https://www.iana.org/time-zones"), Description("Europe/Zurich")]
      Europe/Zurich,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Factory", "https://www.iana.org/time-zones"), Description("Factory")]
      Factory,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("HST", "https://www.iana.org/time-zones"), Description("HST")]
      HST,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Antananarivo", "https://www.iana.org/time-zones"), Description("Indian/Antananarivo")]
      Indian/Antananarivo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Chagos", "https://www.iana.org/time-zones"), Description("Indian/Chagos")]
      Indian/Chagos,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Christmas", "https://www.iana.org/time-zones"), Description("Indian/Christmas")]
      Indian/Christmas,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Cocos", "https://www.iana.org/time-zones"), Description("Indian/Cocos")]
      Indian/Cocos,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Comoro", "https://www.iana.org/time-zones"), Description("Indian/Comoro")]
      Indian/Comoro,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Kerguelen", "https://www.iana.org/time-zones"), Description("Indian/Kerguelen")]
      Indian/Kerguelen,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Mahe", "https://www.iana.org/time-zones"), Description("Indian/Mahe")]
      Indian/Mahe,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Maldives", "https://www.iana.org/time-zones"), Description("Indian/Maldives")]
      Indian/Maldives,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Mauritius", "https://www.iana.org/time-zones"), Description("Indian/Mauritius")]
      Indian/Mauritius,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Mayotte", "https://www.iana.org/time-zones"), Description("Indian/Mayotte")]
      Indian/Mayotte,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Indian/Reunion", "https://www.iana.org/time-zones"), Description("Indian/Reunion")]
      Indian/Reunion,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("MET", "https://www.iana.org/time-zones"), Description("MET")]
      MET,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("MST", "https://www.iana.org/time-zones"), Description("MST")]
      MST,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("MST7MDT", "https://www.iana.org/time-zones"), Description("MST7MDT")]
      MST7MDT,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("PST8PDT", "https://www.iana.org/time-zones"), Description("PST8PDT")]
      PST8PDT,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Apia", "https://www.iana.org/time-zones"), Description("Pacific/Apia")]
      Pacific/Apia,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Auckland", "https://www.iana.org/time-zones"), Description("Pacific/Auckland")]
      Pacific/Auckland,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Bougainville", "https://www.iana.org/time-zones"), Description("Pacific/Bougainville")]
      Pacific/Bougainville,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Chatham", "https://www.iana.org/time-zones"), Description("Pacific/Chatham")]
      Pacific/Chatham,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Chuuk", "https://www.iana.org/time-zones"), Description("Pacific/Chuuk")]
      Pacific/Chuuk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Easter", "https://www.iana.org/time-zones"), Description("Pacific/Easter")]
      Pacific/Easter,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Efate", "https://www.iana.org/time-zones"), Description("Pacific/Efate")]
      Pacific/Efate,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Enderbury", "https://www.iana.org/time-zones"), Description("Pacific/Enderbury")]
      Pacific/Enderbury,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Fakaofo", "https://www.iana.org/time-zones"), Description("Pacific/Fakaofo")]
      Pacific/Fakaofo,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Fiji", "https://www.iana.org/time-zones"), Description("Pacific/Fiji")]
      Pacific/Fiji,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Funafuti", "https://www.iana.org/time-zones"), Description("Pacific/Funafuti")]
      Pacific/Funafuti,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Galapagos", "https://www.iana.org/time-zones"), Description("Pacific/Galapagos")]
      Pacific/Galapagos,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Gambier", "https://www.iana.org/time-zones"), Description("Pacific/Gambier")]
      Pacific/Gambier,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Guadalcanal", "https://www.iana.org/time-zones"), Description("Pacific/Guadalcanal")]
      Pacific/Guadalcanal,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Guam", "https://www.iana.org/time-zones"), Description("Pacific/Guam")]
      Pacific/Guam,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Honolulu", "https://www.iana.org/time-zones"), Description("Pacific/Honolulu")]
      Pacific/Honolulu,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Johnston", "https://www.iana.org/time-zones"), Description("Pacific/Johnston")]
      Pacific/Johnston,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Kiritimati", "https://www.iana.org/time-zones"), Description("Pacific/Kiritimati")]
      Pacific/Kiritimati,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Kosrae", "https://www.iana.org/time-zones"), Description("Pacific/Kosrae")]
      Pacific/Kosrae,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Kwajalein", "https://www.iana.org/time-zones"), Description("Pacific/Kwajalein")]
      Pacific/Kwajalein,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Majuro", "https://www.iana.org/time-zones"), Description("Pacific/Majuro")]
      Pacific/Majuro,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Marquesas", "https://www.iana.org/time-zones"), Description("Pacific/Marquesas")]
      Pacific/Marquesas,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Midway", "https://www.iana.org/time-zones"), Description("Pacific/Midway")]
      Pacific/Midway,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Nauru", "https://www.iana.org/time-zones"), Description("Pacific/Nauru")]
      Pacific/Nauru,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Niue", "https://www.iana.org/time-zones"), Description("Pacific/Niue")]
      Pacific/Niue,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Norfolk", "https://www.iana.org/time-zones"), Description("Pacific/Norfolk")]
      Pacific/Norfolk,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Noumea", "https://www.iana.org/time-zones"), Description("Pacific/Noumea")]
      Pacific/Noumea,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Pago_Pago", "https://www.iana.org/time-zones"), Description("Pacific/Pago_Pago")]
      Pacific/Pago_Pago,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Palau", "https://www.iana.org/time-zones"), Description("Pacific/Palau")]
      Pacific/Palau,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Pitcairn", "https://www.iana.org/time-zones"), Description("Pacific/Pitcairn")]
      Pacific/Pitcairn,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Pohnpei", "https://www.iana.org/time-zones"), Description("Pacific/Pohnpei")]
      Pacific/Pohnpei,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Port_Moresby", "https://www.iana.org/time-zones"), Description("Pacific/Port_Moresby")]
      Pacific/Port_Moresby,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Rarotonga", "https://www.iana.org/time-zones"), Description("Pacific/Rarotonga")]
      Pacific/Rarotonga,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Saipan", "https://www.iana.org/time-zones"), Description("Pacific/Saipan")]
      Pacific/Saipan,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Tahiti", "https://www.iana.org/time-zones"), Description("Pacific/Tahiti")]
      Pacific/Tahiti,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Tarawa", "https://www.iana.org/time-zones"), Description("Pacific/Tarawa")]
      Pacific/Tarawa,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Tongatapu", "https://www.iana.org/time-zones"), Description("Pacific/Tongatapu")]
      Pacific/Tongatapu,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Wake", "https://www.iana.org/time-zones"), Description("Pacific/Wake")]
      Pacific/Wake,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("Pacific/Wallis", "https://www.iana.org/time-zones"), Description("Pacific/Wallis")]
      Pacific/Wallis,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: https://www.iana.org/time-zones)
      /// </summary>
      [EnumLiteral("WET", "https://www.iana.org/time-zones"), Description("WET")]
      WET,
    }

    /// <summary>
    /// The set of weeks in a month.
    /// (url: http://hl7.org/fhir/ValueSet/week-of-month)
    /// (system: http://hl7.org/fhir/week-of-month)
    /// </summary>
    [FhirEnumeration("WeekOfMonth")]
    public enum WeekOfMonth
    {
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/week-of-month)
      /// </summary>
      [EnumLiteral("first", "http://hl7.org/fhir/week-of-month"), Description("First")]
      First,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/week-of-month)
      /// </summary>
      [EnumLiteral("second", "http://hl7.org/fhir/week-of-month"), Description("Second")]
      Second,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/week-of-month)
      /// </summary>
      [EnumLiteral("third", "http://hl7.org/fhir/week-of-month"), Description("Third")]
      Third,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/week-of-month)
      /// </summary>
      [EnumLiteral("fourth", "http://hl7.org/fhir/week-of-month"), Description("Fourth")]
      Fourth,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/week-of-month)
      /// </summary>
      [EnumLiteral("last", "http://hl7.org/fhir/week-of-month"), Description("Last")]
      Last,
    }

    /// <summary>
    /// Participants involved in appointment
    /// </summary>
    [FhirType("ParticipantComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class ParticipantComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "ParticipantComponent"; } }

      /// <summary>
      /// Role of participant in the appointment
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// Participation period of the actor
      /// </summary>
      [FhirElement("period", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      /// <summary>
      /// The individual, device, location, or service participating in the appointment
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=60)]
      [CLSCompliant(false)]
      [References("Patient","Group","Practitioner","PractitionerRole","CareTeam","RelatedPerson","Device","HealthcareService","Location")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      /// <summary>
      /// The participant is required to attend (optional when false)
      /// </summary>
      [FhirElement("required", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean RequiredElement
      {
        get { return _RequiredElement; }
        set { _RequiredElement = value; OnPropertyChanged("RequiredElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _RequiredElement;

      /// <summary>
      /// The participant is required to attend (optional when false)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Required
      {
        get { return RequiredElement != null ? RequiredElement.Value : null; }
        set
        {
          if (value == null)
            RequiredElement = null;
          else
            RequiredElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Required");
        }

      }

      /// <summary>
      /// accepted | declined | tentative | needs-action
      /// </summary>
      [FhirElement("status", InSummary=true, Order=80)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ParticipationStatus> StatusElement
      {
        get { return _StatusElement; }
        set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
      }

      private Code<Hl7.Fhir.Model.ParticipationStatus> _StatusElement;

      /// <summary>
      /// accepted | declined | tentative | needs-action
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public Hl7.Fhir.Model.ParticipationStatus? Status
      {
        get { return StatusElement != null ? StatusElement.Value : null; }
        set
        {
          if (value == null)
            StatusElement = null;
          else
            StatusElement = new Code<Hl7.Fhir.Model.ParticipationStatus>(value);
          OnPropertyChanged("Status");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParticipantComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        if(RequiredElement != null) dest.RequiredElement = (Hl7.Fhir.Model.FhirBoolean)RequiredElement.DeepCopy();
        if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.ParticipationStatus>)StatusElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParticipantComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
        if( !DeepComparable.Matches(RequiredElement, otherT.RequiredElement)) return false;
        if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
        if( !DeepComparable.IsExactly(RequiredElement, otherT.RequiredElement)) return false;
        if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (Period != null) yield return Period;
          if (Actor != null) yield return Actor;
          if (RequiredElement != null) yield return RequiredElement;
          if (StatusElement != null) yield return StatusElement;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (Period != null) yield return new ElementValue("period", Period);
          if (Actor != null) yield return new ElementValue("actor", Actor);
          if (RequiredElement != null) yield return new ElementValue("required", RequiredElement);
          if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        }

      }

    }

    /// <summary>
    /// Details of the recurrence pattern/template used to generate occurrences
    /// </summary>
    [FhirType("RecurrenceTemplateComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class RecurrenceTemplateComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "RecurrenceTemplateComponent"; } }

      /// <summary>
      /// The timezone of the occurrences
      /// </summary>
      [FhirElement("timezone", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Timezone
      {
        get { return _Timezone; }
        set { _Timezone = value; OnPropertyChanged("Timezone"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Timezone;

      /// <summary>
      /// The frequency of the recurrence
      /// </summary>
      [FhirElement("recurrenceType", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept RecurrenceType
      {
        get { return _RecurrenceType; }
        set { _RecurrenceType = value; OnPropertyChanged("RecurrenceType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _RecurrenceType;

      /// <summary>
      /// The date when the recurrence should end
      /// </summary>
      [FhirElement("lastOccurrenceDate", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Date LastOccurrenceDateElement
      {
        get { return _LastOccurrenceDateElement; }
        set { _LastOccurrenceDateElement = value; OnPropertyChanged("LastOccurrenceDateElement"); }
      }

      private Hl7.Fhir.Model.Date _LastOccurrenceDateElement;

      /// <summary>
      /// The date when the recurrence should end
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string LastOccurrenceDate
      {
        get { return LastOccurrenceDateElement != null ? LastOccurrenceDateElement.Value : null; }
        set
        {
          if (value == null)
            LastOccurrenceDateElement = null;
          else
            LastOccurrenceDateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("LastOccurrenceDate");
        }

      }

      /// <summary>
      /// The number of planned occurrences
      /// </summary>
      [FhirElement("occurrenceCount", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt OccurrenceCountElement
      {
        get { return _OccurrenceCountElement; }
        set { _OccurrenceCountElement = value; OnPropertyChanged("OccurrenceCountElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _OccurrenceCountElement;

      /// <summary>
      /// The number of planned occurrences
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public int? OccurrenceCount
      {
        get { return OccurrenceCountElement != null ? OccurrenceCountElement.Value : null; }
        set
        {
          if (value == null)
            OccurrenceCountElement = null;
          else
            OccurrenceCountElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("OccurrenceCount");
        }

      }

      /// <summary>
      /// Specific dates for a recurring set of appointments (no template)
      /// </summary>
      [FhirElement("occurrenceDate", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Date> OccurrenceDateElement
      {
        get { if(_OccurrenceDateElement==null) _OccurrenceDateElement = new List<Hl7.Fhir.Model.Date>(); return _OccurrenceDateElement; }
        set { _OccurrenceDateElement = value; OnPropertyChanged("OccurrenceDateElement"); }
      }

      private List<Hl7.Fhir.Model.Date> _OccurrenceDateElement;

      /// <summary>
      /// Specific dates for a recurring set of appointments (no template)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public IEnumerable<string> OccurrenceDate
      {
        get { return OccurrenceDateElement != null ? OccurrenceDateElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            OccurrenceDateElement = null;
          else
            OccurrenceDateElement = new List<Hl7.Fhir.Model.Date>(value.Select(elem=>new Hl7.Fhir.Model.Date(elem)));
          OnPropertyChanged("OccurrenceDate");
        }

      }

      /// <summary>
      /// Information about weekly recurring appointments
      /// </summary>
      [FhirElement("weeklyTemplate", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Appointment.WeeklyTemplateComponent WeeklyTemplate
      {
        get { return _WeeklyTemplate; }
        set { _WeeklyTemplate = value; OnPropertyChanged("WeeklyTemplate"); }
      }

      private Hl7.Fhir.Model.Appointment.WeeklyTemplateComponent _WeeklyTemplate;

      /// <summary>
      /// Information about monthly recurring appointments
      /// </summary>
      [FhirElement("monthlyTemplate", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.Appointment.MonthlyTemplateComponent MonthlyTemplate
      {
        get { return _MonthlyTemplate; }
        set { _MonthlyTemplate = value; OnPropertyChanged("MonthlyTemplate"); }
      }

      private Hl7.Fhir.Model.Appointment.MonthlyTemplateComponent _MonthlyTemplate;

      /// <summary>
      /// Information about yearly recurring appointments
      /// </summary>
      [FhirElement("yearlyTemplate", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Appointment.YearlyTemplateComponent YearlyTemplate
      {
        get { return _YearlyTemplate; }
        set { _YearlyTemplate = value; OnPropertyChanged("YearlyTemplate"); }
      }

      private Hl7.Fhir.Model.Appointment.YearlyTemplateComponent _YearlyTemplate;

      /// <summary>
      /// Any dates that should be excluded from the series
      /// </summary>
      [FhirElement("excludingDate", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Date> ExcludingDateElement
      {
        get { if(_ExcludingDateElement==null) _ExcludingDateElement = new List<Hl7.Fhir.Model.Date>(); return _ExcludingDateElement; }
        set { _ExcludingDateElement = value; OnPropertyChanged("ExcludingDateElement"); }
      }

      private List<Hl7.Fhir.Model.Date> _ExcludingDateElement;

      /// <summary>
      /// Any dates that should be excluded from the series
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public IEnumerable<string> ExcludingDate
      {
        get { return ExcludingDateElement != null ? ExcludingDateElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ExcludingDateElement = null;
          else
            ExcludingDateElement = new List<Hl7.Fhir.Model.Date>(value.Select(elem=>new Hl7.Fhir.Model.Date(elem)));
          OnPropertyChanged("ExcludingDate");
        }

      }

      /// <summary>
      /// Any recurrence IDs that should be excluded from the recurrence
      /// </summary>
      [FhirElement("excludingRecurrenceId", Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> ExcludingRecurrenceIdElement
      {
        get { if(_ExcludingRecurrenceIdElement==null) _ExcludingRecurrenceIdElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _ExcludingRecurrenceIdElement; }
        set { _ExcludingRecurrenceIdElement = value; OnPropertyChanged("ExcludingRecurrenceIdElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _ExcludingRecurrenceIdElement;

      /// <summary>
      /// Any recurrence IDs that should be excluded from the recurrence
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public IEnumerable<int?> ExcludingRecurrenceId
      {
        get { return ExcludingRecurrenceIdElement != null ? ExcludingRecurrenceIdElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ExcludingRecurrenceIdElement = null;
          else
            ExcludingRecurrenceIdElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("ExcludingRecurrenceId");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RecurrenceTemplateComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Timezone != null) dest.Timezone = (Hl7.Fhir.Model.CodeableConcept)Timezone.DeepCopy();
        if(RecurrenceType != null) dest.RecurrenceType = (Hl7.Fhir.Model.CodeableConcept)RecurrenceType.DeepCopy();
        if(LastOccurrenceDateElement != null) dest.LastOccurrenceDateElement = (Hl7.Fhir.Model.Date)LastOccurrenceDateElement.DeepCopy();
        if(OccurrenceCountElement != null) dest.OccurrenceCountElement = (Hl7.Fhir.Model.PositiveInt)OccurrenceCountElement.DeepCopy();
        if(OccurrenceDateElement != null) dest.OccurrenceDateElement = new List<Hl7.Fhir.Model.Date>(OccurrenceDateElement.DeepCopy());
        if(WeeklyTemplate != null) dest.WeeklyTemplate = (Hl7.Fhir.Model.Appointment.WeeklyTemplateComponent)WeeklyTemplate.DeepCopy();
        if(MonthlyTemplate != null) dest.MonthlyTemplate = (Hl7.Fhir.Model.Appointment.MonthlyTemplateComponent)MonthlyTemplate.DeepCopy();
        if(YearlyTemplate != null) dest.YearlyTemplate = (Hl7.Fhir.Model.Appointment.YearlyTemplateComponent)YearlyTemplate.DeepCopy();
        if(ExcludingDateElement != null) dest.ExcludingDateElement = new List<Hl7.Fhir.Model.Date>(ExcludingDateElement.DeepCopy());
        if(ExcludingRecurrenceIdElement != null) dest.ExcludingRecurrenceIdElement = new List<Hl7.Fhir.Model.PositiveInt>(ExcludingRecurrenceIdElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RecurrenceTemplateComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RecurrenceTemplateComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Timezone, otherT.Timezone)) return false;
        if( !DeepComparable.Matches(RecurrenceType, otherT.RecurrenceType)) return false;
        if( !DeepComparable.Matches(LastOccurrenceDateElement, otherT.LastOccurrenceDateElement)) return false;
        if( !DeepComparable.Matches(OccurrenceCountElement, otherT.OccurrenceCountElement)) return false;
        if( !DeepComparable.Matches(OccurrenceDateElement, otherT.OccurrenceDateElement)) return false;
        if( !DeepComparable.Matches(WeeklyTemplate, otherT.WeeklyTemplate)) return false;
        if( !DeepComparable.Matches(MonthlyTemplate, otherT.MonthlyTemplate)) return false;
        if( !DeepComparable.Matches(YearlyTemplate, otherT.YearlyTemplate)) return false;
        if( !DeepComparable.Matches(ExcludingDateElement, otherT.ExcludingDateElement)) return false;
        if( !DeepComparable.Matches(ExcludingRecurrenceIdElement, otherT.ExcludingRecurrenceIdElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RecurrenceTemplateComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Timezone, otherT.Timezone)) return false;
        if( !DeepComparable.IsExactly(RecurrenceType, otherT.RecurrenceType)) return false;
        if( !DeepComparable.IsExactly(LastOccurrenceDateElement, otherT.LastOccurrenceDateElement)) return false;
        if( !DeepComparable.IsExactly(OccurrenceCountElement, otherT.OccurrenceCountElement)) return false;
        if( !DeepComparable.IsExactly(OccurrenceDateElement, otherT.OccurrenceDateElement)) return false;
        if( !DeepComparable.IsExactly(WeeklyTemplate, otherT.WeeklyTemplate)) return false;
        if( !DeepComparable.IsExactly(MonthlyTemplate, otherT.MonthlyTemplate)) return false;
        if( !DeepComparable.IsExactly(YearlyTemplate, otherT.YearlyTemplate)) return false;
        if( !DeepComparable.IsExactly(ExcludingDateElement, otherT.ExcludingDateElement)) return false;
        if( !DeepComparable.IsExactly(ExcludingRecurrenceIdElement, otherT.ExcludingRecurrenceIdElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Timezone != null) yield return Timezone;
          if (RecurrenceType != null) yield return RecurrenceType;
          if (LastOccurrenceDateElement != null) yield return LastOccurrenceDateElement;
          if (OccurrenceCountElement != null) yield return OccurrenceCountElement;
          foreach (var elem in OccurrenceDateElement) { if (elem != null) yield return elem; }
          if (WeeklyTemplate != null) yield return WeeklyTemplate;
          if (MonthlyTemplate != null) yield return MonthlyTemplate;
          if (YearlyTemplate != null) yield return YearlyTemplate;
          foreach (var elem in ExcludingDateElement) { if (elem != null) yield return elem; }
          foreach (var elem in ExcludingRecurrenceIdElement) { if (elem != null) yield return elem; }
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Timezone != null) yield return new ElementValue("timezone", Timezone);
          if (RecurrenceType != null) yield return new ElementValue("recurrenceType", RecurrenceType);
          if (LastOccurrenceDateElement != null) yield return new ElementValue("lastOccurrenceDate", LastOccurrenceDateElement);
          if (OccurrenceCountElement != null) yield return new ElementValue("occurrenceCount", OccurrenceCountElement);
          foreach (var elem in OccurrenceDateElement) { if (elem != null) yield return new ElementValue("occurrenceDate", elem); }
          if (WeeklyTemplate != null) yield return new ElementValue("weeklyTemplate", WeeklyTemplate);
          if (MonthlyTemplate != null) yield return new ElementValue("monthlyTemplate", MonthlyTemplate);
          if (YearlyTemplate != null) yield return new ElementValue("yearlyTemplate", YearlyTemplate);
          foreach (var elem in ExcludingDateElement) { if (elem != null) yield return new ElementValue("excludingDate", elem); }
          foreach (var elem in ExcludingRecurrenceIdElement) { if (elem != null) yield return new ElementValue("excludingRecurrenceId", elem); }
        }

      }

    }

    /// <summary>
    /// Information about weekly recurring appointments
    /// </summary>
    [FhirType("WeeklyTemplateComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class WeeklyTemplateComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "WeeklyTemplateComponent"; } }

      /// <summary>
      /// Recurs on Mondays
      /// </summary>
      [FhirElement("monday", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean MondayElement
      {
        get { return _MondayElement; }
        set { _MondayElement = value; OnPropertyChanged("MondayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _MondayElement;

      /// <summary>
      /// Recurs on Mondays
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Monday
      {
        get { return MondayElement != null ? MondayElement.Value : null; }
        set
        {
          if (value == null)
            MondayElement = null;
          else
            MondayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Monday");
        }

      }

      /// <summary>
      /// Recurs on Tuesday
      /// </summary>
      [FhirElement("tuesday", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean TuesdayElement
      {
        get { return _TuesdayElement; }
        set { _TuesdayElement = value; OnPropertyChanged("TuesdayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _TuesdayElement;

      /// <summary>
      /// Recurs on Tuesday
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Tuesday
      {
        get { return TuesdayElement != null ? TuesdayElement.Value : null; }
        set
        {
          if (value == null)
            TuesdayElement = null;
          else
            TuesdayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Tuesday");
        }

      }

      /// <summary>
      /// Recurs on Wednesday
      /// </summary>
      [FhirElement("wednesday", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean WednesdayElement
      {
        get { return _WednesdayElement; }
        set { _WednesdayElement = value; OnPropertyChanged("WednesdayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _WednesdayElement;

      /// <summary>
      /// Recurs on Wednesday
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Wednesday
      {
        get { return WednesdayElement != null ? WednesdayElement.Value : null; }
        set
        {
          if (value == null)
            WednesdayElement = null;
          else
            WednesdayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Wednesday");
        }

      }

      /// <summary>
      /// Recurs on Thursday
      /// </summary>
      [FhirElement("thursday", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ThursdayElement
      {
        get { return _ThursdayElement; }
        set { _ThursdayElement = value; OnPropertyChanged("ThursdayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ThursdayElement;

      /// <summary>
      /// Recurs on Thursday
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Thursday
      {
        get { return ThursdayElement != null ? ThursdayElement.Value : null; }
        set
        {
          if (value == null)
            ThursdayElement = null;
          else
            ThursdayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Thursday");
        }

      }

      /// <summary>
      /// Recurs on Friday
      /// </summary>
      [FhirElement("friday", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean FridayElement
      {
        get { return _FridayElement; }
        set { _FridayElement = value; OnPropertyChanged("FridayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _FridayElement;

      /// <summary>
      /// Recurs on Friday
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Friday
      {
        get { return FridayElement != null ? FridayElement.Value : null; }
        set
        {
          if (value == null)
            FridayElement = null;
          else
            FridayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Friday");
        }

      }

      /// <summary>
      /// Recurs on Saturday
      /// </summary>
      [FhirElement("saturday", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean SaturdayElement
      {
        get { return _SaturdayElement; }
        set { _SaturdayElement = value; OnPropertyChanged("SaturdayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _SaturdayElement;

      /// <summary>
      /// Recurs on Saturday
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Saturday
      {
        get { return SaturdayElement != null ? SaturdayElement.Value : null; }
        set
        {
          if (value == null)
            SaturdayElement = null;
          else
            SaturdayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Saturday");
        }

      }

      /// <summary>
      /// Recurs on Sunday
      /// </summary>
      [FhirElement("sunday", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean SundayElement
      {
        get { return _SundayElement; }
        set { _SundayElement = value; OnPropertyChanged("SundayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _SundayElement;

      /// <summary>
      /// Recurs on Sunday
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public bool? Sunday
      {
        get { return SundayElement != null ? SundayElement.Value : null; }
        set
        {
          if (value == null)
            SundayElement = null;
          else
            SundayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Sunday");
        }

      }

      /// <summary>
      /// Recurs every nth week
      /// </summary>
      [FhirElement("weekInterval", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt WeekIntervalElement
      {
        get { return _WeekIntervalElement; }
        set { _WeekIntervalElement = value; OnPropertyChanged("WeekIntervalElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _WeekIntervalElement;

      /// <summary>
      /// Recurs every nth week
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public int? WeekInterval
      {
        get { return WeekIntervalElement != null ? WeekIntervalElement.Value : null; }
        set
        {
          if (value == null)
            WeekIntervalElement = null;
          else
            WeekIntervalElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("WeekInterval");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as WeeklyTemplateComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(MondayElement != null) dest.MondayElement = (Hl7.Fhir.Model.FhirBoolean)MondayElement.DeepCopy();
        if(TuesdayElement != null) dest.TuesdayElement = (Hl7.Fhir.Model.FhirBoolean)TuesdayElement.DeepCopy();
        if(WednesdayElement != null) dest.WednesdayElement = (Hl7.Fhir.Model.FhirBoolean)WednesdayElement.DeepCopy();
        if(ThursdayElement != null) dest.ThursdayElement = (Hl7.Fhir.Model.FhirBoolean)ThursdayElement.DeepCopy();
        if(FridayElement != null) dest.FridayElement = (Hl7.Fhir.Model.FhirBoolean)FridayElement.DeepCopy();
        if(SaturdayElement != null) dest.SaturdayElement = (Hl7.Fhir.Model.FhirBoolean)SaturdayElement.DeepCopy();
        if(SundayElement != null) dest.SundayElement = (Hl7.Fhir.Model.FhirBoolean)SundayElement.DeepCopy();
        if(WeekIntervalElement != null) dest.WeekIntervalElement = (Hl7.Fhir.Model.PositiveInt)WeekIntervalElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new WeeklyTemplateComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as WeeklyTemplateComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(MondayElement, otherT.MondayElement)) return false;
        if( !DeepComparable.Matches(TuesdayElement, otherT.TuesdayElement)) return false;
        if( !DeepComparable.Matches(WednesdayElement, otherT.WednesdayElement)) return false;
        if( !DeepComparable.Matches(ThursdayElement, otherT.ThursdayElement)) return false;
        if( !DeepComparable.Matches(FridayElement, otherT.FridayElement)) return false;
        if( !DeepComparable.Matches(SaturdayElement, otherT.SaturdayElement)) return false;
        if( !DeepComparable.Matches(SundayElement, otherT.SundayElement)) return false;
        if( !DeepComparable.Matches(WeekIntervalElement, otherT.WeekIntervalElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as WeeklyTemplateComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(MondayElement, otherT.MondayElement)) return false;
        if( !DeepComparable.IsExactly(TuesdayElement, otherT.TuesdayElement)) return false;
        if( !DeepComparable.IsExactly(WednesdayElement, otherT.WednesdayElement)) return false;
        if( !DeepComparable.IsExactly(ThursdayElement, otherT.ThursdayElement)) return false;
        if( !DeepComparable.IsExactly(FridayElement, otherT.FridayElement)) return false;
        if( !DeepComparable.IsExactly(SaturdayElement, otherT.SaturdayElement)) return false;
        if( !DeepComparable.IsExactly(SundayElement, otherT.SundayElement)) return false;
        if( !DeepComparable.IsExactly(WeekIntervalElement, otherT.WeekIntervalElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (MondayElement != null) yield return MondayElement;
          if (TuesdayElement != null) yield return TuesdayElement;
          if (WednesdayElement != null) yield return WednesdayElement;
          if (ThursdayElement != null) yield return ThursdayElement;
          if (FridayElement != null) yield return FridayElement;
          if (SaturdayElement != null) yield return SaturdayElement;
          if (SundayElement != null) yield return SundayElement;
          if (WeekIntervalElement != null) yield return WeekIntervalElement;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (MondayElement != null) yield return new ElementValue("monday", MondayElement);
          if (TuesdayElement != null) yield return new ElementValue("tuesday", TuesdayElement);
          if (WednesdayElement != null) yield return new ElementValue("wednesday", WednesdayElement);
          if (ThursdayElement != null) yield return new ElementValue("thursday", ThursdayElement);
          if (FridayElement != null) yield return new ElementValue("friday", FridayElement);
          if (SaturdayElement != null) yield return new ElementValue("saturday", SaturdayElement);
          if (SundayElement != null) yield return new ElementValue("sunday", SundayElement);
          if (WeekIntervalElement != null) yield return new ElementValue("weekInterval", WeekIntervalElement);
        }

      }

    }

    /// <summary>
    /// Information about monthly recurring appointments
    /// </summary>
    [FhirType("MonthlyTemplateComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class MonthlyTemplateComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "MonthlyTemplateComponent"; } }

      /// <summary>
      /// Recurs on a specific day of the month
      /// </summary>
      [FhirElement("dayOfMonth", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt DayOfMonthElement
      {
        get { return _DayOfMonthElement; }
        set { _DayOfMonthElement = value; OnPropertyChanged("DayOfMonthElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _DayOfMonthElement;

      /// <summary>
      /// Recurs on a specific day of the month
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public int? DayOfMonth
      {
        get { return DayOfMonthElement != null ? DayOfMonthElement.Value : null; }
        set
        {
          if (value == null)
            DayOfMonthElement = null;
          else
            DayOfMonthElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("DayOfMonth");
        }

      }

      /// <summary>
      /// Indicates which week of the month the appointment should occur
      /// </summary>
      [FhirElement("nthWeekOfMonth", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Coding NthWeekOfMonth
      {
        get { return _NthWeekOfMonth; }
        set { _NthWeekOfMonth = value; OnPropertyChanged("NthWeekOfMonth"); }
      }

      private Hl7.Fhir.Model.Coding _NthWeekOfMonth;

      /// <summary>
      /// Indicates which day of the week the appointment should occur
      /// </summary>
      [FhirElement("dayOfWeek", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Coding DayOfWeek
      {
        get { return _DayOfWeek; }
        set { _DayOfWeek = value; OnPropertyChanged("DayOfWeek"); }
      }

      private Hl7.Fhir.Model.Coding _DayOfWeek;

      /// <summary>
      /// Recurs every nth month
      /// </summary>
      [FhirElement("monthInterval", Order=70)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt MonthIntervalElement
      {
        get { return _MonthIntervalElement; }
        set { _MonthIntervalElement = value; OnPropertyChanged("MonthIntervalElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _MonthIntervalElement;

      /// <summary>
      /// Recurs every nth month
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public int? MonthInterval
      {
        get { return MonthIntervalElement != null ? MonthIntervalElement.Value : null; }
        set
        {
          if (value == null)
            MonthIntervalElement = null;
          else
            MonthIntervalElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("MonthInterval");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MonthlyTemplateComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DayOfMonthElement != null) dest.DayOfMonthElement = (Hl7.Fhir.Model.PositiveInt)DayOfMonthElement.DeepCopy();
        if(NthWeekOfMonth != null) dest.NthWeekOfMonth = (Hl7.Fhir.Model.Coding)NthWeekOfMonth.DeepCopy();
        if(DayOfWeek != null) dest.DayOfWeek = (Hl7.Fhir.Model.Coding)DayOfWeek.DeepCopy();
        if(MonthIntervalElement != null) dest.MonthIntervalElement = (Hl7.Fhir.Model.PositiveInt)MonthIntervalElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MonthlyTemplateComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MonthlyTemplateComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DayOfMonthElement, otherT.DayOfMonthElement)) return false;
        if( !DeepComparable.Matches(NthWeekOfMonth, otherT.NthWeekOfMonth)) return false;
        if( !DeepComparable.Matches(DayOfWeek, otherT.DayOfWeek)) return false;
        if( !DeepComparable.Matches(MonthIntervalElement, otherT.MonthIntervalElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MonthlyTemplateComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DayOfMonthElement, otherT.DayOfMonthElement)) return false;
        if( !DeepComparable.IsExactly(NthWeekOfMonth, otherT.NthWeekOfMonth)) return false;
        if( !DeepComparable.IsExactly(DayOfWeek, otherT.DayOfWeek)) return false;
        if( !DeepComparable.IsExactly(MonthIntervalElement, otherT.MonthIntervalElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DayOfMonthElement != null) yield return DayOfMonthElement;
          if (NthWeekOfMonth != null) yield return NthWeekOfMonth;
          if (DayOfWeek != null) yield return DayOfWeek;
          if (MonthIntervalElement != null) yield return MonthIntervalElement;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DayOfMonthElement != null) yield return new ElementValue("dayOfMonth", DayOfMonthElement);
          if (NthWeekOfMonth != null) yield return new ElementValue("nthWeekOfMonth", NthWeekOfMonth);
          if (DayOfWeek != null) yield return new ElementValue("dayOfWeek", DayOfWeek);
          if (MonthIntervalElement != null) yield return new ElementValue("monthInterval", MonthIntervalElement);
        }

      }

    }

    /// <summary>
    /// Information about yearly recurring appointments
    /// </summary>
    [FhirType("YearlyTemplateComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class YearlyTemplateComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "YearlyTemplateComponent"; } }

      /// <summary>
      /// Recurs every nth year
      /// </summary>
      [FhirElement("yearInterval", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt YearIntervalElement
      {
        get { return _YearIntervalElement; }
        set { _YearIntervalElement = value; OnPropertyChanged("YearIntervalElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _YearIntervalElement;

      /// <summary>
      /// Recurs every nth year
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public int? YearInterval
      {
        get { return YearIntervalElement != null ? YearIntervalElement.Value : null; }
        set
        {
          if (value == null)
            YearIntervalElement = null;
          else
            YearIntervalElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("YearInterval");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as YearlyTemplateComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(YearIntervalElement != null) dest.YearIntervalElement = (Hl7.Fhir.Model.PositiveInt)YearIntervalElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new YearlyTemplateComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as YearlyTemplateComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(YearIntervalElement, otherT.YearIntervalElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as YearlyTemplateComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(YearIntervalElement, otherT.YearIntervalElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (YearIntervalElement != null) yield return YearIntervalElement;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (YearIntervalElement != null) yield return new ElementValue("yearInterval", YearIntervalElement);
        }

      }

    }

    /// <summary>
    /// External Ids for this item
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist
    /// </summary>
    [FhirElement("status", InSummary=true, Order=100)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Appointment.AppointmentStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Appointment.AppointmentStatus> _StatusElement;

    /// <summary>
    /// proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public Hl7.Fhir.Model.Appointment.AppointmentStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Appointment.AppointmentStatus>(value);
        OnPropertyChanged("Status");
      }

    }

    /// <summary>
    /// The coded reason for the appointment being cancelled
    /// </summary>
    [FhirElement("cancellationReason", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept CancellationReason
    {
      get { return _CancellationReason; }
      set { _CancellationReason = value; OnPropertyChanged("CancellationReason"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _CancellationReason;

    /// <summary>
    /// Classification when becoming an encounter
    /// </summary>
    [FhirElement("class", InSummary=true, Order=120)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Class
    {
      get { if(_Class==null) _Class = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Class; }
      set { _Class = value; OnPropertyChanged("Class"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Class;

    /// <summary>
    /// A broad categorization of the service that is to be performed during this appointment
    /// </summary>
    [FhirElement("serviceCategory", InSummary=true, Order=130)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ServiceCategory
    {
      get { if(_ServiceCategory==null) _ServiceCategory = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ServiceCategory; }
      set { _ServiceCategory = value; OnPropertyChanged("ServiceCategory"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ServiceCategory;

    /// <summary>
    /// The specific service that is to be performed during this appointment
    /// </summary>
    [FhirElement("serviceType", InSummary=true, Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> ServiceType
    {
      get { if(_ServiceType==null) _ServiceType = new List<Hl7.Fhir.Model.CodeableReference>(); return _ServiceType; }
      set { _ServiceType = value; OnPropertyChanged("ServiceType"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _ServiceType;

    /// <summary>
    /// The specialty of a practitioner that would be required to perform the service requested in this appointment
    /// </summary>
    [FhirElement("specialty", InSummary=true, Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Specialty
    {
      get { if(_Specialty==null) _Specialty = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Specialty; }
      set { _Specialty = value; OnPropertyChanged("Specialty"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Specialty;

    /// <summary>
    /// The style of appointment or patient that has been booked in the slot (not service type)
    /// </summary>
    [FhirElement("appointmentType", InSummary=true, Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept AppointmentType
    {
      get { return _AppointmentType; }
      set { _AppointmentType = value; OnPropertyChanged("AppointmentType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _AppointmentType;

    /// <summary>
    /// Reason this appointment is scheduled
    /// </summary>
    [FhirElement("reason", InSummary=true, Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Reason
    {
      get { if(_Reason==null) _Reason = new List<Hl7.Fhir.Model.CodeableReference>(); return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Reason;

    /// <summary>
    /// Used to make informed decisions if needing to re-prioritize
    /// </summary>
    [FhirElement("priority", Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Priority
    {
      get { return _Priority; }
      set { _Priority = value; OnPropertyChanged("Priority"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Priority;

    /// <summary>
    /// Shown on a subject line in a meeting request, or appointment list
    /// </summary>
    [FhirElement("description", Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Shown on a subject line in a meeting request, or appointment list
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }

    }

    /// <summary>
    /// Appointment replaced by this Appointment
    /// </summary>
    [FhirElement("replaces", Order=200)]
    [CLSCompliant(false)]
    [References("Appointment")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Replaces
    {
      get { if(_Replaces==null) _Replaces = new List<Hl7.Fhir.Model.ResourceReference>(); return _Replaces; }
      set { _Replaces = value; OnPropertyChanged("Replaces"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Replaces;

    /// <summary>
    /// Connection details of a virtual service (e.g. conference call)
    /// </summary>
    [FhirElement("virtualService", Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.VirtualServiceDetail> VirtualService
    {
      get { if(_VirtualService==null) _VirtualService = new List<Hl7.Fhir.Model.VirtualServiceDetail>(); return _VirtualService; }
      set { _VirtualService = value; OnPropertyChanged("VirtualService"); }
    }

    private List<Hl7.Fhir.Model.VirtualServiceDetail> _VirtualService;

    /// <summary>
    /// Additional information to support the appointment
    /// </summary>
    [FhirElement("supportingInformation", Order=220)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// The previous appointment in a series
    /// </summary>
    [FhirElement("previousAppointment", Order=230)]
    [CLSCompliant(false)]
    [References("Appointment")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference PreviousAppointment
    {
      get { return _PreviousAppointment; }
      set { _PreviousAppointment = value; OnPropertyChanged("PreviousAppointment"); }
    }

    private Hl7.Fhir.Model.ResourceReference _PreviousAppointment;

    /// <summary>
    /// The originating appointment in a recurring set of appointments
    /// </summary>
    [FhirElement("originatingAppointment", Order=240)]
    [CLSCompliant(false)]
    [References("Appointment")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference OriginatingAppointment
    {
      get { return _OriginatingAppointment; }
      set { _OriginatingAppointment = value; OnPropertyChanged("OriginatingAppointment"); }
    }

    private Hl7.Fhir.Model.ResourceReference _OriginatingAppointment;

    /// <summary>
    /// When appointment is to take place
    /// </summary>
    [FhirElement("start", InSummary=true, Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.Instant StartElement
    {
      get { return _StartElement; }
      set { _StartElement = value; OnPropertyChanged("StartElement"); }
    }

    private Hl7.Fhir.Model.Instant _StartElement;

    /// <summary>
    /// When appointment is to take place
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public DateTimeOffset? Start
    {
      get { return StartElement != null ? StartElement.Value : null; }
      set
      {
        if (value == null)
          StartElement = null;
        else
          StartElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("Start");
      }

    }

    /// <summary>
    /// When appointment is to conclude
    /// </summary>
    [FhirElement("end", InSummary=true, Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.Instant EndElement
    {
      get { return _EndElement; }
      set { _EndElement = value; OnPropertyChanged("EndElement"); }
    }

    private Hl7.Fhir.Model.Instant _EndElement;

    /// <summary>
    /// When appointment is to conclude
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public DateTimeOffset? End
    {
      get { return EndElement != null ? EndElement.Value : null; }
      set
      {
        if (value == null)
          EndElement = null;
        else
          EndElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("End");
      }

    }

    /// <summary>
    /// Can be less than start/end (e.g. estimate)
    /// </summary>
    [FhirElement("minutesDuration", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.PositiveInt MinutesDurationElement
    {
      get { return _MinutesDurationElement; }
      set { _MinutesDurationElement = value; OnPropertyChanged("MinutesDurationElement"); }
    }

    private Hl7.Fhir.Model.PositiveInt _MinutesDurationElement;

    /// <summary>
    /// Can be less than start/end (e.g. estimate)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public int? MinutesDuration
    {
      get { return MinutesDurationElement != null ? MinutesDurationElement.Value : null; }
      set
      {
        if (value == null)
          MinutesDurationElement = null;
        else
          MinutesDurationElement = new Hl7.Fhir.Model.PositiveInt(value);
        OnPropertyChanged("MinutesDuration");
      }

    }

    /// <summary>
    /// The slots that this appointment is filling
    /// </summary>
    [FhirElement("slot", Order=280)]
    [CLSCompliant(false)]
    [References("Slot")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Slot
    {
      get { if(_Slot==null) _Slot = new List<Hl7.Fhir.Model.ResourceReference>(); return _Slot; }
      set { _Slot = value; OnPropertyChanged("Slot"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Slot;

    /// <summary>
    /// The set of accounts that may be used for billing for this Appointment
    /// </summary>
    [FhirElement("account", Order=290)]
    [CLSCompliant(false)]
    [References("Account")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Account
    {
      get { if(_Account==null) _Account = new List<Hl7.Fhir.Model.ResourceReference>(); return _Account; }
      set { _Account = value; OnPropertyChanged("Account"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Account;

    /// <summary>
    /// The date that this appointment was initially created
    /// </summary>
    [FhirElement("created", Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CreatedElement
    {
      get { return _CreatedElement; }
      set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

    /// <summary>
    /// The date that this appointment was initially created
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public string Created
    {
      get { return CreatedElement != null ? CreatedElement.Value : null; }
      set
      {
        if (value == null)
          CreatedElement = null;
        else
          CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Created");
      }

    }

    /// <summary>
    /// Additional comments
    /// </summary>
    [FhirElement("note", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Detailed information and instructions for the patient
    /// </summary>
    [FhirElement("patientInstruction", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> PatientInstruction
    {
      get { if(_PatientInstruction==null) _PatientInstruction = new List<Hl7.Fhir.Model.CodeableReference>(); return _PatientInstruction; }
      set { _PatientInstruction = value; OnPropertyChanged("PatientInstruction"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _PatientInstruction;

    /// <summary>
    /// The request this appointment is allocated to assess
    /// </summary>
    [FhirElement("basedOn", Order=330)]
    [CLSCompliant(false)]
    [References("CarePlan","DeviceRequest","MedicationRequest","ServiceRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// The patient or group associated with the appointment
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=340)]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Participants involved in appointment
    /// </summary>
    [FhirElement("participant", Order=350)]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Appointment.ParticipantComponent> Participant
    {
      get { if(_Participant==null) _Participant = new List<Hl7.Fhir.Model.Appointment.ParticipantComponent>(); return _Participant; }
      set { _Participant = value; OnPropertyChanged("Participant"); }
    }

    private List<Hl7.Fhir.Model.Appointment.ParticipantComponent> _Participant;

    /// <summary>
    /// Potential date/time interval(s) requested to allocate the appointment within
    /// </summary>
    [FhirElement("requestedPeriod", Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Period> RequestedPeriod
    {
      get { if(_RequestedPeriod==null) _RequestedPeriod = new List<Hl7.Fhir.Model.Period>(); return _RequestedPeriod; }
      set { _RequestedPeriod = value; OnPropertyChanged("RequestedPeriod"); }
    }

    private List<Hl7.Fhir.Model.Period> _RequestedPeriod;

    /// <summary>
    /// The sequence number in the recurrence
    /// </summary>
    [FhirElement("recurrenceId", Order=370)]
    [DataMember]
    public Hl7.Fhir.Model.PositiveInt RecurrenceIdElement
    {
      get { return _RecurrenceIdElement; }
      set { _RecurrenceIdElement = value; OnPropertyChanged("RecurrenceIdElement"); }
    }

    private Hl7.Fhir.Model.PositiveInt _RecurrenceIdElement;

    /// <summary>
    /// The sequence number in the recurrence
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public int? RecurrenceId
    {
      get { return RecurrenceIdElement != null ? RecurrenceIdElement.Value : null; }
      set
      {
        if (value == null)
          RecurrenceIdElement = null;
        else
          RecurrenceIdElement = new Hl7.Fhir.Model.PositiveInt(value);
        OnPropertyChanged("RecurrenceId");
      }

    }

    /// <summary>
    /// Indicates that this appointment varies from a recurrence pattern
    /// </summary>
    [FhirElement("occurrenceChanged", Order=380)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean OccurrenceChangedElement
    {
      get { return _OccurrenceChangedElement; }
      set { _OccurrenceChangedElement = value; OnPropertyChanged("OccurrenceChangedElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _OccurrenceChangedElement;

    /// <summary>
    /// Indicates that this appointment varies from a recurrence pattern
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public bool? OccurrenceChanged
    {
      get { return OccurrenceChangedElement != null ? OccurrenceChangedElement.Value : null; }
      set
      {
        if (value == null)
          OccurrenceChangedElement = null;
        else
          OccurrenceChangedElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("OccurrenceChanged");
      }

    }

    /// <summary>
    /// Details of the recurrence pattern/template used to generate occurrences
    /// </summary>
    [FhirElement("recurrenceTemplate", Order=390)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Appointment.RecurrenceTemplateComponent> RecurrenceTemplate
    {
      get { if(_RecurrenceTemplate==null) _RecurrenceTemplate = new List<Hl7.Fhir.Model.Appointment.RecurrenceTemplateComponent>(); return _RecurrenceTemplate; }
      set { _RecurrenceTemplate = value; OnPropertyChanged("RecurrenceTemplate"); }
    }

    private List<Hl7.Fhir.Model.Appointment.RecurrenceTemplateComponent> _RecurrenceTemplate;

    public static ElementDefinition.ConstraintComponent Appointment_APP_6 = new ElementDefinition.ConstraintComponent()
    {
      /// <summary>
      /// For a recurring series of appointments, the originating appointment should have the recurrenceTemplate defining the details of the overall recurrence.  Each occurence should refer back to the originatingAppointment as the single source of truth for the details of the recurrence.
      /// </summary>
      Extension = new List<Extension>() { new Extension { Value = new FhirBoolean(true), Url = "http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice"} },
      Expression = "originatingAppointment.exists().not() or recurrenceTemplate.exists().not()",
      Key = "app-6",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "An appointment may have an originatingAppointment or recurrenceTemplate, but not both",
      Xpath = "((not(exists(f:originatingAppointment)) or not(exists(f:recurrenceTemplate))))"
    };

    public static ElementDefinition.ConstraintComponent Appointment_APP_5 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "start.exists() implies start <= end",
      Key = "app-5",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "The start must be less than or equal to the end",
      Xpath = "f:start <= f:end or not(start.exists() and end.exists())"
    };

    public static ElementDefinition.ConstraintComponent Appointment_APP_4 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "cancellationReason.exists() implies (status='noshow' or status='cancelled')",
      Key = "app-4",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "Cancellation reason is only used for appointments that have been cancelled, or noshow",
      Xpath = "not(exists(f:cancellationReason)) or f:status/@value=('noshow', 'cancelled')"
    };

    public static ElementDefinition.ConstraintComponent Appointment_APP_3 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "(start.exists() and end.exists()) or (status in ('proposed' | 'cancelled' | 'waitlist'))",
      Key = "app-3",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "Only proposed or cancelled appointments can be missing start/end dates",
      Xpath = "((exists(f:start) and exists(f:end)) or (f:status/@value='proposed') or (f:status/@value='cancelled') or (f:status/@value='waitlist'))"
    };

    public static ElementDefinition.ConstraintComponent Appointment_APP_2 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "start.exists() = end.exists()",
      Key = "app-2",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "Either start and end are specified, or neither",
      Xpath = "((exists(f:start) and exists(f:end)) or (not(exists(f:start)) and not(exists(f:end))))"
    };

    public override void AddDefaultConstraints()
    {
      base.AddDefaultConstraints();

      InvariantConstraints.Add(Appointment_APP_6);
      InvariantConstraints.Add(Appointment_APP_5);
      InvariantConstraints.Add(Appointment_APP_4);
      InvariantConstraints.Add(Appointment_APP_3);
      InvariantConstraints.Add(Appointment_APP_2);
    }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Appointment;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Appointment.AppointmentStatus>)StatusElement.DeepCopy();
      if(CancellationReason != null) dest.CancellationReason = (Hl7.Fhir.Model.CodeableConcept)CancellationReason.DeepCopy();
      if(Class != null) dest.Class = new List<Hl7.Fhir.Model.CodeableConcept>(Class.DeepCopy());
      if(ServiceCategory != null) dest.ServiceCategory = new List<Hl7.Fhir.Model.CodeableConcept>(ServiceCategory.DeepCopy());
      if(ServiceType != null) dest.ServiceType = new List<Hl7.Fhir.Model.CodeableReference>(ServiceType.DeepCopy());
      if(Specialty != null) dest.Specialty = new List<Hl7.Fhir.Model.CodeableConcept>(Specialty.DeepCopy());
      if(AppointmentType != null) dest.AppointmentType = (Hl7.Fhir.Model.CodeableConcept)AppointmentType.DeepCopy();
      if(Reason != null) dest.Reason = new List<Hl7.Fhir.Model.CodeableReference>(Reason.DeepCopy());
      if(Priority != null) dest.Priority = (Hl7.Fhir.Model.CodeableConcept)Priority.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(Replaces != null) dest.Replaces = new List<Hl7.Fhir.Model.ResourceReference>(Replaces.DeepCopy());
      if(VirtualService != null) dest.VirtualService = new List<Hl7.Fhir.Model.VirtualServiceDetail>(VirtualService.DeepCopy());
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(PreviousAppointment != null) dest.PreviousAppointment = (Hl7.Fhir.Model.ResourceReference)PreviousAppointment.DeepCopy();
      if(OriginatingAppointment != null) dest.OriginatingAppointment = (Hl7.Fhir.Model.ResourceReference)OriginatingAppointment.DeepCopy();
      if(StartElement != null) dest.StartElement = (Hl7.Fhir.Model.Instant)StartElement.DeepCopy();
      if(EndElement != null) dest.EndElement = (Hl7.Fhir.Model.Instant)EndElement.DeepCopy();
      if(MinutesDurationElement != null) dest.MinutesDurationElement = (Hl7.Fhir.Model.PositiveInt)MinutesDurationElement.DeepCopy();
      if(Slot != null) dest.Slot = new List<Hl7.Fhir.Model.ResourceReference>(Slot.DeepCopy());
      if(Account != null) dest.Account = new List<Hl7.Fhir.Model.ResourceReference>(Account.DeepCopy());
      if(CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(PatientInstruction != null) dest.PatientInstruction = new List<Hl7.Fhir.Model.CodeableReference>(PatientInstruction.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Participant != null) dest.Participant = new List<Hl7.Fhir.Model.Appointment.ParticipantComponent>(Participant.DeepCopy());
      if(RequestedPeriod != null) dest.RequestedPeriod = new List<Hl7.Fhir.Model.Period>(RequestedPeriod.DeepCopy());
      if(RecurrenceIdElement != null) dest.RecurrenceIdElement = (Hl7.Fhir.Model.PositiveInt)RecurrenceIdElement.DeepCopy();
      if(OccurrenceChangedElement != null) dest.OccurrenceChangedElement = (Hl7.Fhir.Model.FhirBoolean)OccurrenceChangedElement.DeepCopy();
      if(RecurrenceTemplate != null) dest.RecurrenceTemplate = new List<Hl7.Fhir.Model.Appointment.RecurrenceTemplateComponent>(RecurrenceTemplate.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Appointment());
    }

    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Appointment;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(CancellationReason, otherT.CancellationReason)) return false;
      if( !DeepComparable.Matches(Class, otherT.Class)) return false;
      if( !DeepComparable.Matches(ServiceCategory, otherT.ServiceCategory)) return false;
      if( !DeepComparable.Matches(ServiceType, otherT.ServiceType)) return false;
      if( !DeepComparable.Matches(Specialty, otherT.Specialty)) return false;
      if( !DeepComparable.Matches(AppointmentType, otherT.AppointmentType)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(Priority, otherT.Priority)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.Matches(VirtualService, otherT.VirtualService)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(PreviousAppointment, otherT.PreviousAppointment)) return false;
      if( !DeepComparable.Matches(OriginatingAppointment, otherT.OriginatingAppointment)) return false;
      if( !DeepComparable.Matches(StartElement, otherT.StartElement)) return false;
      if( !DeepComparable.Matches(EndElement, otherT.EndElement)) return false;
      if( !DeepComparable.Matches(MinutesDurationElement, otherT.MinutesDurationElement)) return false;
      if( !DeepComparable.Matches(Slot, otherT.Slot)) return false;
      if( !DeepComparable.Matches(Account, otherT.Account)) return false;
      if( !DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(PatientInstruction, otherT.PatientInstruction)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Participant, otherT.Participant)) return false;
      if( !DeepComparable.Matches(RequestedPeriod, otherT.RequestedPeriod)) return false;
      if( !DeepComparable.Matches(RecurrenceIdElement, otherT.RecurrenceIdElement)) return false;
      if( !DeepComparable.Matches(OccurrenceChangedElement, otherT.OccurrenceChangedElement)) return false;
      if( !DeepComparable.Matches(RecurrenceTemplate, otherT.RecurrenceTemplate)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Appointment;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(CancellationReason, otherT.CancellationReason)) return false;
      if( !DeepComparable.IsExactly(Class, otherT.Class)) return false;
      if( !DeepComparable.IsExactly(ServiceCategory, otherT.ServiceCategory)) return false;
      if( !DeepComparable.IsExactly(ServiceType, otherT.ServiceType)) return false;
      if( !DeepComparable.IsExactly(Specialty, otherT.Specialty)) return false;
      if( !DeepComparable.IsExactly(AppointmentType, otherT.AppointmentType)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(Priority, otherT.Priority)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.IsExactly(VirtualService, otherT.VirtualService)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(PreviousAppointment, otherT.PreviousAppointment)) return false;
      if( !DeepComparable.IsExactly(OriginatingAppointment, otherT.OriginatingAppointment)) return false;
      if( !DeepComparable.IsExactly(StartElement, otherT.StartElement)) return false;
      if( !DeepComparable.IsExactly(EndElement, otherT.EndElement)) return false;
      if( !DeepComparable.IsExactly(MinutesDurationElement, otherT.MinutesDurationElement)) return false;
      if( !DeepComparable.IsExactly(Slot, otherT.Slot)) return false;
      if( !DeepComparable.IsExactly(Account, otherT.Account)) return false;
      if( !DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(PatientInstruction, otherT.PatientInstruction)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Participant, otherT.Participant)) return false;
      if( !DeepComparable.IsExactly(RequestedPeriod, otherT.RequestedPeriod)) return false;
      if( !DeepComparable.IsExactly(RecurrenceIdElement, otherT.RecurrenceIdElement)) return false;
      if( !DeepComparable.IsExactly(OccurrenceChangedElement, otherT.OccurrenceChangedElement)) return false;
      if( !DeepComparable.IsExactly(RecurrenceTemplate, otherT.RecurrenceTemplate)) return false;

      return true;
    }

    [NotMapped]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (CancellationReason != null) yield return CancellationReason;
        foreach (var elem in Class) { if (elem != null) yield return elem; }
        foreach (var elem in ServiceCategory) { if (elem != null) yield return elem; }
        foreach (var elem in ServiceType) { if (elem != null) yield return elem; }
        foreach (var elem in Specialty) { if (elem != null) yield return elem; }
        if (AppointmentType != null) yield return AppointmentType;
        foreach (var elem in Reason) { if (elem != null) yield return elem; }
        if (Priority != null) yield return Priority;
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in Replaces) { if (elem != null) yield return elem; }
        foreach (var elem in VirtualService) { if (elem != null) yield return elem; }
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        if (PreviousAppointment != null) yield return PreviousAppointment;
        if (OriginatingAppointment != null) yield return OriginatingAppointment;
        if (StartElement != null) yield return StartElement;
        if (EndElement != null) yield return EndElement;
        if (MinutesDurationElement != null) yield return MinutesDurationElement;
        foreach (var elem in Slot) { if (elem != null) yield return elem; }
        foreach (var elem in Account) { if (elem != null) yield return elem; }
        if (CreatedElement != null) yield return CreatedElement;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in PatientInstruction) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (Subject != null) yield return Subject;
        foreach (var elem in Participant) { if (elem != null) yield return elem; }
        foreach (var elem in RequestedPeriod) { if (elem != null) yield return elem; }
        if (RecurrenceIdElement != null) yield return RecurrenceIdElement;
        if (OccurrenceChangedElement != null) yield return OccurrenceChangedElement;
        foreach (var elem in RecurrenceTemplate) { if (elem != null) yield return elem; }
      }

    }

    [NotMapped]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (CancellationReason != null) yield return new ElementValue("cancellationReason", CancellationReason);
        foreach (var elem in Class) { if (elem != null) yield return new ElementValue("class", elem); }
        foreach (var elem in ServiceCategory) { if (elem != null) yield return new ElementValue("serviceCategory", elem); }
        foreach (var elem in ServiceType) { if (elem != null) yield return new ElementValue("serviceType", elem); }
        foreach (var elem in Specialty) { if (elem != null) yield return new ElementValue("specialty", elem); }
        if (AppointmentType != null) yield return new ElementValue("appointmentType", AppointmentType);
        foreach (var elem in Reason) { if (elem != null) yield return new ElementValue("reason", elem); }
        if (Priority != null) yield return new ElementValue("priority", Priority);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in Replaces) { if (elem != null) yield return new ElementValue("replaces", elem); }
        foreach (var elem in VirtualService) { if (elem != null) yield return new ElementValue("virtualService", elem); }
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        if (PreviousAppointment != null) yield return new ElementValue("previousAppointment", PreviousAppointment);
        if (OriginatingAppointment != null) yield return new ElementValue("originatingAppointment", OriginatingAppointment);
        if (StartElement != null) yield return new ElementValue("start", StartElement);
        if (EndElement != null) yield return new ElementValue("end", EndElement);
        if (MinutesDurationElement != null) yield return new ElementValue("minutesDuration", MinutesDurationElement);
        foreach (var elem in Slot) { if (elem != null) yield return new ElementValue("slot", elem); }
        foreach (var elem in Account) { if (elem != null) yield return new ElementValue("account", elem); }
        if (CreatedElement != null) yield return new ElementValue("created", CreatedElement);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in PatientInstruction) { if (elem != null) yield return new ElementValue("patientInstruction", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (Subject != null) yield return new ElementValue("subject", Subject);
        foreach (var elem in Participant) { if (elem != null) yield return new ElementValue("participant", elem); }
        foreach (var elem in RequestedPeriod) { if (elem != null) yield return new ElementValue("requestedPeriod", elem); }
        if (RecurrenceIdElement != null) yield return new ElementValue("recurrenceId", RecurrenceIdElement);
        if (OccurrenceChangedElement != null) yield return new ElementValue("occurrenceChanged", OccurrenceChangedElement);
        foreach (var elem in RecurrenceTemplate) { if (elem != null) yield return new ElementValue("recurrenceTemplate", elem); }
      }

    }

  }

}

// end of file
