// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-ballot

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Contains a collection of resources
  /// </summary>
  [FhirType("Bundle", IsResource=true)]
  [DataContract]
  public partial class Bundle : Hl7.Fhir.Model.Resource, System.ComponentModel.INotifyPropertyChanged
  {
    /// <summary>
    /// FHIR Resource Type
    /// </summary>
    [NotMapped]
    public override ResourceType ResourceType { get { return ResourceType.Bundle; } }

    /// <summary>
    /// FHIR Type Name
    /// </summary>
    [NotMapped]
    public override string TypeName { get { return "Bundle"; } }

    /// <summary>
    /// Indicates the purpose of a bundle - how it is intended to be used.
    /// (url: http://hl7.org/fhir/ValueSet/bundle-type)
    /// (system: http://hl7.org/fhir/bundle-type)
    /// </summary>
    [FhirEnumeration("BundleType")]
    public enum BundleType
    {
      /// <summary>
      /// The bundle is a document. The first resource is a Composition.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("document", "http://hl7.org/fhir/bundle-type"), Description("Document")]
      Document,
      /// <summary>
      /// The bundle is a message. The first resource is a MessageHeader.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("message", "http://hl7.org/fhir/bundle-type"), Description("Message")]
      Message,
      /// <summary>
      /// The bundle is a transaction - intended to be processed by a server as an atomic commit.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("transaction", "http://hl7.org/fhir/bundle-type"), Description("Transaction")]
      Transaction,
      /// <summary>
      /// The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("transaction-response", "http://hl7.org/fhir/bundle-type"), Description("Transaction Response")]
      TransactionResponse,
      /// <summary>
      /// The bundle is a set of actions - intended to be processed by a server as a group of independent actions.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("batch", "http://hl7.org/fhir/bundle-type"), Description("Batch")]
      Batch,
      /// <summary>
      /// The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("batch-response", "http://hl7.org/fhir/bundle-type"), Description("Batch Response")]
      BatchResponse,
      /// <summary>
      /// The bundle is a list of resources from a history interaction on a server.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("history", "http://hl7.org/fhir/bundle-type"), Description("History List")]
      History,
      /// <summary>
      /// The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("searchset", "http://hl7.org/fhir/bundle-type"), Description("Search Results")]
      Searchset,
      /// <summary>
      /// The bundle is a set of resources collected into a single package for ease of distribution that imposes no processing obligations or behavioral rules beyond persistence.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("collection", "http://hl7.org/fhir/bundle-type"), Description("Collection")]
      Collection,
      /// <summary>
      /// The bundle has been generated by a Subscription to communicate information to a client.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("subscription-notification", "http://hl7.org/fhir/bundle-type"), Description("Subscription Notification")]
      SubscriptionNotification,
    }

    /// <summary>
    /// Link Relation Types defined at https://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
    /// (url: http://hl7.org/fhir/ValueSet/iana-link-relations)
    /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
    /// </summary>
    [FhirEnumeration("LinkRelationTypes")]
    public enum LinkRelationTypes
    {
      /// <summary>
      /// Refers to a resource that is the subject of the link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("about", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that is the subject of the link's context.")]
      About,
      /// <summary>
      /// Asserts that the link target provides an access control description for the link context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("acl", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Asserts that the link target provides an access control description for the link context.")]
      Acl,
      /// <summary>
      /// Refers to a substitute for this context
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("alternate", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a substitute for this context")]
      Alternate,
      /// <summary>
      /// Used to reference alternative content that uses the AMP profile of the HTML format.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("amphtml", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Used to reference alternative content that uses the AMP profile of the HTML format.")]
      Amphtml,
      /// <summary>
      /// Refers to an appendix.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("appendix", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to an appendix.")]
      Appendix,
      /// <summary>
      /// Refers to an icon for the context. Synonym for icon.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("apple-touch-icon", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to an icon for the context. Synonym for icon.")]
      AppleTouchIcon,
      /// <summary>
      /// Refers to a launch screen for the context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("apple-touch-startup-image", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a launch screen for the context.")]
      AppleTouchStartupImage,
      /// <summary>
      /// Refers to a collection of records, documents, or other
      ///       materials of historical interest.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("archives", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a collection of records, documents, or other
      materials of historical interest.")]
      Archives,
      /// <summary>
      /// Refers to the context's author.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("author", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to the context's author.")]
      Author,
      /// <summary>
      /// Identifies the entity that blocks access to a resource
      ///       following receipt of a legal demand.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("blocked-by", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies the entity that blocks access to a resource
      following receipt of a legal demand.")]
      BlockedBy,
      /// <summary>
      /// Gives a permanent link to use for bookmarking purposes.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("bookmark", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Gives a permanent link to use for bookmarking purposes.")]
      Bookmark,
      /// <summary>
      /// Designates the preferred version of a resource (the IRI and its contents).
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("canonical", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Designates the preferred version of a resource (the IRI and its contents).")]
      Canonical,
      /// <summary>
      /// Refers to a chapter in a collection of resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("chapter", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a chapter in a collection of resources.")]
      Chapter,
      /// <summary>
      /// Indicates that the link target is preferred over the link context for the purpose of permanent citation.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("cite-as", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates that the link target is preferred over the link context for the purpose of permanent citation.")]
      CiteAs,
      /// <summary>
      /// The target IRI points to a resource which represents the collection resource for the context IRI.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("collection", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The target IRI points to a resource which represents the collection resource for the context IRI.")]
      Collection,
      /// <summary>
      /// Refers to a table of contents.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("contents", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a table of contents.")]
      Contents,
      /// <summary>
      /// The document linked to was later converted to the
      ///       document that contains this link relation.  For example, an RFC can
      ///       have a link to the Internet-Draft that became the RFC; in that case,
      ///       the link relation would be "convertedFrom".
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("convertedFrom", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The document linked to was later converted to the
      document that contains this link relation.  For example, an RFC can
      have a link to the Internet-Draft that became the RFC; in that case,
      the link relation would be \"convertedFrom\".")]
      ConvertedFrom,
      /// <summary>
      /// Refers to a copyright statement that applies to the
      ///     link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("copyright", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a copyright statement that applies to the
    link's context.")]
      Copyright,
      /// <summary>
      /// The target IRI points to a resource where a submission form can be obtained.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("create-form", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The target IRI points to a resource where a submission form can be obtained.")]
      CreateForm,
      /// <summary>
      /// Refers to a resource containing the most recent
      ///       item(s) in a collection of resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("current", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource containing the most recent
      item(s) in a collection of resources.")]
      Current,
      /// <summary>
      /// Refers to a resource providing information about the
      ///       link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("describedby", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource providing information about the
      link's context.")]
      Describedby,
      /// <summary>
      /// The relationship A 'describes' B asserts that
      ///       resource A provides a description of resource B. There are no
      ///       constraints on the format or representation of either A or B,
      ///       neither are there any further constraints on either resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("describes", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The relationship A 'describes' B asserts that
      resource A provides a description of resource B. There are no
      constraints on the format or representation of either A or B,
      neither are there any further constraints on either resource.")]
      Describes,
      /// <summary>
      /// Refers to a list of patent disclosures made with respect to 
      ///       material for which 'disclosure' relation is specified.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("disclosure", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a list of patent disclosures made with respect to 
      material for which 'disclosure' relation is specified.")]
      Disclosure,
      /// <summary>
      /// Used to indicate an origin that will be used to fetch required 
      ///       resources for the link context, and that the user agent ought to resolve 
      ///       as early as possible.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("dns-prefetch", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Used to indicate an origin that will be used to fetch required 
      resources for the link context, and that the user agent ought to resolve 
      as early as possible.")]
      DnsPrefetch,
      /// <summary>
      /// Refers to a resource whose available representations
      ///       are byte-for-byte identical with the corresponding representations of
      ///       the context IRI.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("duplicate", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource whose available representations
      are byte-for-byte identical with the corresponding representations of
      the context IRI.")]
      Duplicate,
      /// <summary>
      /// Refers to a resource that can be used to edit the
      ///       link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("edit", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that can be used to edit the
      link's context.")]
      Edit,
      /// <summary>
      /// The target IRI points to a resource where a submission form for
      ///       editing associated resource can be obtained.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("edit-form", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The target IRI points to a resource where a submission form for
      editing associated resource can be obtained.")]
      EditForm,
      /// <summary>
      /// Refers to a resource that can be used to edit media
      ///       associated with the link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("edit-media", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that can be used to edit media
      associated with the link's context.")]
      EditMedia,
      /// <summary>
      /// Identifies a related resource that is potentially
      ///       large and might require special handling.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("enclosure", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies a related resource that is potentially
      large and might require special handling.")]
      Enclosure,
      /// <summary>
      /// Refers to a resource that is not part of the same site as the current context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("external", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that is not part of the same site as the current context.")]
      External,
      /// <summary>
      /// An IRI that refers to the furthest preceding resource
      ///     in a series of resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("first", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("An IRI that refers to the furthest preceding resource
    in a series of resources.")]
      First,
      /// <summary>
      /// Refers to a glossary of terms.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("glossary", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a glossary of terms.")]
      Glossary,
      /// <summary>
      /// Refers to context-sensitive help.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("help", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to context-sensitive help.")]
      Help,
      /// <summary>
      /// Refers to a resource hosted by the server indicated by
      ///       the link context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("hosts", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource hosted by the server indicated by
      the link context.")]
      Hosts,
      /// <summary>
      /// Refers to a hub that enables registration for
      ///     notification of updates to the context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("hub", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a hub that enables registration for
    notification of updates to the context.")]
      Hub,
      /// <summary>
      /// Refers to an icon representing the link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("icon", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to an icon representing the link's context.")]
      Icon,
      /// <summary>
      /// Refers to an index.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("index", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to an index.")]
      Index,
      /// <summary>
      /// refers to a resource associated with a time interval that ends before the beginning of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalAfter", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that ends before the beginning of the time interval associated with the context resource")]
      IntervalAfter,
      /// <summary>
      /// refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalBefore", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource")]
      IntervalBefore,
      /// <summary>
      /// refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalContains", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource")]
      IntervalContains,
      /// <summary>
      /// refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource, or ends before the beginning of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalDisjoint", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource, or ends before the beginning of the time interval associated with the context resource")]
      IntervalDisjoint,
      /// <summary>
      /// refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalDuring", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource")]
      IntervalDuring,
      /// <summary>
      /// refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalEquals", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource")]
      IntervalEquals,
      /// <summary>
      /// refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalFinishedBy", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource")]
      IntervalFinishedBy,
      /// <summary>
      /// refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalFinishes", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource")]
      IntervalFinishes,
      /// <summary>
      /// refers to a resource associated with a time interval that begins before or is coincident with the beginning of the time interval associated with the context resource, and ends after or is coincident with the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalIn", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins before or is coincident with the beginning of the time interval associated with the context resource, and ends after or is coincident with the end of the time interval associated with the context resource")]
      IntervalIn,
      /// <summary>
      /// refers to a resource associated with a time interval whose beginning coincides with the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalMeets", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval whose beginning coincides with the end of the time interval associated with the context resource")]
      IntervalMeets,
      /// <summary>
      /// refers to a resource associated with a time interval whose end coincides with the beginning of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalMetBy", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval whose end coincides with the beginning of the time interval associated with the context resource")]
      IntervalMetBy,
      /// <summary>
      /// refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the beginning of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalOverlappedBy", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the beginning of the time interval associated with the context resource")]
      IntervalOverlappedBy,
      /// <summary>
      /// refers to a resource associated with a time interval that begins before the end of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalOverlaps", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval that begins before the end of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource")]
      IntervalOverlaps,
      /// <summary>
      /// refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalStartedBy", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource")]
      IntervalStartedBy,
      /// <summary>
      /// refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("intervalStarts", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource")]
      IntervalStarts,
      /// <summary>
      /// The target IRI points to a resource that is a member of the collection represented by the context IRI.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("item", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The target IRI points to a resource that is a member of the collection represented by the context IRI.")]
      Item,
      /// <summary>
      /// An IRI that refers to the furthest following resource
      ///       in a series of resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("last", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("An IRI that refers to the furthest following resource
      in a series of resources.")]
      Last,
      /// <summary>
      /// Points to a resource containing the latest (e.g.,
      ///       current) version of the context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("latest-version", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Points to a resource containing the latest (e.g.,
      current) version of the context.")]
      LatestVersion,
      /// <summary>
      /// Refers to a license associated with this context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("license", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a license associated with this context.")]
      License,
      /// <summary>
      /// The link target of a link with the "linkset" relation
      ///       type provides a set of links, including links in which the link
      ///       context of the link participates.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("linkset", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The link target of a link with the \"linkset\" relation
      type provides a set of links, including links in which the link
      context of the link participates.")]
      Linkset,
      /// <summary>
      /// Refers to further information about the link's context,
      ///       expressed as a LRDD ("Link-based Resource Descriptor Document")
      ///       resource.  See  for information about
      ///       processing this relation type in host-meta documents. When used
      ///       elsewhere, it refers to additional links and other metadata.
      ///       Multiple instances indicate additional LRDD resources. LRDD
      ///       resources MUST have an "application/xrd+xml" representation, and
      ///       MAY have others.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("lrdd", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to further information about the link's context,
      expressed as a LRDD (\"Link-based Resource Descriptor Document\")
      resource.  See  for information about
      processing this relation type in host-meta documents. When used
      elsewhere, it refers to additional links and other metadata.
      Multiple instances indicate additional LRDD resources. LRDD
      resources MUST have an \"application/xrd+xml\" representation, and
      MAY have others.")]
      Lrdd,
      /// <summary>
      /// Links to a manifest file for the context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("manifest", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Links to a manifest file for the context.")]
      Manifest,
      /// <summary>
      /// Refers to a mask that can be applied to the icon for the context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("mask-icon", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a mask that can be applied to the icon for the context.")]
      MaskIcon,
      /// <summary>
      /// Refers to a feed of personalised media recommendations relevant to the link context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("media-feed", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a feed of personalised media recommendations relevant to the link context.")]
      MediaFeed,
      /// <summary>
      /// The Target IRI points to a Memento, a fixed resource that will not change state anymore.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("memento", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The Target IRI points to a Memento, a fixed resource that will not change state anymore.")]
      Memento,
      /// <summary>
      /// Links to the context's Micropub endpoint.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("micropub", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Links to the context's Micropub endpoint.")]
      Micropub,
      /// <summary>
      /// Refers to a module that the user agent is to preemptively fetch and store for use in the current context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("modulepreload", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a module that the user agent is to preemptively fetch and store for use in the current context.")]
      Modulepreload,
      /// <summary>
      /// Refers to a resource that can be used to monitor changes in an HTTP resource.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("monitor", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that can be used to monitor changes in an HTTP resource.")]
      Monitor,
      /// <summary>
      /// Refers to a resource that can be used to monitor changes in a specified group of HTTP resources.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("monitor-group", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that can be used to monitor changes in a specified group of HTTP resources.")]
      MonitorGroup,
      /// <summary>
      /// Indicates that the link's context is a part of a series, and
      ///       that the next in the series is the link target.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("next", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates that the link's context is a part of a series, and
      that the next in the series is the link target.")]
      Next,
      /// <summary>
      /// Refers to the immediately following archive resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("next-archive", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to the immediately following archive resource.")]
      NextArchive,
      /// <summary>
      /// Indicates that the context’s original author or publisher does not endorse the link target.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("nofollow", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates that the context’s original author or publisher does not endorse the link target.")]
      Nofollow,
      /// <summary>
      /// Indicates that any newly created top-level browsing context which results from following the link will not be an auxiliary browsing context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("noopener", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates that any newly created top-level browsing context which results from following the link will not be an auxiliary browsing context.")]
      Noopener,
      /// <summary>
      /// Indicates that no referrer information is to be leaked when following the link.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("noreferrer", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates that no referrer information is to be leaked when following the link.")]
      Noreferrer,
      /// <summary>
      /// Indicates that any newly created top-level browsing context which results from following the link will be an auxiliary browsing context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("opener", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates that any newly created top-level browsing context which results from following the link will be an auxiliary browsing context.")]
      Opener,
      /// <summary>
      /// Refers to an OpenID Authentication server on which the context relies for an assertion that the end user controls an Identifier.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("openid2.local_id", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to an OpenID Authentication server on which the context relies for an assertion that the end user controls an Identifier.")]
      Openid2_local_id,
      /// <summary>
      /// Refers to a resource which accepts OpenID Authentication protocol messages for the context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("openid2.provider", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource which accepts OpenID Authentication protocol messages for the context.")]
      Openid2_provider,
      /// <summary>
      /// The Target IRI points to an Original Resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("original", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The Target IRI points to an Original Resource.")]
      Original,
      /// <summary>
      /// Refers to a P3P privacy policy for the context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("P3Pv1", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a P3P privacy policy for the context.")]
      P3Pv1,
      /// <summary>
      /// Indicates a resource where payment is accepted.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("payment", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates a resource where payment is accepted.")]
      Payment,
      /// <summary>
      /// Gives the address of the pingback resource for the link context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("pingback", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Gives the address of the pingback resource for the link context.")]
      Pingback,
      /// <summary>
      /// Used to indicate an origin that will be used to fetch required 
      ///       resources for the link context. Initiating an early connection, which 
      ///       includes the DNS lookup, TCP handshake, and optional TLS negotiation, 
      ///       allows the user agent to mask the high latency costs of establishing a 
      ///       connection.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("preconnect", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Used to indicate an origin that will be used to fetch required 
      resources for the link context. Initiating an early connection, which 
      includes the DNS lookup, TCP handshake, and optional TLS negotiation, 
      allows the user agent to mask the high latency costs of establishing a 
      connection.")]
      Preconnect,
      /// <summary>
      /// Points to a resource containing the predecessor
      ///       version in the version history.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("predecessor-version", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Points to a resource containing the predecessor
      version in the version history.")]
      PredecessorVersion,
      /// <summary>
      /// The prefetch link relation type is used to identify a resource 
      ///       that might be required by the next navigation from the link context, and 
      ///       that the user agent ought to fetch, such that the user agent can deliver a 
      ///       faster response once the resource is requested in the future.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("prefetch", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The prefetch link relation type is used to identify a resource 
      that might be required by the next navigation from the link context, and 
      that the user agent ought to fetch, such that the user agent can deliver a 
      faster response once the resource is requested in the future.")]
      Prefetch,
      /// <summary>
      /// Refers to a resource that should be loaded early in the 
      ///       processing of the link's context, without blocking rendering.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("preload", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that should be loaded early in the 
      processing of the link's context, without blocking rendering.")]
      Preload,
      /// <summary>
      /// Used to identify a resource that might be required by the next 
      ///       navigation from the link context, and that the user agent ought to fetch 
      ///       and execute, such that the user agent can deliver a faster response once 
      ///       the resource is requested in the future.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("prerender", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Used to identify a resource that might be required by the next 
      navigation from the link context, and that the user agent ought to fetch 
      and execute, such that the user agent can deliver a faster response once 
      the resource is requested in the future.")]
      Prerender,
      /// <summary>
      /// Indicates that the link's context is a part of a series, and
      ///       that the previous in the series is the link target.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("prev", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates that the link's context is a part of a series, and
      that the previous in the series is the link target.")]
      Prev,
      /// <summary>
      /// Refers to a resource that provides a preview of the link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("preview", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that provides a preview of the link's context.")]
      Preview,
      /// <summary>
      /// Refers to the previous resource in an ordered series
      ///       of resources.  Synonym for "prev".
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("previous", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to the previous resource in an ordered series
      of resources.  Synonym for \"prev\".")]
      Previous,
      /// <summary>
      /// Refers to the immediately preceding archive resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("prev-archive", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to the immediately preceding archive resource.")]
      PrevArchive,
      /// <summary>
      /// Refers to a privacy policy associated with the link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("privacy-policy", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a privacy policy associated with the link's context.")]
      PrivacyPolicy,
      /// <summary>
      /// Identifying that a resource representation conforms
      /// to a certain profile, without affecting the non-profile semantics
      /// of the resource representation.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("profile", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifying that a resource representation conforms
to a certain profile, without affecting the non-profile semantics
of the resource representation.")]
      Profile,
      /// <summary>
      /// Links to a publication manifest. A manifest represents 
      ///       structured information about a publication, such as informative metadata, 
      ///       a list of resources, and a default reading order.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("publication", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Links to a publication manifest. A manifest represents 
      structured information about a publication, such as informative metadata, 
      a list of resources, and a default reading order.")]
      Publication,
      /// <summary>
      /// Identifies a related resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("related", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies a related resource.")]
      Related,
      /// <summary>
      /// Identifies the root of RESTCONF API as configured on this HTTP server.
      ///       The "restconf" relation defines the root of the API defined in RFC8040.
      ///       Subsequent revisions of RESTCONF will use alternate relation values to support 
      ///       protocol versioning.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("restconf", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies the root of RESTCONF API as configured on this HTTP server.
      The \"restconf\" relation defines the root of the API defined in RFC8040.
      Subsequent revisions of RESTCONF will use alternate relation values to support 
      protocol versioning.")]
      Restconf,
      /// <summary>
      /// Identifies a resource that is a reply to the context
      ///       of the link.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("replies", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies a resource that is a reply to the context
      of the link.")]
      Replies,
      /// <summary>
      /// The resource identified by the link target provides an input value to an 
      ///     instance of a rule, where the resource which represents the rule instance is 
      ///     identified by the link context.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("ruleinput", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The resource identified by the link target provides an input value to an 
    instance of a rule, where the resource which represents the rule instance is 
    identified by the link context.")]
      Ruleinput,
      /// <summary>
      /// Refers to a resource that can be used to search through
      ///       the link's context and related resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("search", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that can be used to search through
      the link's context and related resources.")]
      Search,
      /// <summary>
      /// Refers to a section in a collection of resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("section", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a section in a collection of resources.")]
      Section,
      /// <summary>
      /// Conveys an identifier for the link's context.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("self", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Conveys an identifier for the link's context.")]
      Self,
      /// <summary>
      /// Indicates a URI that can be used to retrieve a
      ///       service document.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("service", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Indicates a URI that can be used to retrieve a
      service document.")]
      Service,
      /// <summary>
      /// Identifies service description for the context that
      ///       is primarily intended for consumption by machines.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("service-desc", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies service description for the context that
      is primarily intended for consumption by machines.")]
      ServiceDesc,
      /// <summary>
      /// Identifies service documentation for the context that
      ///       is primarily intended for human consumption.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("service-doc", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies service documentation for the context that
      is primarily intended for human consumption.")]
      ServiceDoc,
      /// <summary>
      /// Identifies general metadata for the context that is
      ///       primarily intended for consumption by machines.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("service-meta", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies general metadata for the context that is
      primarily intended for consumption by machines.")]
      ServiceMeta,
      /// <summary>
      /// Refers to a resource that is within a context that is 
      /// 		sponsored (such as advertising or another compensation agreement).
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("sponsored", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that is within a context that is 
		sponsored (such as advertising or another compensation agreement).")]
      Sponsored,
      /// <summary>
      /// Refers to the first resource in a collection of
      ///       resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("start", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to the first resource in a collection of
      resources.")]
      Start,
      /// <summary>
      /// Identifies a resource that represents the context's
      ///       status.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("status", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies a resource that represents the context's
      status.")]
      Status,
      /// <summary>
      /// Refers to a stylesheet.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("stylesheet", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a stylesheet.")]
      Stylesheet,
      /// <summary>
      /// Refers to a resource serving as a subsection in a
      ///       collection of resources.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("subsection", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource serving as a subsection in a
      collection of resources.")]
      Subsection,
      /// <summary>
      /// Points to a resource containing the successor version
      ///       in the version history.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("successor-version", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Points to a resource containing the successor version
      in the version history.")]
      SuccessorVersion,
      /// <summary>
      /// Identifies a resource that provides information about
      ///       the context's retirement policy.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("sunset", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies a resource that provides information about
      the context's retirement policy.")]
      Sunset,
      /// <summary>
      /// Gives a tag (identified by the given address) that applies to
      ///       the current document.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("tag", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Gives a tag (identified by the given address) that applies to
      the current document.")]
      Tag,
      /// <summary>
      /// Refers to the terms of service associated with the link's context.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("terms-of-service", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to the terms of service associated with the link's context.")]
      TermsOfService,
      /// <summary>
      /// The Target IRI points to a TimeGate for an Original Resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("timegate", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The Target IRI points to a TimeGate for an Original Resource.")]
      Timegate,
      /// <summary>
      /// The Target IRI points to a TimeMap for an Original Resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("timemap", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("The Target IRI points to a TimeMap for an Original Resource.")]
      Timemap,
      /// <summary>
      /// Refers to a resource identifying the abstract semantic type of which the link's context is considered to be an instance.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("type", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource identifying the abstract semantic type of which the link's context is considered to be an instance.")]
      Type,
      /// <summary>
      /// Refers to a resource that is within a context that is User Generated Content.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("ugc", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a resource that is within a context that is User Generated Content.")]
      Ugc,
      /// <summary>
      /// Refers to a parent document in a hierarchy of
      ///       documents.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("up", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Refers to a parent document in a hierarchy of
      documents.")]
      Up,
      /// <summary>
      /// Points to a resource containing the version history
      ///       for the context.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("version-history", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Points to a resource containing the version history
      for the context.")]
      VersionHistory,
      /// <summary>
      /// Identifies a resource that is the source of the
      ///       information in the link's context.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("via", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies a resource that is the source of the
      information in the link's context.")]
      Via,
      /// <summary>
      /// Identifies a target URI that supports the Webmention protocol.
      ///     This allows clients that mention a resource in some form of publishing process
      ///     to contact that endpoint and inform it that this resource has been mentioned.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("webmention", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Identifies a target URI that supports the Webmention protocol.
    This allows clients that mention a resource in some form of publishing process
    to contact that endpoint and inform it that this resource has been mentioned.")]
      Webmention,
      /// <summary>
      /// Points to a working copy for this resource.
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("working-copy", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Points to a working copy for this resource.")]
      WorkingCopy,
      /// <summary>
      /// Points to the versioned resource from which this
      ///       working copy was obtained.
      ///     
      /// (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
      /// </summary>
      [EnumLiteral("working-copy-of", "http://hl7.org/fhir/CodeSystem/iana-link-relations"), Description("Points to the versioned resource from which this
      working copy was obtained.")]
      WorkingCopyOf,
    }

    /// <summary>
    /// Why an entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
    /// (url: http://hl7.org/fhir/ValueSet/search-entry-mode)
    /// (system: http://hl7.org/fhir/search-entry-mode)
    /// </summary>
    [FhirEnumeration("SearchEntryMode")]
    public enum SearchEntryMode
    {
      /// <summary>
      /// This resource matched the search specification.
      /// (system: http://hl7.org/fhir/search-entry-mode)
      /// </summary>
      [EnumLiteral("match", "http://hl7.org/fhir/search-entry-mode"), Description("Match")]
      Match,
      /// <summary>
      /// This resource is returned because it is referred to from another resource in the search set.
      /// (system: http://hl7.org/fhir/search-entry-mode)
      /// </summary>
      [EnumLiteral("include", "http://hl7.org/fhir/search-entry-mode"), Description("Include")]
      Include,
      /// <summary>
      /// An OperationOutcome that provides additional information about the processing of a search.
      /// (system: http://hl7.org/fhir/search-entry-mode)
      /// </summary>
      [EnumLiteral("outcome", "http://hl7.org/fhir/search-entry-mode"), Description("Outcome")]
      Outcome,
    }

    /// <summary>
    /// HTTP verbs (in the HTTP command line). See [HTTP rfc](https://tools.ietf.org/html/rfc7231) for details.
    /// (url: http://hl7.org/fhir/ValueSet/http-verb)
    /// (system: http://hl7.org/fhir/http-verb)
    /// </summary>
    [FhirEnumeration("HTTPVerb")]
    public enum HTTPVerb
    {
      /// <summary>
      /// HTTP GET Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("GET", "http://hl7.org/fhir/http-verb"), Description("GET")]
      GET,
      /// <summary>
      /// HTTP HEAD Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("HEAD", "http://hl7.org/fhir/http-verb"), Description("HEAD")]
      HEAD,
      /// <summary>
      /// HTTP POST Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("POST", "http://hl7.org/fhir/http-verb"), Description("POST")]
      POST,
      /// <summary>
      /// HTTP PUT Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("PUT", "http://hl7.org/fhir/http-verb"), Description("PUT")]
      PUT,
      /// <summary>
      /// HTTP DELETE Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("DELETE", "http://hl7.org/fhir/http-verb"), Description("DELETE")]
      DELETE,
      /// <summary>
      /// HTTP PATCH Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("PATCH", "http://hl7.org/fhir/http-verb"), Description("PATCH")]
      PATCH,
    }

    /// <summary>
    /// Links related to this Bundle
    /// </summary>
    [FhirType("LinkComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class LinkComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "LinkComponent"; } }

      /// <summary>
      /// See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
      /// </summary>
      [FhirElement("relation", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.Bundle.LinkRelationTypes> RelationElement
      {
        get { return _RelationElement; }
        set { _RelationElement = value; OnPropertyChanged("RelationElement"); }
      }

      private Code<Hl7.Fhir.Model.Bundle.LinkRelationTypes> _RelationElement;

      /// <summary>
      /// See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public Hl7.Fhir.Model.Bundle.LinkRelationTypes? Relation
      {
        get { return RelationElement != null ? RelationElement.Value : null; }
        set
        {
          if (value == null)
            RelationElement = null;
          else
            RelationElement = new Code<Hl7.Fhir.Model.Bundle.LinkRelationTypes>(value);
          OnPropertyChanged("Relation");
        }

      }

      /// <summary>
      /// Reference details for the link
      /// </summary>
      [FhirElement("url", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UrlElement;

      /// <summary>
      /// Reference details for the link
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Url");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LinkComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RelationElement != null) dest.RelationElement = (Code<Hl7.Fhir.Model.Bundle.LinkRelationTypes>)RelationElement.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LinkComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RelationElement, otherT.RelationElement)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RelationElement, otherT.RelationElement)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RelationElement != null) yield return RelationElement;
          if (UrlElement != null) yield return UrlElement;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RelationElement != null) yield return new ElementValue("relation", RelationElement);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        }

      }

    }

    /// <summary>
    /// Entry in the bundle - will have a resource or information
    /// </summary>
    [FhirType("EntryComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class EntryComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "EntryComponent"; } }

      /// <summary>
      /// Links related to this entry
      /// </summary>
      [FhirElement("link", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Bundle.LinkComponent> Link
      {
        get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(); return _Link; }
        set { _Link = value; OnPropertyChanged("Link"); }
      }

      private List<Hl7.Fhir.Model.Bundle.LinkComponent> _Link;

      /// <summary>
      /// URI for resource (e.g. the absolute URL server address, URI for UUID/OID, etc.)
      /// </summary>
      [FhirElement("fullUrl", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri FullUrlElement
      {
        get { return _FullUrlElement; }
        set { _FullUrlElement = value; OnPropertyChanged("FullUrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _FullUrlElement;

      /// <summary>
      /// URI for resource (e.g. the absolute URL server address, URI for UUID/OID, etc.)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string FullUrl
      {
        get { return FullUrlElement != null ? FullUrlElement.Value : null; }
        set
        {
          if (value == null)
            FullUrlElement = null;
          else
            FullUrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("FullUrl");
        }

      }

      /// <summary>
      /// A resource in the bundle
      /// </summary>
      [FhirElement("resource", InSummary=true, Order=60, Choice=ChoiceType.ResourceChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Resource))]
      [DataMember]
      public Hl7.Fhir.Model.Resource Resource
      {
        get { return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private Hl7.Fhir.Model.Resource _Resource;

      /// <summary>
      /// Search related information
      /// </summary>
      [FhirElement("search", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Bundle.SearchComponent Search
      {
        get { return _Search; }
        set { _Search = value; OnPropertyChanged("Search"); }
      }

      private Hl7.Fhir.Model.Bundle.SearchComponent _Search;

      /// <summary>
      /// Additional execution information (transaction/batch/history)
      /// </summary>
      [FhirElement("request", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Bundle.RequestComponent Request
      {
        get { return _Request; }
        set { _Request = value; OnPropertyChanged("Request"); }
      }

      private Hl7.Fhir.Model.Bundle.RequestComponent _Request;

      /// <summary>
      /// Results of execution (transaction/batch/history)
      /// </summary>
      [FhirElement("response", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Bundle.ResponseComponent Response
      {
        get { return _Response; }
        set { _Response = value; OnPropertyChanged("Response"); }
      }

      private Hl7.Fhir.Model.Bundle.ResponseComponent _Response;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EntryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Link != null) dest.Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(Link.DeepCopy());
        if(FullUrlElement != null) dest.FullUrlElement = (Hl7.Fhir.Model.FhirUri)FullUrlElement.DeepCopy();
        if(Resource != null) dest.Resource = (Hl7.Fhir.Model.Resource)Resource.DeepCopy();
        if(Search != null) dest.Search = (Hl7.Fhir.Model.Bundle.SearchComponent)Search.DeepCopy();
        if(Request != null) dest.Request = (Hl7.Fhir.Model.Bundle.RequestComponent)Request.DeepCopy();
        if(Response != null) dest.Response = (Hl7.Fhir.Model.Bundle.ResponseComponent)Response.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EntryComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EntryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Link, otherT.Link)) return false;
        if( !DeepComparable.Matches(FullUrlElement, otherT.FullUrlElement)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;
        if( !DeepComparable.Matches(Search, otherT.Search)) return false;
        if( !DeepComparable.Matches(Request, otherT.Request)) return false;
        if( !DeepComparable.Matches(Response, otherT.Response)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EntryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;
        if( !DeepComparable.IsExactly(FullUrlElement, otherT.FullUrlElement)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;
        if( !DeepComparable.IsExactly(Search, otherT.Search)) return false;
        if( !DeepComparable.IsExactly(Request, otherT.Request)) return false;
        if( !DeepComparable.IsExactly(Response, otherT.Response)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Link) { if (elem != null) yield return elem; }
          if (FullUrlElement != null) yield return FullUrlElement;
          if (Resource != null) yield return Resource;
          if (Search != null) yield return Search;
          if (Request != null) yield return Request;
          if (Response != null) yield return Response;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
          if (FullUrlElement != null) yield return new ElementValue("fullUrl", FullUrlElement);
          if (Resource != null) yield return new ElementValue("resource", Resource);
          if (Search != null) yield return new ElementValue("search", Search);
          if (Request != null) yield return new ElementValue("request", Request);
          if (Response != null) yield return new ElementValue("response", Response);
        }

      }

    }

    /// <summary>
    /// Search related information
    /// </summary>
    [FhirType("SearchComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class SearchComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "SearchComponent"; } }

      /// <summary>
      /// match | include | outcome - why this is in the result set
      /// </summary>
      [FhirElement("mode", InSummary=true, Order=40)]
      [DataMember]
      public Code<Hl7.Fhir.Model.Bundle.SearchEntryMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.Bundle.SearchEntryMode> _ModeElement;

      /// <summary>
      /// match | include | outcome - why this is in the result set
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public Hl7.Fhir.Model.Bundle.SearchEntryMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>(value);
          OnPropertyChanged("Mode");
        }

      }

      /// <summary>
      /// Search ranking (between 0 and 1)
      /// </summary>
      [FhirElement("score", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal ScoreElement
      {
        get { return _ScoreElement; }
        set { _ScoreElement = value; OnPropertyChanged("ScoreElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _ScoreElement;

      /// <summary>
      /// Search ranking (between 0 and 1)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public decimal? Score
      {
        get { return ScoreElement != null ? ScoreElement.Value : null; }
        set
        {
          if (value == null)
            ScoreElement = null;
          else
            ScoreElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Score");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SearchComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>)ModeElement.DeepCopy();
        if(ScoreElement != null) dest.ScoreElement = (Hl7.Fhir.Model.FhirDecimal)ScoreElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SearchComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SearchComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(ScoreElement, otherT.ScoreElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SearchComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(ScoreElement, otherT.ScoreElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ModeElement != null) yield return ModeElement;
          if (ScoreElement != null) yield return ScoreElement;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (ScoreElement != null) yield return new ElementValue("score", ScoreElement);
        }

      }

    }

    /// <summary>
    /// Additional execution information (transaction/batch/history)
    /// </summary>
    [FhirType("RequestComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class RequestComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "RequestComponent"; } }

      /// <summary>
      /// GET | HEAD | POST | PUT | DELETE | PATCH
      /// </summary>
      [FhirElement("method", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.Bundle.HTTPVerb> MethodElement
      {
        get { return _MethodElement; }
        set { _MethodElement = value; OnPropertyChanged("MethodElement"); }
      }

      private Code<Hl7.Fhir.Model.Bundle.HTTPVerb> _MethodElement;

      /// <summary>
      /// GET | HEAD | POST | PUT | DELETE | PATCH
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public Hl7.Fhir.Model.Bundle.HTTPVerb? Method
      {
        get { return MethodElement != null ? MethodElement.Value : null; }
        set
        {
          if (value == null)
            MethodElement = null;
          else
            MethodElement = new Code<Hl7.Fhir.Model.Bundle.HTTPVerb>(value);
          OnPropertyChanged("Method");
        }

      }

      /// <summary>
      /// URL for HTTP equivalent of this entry
      /// </summary>
      [FhirElement("url", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UrlElement;

      /// <summary>
      /// URL for HTTP equivalent of this entry
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Url");
        }

      }

      /// <summary>
      /// For managing cache validation
      /// </summary>
      [FhirElement("ifNoneMatch", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IfNoneMatchElement
      {
        get { return _IfNoneMatchElement; }
        set { _IfNoneMatchElement = value; OnPropertyChanged("IfNoneMatchElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IfNoneMatchElement;

      /// <summary>
      /// For managing cache validation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string IfNoneMatch
      {
        get { return IfNoneMatchElement != null ? IfNoneMatchElement.Value : null; }
        set
        {
          if (value == null)
            IfNoneMatchElement = null;
          else
            IfNoneMatchElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("IfNoneMatch");
        }

      }

      /// <summary>
      /// For managing cache currency
      /// </summary>
      [FhirElement("ifModifiedSince", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Instant IfModifiedSinceElement
      {
        get { return _IfModifiedSinceElement; }
        set { _IfModifiedSinceElement = value; OnPropertyChanged("IfModifiedSinceElement"); }
      }

      private Hl7.Fhir.Model.Instant _IfModifiedSinceElement;

      /// <summary>
      /// For managing cache currency
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public DateTimeOffset? IfModifiedSince
      {
        get { return IfModifiedSinceElement != null ? IfModifiedSinceElement.Value : null; }
        set
        {
          if (value == null)
            IfModifiedSinceElement = null;
          else
            IfModifiedSinceElement = new Hl7.Fhir.Model.Instant(value);
          OnPropertyChanged("IfModifiedSince");
        }

      }

      /// <summary>
      /// For managing update contention
      /// </summary>
      [FhirElement("ifMatch", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IfMatchElement
      {
        get { return _IfMatchElement; }
        set { _IfMatchElement = value; OnPropertyChanged("IfMatchElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IfMatchElement;

      /// <summary>
      /// For managing update contention
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string IfMatch
      {
        get { return IfMatchElement != null ? IfMatchElement.Value : null; }
        set
        {
          if (value == null)
            IfMatchElement = null;
          else
            IfMatchElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("IfMatch");
        }

      }

      /// <summary>
      /// For conditional creates
      /// </summary>
      [FhirElement("ifNoneExist", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IfNoneExistElement
      {
        get { return _IfNoneExistElement; }
        set { _IfNoneExistElement = value; OnPropertyChanged("IfNoneExistElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IfNoneExistElement;

      /// <summary>
      /// For conditional creates
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string IfNoneExist
      {
        get { return IfNoneExistElement != null ? IfNoneExistElement.Value : null; }
        set
        {
          if (value == null)
            IfNoneExistElement = null;
          else
            IfNoneExistElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("IfNoneExist");
        }

      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RequestComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(MethodElement != null) dest.MethodElement = (Code<Hl7.Fhir.Model.Bundle.HTTPVerb>)MethodElement.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
        if(IfNoneMatchElement != null) dest.IfNoneMatchElement = (Hl7.Fhir.Model.FhirString)IfNoneMatchElement.DeepCopy();
        if(IfModifiedSinceElement != null) dest.IfModifiedSinceElement = (Hl7.Fhir.Model.Instant)IfModifiedSinceElement.DeepCopy();
        if(IfMatchElement != null) dest.IfMatchElement = (Hl7.Fhir.Model.FhirString)IfMatchElement.DeepCopy();
        if(IfNoneExistElement != null) dest.IfNoneExistElement = (Hl7.Fhir.Model.FhirString)IfNoneExistElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RequestComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RequestComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(MethodElement, otherT.MethodElement)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.Matches(IfNoneMatchElement, otherT.IfNoneMatchElement)) return false;
        if( !DeepComparable.Matches(IfModifiedSinceElement, otherT.IfModifiedSinceElement)) return false;
        if( !DeepComparable.Matches(IfMatchElement, otherT.IfMatchElement)) return false;
        if( !DeepComparable.Matches(IfNoneExistElement, otherT.IfNoneExistElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RequestComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(MethodElement, otherT.MethodElement)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.IsExactly(IfNoneMatchElement, otherT.IfNoneMatchElement)) return false;
        if( !DeepComparable.IsExactly(IfModifiedSinceElement, otherT.IfModifiedSinceElement)) return false;
        if( !DeepComparable.IsExactly(IfMatchElement, otherT.IfMatchElement)) return false;
        if( !DeepComparable.IsExactly(IfNoneExistElement, otherT.IfNoneExistElement)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (MethodElement != null) yield return MethodElement;
          if (UrlElement != null) yield return UrlElement;
          if (IfNoneMatchElement != null) yield return IfNoneMatchElement;
          if (IfModifiedSinceElement != null) yield return IfModifiedSinceElement;
          if (IfMatchElement != null) yield return IfMatchElement;
          if (IfNoneExistElement != null) yield return IfNoneExistElement;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (MethodElement != null) yield return new ElementValue("method", MethodElement);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
          if (IfNoneMatchElement != null) yield return new ElementValue("ifNoneMatch", IfNoneMatchElement);
          if (IfModifiedSinceElement != null) yield return new ElementValue("ifModifiedSince", IfModifiedSinceElement);
          if (IfMatchElement != null) yield return new ElementValue("ifMatch", IfMatchElement);
          if (IfNoneExistElement != null) yield return new ElementValue("ifNoneExist", IfNoneExistElement);
        }

      }

    }

    /// <summary>
    /// Results of execution (transaction/batch/history)
    /// </summary>
    [FhirType("ResponseComponent", NamedBackboneElement=true)]
    [DataContract]
    public partial class ResponseComponent : Hl7.Fhir.Model.BackboneElement, System.ComponentModel.INotifyPropertyChanged
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      [NotMapped]
      public override string TypeName { get { return "ResponseComponent"; } }

      /// <summary>
      /// Status response code (text optional)
      /// </summary>
      [FhirElement("status", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString StatusElement
      {
        get { return _StatusElement; }
        set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
      }

      private Hl7.Fhir.Model.FhirString _StatusElement;

      /// <summary>
      /// Status response code (text optional)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string Status
      {
        get { return StatusElement != null ? StatusElement.Value : null; }
        set
        {
          if (value == null)
            StatusElement = null;
          else
            StatusElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Status");
        }

      }

      /// <summary>
      /// The location (if the operation returns a location)
      /// </summary>
      [FhirElement("location", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri LocationElement
      {
        get { return _LocationElement; }
        set { _LocationElement = value; OnPropertyChanged("LocationElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _LocationElement;

      /// <summary>
      /// The location (if the operation returns a location)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string Location
      {
        get { return LocationElement != null ? LocationElement.Value : null; }
        set
        {
          if (value == null)
            LocationElement = null;
          else
            LocationElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Location");
        }

      }

      /// <summary>
      /// The Etag for the resource (if relevant)
      /// </summary>
      [FhirElement("etag", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString EtagElement
      {
        get { return _EtagElement; }
        set { _EtagElement = value; OnPropertyChanged("EtagElement"); }
      }

      private Hl7.Fhir.Model.FhirString _EtagElement;

      /// <summary>
      /// The Etag for the resource (if relevant)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public string Etag
      {
        get { return EtagElement != null ? EtagElement.Value : null; }
        set
        {
          if (value == null)
            EtagElement = null;
          else
            EtagElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Etag");
        }

      }

      /// <summary>
      /// Server's date time modified
      /// </summary>
      [FhirElement("lastModified", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Instant LastModifiedElement
      {
        get { return _LastModifiedElement; }
        set { _LastModifiedElement = value; OnPropertyChanged("LastModifiedElement"); }
      }

      private Hl7.Fhir.Model.Instant _LastModifiedElement;

      /// <summary>
      /// Server's date time modified
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [NotMapped]
      [IgnoreDataMemberAttribute]
      public DateTimeOffset? LastModified
      {
        get { return LastModifiedElement != null ? LastModifiedElement.Value : null; }
        set
        {
          if (value == null)
            LastModifiedElement = null;
          else
            LastModifiedElement = new Hl7.Fhir.Model.Instant(value);
          OnPropertyChanged("LastModified");
        }

      }

      /// <summary>
      /// OperationOutcome with hints and warnings (for batch/transaction)
      /// </summary>
      [FhirElement("outcome", InSummary=true, Order=80, Choice=ChoiceType.ResourceChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Resource))]
      [DataMember]
      public Hl7.Fhir.Model.Resource Outcome
      {
        get { return _Outcome; }
        set { _Outcome = value; OnPropertyChanged("Outcome"); }
      }

      private Hl7.Fhir.Model.Resource _Outcome;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ResponseComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(StatusElement != null) dest.StatusElement = (Hl7.Fhir.Model.FhirString)StatusElement.DeepCopy();
        if(LocationElement != null) dest.LocationElement = (Hl7.Fhir.Model.FhirUri)LocationElement.DeepCopy();
        if(EtagElement != null) dest.EtagElement = (Hl7.Fhir.Model.FhirString)EtagElement.DeepCopy();
        if(LastModifiedElement != null) dest.LastModifiedElement = (Hl7.Fhir.Model.Instant)LastModifiedElement.DeepCopy();
        if(Outcome != null) dest.Outcome = (Hl7.Fhir.Model.Resource)Outcome.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ResponseComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ResponseComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
        if( !DeepComparable.Matches(LocationElement, otherT.LocationElement)) return false;
        if( !DeepComparable.Matches(EtagElement, otherT.EtagElement)) return false;
        if( !DeepComparable.Matches(LastModifiedElement, otherT.LastModifiedElement)) return false;
        if( !DeepComparable.Matches(Outcome, otherT.Outcome)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ResponseComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
        if( !DeepComparable.IsExactly(LocationElement, otherT.LocationElement)) return false;
        if( !DeepComparable.IsExactly(EtagElement, otherT.EtagElement)) return false;
        if( !DeepComparable.IsExactly(LastModifiedElement, otherT.LastModifiedElement)) return false;
        if( !DeepComparable.IsExactly(Outcome, otherT.Outcome)) return false;

        return true;
      }

      [NotMapped]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (StatusElement != null) yield return StatusElement;
          if (LocationElement != null) yield return LocationElement;
          if (EtagElement != null) yield return EtagElement;
          if (LastModifiedElement != null) yield return LastModifiedElement;
          if (Outcome != null) yield return Outcome;
        }

      }

      [NotMapped]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (StatusElement != null) yield return new ElementValue("status", StatusElement);
          if (LocationElement != null) yield return new ElementValue("location", LocationElement);
          if (EtagElement != null) yield return new ElementValue("etag", EtagElement);
          if (LastModifiedElement != null) yield return new ElementValue("lastModified", LastModifiedElement);
          if (Outcome != null) yield return new ElementValue("outcome", Outcome);
        }

      }

    }

    /// <summary>
    /// Persistent identifier for the bundle
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=50)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
    /// </summary>
    [FhirElement("type", InSummary=true, Order=60)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Bundle.BundleType> TypeElement
    {
      get { return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private Code<Hl7.Fhir.Model.Bundle.BundleType> _TypeElement;

    /// <summary>
    /// document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public Hl7.Fhir.Model.Bundle.BundleType? Type
    {
      get { return TypeElement != null ? TypeElement.Value : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new Code<Hl7.Fhir.Model.Bundle.BundleType>(value);
        OnPropertyChanged("Type");
      }

    }

    /// <summary>
    /// When the bundle was assembled
    /// </summary>
    [FhirElement("timestamp", InSummary=true, Order=70)]
    [DataMember]
    public Hl7.Fhir.Model.Instant TimestampElement
    {
      get { return _TimestampElement; }
      set { _TimestampElement = value; OnPropertyChanged("TimestampElement"); }
    }

    private Hl7.Fhir.Model.Instant _TimestampElement;

    /// <summary>
    /// When the bundle was assembled
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public DateTimeOffset? Timestamp
    {
      get { return TimestampElement != null ? TimestampElement.Value : null; }
      set
      {
        if (value == null)
          TimestampElement = null;
        else
          TimestampElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("Timestamp");
      }

    }

    /// <summary>
    /// If search, the total number of matches
    /// </summary>
    [FhirElement("total", InSummary=true, Order=80)]
    [DataMember]
    public Hl7.Fhir.Model.UnsignedInt TotalElement
    {
      get { return _TotalElement; }
      set { _TotalElement = value; OnPropertyChanged("TotalElement"); }
    }

    private Hl7.Fhir.Model.UnsignedInt _TotalElement;

    /// <summary>
    /// If search, the total number of matches
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [NotMapped]
    [IgnoreDataMemberAttribute]
    public int? Total
    {
      get { return TotalElement != null ? TotalElement.Value : null; }
      set
      {
        if (value == null)
          TotalElement = null;
        else
          TotalElement = new Hl7.Fhir.Model.UnsignedInt(value);
        OnPropertyChanged("Total");
      }

    }

    /// <summary>
    /// Links related to this Bundle
    /// </summary>
    [FhirElement("link", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Bundle.LinkComponent> Link
    {
      get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(); return _Link; }
      set { _Link = value; OnPropertyChanged("Link"); }
    }

    private List<Hl7.Fhir.Model.Bundle.LinkComponent> _Link;

    /// <summary>
    /// Entry in the bundle - will have a resource or information
    /// </summary>
    [FhirElement("entry", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Bundle.EntryComponent> Entry
    {
      get { if(_Entry==null) _Entry = new List<Hl7.Fhir.Model.Bundle.EntryComponent>(); return _Entry; }
      set { _Entry = value; OnPropertyChanged("Entry"); }
    }

    private List<Hl7.Fhir.Model.Bundle.EntryComponent> _Entry;

    /// <summary>
    /// Digital Signature
    /// </summary>
    [FhirElement("signature", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.Signature Signature
    {
      get { return _Signature; }
      set { _Signature = value; OnPropertyChanged("Signature"); }
    }

    private Hl7.Fhir.Model.Signature _Signature;

    /// <summary>
    /// Issues with the Bundle
    /// </summary>
    [FhirElement("issues", InSummary=true, Order=120, Choice=ChoiceType.ResourceChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Resource))]
    [DataMember]
    public Hl7.Fhir.Model.Resource Issues
    {
      get { return _Issues; }
      set { _Issues = value; OnPropertyChanged("Issues"); }
    }

    private Hl7.Fhir.Model.Resource _Issues;

    public static ElementDefinition.ConstraintComponent Bundle_BDL_7 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "(type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&resource.meta.versionId).isDistinct()",
      Key = "bdl-7",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)",
      Xpath = "(f:type/@value = 'history') or (count(for $entry in f:entry[f:resource] return $entry[count(parent::f:Bundle/f:entry[f:fullUrl/@value=$entry/f:fullUrl/@value and ((not(f:resource/*/f:meta/f:versionId/@value) and not($entry/f:resource/*/f:meta/f:versionId/@value)) or f:resource/*/f:meta/f:versionId/@value=$entry/f:resource/*/f:meta/f:versionId/@value)])!=1])=0)"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_9 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type = 'document' implies (identifier.system.exists() and identifier.value.exists())",
      Key = "bdl-9",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "A document must have an identifier with a system and a value",
      Xpath = "not(f:type/@value = 'document') or exists(f:identifier/f:system) or exists(f:identifier/f:value)"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_3 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "entry.all(request.exists() = (%resource.type = 'batch' or %resource.type = 'transaction' or %resource.type = 'history')) or (type='subscription-notification')",
      Key = "bdl-3",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "entry.request mandatory for batch/transaction/history, allowed for subscription-notification, otherwise prohibited",
      Xpath = "not(f:entry/f:request) or (f:type/@value = 'batch') or (f:type/@value = 'transaction') or (f:type/@value = 'history') or (f:type/@value = 'subscription-notification)"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_17 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type = 'document' implies Bundle.issues.empty()",
      Key = "bdl-17",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "Use and meaning of Bundle.issues for documents has not been validated because the content will not be rendered in the document.",
      Xpath = ""
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_4 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "entry.all(response.exists() = (%resource.type = 'batch-response' or %resource.type = 'transaction-response' or %resource.type = 'history')) or (type='subscription-notification')",
      Key = "bdl-4",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "entry.response mandatory for batch-response/transaction-response/history, allowed for subscription-notification, otherwise prohibited",
      Xpath = "not(f:entry/f:response) or (f:type/@value = 'batch-response') or (f:type/@value = 'transaction-response') or (f:type/@value = 'history') or (f:type/@value = 'subscription-notification)"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_16 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "Bundle.issues.exists() implies (Bundle.issues.OperationOutcome.issue.severity = 'information' or Bundle.issues.OperationOutcome.issue.severity = 'warning')",
      Key = "bdl-16",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "Issue.severity for all issues within the OperationOutcome must be either 'information' or 'warning'.",
      Xpath = ""
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_13 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)",
      Key = "bdl-13",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "A subscription-notification must have a SubscriptionStatus as the first resource",
      Xpath = "not(f:type/@value='subscription-notification') or f:entry[1]/f:resource/f:SubscriptionStatus"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_12 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type = 'message' implies entry.first().resource.is(MessageHeader)",
      Key = "bdl-12",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "A message must have a MessageHeader as the first resource",
      Xpath = "not(f:type/@value='message') or f:entry[1]/f:resource/f:MessageHeader"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_15 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type='transaction' or type='transaction-response' or type='batch' or type='batch-response' or entry.all(fullUrl.exists() or request.method='POST')",
      Key = "bdl-15",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "Bundle resources where type is not transaction, transaction-response, batch, or batch-response or when the request is a POST SHALL have Bundle.entry.fullUrl populated",
      Xpath = "not(           (f:type/@value = 'transaction') or            (f:type/@value = 'transaction-response') or            (f:type/@value = 'batch') or            (f:type/@value = 'batch-response')            ) or count(f:entry) = (count(f:entry/f:fullUrl) + count(f:entry[not(f:fullUrl)]/f:request/f:method/@value='POST'))"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_14 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type = 'history' implies entry.request.method != 'PATCH'",
      Key = "bdl-14",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "entry.request.method PATCH not allowed for history",
      Xpath = "(f:type/@value = 'history') and not(f:entry/f:request/f:method/@value = 'PATCH')"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_11 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type = 'document' implies entry.first().resource.is(Composition)",
      Key = "bdl-11",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "A document must have a Composition as the first resource",
      Xpath = "not(f:type/@value='document') or f:entry[1]/f:resource/f:Composition"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_10 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "type = 'document' implies (timestamp.hasValue())",
      Key = "bdl-10",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "A document must have a date",
      Xpath = "not(f:type/@value = 'document') or exists(f:timestamp/@value)"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_1 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "total.empty() or (type = 'searchset') or (type = 'history')",
      Key = "bdl-1",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "total only when a search or history",
      Xpath = "not(f:total) or (f:type/@value = 'searchset') or (f:type/@value = 'history')"
    };

    public static ElementDefinition.ConstraintComponent Bundle_BDL_2 = new ElementDefinition.ConstraintComponent()
    {
      Expression = "entry.search.empty() or (type = 'searchset')",
      Key = "bdl-2",
      Severity = ElementDefinition.ConstraintSeverity.Warning,
      Human = "entry.search only when a search",
      Xpath = "not(f:entry/f:search) or (f:type/@value = 'searchset')"
    };

    public override void AddDefaultConstraints()
    {
      base.AddDefaultConstraints();

      InvariantConstraints.Add(Bundle_BDL_7);
      InvariantConstraints.Add(Bundle_BDL_9);
      InvariantConstraints.Add(Bundle_BDL_3);
      InvariantConstraints.Add(Bundle_BDL_17);
      InvariantConstraints.Add(Bundle_BDL_4);
      InvariantConstraints.Add(Bundle_BDL_16);
      InvariantConstraints.Add(Bundle_BDL_13);
      InvariantConstraints.Add(Bundle_BDL_12);
      InvariantConstraints.Add(Bundle_BDL_15);
      InvariantConstraints.Add(Bundle_BDL_14);
      InvariantConstraints.Add(Bundle_BDL_11);
      InvariantConstraints.Add(Bundle_BDL_10);
      InvariantConstraints.Add(Bundle_BDL_1);
      InvariantConstraints.Add(Bundle_BDL_2);
    }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Bundle;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.Bundle.BundleType>)TypeElement.DeepCopy();
      if(TimestampElement != null) dest.TimestampElement = (Hl7.Fhir.Model.Instant)TimestampElement.DeepCopy();
      if(TotalElement != null) dest.TotalElement = (Hl7.Fhir.Model.UnsignedInt)TotalElement.DeepCopy();
      if(Link != null) dest.Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(Link.DeepCopy());
      if(Entry != null) dest.Entry = new List<Hl7.Fhir.Model.Bundle.EntryComponent>(Entry.DeepCopy());
      if(Signature != null) dest.Signature = (Hl7.Fhir.Model.Signature)Signature.DeepCopy();
      if(Issues != null) dest.Issues = (Hl7.Fhir.Model.Resource)Issues.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Bundle());
    }

    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Bundle;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(TimestampElement, otherT.TimestampElement)) return false;
      if( !DeepComparable.Matches(TotalElement, otherT.TotalElement)) return false;
      if( !DeepComparable.Matches(Link, otherT.Link)) return false;
      if( !DeepComparable.Matches(Entry, otherT.Entry)) return false;
      if( !DeepComparable.Matches(Signature, otherT.Signature)) return false;
      if( !DeepComparable.Matches(Issues, otherT.Issues)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Bundle;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(TimestampElement, otherT.TimestampElement)) return false;
      if( !DeepComparable.IsExactly(TotalElement, otherT.TotalElement)) return false;
      if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;
      if( !DeepComparable.IsExactly(Entry, otherT.Entry)) return false;
      if( !DeepComparable.IsExactly(Signature, otherT.Signature)) return false;
      if( !DeepComparable.IsExactly(Issues, otherT.Issues)) return false;

      return true;
    }

    [NotMapped]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (TypeElement != null) yield return TypeElement;
        if (TimestampElement != null) yield return TimestampElement;
        if (TotalElement != null) yield return TotalElement;
        foreach (var elem in Link) { if (elem != null) yield return elem; }
        foreach (var elem in Entry) { if (elem != null) yield return elem; }
        if (Signature != null) yield return Signature;
        if (Issues != null) yield return Issues;
      }

    }

    [NotMapped]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        if (TimestampElement != null) yield return new ElementValue("timestamp", TimestampElement);
        if (TotalElement != null) yield return new ElementValue("total", TotalElement);
        foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
        foreach (var elem in Entry) { if (elem != null) yield return new ElementValue("entry", elem); }
        if (Signature != null) yield return new ElementValue("signature", Signature);
        if (Issues != null) yield return new ElementValue("issues", Issues);
      }

    }

  }

}

// end of file
