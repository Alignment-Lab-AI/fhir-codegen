// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Record of medication being taken by a patient
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MedicationStatement","http://hl7.org/fhir/StructureDefinition/MedicationStatement", IsResource=true)]
  public partial class MedicationStatement : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MedicationStatement"; } }

    /// <summary>
    /// A set of codes indicating the current status of a MedicationStatement.
    /// (url: http://hl7.org/fhir/ValueSet/medication-statement-status)
    /// (system: http://hl7.org/fhir/medication-statement-status)
    /// </summary>
    [FhirEnumeration("MedicationStatementStatus")]
    public enum MedicationStatementStatus
    {
      /// <summary>
      /// The medication is still being taken.
      /// (system: http://hl7.org/fhir/medication-statement-status)
      /// </summary>
      [EnumLiteral("active", "http://hl7.org/fhir/medication-statement-status"), Description("Active")]
      Active,
      /// <summary>
      /// The medication is no longer being taken.
      /// (system: http://hl7.org/fhir/medication-statement-status)
      /// </summary>
      [EnumLiteral("completed", "http://hl7.org/fhir/medication-statement-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// The statement was entered in error.
      /// (system: http://hl7.org/fhir/medication-statement-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/medication-statement-status"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// The medication may be taken at some time in the future.
      /// (system: http://hl7.org/fhir/medication-statement-status)
      /// </summary>
      [EnumLiteral("intended", "http://hl7.org/fhir/medication-statement-status"), Description("Intended")]
      Intended,
    }

    /// <summary>
    /// Details of how medication was taken
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationStatement#Dosage", IsNestedType=true)]
    public partial class DosageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationStatement#Dosage"; } }

      /// <summary>
      /// Reported dosage information
      /// </summary>
      [FhirElement("text", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextElement
      {
        get { return _TextElement; }
        set { _TextElement = value; OnPropertyChanged("TextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextElement;

      /// <summary>
      /// Reported dosage information
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Text
      {
        get { return TextElement != null ? TextElement.Value : null; }
        set
        {
          if (value == null)
            TextElement = null;
          else
            TextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Text");
        }
      }

      /// <summary>
      /// When/how often was medication taken
      /// </summary>
      [FhirElement("timing", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Timing Timing
      {
        get { return _Timing; }
        set { _Timing = value; OnPropertyChanged("Timing"); }
      }

      private Hl7.Fhir.Model.Timing _Timing;

      /// <summary>
      /// Take "as needed" (for x)
      /// </summary>
      [FhirElement("asNeeded", InSummary=true, Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.CodeableConcept))]
      [DataMember]
      public Hl7.Fhir.Model.DataType AsNeeded
      {
        get { return _AsNeeded; }
        set { _AsNeeded = value; OnPropertyChanged("AsNeeded"); }
      }

      private Hl7.Fhir.Model.DataType _AsNeeded;

      /// <summary>
      /// Where (on body) medication is/was administered
      /// </summary>
      [FhirElement("site", InSummary=true, Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("BodySite")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Site
      {
        get { return _Site; }
        set { _Site = value; OnPropertyChanged("Site"); }
      }

      private Hl7.Fhir.Model.DataType _Site;

      /// <summary>
      /// How the medication entered the body
      /// </summary>
      [FhirElement("route", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Route
      {
        get { return _Route; }
        set { _Route = value; OnPropertyChanged("Route"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Route;

      /// <summary>
      /// Technique used to administer medication
      /// </summary>
      [FhirElement("method", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Method
      {
        get { return _Method; }
        set { _Method = value; OnPropertyChanged("Method"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Method;

      /// <summary>
      /// Amount administered in one dose
      /// </summary>
      [FhirElement("quantity", InSummary=true, Order=100, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.DataType _Quantity;

      /// <summary>
      /// Dose quantity per unit of time
      /// </summary>
      [FhirElement("rate", InSummary=true, Order=110, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Rate
      {
        get { return _Rate; }
        set { _Rate = value; OnPropertyChanged("Rate"); }
      }

      private Hl7.Fhir.Model.DataType _Rate;

      /// <summary>
      /// Maximum dose that was consumed per unit of time
      /// </summary>
      [FhirElement("maxDosePerPeriod", InSummary=true, Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.Ratio MaxDosePerPeriod
      {
        get { return _MaxDosePerPeriod; }
        set { _MaxDosePerPeriod = value; OnPropertyChanged("MaxDosePerPeriod"); }
      }

      private Hl7.Fhir.Model.Ratio _MaxDosePerPeriod;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DosageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TextElement != null) dest.TextElement = (Hl7.Fhir.Model.FhirString)TextElement.DeepCopy();
        if(Timing != null) dest.Timing = (Hl7.Fhir.Model.Timing)Timing.DeepCopy();
        if(AsNeeded != null) dest.AsNeeded = (Hl7.Fhir.Model.DataType)AsNeeded.DeepCopy();
        if(Site != null) dest.Site = (Hl7.Fhir.Model.DataType)Site.DeepCopy();
        if(Route != null) dest.Route = (Hl7.Fhir.Model.CodeableConcept)Route.DeepCopy();
        if(Method != null) dest.Method = (Hl7.Fhir.Model.CodeableConcept)Method.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.DataType)Quantity.DeepCopy();
        if(Rate != null) dest.Rate = (Hl7.Fhir.Model.DataType)Rate.DeepCopy();
        if(MaxDosePerPeriod != null) dest.MaxDosePerPeriod = (Hl7.Fhir.Model.Ratio)MaxDosePerPeriod.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DosageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DosageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.Matches(Timing, otherT.Timing)) return false;
        if( !DeepComparable.Matches(AsNeeded, otherT.AsNeeded)) return false;
        if( !DeepComparable.Matches(Site, otherT.Site)) return false;
        if( !DeepComparable.Matches(Route, otherT.Route)) return false;
        if( !DeepComparable.Matches(Method, otherT.Method)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(Rate, otherT.Rate)) return false;
        if( !DeepComparable.Matches(MaxDosePerPeriod, otherT.MaxDosePerPeriod)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DosageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.IsExactly(Timing, otherT.Timing)) return false;
        if( !DeepComparable.IsExactly(AsNeeded, otherT.AsNeeded)) return false;
        if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
        if( !DeepComparable.IsExactly(Route, otherT.Route)) return false;
        if( !DeepComparable.IsExactly(Method, otherT.Method)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(Rate, otherT.Rate)) return false;
        if( !DeepComparable.IsExactly(MaxDosePerPeriod, otherT.MaxDosePerPeriod)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TextElement != null) yield return TextElement;
          if (Timing != null) yield return Timing;
          if (AsNeeded != null) yield return AsNeeded;
          if (Site != null) yield return Site;
          if (Route != null) yield return Route;
          if (Method != null) yield return Method;
          if (Quantity != null) yield return Quantity;
          if (Rate != null) yield return Rate;
          if (MaxDosePerPeriod != null) yield return MaxDosePerPeriod;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TextElement != null) yield return new ElementValue("text", TextElement);
          if (Timing != null) yield return new ElementValue("timing", Timing);
          if (AsNeeded != null) yield return new ElementValue("asNeeded", AsNeeded);
          if (Site != null) yield return new ElementValue("site", Site);
          if (Route != null) yield return new ElementValue("route", Route);
          if (Method != null) yield return new ElementValue("method", Method);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (Rate != null) yield return new ElementValue("rate", Rate);
          if (MaxDosePerPeriod != null) yield return new ElementValue("maxDosePerPeriod", MaxDosePerPeriod);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "text":
            value = TextElement;
            return TextElement is not null;
          case "timing":
            value = Timing;
            return Timing is not null;
          case "asNeeded":
            value = AsNeeded;
            return AsNeeded is not null;
          case "site":
            value = Site;
            return Site is not null;
          case "route":
            value = Route;
            return Route is not null;
          case "method":
            value = Method;
            return Method is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "rate":
            value = Rate;
            return Rate is not null;
          case "maxDosePerPeriod":
            value = MaxDosePerPeriod;
            return MaxDosePerPeriod is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TextElement is not null) yield return new KeyValuePair<string,object>("text",TextElement);
        if (Timing is not null) yield return new KeyValuePair<string,object>("timing",Timing);
        if (AsNeeded is not null) yield return new KeyValuePair<string,object>("asNeeded",AsNeeded);
        if (Site is not null) yield return new KeyValuePair<string,object>("site",Site);
        if (Route is not null) yield return new KeyValuePair<string,object>("route",Route);
        if (Method is not null) yield return new KeyValuePair<string,object>("method",Method);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (Rate is not null) yield return new KeyValuePair<string,object>("rate",Rate);
        if (MaxDosePerPeriod is not null) yield return new KeyValuePair<string,object>("maxDosePerPeriod",MaxDosePerPeriod);
      }

    }

    /// <summary>
    /// External identifier
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Who is/was taking  the medication
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=100)]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    [FhirElement("informationSource", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("Patient","Practitioner","RelatedPerson")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference InformationSource
    {
      get { return _InformationSource; }
      set { _InformationSource = value; OnPropertyChanged("InformationSource"); }
    }

    private Hl7.Fhir.Model.ResourceReference _InformationSource;

    /// <summary>
    /// When the statement was asserted?
    /// </summary>
    [FhirElement("dateAsserted", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateAssertedElement
    {
      get { return _DateAssertedElement; }
      set { _DateAssertedElement = value; OnPropertyChanged("DateAssertedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateAssertedElement;

    /// <summary>
    /// When the statement was asserted?
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string DateAsserted
    {
      get { return DateAssertedElement != null ? DateAssertedElement.Value : null; }
      set
      {
        if (value == null)
          DateAssertedElement = null;
        else
          DateAssertedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("DateAsserted");
      }
    }

    /// <summary>
    /// active | completed | entered-in-error | intended
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=130)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationStatement.MedicationStatementStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationStatement.MedicationStatementStatus> _StatusElement;

    /// <summary>
    /// active | completed | entered-in-error | intended
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationStatement.MedicationStatementStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.MedicationStatement.MedicationStatementStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// True if medication is/was not being taken
    /// </summary>
    [FhirElement("wasNotTaken", InSummary=true, IsModifier=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean WasNotTakenElement
    {
      get { return _WasNotTakenElement; }
      set { _WasNotTakenElement = value; OnPropertyChanged("WasNotTakenElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _WasNotTakenElement;

    /// <summary>
    /// True if medication is/was not being taken
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? WasNotTaken
    {
      get { return WasNotTakenElement != null ? WasNotTakenElement.Value : null; }
      set
      {
        if (value == null)
          WasNotTakenElement = null;
        else
          WasNotTakenElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("WasNotTaken");
      }
    }

    /// <summary>
    /// True if asserting medication was not given
    /// </summary>
    [FhirElement("reasonNotTaken", InSummary=true, Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ReasonNotTaken
    {
      get { if(_ReasonNotTaken==null) _ReasonNotTaken = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ReasonNotTaken; }
      set { _ReasonNotTaken = value; OnPropertyChanged("ReasonNotTaken"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ReasonNotTaken;

    [FhirElement("reasonForUse", InSummary=true, Order=160, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Condition")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType ReasonForUse
    {
      get { return _ReasonForUse; }
      set { _ReasonForUse = value; OnPropertyChanged("ReasonForUse"); }
    }

    private Hl7.Fhir.Model.DataType _ReasonForUse;

    /// <summary>
    /// Over what period was medication consumed?
    /// </summary>
    [FhirElement("effective", InSummary=true, Order=170, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Period))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Effective
    {
      get { return _Effective; }
      set { _Effective = value; OnPropertyChanged("Effective"); }
    }

    private Hl7.Fhir.Model.DataType _Effective;

    /// <summary>
    /// Further information about the statement
    /// </summary>
    [FhirElement("note", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NoteElement
    {
      get { return _NoteElement; }
      set { _NoteElement = value; OnPropertyChanged("NoteElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NoteElement;

    /// <summary>
    /// Further information about the statement
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Note
    {
      get { return NoteElement != null ? NoteElement.Value : null; }
      set
      {
        if (value == null)
          NoteElement = null;
        else
          NoteElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Note");
      }
    }

    /// <summary>
    /// Additional supporting information
    /// </summary>
    [FhirElement("supportingInformation", InSummary=true, Order=190)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// What medication was taken
    /// </summary>
    [FhirElement("medication", InSummary=true, Order=200, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Medication")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.DataType Medication
    {
      get { return _Medication; }
      set { _Medication = value; OnPropertyChanged("Medication"); }
    }

    private Hl7.Fhir.Model.DataType _Medication;

    /// <summary>
    /// Details of how medication was taken
    /// </summary>
    [FhirElement("dosage", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationStatement.DosageComponent> Dosage
    {
      get { if(_Dosage==null) _Dosage = new List<Hl7.Fhir.Model.MedicationStatement.DosageComponent>(); return _Dosage; }
      set { _Dosage = value; OnPropertyChanged("Dosage"); }
    }

    private List<Hl7.Fhir.Model.MedicationStatement.DosageComponent> _Dosage;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MedicationStatement;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(InformationSource != null) dest.InformationSource = (Hl7.Fhir.Model.ResourceReference)InformationSource.DeepCopy();
      if(DateAssertedElement != null) dest.DateAssertedElement = (Hl7.Fhir.Model.FhirDateTime)DateAssertedElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.MedicationStatement.MedicationStatementStatus>)StatusElement.DeepCopy();
      if(WasNotTakenElement != null) dest.WasNotTakenElement = (Hl7.Fhir.Model.FhirBoolean)WasNotTakenElement.DeepCopy();
      if(ReasonNotTaken != null) dest.ReasonNotTaken = new List<Hl7.Fhir.Model.CodeableConcept>(ReasonNotTaken.DeepCopy());
      if(ReasonForUse != null) dest.ReasonForUse = (Hl7.Fhir.Model.DataType)ReasonForUse.DeepCopy();
      if(Effective != null) dest.Effective = (Hl7.Fhir.Model.DataType)Effective.DeepCopy();
      if(NoteElement != null) dest.NoteElement = (Hl7.Fhir.Model.FhirString)NoteElement.DeepCopy();
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(Medication != null) dest.Medication = (Hl7.Fhir.Model.DataType)Medication.DeepCopy();
      if(Dosage != null) dest.Dosage = new List<Hl7.Fhir.Model.MedicationStatement.DosageComponent>(Dosage.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MedicationStatement());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MedicationStatement;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.Matches(DateAssertedElement, otherT.DateAssertedElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(WasNotTakenElement, otherT.WasNotTakenElement)) return false;
      if( !DeepComparable.Matches(ReasonNotTaken, otherT.ReasonNotTaken)) return false;
      if( !DeepComparable.Matches(ReasonForUse, otherT.ReasonForUse)) return false;
      if( !DeepComparable.Matches(Effective, otherT.Effective)) return false;
      if( !DeepComparable.Matches(NoteElement, otherT.NoteElement)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(Medication, otherT.Medication)) return false;
      if( !DeepComparable.Matches(Dosage, otherT.Dosage)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MedicationStatement;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.IsExactly(DateAssertedElement, otherT.DateAssertedElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(WasNotTakenElement, otherT.WasNotTakenElement)) return false;
      if( !DeepComparable.IsExactly(ReasonNotTaken, otherT.ReasonNotTaken)) return false;
      if( !DeepComparable.IsExactly(ReasonForUse, otherT.ReasonForUse)) return false;
      if( !DeepComparable.IsExactly(Effective, otherT.Effective)) return false;
      if( !DeepComparable.IsExactly(NoteElement, otherT.NoteElement)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(Medication, otherT.Medication)) return false;
      if( !DeepComparable.IsExactly(Dosage, otherT.Dosage)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (Patient != null) yield return Patient;
        if (InformationSource != null) yield return InformationSource;
        if (DateAssertedElement != null) yield return DateAssertedElement;
        if (StatusElement != null) yield return StatusElement;
        if (WasNotTakenElement != null) yield return WasNotTakenElement;
        foreach (var elem in ReasonNotTaken) { if (elem != null) yield return elem; }
        if (ReasonForUse != null) yield return ReasonForUse;
        if (Effective != null) yield return Effective;
        if (NoteElement != null) yield return NoteElement;
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        if (Medication != null) yield return Medication;
        foreach (var elem in Dosage) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (InformationSource != null) yield return new ElementValue("informationSource", InformationSource);
        if (DateAssertedElement != null) yield return new ElementValue("dateAsserted", DateAssertedElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (WasNotTakenElement != null) yield return new ElementValue("wasNotTaken", WasNotTakenElement);
        foreach (var elem in ReasonNotTaken) { if (elem != null) yield return new ElementValue("reasonNotTaken", elem); }
        if (ReasonForUse != null) yield return new ElementValue("reasonForUse", ReasonForUse);
        if (Effective != null) yield return new ElementValue("effective", Effective);
        if (NoteElement != null) yield return new ElementValue("note", NoteElement);
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        if (Medication != null) yield return new ElementValue("medication", Medication);
        foreach (var elem in Dosage) { if (elem != null) yield return new ElementValue("dosage", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "informationSource":
          value = InformationSource;
          return InformationSource is not null;
        case "dateAsserted":
          value = DateAssertedElement;
          return DateAssertedElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "wasNotTaken":
          value = WasNotTakenElement;
          return WasNotTakenElement is not null;
        case "reasonNotTaken":
          value = ReasonNotTaken;
          return ReasonNotTaken?.Any() == true;
        case "reasonForUse":
          value = ReasonForUse;
          return ReasonForUse is not null;
        case "effective":
          value = Effective;
          return Effective is not null;
        case "note":
          value = NoteElement;
          return NoteElement is not null;
        case "supportingInformation":
          value = SupportingInformation;
          return SupportingInformation?.Any() == true;
        case "medication":
          value = Medication;
          return Medication is not null;
        case "dosage":
          value = Dosage;
          return Dosage?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (InformationSource is not null) yield return new KeyValuePair<string,object>("informationSource",InformationSource);
      if (DateAssertedElement is not null) yield return new KeyValuePair<string,object>("dateAsserted",DateAssertedElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (WasNotTakenElement is not null) yield return new KeyValuePair<string,object>("wasNotTaken",WasNotTakenElement);
      if (ReasonNotTaken?.Any() == true) yield return new KeyValuePair<string,object>("reasonNotTaken",ReasonNotTaken);
      if (ReasonForUse is not null) yield return new KeyValuePair<string,object>("reasonForUse",ReasonForUse);
      if (Effective is not null) yield return new KeyValuePair<string,object>("effective",Effective);
      if (NoteElement is not null) yield return new KeyValuePair<string,object>("note",NoteElement);
      if (SupportingInformation?.Any() == true) yield return new KeyValuePair<string,object>("supportingInformation",SupportingInformation);
      if (Medication is not null) yield return new KeyValuePair<string,object>("medication",Medication);
      if (Dosage?.Any() == true) yield return new KeyValuePair<string,object>("dosage",Dosage);
    }

  }

}

// end of file
