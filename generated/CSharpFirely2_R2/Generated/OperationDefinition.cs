// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Definition of an operation or a named query
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("OperationDefinition", IsResource=true)]
  public partial class OperationDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "OperationDefinition"; } }

    /// <summary>
    /// Whether an operation is a normal operation or a query.
    /// (url: http://hl7.org/fhir/ValueSet/operation-kind)
    /// (system: http://hl7.org/fhir/operation-kind)
    /// </summary>
    [FhirEnumeration("OperationKind")]
    public enum OperationKind
    {
      /// <summary>
      /// This operation is invoked as an operation.
      /// (system: http://hl7.org/fhir/operation-kind)
      /// </summary>
      [EnumLiteral("operation", "http://hl7.org/fhir/operation-kind"), Description("Operation")]
      Operation,
      /// <summary>
      /// This operation is a named query, invoked using the search mechanism.
      /// (system: http://hl7.org/fhir/operation-kind)
      /// </summary>
      [EnumLiteral("query", "http://hl7.org/fhir/operation-kind"), Description("Query")]
      Query,
    }

    /// <summary>
    /// Whether an operation parameter is an input or an output parameter.
    /// (url: http://hl7.org/fhir/ValueSet/operation-parameter-use)
    /// (system: http://hl7.org/fhir/operation-parameter-use)
    /// </summary>
    [FhirEnumeration("OperationParameterUse")]
    public enum OperationParameterUse
    {
      /// <summary>
      /// This is an input parameter.
      /// (system: http://hl7.org/fhir/operation-parameter-use)
      /// </summary>
      [EnumLiteral("in", "http://hl7.org/fhir/operation-parameter-use"), Description("In")]
      In,
      /// <summary>
      /// This is an output parameter.
      /// (system: http://hl7.org/fhir/operation-parameter-use)
      /// </summary>
      [EnumLiteral("out", "http://hl7.org/fhir/operation-parameter-use"), Description("Out")]
      Out,
    }

    /// <summary>
    /// Parameter Types used in Operation Definitions
    /// (url: http://hl7.org/fhir/ValueSet/operation-parameter-type)
    /// (systems: 3)
    /// </summary>
    [FhirEnumeration("ParameterTypesusedinOperationDefinitions")]
    public enum ParameterTypesusedinOperationDefinitions
    {
      /// <summary>
      /// Search parameter SHALL be a number (a whole number, or a decimal).
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("number", "http://hl7.org/fhir/search-param-type"), Description("Number")]
      Number,
      /// <summary>
      /// Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("date", "http://hl7.org/fhir/search-param-type"), Description("Date/DateTime")]
      Date,
      /// <summary>
      /// Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("string", "http://hl7.org/fhir/search-param-type"), Description("String")]
      String,
      /// <summary>
      /// Search parameter on a coded element or identifier. May be used to search through the text, displayname, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("token", "http://hl7.org/fhir/search-param-type"), Description("Token")]
      Token,
      /// <summary>
      /// A reference to another resource.
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("reference", "http://hl7.org/fhir/search-param-type"), Description("Reference")]
      Reference,
      /// <summary>
      /// A composite search parameter that combines a search on two values together.
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("composite", "http://hl7.org/fhir/search-param-type"), Description("Composite")]
      Composite,
      /// <summary>
      /// A search parameter that searches on a quantity.
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("quantity", "http://hl7.org/fhir/search-param-type"), Description("Quantity")]
      Quantity,
      /// <summary>
      /// A search parameter that searches on a URI (RFC 3986).
      /// (system: http://hl7.org/fhir/search-param-type)
      /// </summary>
      [EnumLiteral("uri", "http://hl7.org/fhir/search-param-type"), Description("URI")]
      Uri,
      /// <summary>
      /// There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Address", "http://hl7.org/fhir/data-types"), Description("Address")]
      Address,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Age", "http://hl7.org/fhir/data-types"), Description("Age")]
      Age,
      /// <summary>
      /// A  text note which also  contains information about who made the statement and when.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Annotation", "http://hl7.org/fhir/data-types"), Description("Annotation")]
      Annotation,
      /// <summary>
      /// For referring to data content defined in other formats.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Attachment", "http://hl7.org/fhir/data-types"), Description("Attachment")]
      Attachment,
      /// <summary>
      /// Base definition for all elements that are defined inside a resource - but not those in a data type.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("BackboneElement", "http://hl7.org/fhir/data-types"), Description("BackboneElement")]
      BackboneElement,
      /// <summary>
      /// A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("CodeableConcept", "http://hl7.org/fhir/data-types"), Description("CodeableConcept")]
      CodeableConcept,
      /// <summary>
      /// A reference to a code defined by a terminology system.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Coding", "http://hl7.org/fhir/data-types"), Description("Coding")]
      Coding,
      /// <summary>
      /// Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("ContactPoint", "http://hl7.org/fhir/data-types"), Description("ContactPoint")]
      ContactPoint,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Count", "http://hl7.org/fhir/data-types"), Description("Count")]
      Count,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Distance", "http://hl7.org/fhir/data-types"), Description("Distance")]
      Distance,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Duration", "http://hl7.org/fhir/data-types"), Description("Duration")]
      Duration,
      /// <summary>
      /// Base definition for all elements in a resource.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Element", "http://hl7.org/fhir/data-types"), Description("Element")]
      Element,
      /// <summary>
      /// Captures constraints on each element within the resource, profile, or extension.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("ElementDefinition", "http://hl7.org/fhir/data-types"), Description("ElementDefinition")]
      ElementDefinition,
      /// <summary>
      /// Optional Extensions Element - found in all resources.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Extension", "http://hl7.org/fhir/data-types"), Description("Extension")]
      Extension,
      /// <summary>
      /// A human's name with the ability to identify parts and usage.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("HumanName", "http://hl7.org/fhir/data-types"), Description("HumanName")]
      HumanName,
      /// <summary>
      /// A technical identifier - identifies some entity uniquely and unambiguously.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Identifier", "http://hl7.org/fhir/data-types"), Description("Identifier")]
      Identifier,
      /// <summary>
      /// The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Meta", "http://hl7.org/fhir/data-types"), Description("Meta")]
      Meta,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Money", "http://hl7.org/fhir/data-types"), Description("Money")]
      Money,
      /// <summary>
      /// A human-readable formatted text, including images.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Narrative", "http://hl7.org/fhir/data-types"), Description("Narrative")]
      Narrative,
      /// <summary>
      /// A time period defined by a start and end date and optionally time.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Period", "http://hl7.org/fhir/data-types"), Description("Period")]
      Period,
      /// <summary>
      /// A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Quantity", "http://hl7.org/fhir/data-types"), Description("Quantity")]
      Quantity_2,
      /// <summary>
      /// A set of ordered Quantities defined by a low and high limit.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Range", "http://hl7.org/fhir/data-types"), Description("Range")]
      Range,
      /// <summary>
      /// A relationship of two Quantity values - expressed as a numerator and a denominator.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Ratio", "http://hl7.org/fhir/data-types"), Description("Ratio")]
      Ratio,
      /// <summary>
      /// A reference from one resource to another.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Reference", "http://hl7.org/fhir/data-types"), Description("Reference")]
      Reference_2,
      /// <summary>
      /// A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("SampledData", "http://hl7.org/fhir/data-types"), Description("SampledData")]
      SampledData,
      /// <summary>
      /// A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Signature", "http://hl7.org/fhir/data-types"), Description("Signature")]
      Signature,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("SimpleQuantity", "http://hl7.org/fhir/data-types"), Description("SimpleQuantity")]
      SimpleQuantity,
      /// <summary>
      /// Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("Timing", "http://hl7.org/fhir/data-types"), Description("Timing")]
      Timing,
      /// <summary>
      /// A stream of bytes
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("base64Binary", "http://hl7.org/fhir/data-types"), Description("base64Binary")]
      Base64Binary,
      /// <summary>
      /// Value of "true" or "false"
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("boolean", "http://hl7.org/fhir/data-types"), Description("boolean")]
      Boolean,
      /// <summary>
      /// A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("code", "http://hl7.org/fhir/data-types"), Description("code")]
      Code,
      /// <summary>
      /// A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("date", "http://hl7.org/fhir/data-types"), Description("date")]
      Date_2,
      /// <summary>
      /// A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("dateTime", "http://hl7.org/fhir/data-types"), Description("dateTime")]
      DateTime,
      /// <summary>
      /// A rational number with implicit precision
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("decimal", "http://hl7.org/fhir/data-types"), Description("decimal")]
      Decimal,
      /// <summary>
      /// Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("id", "http://hl7.org/fhir/data-types"), Description("id")]
      Id,
      /// <summary>
      /// An instant in time - known at least to the second
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("instant", "http://hl7.org/fhir/data-types"), Description("instant")]
      Instant,
      /// <summary>
      /// A whole number
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("integer", "http://hl7.org/fhir/data-types"), Description("integer")]
      Integer,
      /// <summary>
      /// A string that may contain markdown syntax for optional processing by a mark down presentation engine
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("markdown", "http://hl7.org/fhir/data-types"), Description("markdown")]
      Markdown,
      /// <summary>
      /// An oid represented as a URI
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("oid", "http://hl7.org/fhir/data-types"), Description("oid")]
      Oid,
      /// <summary>
      /// An integer with a value that is positive (e.g. &gt;0)
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("positiveInt", "http://hl7.org/fhir/data-types"), Description("positiveInt")]
      PositiveInt,
      /// <summary>
      /// A sequence of Unicode characters
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("string", "http://hl7.org/fhir/data-types"), Description("string")]
      String_2,
      /// <summary>
      /// A time during the day, with no date specified
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("time", "http://hl7.org/fhir/data-types"), Description("time")]
      Time,
      /// <summary>
      /// An integer with a value that is not negative (e.g. &gt;= 0)
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("unsignedInt", "http://hl7.org/fhir/data-types"), Description("unsignedInt")]
      UnsignedInt,
      /// <summary>
      /// String of characters used to identify a name or a resource
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("uri", "http://hl7.org/fhir/data-types"), Description("uri")]
      Uri_2,
      /// <summary>
      /// A UUID, represented as a URI
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("uuid", "http://hl7.org/fhir/data-types"), Description("uuid")]
      Uuid,
      /// <summary>
      /// XHTML format, as defined by W3C, but restricted usage (mainly, no active content)
      /// (system: http://hl7.org/fhir/data-types)
      /// </summary>
      [EnumLiteral("xhtml", "http://hl7.org/fhir/data-types"), Description("XHTML")]
      Xhtml,
      /// <summary>
      /// A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Account", "http://hl7.org/fhir/resource-types"), Description("Account")]
      Account,
      /// <summary>
      /// Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("AllergyIntolerance", "http://hl7.org/fhir/resource-types"), Description("AllergyIntolerance")]
      AllergyIntolerance,
      /// <summary>
      /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Appointment", "http://hl7.org/fhir/resource-types"), Description("Appointment")]
      Appointment,
      /// <summary>
      /// A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("AppointmentResponse", "http://hl7.org/fhir/resource-types"), Description("AppointmentResponse")]
      AppointmentResponse,
      /// <summary>
      /// A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("AuditEvent", "http://hl7.org/fhir/resource-types"), Description("AuditEvent")]
      AuditEvent,
      /// <summary>
      /// Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Basic", "http://hl7.org/fhir/resource-types"), Description("Basic")]
      Basic,
      /// <summary>
      /// A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Binary", "http://hl7.org/fhir/resource-types"), Description("Binary")]
      Binary,
      /// <summary>
      /// Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("BodySite", "http://hl7.org/fhir/resource-types"), Description("BodySite")]
      BodySite,
      /// <summary>
      /// A container for a collection of resources.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Bundle", "http://hl7.org/fhir/resource-types"), Description("Bundle")]
      Bundle,
      /// <summary>
      /// Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("CarePlan", "http://hl7.org/fhir/resource-types"), Description("CarePlan")]
      CarePlan,
      /// <summary>
      /// A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Claim", "http://hl7.org/fhir/resource-types"), Description("Claim")]
      Claim,
      /// <summary>
      /// This resource provides the adjudication details from the processing of a Claim resource.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ClaimResponse", "http://hl7.org/fhir/resource-types"), Description("ClaimResponse")]
      ClaimResponse,
      /// <summary>
      /// A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ClinicalImpression", "http://hl7.org/fhir/resource-types"), Description("ClinicalImpression")]
      ClinicalImpression,
      /// <summary>
      /// An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Communication", "http://hl7.org/fhir/resource-types"), Description("Communication")]
      Communication,
      /// <summary>
      /// A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("CommunicationRequest", "http://hl7.org/fhir/resource-types"), Description("CommunicationRequest")]
      CommunicationRequest,
      /// <summary>
      /// A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Composition", "http://hl7.org/fhir/resource-types"), Description("Composition")]
      Composition,
      /// <summary>
      /// A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ConceptMap", "http://hl7.org/fhir/resource-types"), Description("ConceptMap")]
      ConceptMap,
      /// <summary>
      /// Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Condition", "http://hl7.org/fhir/resource-types"), Description("Condition")]
      Condition,
      /// <summary>
      /// A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Conformance", "http://hl7.org/fhir/resource-types"), Description("Conformance")]
      Conformance,
      /// <summary>
      /// A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Contract", "http://hl7.org/fhir/resource-types"), Description("Contract")]
      Contract,
      /// <summary>
      /// Financial instrument which may be used to pay for or reimburse health care products and services.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Coverage", "http://hl7.org/fhir/resource-types"), Description("Coverage")]
      Coverage,
      /// <summary>
      /// The formal description of a single piece of information that can be gathered and reported.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DataElement", "http://hl7.org/fhir/resource-types"), Description("DataElement")]
      DataElement,
      /// <summary>
      /// Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DetectedIssue", "http://hl7.org/fhir/resource-types"), Description("DetectedIssue")]
      DetectedIssue,
      /// <summary>
      /// This resource identifies an instance of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Device", "http://hl7.org/fhir/resource-types"), Description("Device")]
      Device,
      /// <summary>
      /// Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DeviceComponent", "http://hl7.org/fhir/resource-types"), Description("DeviceComponent")]
      DeviceComponent,
      /// <summary>
      /// Describes a measurement, calculation or setting capability of a medical device.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DeviceMetric", "http://hl7.org/fhir/resource-types"), Description("DeviceMetric")]
      DeviceMetric,
      /// <summary>
      /// Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DeviceUseRequest", "http://hl7.org/fhir/resource-types"), Description("DeviceUseRequest")]
      DeviceUseRequest,
      /// <summary>
      /// A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DeviceUseStatement", "http://hl7.org/fhir/resource-types"), Description("DeviceUseStatement")]
      DeviceUseStatement,
      /// <summary>
      /// A record of a request for a diagnostic investigation service to be performed.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DiagnosticOrder", "http://hl7.org/fhir/resource-types"), Description("DiagnosticOrder")]
      DiagnosticOrder,
      /// <summary>
      /// The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DiagnosticReport", "http://hl7.org/fhir/resource-types"), Description("DiagnosticReport")]
      DiagnosticReport,
      /// <summary>
      /// A manifest that defines a set of documents.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DocumentManifest", "http://hl7.org/fhir/resource-types"), Description("DocumentManifest")]
      DocumentManifest,
      /// <summary>
      /// A reference to a document .
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DocumentReference", "http://hl7.org/fhir/resource-types"), Description("DocumentReference")]
      DocumentReference,
      /// <summary>
      /// --- Abstract Type! ---A resource that includes narrative, extensions, and contained resources.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DomainResource", "http://hl7.org/fhir/resource-types"), Description("DomainResource")]
      DomainResource,
      /// <summary>
      /// This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("EligibilityRequest", "http://hl7.org/fhir/resource-types"), Description("EligibilityRequest")]
      EligibilityRequest,
      /// <summary>
      /// This resource provides eligibility and plan details from the processing of an Eligibility resource.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("EligibilityResponse", "http://hl7.org/fhir/resource-types"), Description("EligibilityResponse")]
      EligibilityResponse,
      /// <summary>
      /// An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Encounter", "http://hl7.org/fhir/resource-types"), Description("Encounter")]
      Encounter,
      /// <summary>
      /// This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("EnrollmentRequest", "http://hl7.org/fhir/resource-types"), Description("EnrollmentRequest")]
      EnrollmentRequest,
      /// <summary>
      /// This resource provides enrollment and plan details from the processing of an Enrollment resource.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("EnrollmentResponse", "http://hl7.org/fhir/resource-types"), Description("EnrollmentResponse")]
      EnrollmentResponse,
      /// <summary>
      /// An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("EpisodeOfCare", "http://hl7.org/fhir/resource-types"), Description("EpisodeOfCare")]
      EpisodeOfCare,
      /// <summary>
      /// This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ExplanationOfBenefit", "http://hl7.org/fhir/resource-types"), Description("ExplanationOfBenefit")]
      ExplanationOfBenefit,
      /// <summary>
      /// Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("FamilyMemberHistory", "http://hl7.org/fhir/resource-types"), Description("FamilyMemberHistory")]
      FamilyMemberHistory,
      /// <summary>
      /// Prospective warnings of potential issues when providing care to the patient.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Flag", "http://hl7.org/fhir/resource-types"), Description("Flag")]
      Flag,
      /// <summary>
      /// Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Goal", "http://hl7.org/fhir/resource-types"), Description("Goal")]
      Goal,
      /// <summary>
      /// Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Group", "http://hl7.org/fhir/resource-types"), Description("Group")]
      Group,
      /// <summary>
      /// The details of a healthcare service available at a location.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("HealthcareService", "http://hl7.org/fhir/resource-types"), Description("HealthcareService")]
      HealthcareService,
      /// <summary>
      /// A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ImagingObjectSelection", "http://hl7.org/fhir/resource-types"), Description("ImagingObjectSelection")]
      ImagingObjectSelection,
      /// <summary>
      /// Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ImagingStudy", "http://hl7.org/fhir/resource-types"), Description("ImagingStudy")]
      ImagingStudy,
      /// <summary>
      /// Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Immunization", "http://hl7.org/fhir/resource-types"), Description("Immunization")]
      Immunization,
      /// <summary>
      /// A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ImmunizationRecommendation", "http://hl7.org/fhir/resource-types"), Description("ImmunizationRecommendation")]
      ImmunizationRecommendation,
      /// <summary>
      /// A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ImplementationGuide", "http://hl7.org/fhir/resource-types"), Description("ImplementationGuide")]
      ImplementationGuide,
      /// <summary>
      /// A set of information summarized from a list of other resources.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("List", "http://hl7.org/fhir/resource-types"), Description("List")]
      List,
      /// <summary>
      /// Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Location", "http://hl7.org/fhir/resource-types"), Description("Location")]
      Location,
      /// <summary>
      /// A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Media", "http://hl7.org/fhir/resource-types"), Description("Media")]
      Media,
      /// <summary>
      /// This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Medication", "http://hl7.org/fhir/resource-types"), Description("Medication")]
      Medication,
      /// <summary>
      /// Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("MedicationAdministration", "http://hl7.org/fhir/resource-types"), Description("MedicationAdministration")]
      MedicationAdministration,
      /// <summary>
      /// Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("MedicationDispense", "http://hl7.org/fhir/resource-types"), Description("MedicationDispense")]
      MedicationDispense,
      /// <summary>
      /// An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("MedicationOrder", "http://hl7.org/fhir/resource-types"), Description("MedicationOrder")]
      MedicationOrder,
      /// <summary>
      /// A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains 
      /// The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("MedicationStatement", "http://hl7.org/fhir/resource-types"), Description("MedicationStatement")]
      MedicationStatement,
      /// <summary>
      /// The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("MessageHeader", "http://hl7.org/fhir/resource-types"), Description("MessageHeader")]
      MessageHeader,
      /// <summary>
      /// A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("NamingSystem", "http://hl7.org/fhir/resource-types"), Description("NamingSystem")]
      NamingSystem,
      /// <summary>
      /// A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("NutritionOrder", "http://hl7.org/fhir/resource-types"), Description("NutritionOrder")]
      NutritionOrder,
      /// <summary>
      /// Measurements and simple assertions made about a patient, device or other subject.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Observation", "http://hl7.org/fhir/resource-types"), Description("Observation")]
      Observation,
      /// <summary>
      /// A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("OperationDefinition", "http://hl7.org/fhir/resource-types"), Description("OperationDefinition")]
      OperationDefinition,
      /// <summary>
      /// A collection of error, warning or information messages that result from a system action.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("OperationOutcome", "http://hl7.org/fhir/resource-types"), Description("OperationOutcome")]
      OperationOutcome,
      /// <summary>
      /// A request to perform an action.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Order", "http://hl7.org/fhir/resource-types"), Description("Order")]
      Order,
      /// <summary>
      /// A response to an order.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("OrderResponse", "http://hl7.org/fhir/resource-types"), Description("OrderResponse")]
      OrderResponse,
      /// <summary>
      /// A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Organization", "http://hl7.org/fhir/resource-types"), Description("Organization")]
      Organization,
      /// <summary>
      /// This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Parameters", "http://hl7.org/fhir/resource-types"), Description("Parameters")]
      Parameters,
      /// <summary>
      /// Demographics and other administrative information about an individual or animal receiving care or other health-related services.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Patient", "http://hl7.org/fhir/resource-types"), Description("Patient")]
      Patient,
      /// <summary>
      /// This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("PaymentNotice", "http://hl7.org/fhir/resource-types"), Description("PaymentNotice")]
      PaymentNotice,
      /// <summary>
      /// This resource provides payment details and claim references supporting a bulk payment.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("PaymentReconciliation", "http://hl7.org/fhir/resource-types"), Description("PaymentReconciliation")]
      PaymentReconciliation,
      /// <summary>
      /// Demographics and administrative information about a person independent of a specific health-related context.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Person", "http://hl7.org/fhir/resource-types"), Description("Person")]
      Person,
      /// <summary>
      /// A person who is directly or indirectly involved in the provisioning of healthcare.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Practitioner", "http://hl7.org/fhir/resource-types"), Description("Practitioner")]
      Practitioner,
      /// <summary>
      /// An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Procedure", "http://hl7.org/fhir/resource-types"), Description("Procedure")]
      Procedure,
      /// <summary>
      /// A request for a procedure to be performed. May be a proposal or an order.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ProcedureRequest", "http://hl7.org/fhir/resource-types"), Description("ProcedureRequest")]
      ProcedureRequest,
      /// <summary>
      /// This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ProcessRequest", "http://hl7.org/fhir/resource-types"), Description("ProcessRequest")]
      ProcessRequest,
      /// <summary>
      /// This resource provides processing status, errors and notes from the processing of a resource.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ProcessResponse", "http://hl7.org/fhir/resource-types"), Description("ProcessResponse")]
      ProcessResponse,
      /// <summary>
      /// Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Provenance", "http://hl7.org/fhir/resource-types"), Description("Provenance")]
      Provenance,
      /// <summary>
      /// A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Questionnaire", "http://hl7.org/fhir/resource-types"), Description("Questionnaire")]
      Questionnaire,
      /// <summary>
      /// A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("QuestionnaireResponse", "http://hl7.org/fhir/resource-types"), Description("QuestionnaireResponse")]
      QuestionnaireResponse,
      /// <summary>
      /// Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ReferralRequest", "http://hl7.org/fhir/resource-types"), Description("ReferralRequest")]
      ReferralRequest,
      /// <summary>
      /// Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("RelatedPerson", "http://hl7.org/fhir/resource-types"), Description("RelatedPerson")]
      RelatedPerson,
      /// <summary>
      /// --- Abstract Type! ---This is the base resource type for everything.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Resource", "http://hl7.org/fhir/resource-types"), Description("Resource")]
      Resource,
      /// <summary>
      /// An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("RiskAssessment", "http://hl7.org/fhir/resource-types"), Description("RiskAssessment")]
      RiskAssessment,
      /// <summary>
      /// A container for slot(s) of time that may be available for booking appointments.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Schedule", "http://hl7.org/fhir/resource-types"), Description("Schedule")]
      Schedule,
      /// <summary>
      /// A search parameter that defines a named search item that can be used to search/filter on a resource.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("SearchParameter", "http://hl7.org/fhir/resource-types"), Description("SearchParameter")]
      SearchParameter,
      /// <summary>
      /// A slot of time on a schedule that may be available for booking appointments.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Slot", "http://hl7.org/fhir/resource-types"), Description("Slot")]
      Slot,
      /// <summary>
      /// A sample to be used for analysis.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Specimen", "http://hl7.org/fhir/resource-types"), Description("Specimen")]
      Specimen,
      /// <summary>
      /// A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("StructureDefinition", "http://hl7.org/fhir/resource-types"), Description("StructureDefinition")]
      StructureDefinition,
      /// <summary>
      /// The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Subscription", "http://hl7.org/fhir/resource-types"), Description("Subscription")]
      Subscription,
      /// <summary>
      /// A homogeneous material with a definite composition.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Substance", "http://hl7.org/fhir/resource-types"), Description("Substance")]
      Substance,
      /// <summary>
      /// Record of delivery of what is supplied.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("SupplyDelivery", "http://hl7.org/fhir/resource-types"), Description("SupplyDelivery")]
      SupplyDelivery,
      /// <summary>
      /// A record of a request for a medication, substance or device used in the healthcare setting.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("SupplyRequest", "http://hl7.org/fhir/resource-types"), Description("SupplyRequest")]
      SupplyRequest,
      /// <summary>
      /// TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("TestScript", "http://hl7.org/fhir/resource-types"), Description("TestScript")]
      TestScript,
      /// <summary>
      /// A value set specifies a set of codes drawn from one or more code systems.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ValueSet", "http://hl7.org/fhir/resource-types"), Description("ValueSet")]
      ValueSet,
      /// <summary>
      /// An authorization for the supply of glasses and/or contact lenses to a patient.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("VisionPrescription", "http://hl7.org/fhir/resource-types"), Description("VisionPrescription")]
      VisionPrescription,
    }

    /// <summary>
    /// Contact details of the publisher
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("OperationDefinition#Contact", IsNestedType=true)]
    public partial class ContactComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "OperationDefinition#Contact"; } }

      /// <summary>
      /// Name of a individual to contact
      /// </summary>
      [FhirElement("name", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Name of a individual to contact
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Contact details for individual or publisher
      /// </summary>
      [FhirElement("telecom", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ContactPoint> Telecom
      {
        get { if(_Telecom==null) _Telecom = new List<Hl7.Fhir.Model.ContactPoint>(); return _Telecom; }
        set { _Telecom = value; OnPropertyChanged("Telecom"); }
      }

      private List<Hl7.Fhir.Model.ContactPoint> _Telecom;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContactComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Telecom != null) dest.Telecom = new List<Hl7.Fhir.Model.ContactPoint>(Telecom.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContactComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContactComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Telecom, otherT.Telecom)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContactComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Telecom, otherT.Telecom)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          foreach (var elem in Telecom) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          foreach (var elem in Telecom) { if (elem != null) yield return new ElementValue("telecom", elem); }
        }
      }

    }

    /// <summary>
    /// Parameters for the operation/query
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("OperationDefinition#Parameter", IsNestedType=true)]
    public partial class ParameterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "OperationDefinition#Parameter"; } }

      /// <summary>
      /// Name in Parameters.parameter.name or in URL
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.Code _NameElement;

      /// <summary>
      /// Name in Parameters.parameter.name or in URL
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// in | out
      /// </summary>
      [FhirElement("use", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.OperationDefinition.OperationParameterUse> UseElement
      {
        get { return _UseElement; }
        set { _UseElement = value; OnPropertyChanged("UseElement"); }
      }

      private Code<Hl7.Fhir.Model.OperationDefinition.OperationParameterUse> _UseElement;

      /// <summary>
      /// in | out
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.OperationDefinition.OperationParameterUse? Use
      {
        get { return UseElement != null ? UseElement.Value : null; }
        set
        {
          if (value == null)
            UseElement = null;
          else
            UseElement = new Code<Hl7.Fhir.Model.OperationDefinition.OperationParameterUse>(value);
          OnPropertyChanged("Use");
        }
      }

      /// <summary>
      /// Minimum Cardinality
      /// </summary>
      [FhirElement("min", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Integer MinElement
      {
        get { return _MinElement; }
        set { _MinElement = value; OnPropertyChanged("MinElement"); }
      }

      private Hl7.Fhir.Model.Integer _MinElement;

      /// <summary>
      /// Minimum Cardinality
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Min
      {
        get { return MinElement != null ? MinElement.Value : null; }
        set
        {
          if (value == null)
            MinElement = null;
          else
            MinElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Min");
        }
      }

      /// <summary>
      /// Maximum Cardinality (a number or *)
      /// </summary>
      [FhirElement("max", Order=70)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MaxElement
      {
        get { return _MaxElement; }
        set { _MaxElement = value; OnPropertyChanged("MaxElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MaxElement;

      /// <summary>
      /// Maximum Cardinality (a number or *)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Max
      {
        get { return MaxElement != null ? MaxElement.Value : null; }
        set
        {
          if (value == null)
            MaxElement = null;
          else
            MaxElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Max");
        }
      }

      /// <summary>
      /// Description of meaning/use
      /// </summary>
      [FhirElement("documentation", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DocumentationElement;

      /// <summary>
      /// Description of meaning/use
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Documentation");
        }
      }

      /// <summary>
      /// What type this parameter has
      /// </summary>
      [FhirElement("type", Order=90)]
      [DataMember]
      public Code<Hl7.Fhir.Model.OperationDefinition.ParameterTypesusedinOperationDefinitions> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.OperationDefinition.ParameterTypesusedinOperationDefinitions> _TypeElement;

      /// <summary>
      /// What type this parameter has
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.OperationDefinition.ParameterTypesusedinOperationDefinitions? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.OperationDefinition.ParameterTypesusedinOperationDefinitions>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// Profile on the type
      /// </summary>
      [FhirElement("profile", Order=100)]
      [CLSCompliant(false)]
      [References("StructureDefinition")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Profile
      {
        get { return _Profile; }
        set { _Profile = value; OnPropertyChanged("Profile"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Profile;

      /// <summary>
      /// ValueSet details if this is coded
      /// </summary>
      [FhirElement("binding", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.OperationDefinition.BindingComponent Binding
      {
        get { return _Binding; }
        set { _Binding = value; OnPropertyChanged("Binding"); }
      }

      private Hl7.Fhir.Model.OperationDefinition.BindingComponent _Binding;

      /// <summary>
      /// Parts of a Tuple Parameter
      /// </summary>
      [FhirElement("part", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent> Part
      {
        get { if(_Part==null) _Part = new List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent>(); return _Part; }
        set { _Part = value; OnPropertyChanged("Part"); }
      }

      private List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent> _Part;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParameterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.Code)NameElement.DeepCopy();
        if(UseElement != null) dest.UseElement = (Code<Hl7.Fhir.Model.OperationDefinition.OperationParameterUse>)UseElement.DeepCopy();
        if(MinElement != null) dest.MinElement = (Hl7.Fhir.Model.Integer)MinElement.DeepCopy();
        if(MaxElement != null) dest.MaxElement = (Hl7.Fhir.Model.FhirString)MaxElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.FhirString)DocumentationElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.OperationDefinition.ParameterTypesusedinOperationDefinitions>)TypeElement.DeepCopy();
        if(Profile != null) dest.Profile = (Hl7.Fhir.Model.ResourceReference)Profile.DeepCopy();
        if(Binding != null) dest.Binding = (Hl7.Fhir.Model.OperationDefinition.BindingComponent)Binding.DeepCopy();
        if(Part != null) dest.Part = new List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent>(Part.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParameterComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParameterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(UseElement, otherT.UseElement)) return false;
        if( !DeepComparable.Matches(MinElement, otherT.MinElement)) return false;
        if( !DeepComparable.Matches(MaxElement, otherT.MaxElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(Profile, otherT.Profile)) return false;
        if( !DeepComparable.Matches(Binding, otherT.Binding)) return false;
        if( !DeepComparable.Matches(Part, otherT.Part)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParameterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(UseElement, otherT.UseElement)) return false;
        if( !DeepComparable.IsExactly(MinElement, otherT.MinElement)) return false;
        if( !DeepComparable.IsExactly(MaxElement, otherT.MaxElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(Profile, otherT.Profile)) return false;
        if( !DeepComparable.IsExactly(Binding, otherT.Binding)) return false;
        if( !DeepComparable.IsExactly(Part, otherT.Part)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (UseElement != null) yield return UseElement;
          if (MinElement != null) yield return MinElement;
          if (MaxElement != null) yield return MaxElement;
          if (DocumentationElement != null) yield return DocumentationElement;
          if (TypeElement != null) yield return TypeElement;
          if (Profile != null) yield return Profile;
          if (Binding != null) yield return Binding;
          foreach (var elem in Part) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (UseElement != null) yield return new ElementValue("use", UseElement);
          if (MinElement != null) yield return new ElementValue("min", MinElement);
          if (MaxElement != null) yield return new ElementValue("max", MaxElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (Profile != null) yield return new ElementValue("profile", Profile);
          if (Binding != null) yield return new ElementValue("binding", Binding);
          foreach (var elem in Part) { if (elem != null) yield return new ElementValue("part", elem); }
        }
      }

    }

    /// <summary>
    /// ValueSet details if this is coded
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("OperationDefinition#Binding", IsNestedType=true)]
    public partial class BindingComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "OperationDefinition#Binding"; } }

      /// <summary>
      /// required | extensible | preferred | example
      /// </summary>
      [FhirElement("strength", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.BindingStrength> StrengthElement
      {
        get { return _StrengthElement; }
        set { _StrengthElement = value; OnPropertyChanged("StrengthElement"); }
      }

      private Code<Hl7.Fhir.Model.BindingStrength> _StrengthElement;

      /// <summary>
      /// required | extensible | preferred | example
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.BindingStrength? Strength
      {
        get { return StrengthElement != null ? StrengthElement.Value : null; }
        set
        {
          if (value == null)
            StrengthElement = null;
          else
            StrengthElement = new Code<Hl7.Fhir.Model.BindingStrength>(value);
          OnPropertyChanged("Strength");
        }
      }

      /// <summary>
      /// Source of value set
      /// </summary>
      [FhirElement("valueSet", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType ValueSet
      {
        get { return _ValueSet; }
        set { _ValueSet = value; OnPropertyChanged("ValueSet"); }
      }

      private Hl7.Fhir.Model.DataType _ValueSet;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as BindingComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(StrengthElement != null) dest.StrengthElement = (Code<Hl7.Fhir.Model.BindingStrength>)StrengthElement.DeepCopy();
        if(ValueSet != null) dest.ValueSet = (Hl7.Fhir.Model.DataType)ValueSet.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new BindingComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as BindingComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(StrengthElement, otherT.StrengthElement)) return false;
        if( !DeepComparable.Matches(ValueSet, otherT.ValueSet)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as BindingComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(StrengthElement, otherT.StrengthElement)) return false;
        if( !DeepComparable.IsExactly(ValueSet, otherT.ValueSet)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (StrengthElement != null) yield return StrengthElement;
          if (ValueSet != null) yield return ValueSet;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (StrengthElement != null) yield return new ElementValue("strength", StrengthElement);
          if (ValueSet != null) yield return new ElementValue("valueSet", ValueSet);
        }
      }

    }

    /// <summary>
    /// Logical URL to reference this operation definition
    /// </summary>
    [FhirElement("url", Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Logical URL to reference this operation definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Logical id for this version of the operation definition
    /// </summary>
    [FhirElement("version", Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Logical id for this version of the operation definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Informal name for this operation
    /// </summary>
    [FhirElement("name", Order=110)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Informal name for this operation
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// draft | active | retired
    /// </summary>
    [FhirElement("status", InSummary=true, Order=120)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ConformanceResourceStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.ConformanceResourceStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ConformanceResourceStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.ConformanceResourceStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// operation | query
    /// </summary>
    [FhirElement("kind", Order=130)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.OperationDefinition.OperationKind> KindElement
    {
      get { return _KindElement; }
      set { _KindElement = value; OnPropertyChanged("KindElement"); }
    }

    private Code<Hl7.Fhir.Model.OperationDefinition.OperationKind> _KindElement;

    /// <summary>
    /// operation | query
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.OperationDefinition.OperationKind? Kind
    {
      get { return KindElement != null ? KindElement.Value : null; }
      set
      {
        if (value == null)
          KindElement = null;
        else
          KindElement = new Code<Hl7.Fhir.Model.OperationDefinition.OperationKind>(value);
        OnPropertyChanged("Kind");
      }
    }

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Name of the publisher (Organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (Organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details of the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.OperationDefinition.ContactComponent> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.OperationDefinition.ContactComponent>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.OperationDefinition.ContactComponent> _Contact;

    /// <summary>
    /// Date for this version of the operation definition
    /// </summary>
    [FhirElement("date", Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date for this version of the operation definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Natural language description of the operation
    /// </summary>
    [FhirElement("description", Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Natural language description of the operation
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Why is this needed?
    /// </summary>
    [FhirElement("requirements", Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString RequirementsElement
    {
      get { return _RequirementsElement; }
      set { _RequirementsElement = value; OnPropertyChanged("RequirementsElement"); }
    }

    private Hl7.Fhir.Model.FhirString _RequirementsElement;

    /// <summary>
    /// Why is this needed?
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Requirements
    {
      get { return RequirementsElement != null ? RequirementsElement.Value : null; }
      set
      {
        if (value == null)
          RequirementsElement = null;
        else
          RequirementsElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Requirements");
      }
    }

    /// <summary>
    /// Whether content is unchanged by operation
    /// </summary>
    [FhirElement("idempotent", Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean IdempotentElement
    {
      get { return _IdempotentElement; }
      set { _IdempotentElement = value; OnPropertyChanged("IdempotentElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _IdempotentElement;

    /// <summary>
    /// Whether content is unchanged by operation
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Idempotent
    {
      get { return IdempotentElement != null ? IdempotentElement.Value : null; }
      set
      {
        if (value == null)
          IdempotentElement = null;
        else
          IdempotentElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Idempotent");
      }
    }

    /// <summary>
    /// Name used to invoke the operation
    /// </summary>
    [FhirElement("code", Order=210)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Code CodeElement
    {
      get { return _CodeElement; }
      set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
    }

    private Hl7.Fhir.Model.Code _CodeElement;

    /// <summary>
    /// Name used to invoke the operation
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Code
    {
      get { return CodeElement != null ? CodeElement.Value : null; }
      set
      {
        if (value == null)
          CodeElement = null;
        else
          CodeElement = new Hl7.Fhir.Model.Code(value);
        OnPropertyChanged("Code");
      }
    }

    /// <summary>
    /// Additional information about use
    /// </summary>
    [FhirElement("notes", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NotesElement
    {
      get { return _NotesElement; }
      set { _NotesElement = value; OnPropertyChanged("NotesElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NotesElement;

    /// <summary>
    /// Additional information about use
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Notes
    {
      get { return NotesElement != null ? NotesElement.Value : null; }
      set
      {
        if (value == null)
          NotesElement = null;
        else
          NotesElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Notes");
      }
    }

    /// <summary>
    /// Marks this as a profile of the base
    /// </summary>
    [FhirElement("base", Order=230)]
    [CLSCompliant(false)]
    [References("OperationDefinition")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Base
    {
      get { return _Base; }
      set { _Base = value; OnPropertyChanged("Base"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Base;

    /// <summary>
    /// Invoke at the system level?
    /// </summary>
    [FhirElement("system", Order=240)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean SystemElement
    {
      get { return _SystemElement; }
      set { _SystemElement = value; OnPropertyChanged("SystemElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _SystemElement;

    /// <summary>
    /// Invoke at the system level?
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? System
    {
      get { return SystemElement != null ? SystemElement.Value : null; }
      set
      {
        if (value == null)
          SystemElement = null;
        else
          SystemElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("System");
      }
    }

    /// <summary>
    /// Invoke at resource level for these type
    /// </summary>
    [FhirElement("type", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.ResourceType>> TypeElement
    {
      get { if(_TypeElement==null) _TypeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>>(); return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private List<Code<Hl7.Fhir.Model.ResourceType>> _TypeElement;

    /// <summary>
    /// Invoke at resource level for these type
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.ResourceType?> Type
    {
      get { return TypeElement != null ? TypeElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>(elem)));
        OnPropertyChanged("Type");
      }
    }

    /// <summary>
    /// Invoke on an instance?
    /// </summary>
    [FhirElement("instance", Order=260)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean InstanceElement
    {
      get { return _InstanceElement; }
      set { _InstanceElement = value; OnPropertyChanged("InstanceElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _InstanceElement;

    /// <summary>
    /// Invoke on an instance?
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Instance
    {
      get { return InstanceElement != null ? InstanceElement.Value : null; }
      set
      {
        if (value == null)
          InstanceElement = null;
        else
          InstanceElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Instance");
      }
    }

    /// <summary>
    /// Parameters for the operation/query
    /// </summary>
    [FhirElement("parameter", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent> Parameter
    {
      get { if(_Parameter==null) _Parameter = new List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent>(); return _Parameter; }
      set { _Parameter = value; OnPropertyChanged("Parameter"); }
    }

    private List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent> _Parameter;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as OperationDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.ConformanceResourceStatus>)StatusElement.DeepCopy();
      if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.OperationDefinition.OperationKind>)KindElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.OperationDefinition.ContactComponent>(Contact.DeepCopy());
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(RequirementsElement != null) dest.RequirementsElement = (Hl7.Fhir.Model.FhirString)RequirementsElement.DeepCopy();
      if(IdempotentElement != null) dest.IdempotentElement = (Hl7.Fhir.Model.FhirBoolean)IdempotentElement.DeepCopy();
      if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
      if(NotesElement != null) dest.NotesElement = (Hl7.Fhir.Model.FhirString)NotesElement.DeepCopy();
      if(Base != null) dest.Base = (Hl7.Fhir.Model.ResourceReference)Base.DeepCopy();
      if(SystemElement != null) dest.SystemElement = (Hl7.Fhir.Model.FhirBoolean)SystemElement.DeepCopy();
      if(TypeElement != null) dest.TypeElement = new List<Code<Hl7.Fhir.Model.ResourceType>>(TypeElement.DeepCopy());
      if(InstanceElement != null) dest.InstanceElement = (Hl7.Fhir.Model.FhirBoolean)InstanceElement.DeepCopy();
      if(Parameter != null) dest.Parameter = new List<Hl7.Fhir.Model.OperationDefinition.ParameterComponent>(Parameter.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new OperationDefinition());
    }

    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as OperationDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(RequirementsElement, otherT.RequirementsElement)) return false;
      if( !DeepComparable.Matches(IdempotentElement, otherT.IdempotentElement)) return false;
      if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
      if( !DeepComparable.Matches(NotesElement, otherT.NotesElement)) return false;
      if( !DeepComparable.Matches(Base, otherT.Base)) return false;
      if( !DeepComparable.Matches(SystemElement, otherT.SystemElement)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(InstanceElement, otherT.InstanceElement)) return false;
      if( !DeepComparable.Matches(Parameter, otherT.Parameter)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as OperationDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(RequirementsElement, otherT.RequirementsElement)) return false;
      if( !DeepComparable.IsExactly(IdempotentElement, otherT.IdempotentElement)) return false;
      if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
      if( !DeepComparable.IsExactly(NotesElement, otherT.NotesElement)) return false;
      if( !DeepComparable.IsExactly(Base, otherT.Base)) return false;
      if( !DeepComparable.IsExactly(SystemElement, otherT.SystemElement)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(InstanceElement, otherT.InstanceElement)) return false;
      if( !DeepComparable.IsExactly(Parameter, otherT.Parameter)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (StatusElement != null) yield return StatusElement;
        if (KindElement != null) yield return KindElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DateElement != null) yield return DateElement;
        if (DescriptionElement != null) yield return DescriptionElement;
        if (RequirementsElement != null) yield return RequirementsElement;
        if (IdempotentElement != null) yield return IdempotentElement;
        if (CodeElement != null) yield return CodeElement;
        if (NotesElement != null) yield return NotesElement;
        if (Base != null) yield return Base;
        if (SystemElement != null) yield return SystemElement;
        foreach (var elem in TypeElement) { if (elem != null) yield return elem; }
        if (InstanceElement != null) yield return InstanceElement;
        foreach (var elem in Parameter) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (KindElement != null) yield return new ElementValue("kind", KindElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        if (RequirementsElement != null) yield return new ElementValue("requirements", RequirementsElement);
        if (IdempotentElement != null) yield return new ElementValue("idempotent", IdempotentElement);
        if (CodeElement != null) yield return new ElementValue("code", CodeElement);
        if (NotesElement != null) yield return new ElementValue("notes", NotesElement);
        if (Base != null) yield return new ElementValue("base", Base);
        if (SystemElement != null) yield return new ElementValue("system", SystemElement);
        foreach (var elem in TypeElement) { if (elem != null) yield return new ElementValue("type", elem); }
        if (InstanceElement != null) yield return new ElementValue("instance", InstanceElement);
        foreach (var elem in Parameter) { if (elem != null) yield return new ElementValue("parameter", elem); }
      }
    }

  }

}

// end of file
