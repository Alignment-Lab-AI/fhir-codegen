// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Structural Definition
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("StructureDefinition","http://hl7.org/fhir/StructureDefinition/StructureDefinition", IsResource=true)]
  public partial class StructureDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "StructureDefinition"; } }

    /// <summary>
    /// Defines the type of structure that a definition is describing.
    /// (url: http://hl7.org/fhir/ValueSet/structure-definition-kind)
    /// (system: http://hl7.org/fhir/structure-definition-kind)
    /// </summary>
    [FhirEnumeration("StructureDefinitionKind")]
    public enum StructureDefinitionKind
    {
      /// <summary>
      /// A data type - either a primitive or complex structure that defines a set of data elements. These can be used throughout Resource and extension definitions.
      /// (system: http://hl7.org/fhir/structure-definition-kind)
      /// </summary>
      [EnumLiteral("datatype", "http://hl7.org/fhir/structure-definition-kind"), Description("Data Type")]
      Datatype,
      /// <summary>
      /// A resource defined by the FHIR specification.
      /// (system: http://hl7.org/fhir/structure-definition-kind)
      /// </summary>
      [EnumLiteral("resource", "http://hl7.org/fhir/structure-definition-kind"), Description("Resource")]
      Resource,
      /// <summary>
      /// A logical model - a conceptual package of data that will be mapped to resources for implementation.
      /// (system: http://hl7.org/fhir/structure-definition-kind)
      /// </summary>
      [EnumLiteral("logical", "http://hl7.org/fhir/structure-definition-kind"), Description("Logical Model")]
      Logical,
    }

    /// <summary>
    /// How an extension context is interpreted.
    /// (url: http://hl7.org/fhir/ValueSet/extension-context)
    /// (system: http://hl7.org/fhir/extension-context)
    /// </summary>
    [FhirEnumeration("ExtensionContext")]
    public enum ExtensionContext
    {
      /// <summary>
      /// The context is all elements matching a particular resource element path.
      /// (system: http://hl7.org/fhir/extension-context)
      /// </summary>
      [EnumLiteral("resource", "http://hl7.org/fhir/extension-context"), Description("Resource")]
      Resource,
      /// <summary>
      /// The context is all nodes matching a particular data type element path (root or repeating element) or all elements referencing a particular primitive data type (expressed as the datatype name).
      /// (system: http://hl7.org/fhir/extension-context)
      /// </summary>
      [EnumLiteral("datatype", "http://hl7.org/fhir/extension-context"), Description("Datatype")]
      Datatype,
      /// <summary>
      /// The context is all nodes whose mapping to a specified reference model corresponds to a particular mapping structure.  The context identifies the mapping target. The mapping should clearly identify where such an extension could be used.
      /// (system: http://hl7.org/fhir/extension-context)
      /// </summary>
      [EnumLiteral("mapping", "http://hl7.org/fhir/extension-context"), Description("Mapping")]
      Mapping,
      /// <summary>
      /// The context is a particular extension from a particular profile, a uri that identifies the extension definition.
      /// (system: http://hl7.org/fhir/extension-context)
      /// </summary>
      [EnumLiteral("extension", "http://hl7.org/fhir/extension-context"), Description("Extension")]
      Extension,
    }

    /// <summary>
    /// Contact details of the publisher
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Contact", IsNestedType=true)]
    public partial class ContactComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Contact"; } }

      /// <summary>
      /// Name of a individual to contact
      /// </summary>
      [FhirElement("name", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Name of a individual to contact
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Contact details for individual or publisher
      /// </summary>
      [FhirElement("telecom", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ContactPoint> Telecom
      {
        get { if(_Telecom==null) _Telecom = new List<Hl7.Fhir.Model.ContactPoint>(); return _Telecom; }
        set { _Telecom = value; OnPropertyChanged("Telecom"); }
      }

      private List<Hl7.Fhir.Model.ContactPoint> _Telecom;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContactComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Telecom != null) dest.Telecom = new List<Hl7.Fhir.Model.ContactPoint>(Telecom.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContactComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContactComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Telecom, otherT.Telecom)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContactComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Telecom, otherT.Telecom)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          foreach (var elem in Telecom) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          foreach (var elem in Telecom) { if (elem != null) yield return new ElementValue("telecom", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "telecom":
            value = Telecom;
            return Telecom?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Telecom?.Any() == true) yield return new KeyValuePair<string,object>("telecom",Telecom);
      }

    }

    /// <summary>
    /// External specification that the content is mapped to
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Mapping", IsNestedType=true)]
    public partial class MappingComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Mapping"; } }

      /// <summary>
      /// Internal id when this mapping is used
      /// </summary>
      [FhirElement("identity", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id IdentityElement
      {
        get { return _IdentityElement; }
        set { _IdentityElement = value; OnPropertyChanged("IdentityElement"); }
      }

      private Hl7.Fhir.Model.Id _IdentityElement;

      /// <summary>
      /// Internal id when this mapping is used
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Identity
      {
        get { return IdentityElement != null ? IdentityElement.Value : null; }
        set
        {
          if (value == null)
            IdentityElement = null;
          else
            IdentityElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("Identity");
        }
      }

      /// <summary>
      /// Identifies what this mapping refers to
      /// </summary>
      [FhirElement("uri", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UriElement
      {
        get { return _UriElement; }
        set { _UriElement = value; OnPropertyChanged("UriElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UriElement;

      /// <summary>
      /// Identifies what this mapping refers to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Uri
      {
        get { return UriElement != null ? UriElement.Value : null; }
        set
        {
          if (value == null)
            UriElement = null;
          else
            UriElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Uri");
        }
      }

      /// <summary>
      /// Names what this mapping refers to
      /// </summary>
      [FhirElement("name", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Names what this mapping refers to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Versions, Issues, Scope limitations etc.
      /// </summary>
      [FhirElement("comments", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CommentsElement
      {
        get { return _CommentsElement; }
        set { _CommentsElement = value; OnPropertyChanged("CommentsElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CommentsElement;

      /// <summary>
      /// Versions, Issues, Scope limitations etc.
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Comments
      {
        get { return CommentsElement != null ? CommentsElement.Value : null; }
        set
        {
          if (value == null)
            CommentsElement = null;
          else
            CommentsElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Comments");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MappingComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(IdentityElement != null) dest.IdentityElement = (Hl7.Fhir.Model.Id)IdentityElement.DeepCopy();
        if(UriElement != null) dest.UriElement = (Hl7.Fhir.Model.FhirUri)UriElement.DeepCopy();
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(CommentsElement != null) dest.CommentsElement = (Hl7.Fhir.Model.FhirString)CommentsElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MappingComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MappingComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(IdentityElement, otherT.IdentityElement)) return false;
        if( !DeepComparable.Matches(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(CommentsElement, otherT.CommentsElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MappingComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(IdentityElement, otherT.IdentityElement)) return false;
        if( !DeepComparable.IsExactly(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(CommentsElement, otherT.CommentsElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (IdentityElement != null) yield return IdentityElement;
          if (UriElement != null) yield return UriElement;
          if (NameElement != null) yield return NameElement;
          if (CommentsElement != null) yield return CommentsElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (IdentityElement != null) yield return new ElementValue("identity", IdentityElement);
          if (UriElement != null) yield return new ElementValue("uri", UriElement);
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (CommentsElement != null) yield return new ElementValue("comments", CommentsElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identity":
            value = IdentityElement;
            return IdentityElement is not null;
          case "uri":
            value = UriElement;
            return UriElement is not null;
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "comments":
            value = CommentsElement;
            return CommentsElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (IdentityElement is not null) yield return new KeyValuePair<string,object>("identity",IdentityElement);
        if (UriElement is not null) yield return new KeyValuePair<string,object>("uri",UriElement);
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (CommentsElement is not null) yield return new KeyValuePair<string,object>("comments",CommentsElement);
      }

    }

    /// <summary>
    /// Snapshot view of the structure
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Snapshot", IsNestedType=true)]
    public partial class SnapshotComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Snapshot"; } }

      /// <summary>
      /// Definition of elements in the resource (if no StructureDefinition)
      /// </summary>
      [FhirElement("element", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ElementDefinition> Element
      {
        get { if(_Element==null) _Element = new List<Hl7.Fhir.Model.ElementDefinition>(); return _Element; }
        set { _Element = value; OnPropertyChanged("Element"); }
      }

      private List<Hl7.Fhir.Model.ElementDefinition> _Element;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SnapshotComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Element != null) dest.Element = new List<Hl7.Fhir.Model.ElementDefinition>(Element.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SnapshotComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SnapshotComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Element, otherT.Element)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SnapshotComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Element, otherT.Element)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return new ElementValue("element", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "element":
            value = Element;
            return Element?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Element?.Any() == true) yield return new KeyValuePair<string,object>("element",Element);
      }

    }

    /// <summary>
    /// Differential view of the structure
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Differential", IsNestedType=true)]
    public partial class DifferentialComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Differential"; } }

      /// <summary>
      /// Definition of elements in the resource (if no StructureDefinition)
      /// </summary>
      [FhirElement("element", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ElementDefinition> Element
      {
        get { if(_Element==null) _Element = new List<Hl7.Fhir.Model.ElementDefinition>(); return _Element; }
        set { _Element = value; OnPropertyChanged("Element"); }
      }

      private List<Hl7.Fhir.Model.ElementDefinition> _Element;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DifferentialComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Element != null) dest.Element = new List<Hl7.Fhir.Model.ElementDefinition>(Element.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DifferentialComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DifferentialComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Element, otherT.Element)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DifferentialComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Element, otherT.Element)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return new ElementValue("element", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "element":
            value = Element;
            return Element?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Element?.Any() == true) yield return new KeyValuePair<string,object>("element",Element);
      }

    }

    /// <summary>
    /// Absolute URL used to reference this StructureDefinition
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Absolute URL used to reference this StructureDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Other identifiers for the StructureDefinition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Logical id for this version of the StructureDefinition
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Logical id for this version of the StructureDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Informal name for this StructureDefinition
    /// </summary>
    [FhirElement("name", InSummary=true, Order=120)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Informal name for this StructureDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Use this name when displaying the value
    /// </summary>
    [FhirElement("display", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DisplayElement
    {
      get { return _DisplayElement; }
      set { _DisplayElement = value; OnPropertyChanged("DisplayElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DisplayElement;

    /// <summary>
    /// Use this name when displaying the value
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Display
    {
      get { return DisplayElement != null ? DisplayElement.Value : null; }
      set
      {
        if (value == null)
          DisplayElement = null;
        else
          DisplayElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Display");
      }
    }

    /// <summary>
    /// draft | active | retired
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=140)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ConformanceResourceStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.ConformanceResourceStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ConformanceResourceStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.ConformanceResourceStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Name of the publisher (Organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (Organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details of the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.StructureDefinition.ContactComponent> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.StructureDefinition.ContactComponent>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.StructureDefinition.ContactComponent> _Contact;

    /// <summary>
    /// Date for this version of the StructureDefinition
    /// </summary>
    [FhirElement("date", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date for this version of the StructureDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Natural language description of the StructureDefinition
    /// </summary>
    [FhirElement("description", InSummary=true, Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Natural language description of the StructureDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Content intends to support these contexts
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.CodeableConcept>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _UseContext;

    /// <summary>
    /// Scope and Usage this structure definition is for
    /// </summary>
    [FhirElement("requirements", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString RequirementsElement
    {
      get { return _RequirementsElement; }
      set { _RequirementsElement = value; OnPropertyChanged("RequirementsElement"); }
    }

    private Hl7.Fhir.Model.FhirString _RequirementsElement;

    /// <summary>
    /// Scope and Usage this structure definition is for
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Requirements
    {
      get { return RequirementsElement != null ? RequirementsElement.Value : null; }
      set
      {
        if (value == null)
          RequirementsElement = null;
        else
          RequirementsElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Requirements");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Assist with indexing and finding
    /// </summary>
    [FhirElement("code", InSummary=true, Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Coding> Code
    {
      get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.Coding>(); return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private List<Hl7.Fhir.Model.Coding> _Code;

    /// <summary>
    /// FHIR Version this StructureDefinition targets
    /// </summary>
    [FhirElement("fhirVersion", InSummary=true, Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Id FhirVersionElement
    {
      get { return _FhirVersionElement; }
      set { _FhirVersionElement = value; OnPropertyChanged("FhirVersionElement"); }
    }

    private Hl7.Fhir.Model.Id _FhirVersionElement;

    /// <summary>
    /// FHIR Version this StructureDefinition targets
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string FhirVersion
    {
      get { return FhirVersionElement != null ? FhirVersionElement.Value : null; }
      set
      {
        if (value == null)
          FhirVersionElement = null;
        else
          FhirVersionElement = new Hl7.Fhir.Model.Id(value);
        OnPropertyChanged("FhirVersion");
      }
    }

    /// <summary>
    /// External specification that the content is mapped to
    /// </summary>
    [FhirElement("mapping", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.StructureDefinition.MappingComponent> Mapping
    {
      get { if(_Mapping==null) _Mapping = new List<Hl7.Fhir.Model.StructureDefinition.MappingComponent>(); return _Mapping; }
      set { _Mapping = value; OnPropertyChanged("Mapping"); }
    }

    private List<Hl7.Fhir.Model.StructureDefinition.MappingComponent> _Mapping;

    /// <summary>
    /// datatype | resource | logical
    /// </summary>
    [FhirElement("kind", InSummary=true, Order=260)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind> KindElement
    {
      get { return _KindElement; }
      set { _KindElement = value; OnPropertyChanged("KindElement"); }
    }

    private Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind> _KindElement;

    /// <summary>
    /// datatype | resource | logical
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind? Kind
    {
      get { return KindElement != null ? KindElement.Value : null; }
      set
      {
        if (value == null)
          KindElement = null;
        else
          KindElement = new Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind>(value);
        OnPropertyChanged("Kind");
      }
    }

    /// <summary>
    /// Any datatype or resource, including abstract ones
    /// </summary>
    [FhirElement("constrainedType", InSummary=true, Order=270)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.FHIRDefinedType> ConstrainedTypeElement
    {
      get { return _ConstrainedTypeElement; }
      set { _ConstrainedTypeElement = value; OnPropertyChanged("ConstrainedTypeElement"); }
    }

    private Code<Hl7.Fhir.Model.FHIRDefinedType> _ConstrainedTypeElement;

    /// <summary>
    /// Any datatype or resource, including abstract ones
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.FHIRDefinedType? ConstrainedType
    {
      get { return ConstrainedTypeElement != null ? ConstrainedTypeElement.Value : null; }
      set
      {
        if (value == null)
          ConstrainedTypeElement = null;
        else
          ConstrainedTypeElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>(value);
        OnPropertyChanged("ConstrainedType");
      }
    }

    /// <summary>
    /// Whether the structure is abstract
    /// </summary>
    [FhirElement("abstract", InSummary=true, Order=280)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean AbstractElement
    {
      get { return _AbstractElement; }
      set { _AbstractElement = value; OnPropertyChanged("AbstractElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _AbstractElement;

    /// <summary>
    /// Whether the structure is abstract
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Abstract
    {
      get { return AbstractElement != null ? AbstractElement.Value : null; }
      set
      {
        if (value == null)
          AbstractElement = null;
        else
          AbstractElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Abstract");
      }
    }

    /// <summary>
    /// resource | datatype | mapping | extension
    /// </summary>
    [FhirElement("contextType", InSummary=true, Order=290)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContext> ContextTypeElement
    {
      get { return _ContextTypeElement; }
      set { _ContextTypeElement = value; OnPropertyChanged("ContextTypeElement"); }
    }

    private Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContext> _ContextTypeElement;

    /// <summary>
    /// resource | datatype | mapping | extension
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.StructureDefinition.ExtensionContext? ContextType
    {
      get { return ContextTypeElement != null ? ContextTypeElement.Value : null; }
      set
      {
        if (value == null)
          ContextTypeElement = null;
        else
          ContextTypeElement = new Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContext>(value);
        OnPropertyChanged("ContextType");
      }
    }

    /// <summary>
    /// Where the extension can be used in instances
    /// </summary>
    [FhirElement("context", InSummary=true, Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirString> ContextElement
    {
      get { if(_ContextElement==null) _ContextElement = new List<Hl7.Fhir.Model.FhirString>(); return _ContextElement; }
      set { _ContextElement = value; OnPropertyChanged("ContextElement"); }
    }

    private List<Hl7.Fhir.Model.FhirString> _ContextElement;

    /// <summary>
    /// Where the extension can be used in instances
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Context
    {
      get { return ContextElement != null ? ContextElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ContextElement = null;
        else
          ContextElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
        OnPropertyChanged("Context");
      }
    }

    /// <summary>
    /// Structure that this set of constraints applies to
    /// </summary>
    [FhirElement("base", InSummary=true, Order=310)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri BaseElement
    {
      get { return _BaseElement; }
      set { _BaseElement = value; OnPropertyChanged("BaseElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _BaseElement;

    /// <summary>
    /// Structure that this set of constraints applies to
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Base
    {
      get { return BaseElement != null ? BaseElement.Value : null; }
      set
      {
        if (value == null)
          BaseElement = null;
        else
          BaseElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Base");
      }
    }

    /// <summary>
    /// Snapshot view of the structure
    /// </summary>
    [FhirElement("snapshot", Order=320)]
    [DataMember]
    public Hl7.Fhir.Model.StructureDefinition.SnapshotComponent Snapshot
    {
      get { return _Snapshot; }
      set { _Snapshot = value; OnPropertyChanged("Snapshot"); }
    }

    private Hl7.Fhir.Model.StructureDefinition.SnapshotComponent _Snapshot;

    /// <summary>
    /// Differential view of the structure
    /// </summary>
    [FhirElement("differential", Order=330)]
    [DataMember]
    public Hl7.Fhir.Model.StructureDefinition.DifferentialComponent Differential
    {
      get { return _Differential; }
      set { _Differential = value; OnPropertyChanged("Differential"); }
    }

    private Hl7.Fhir.Model.StructureDefinition.DifferentialComponent _Differential;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as StructureDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(DisplayElement != null) dest.DisplayElement = (Hl7.Fhir.Model.FhirString)DisplayElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.ConformanceResourceStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.StructureDefinition.ContactComponent>(Contact.DeepCopy());
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.CodeableConcept>(UseContext.DeepCopy());
      if(RequirementsElement != null) dest.RequirementsElement = (Hl7.Fhir.Model.FhirString)RequirementsElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.FhirString)CopyrightElement.DeepCopy();
      if(Code != null) dest.Code = new List<Hl7.Fhir.Model.Coding>(Code.DeepCopy());
      if(FhirVersionElement != null) dest.FhirVersionElement = (Hl7.Fhir.Model.Id)FhirVersionElement.DeepCopy();
      if(Mapping != null) dest.Mapping = new List<Hl7.Fhir.Model.StructureDefinition.MappingComponent>(Mapping.DeepCopy());
      if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind>)KindElement.DeepCopy();
      if(ConstrainedTypeElement != null) dest.ConstrainedTypeElement = (Code<Hl7.Fhir.Model.FHIRDefinedType>)ConstrainedTypeElement.DeepCopy();
      if(AbstractElement != null) dest.AbstractElement = (Hl7.Fhir.Model.FhirBoolean)AbstractElement.DeepCopy();
      if(ContextTypeElement != null) dest.ContextTypeElement = (Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContext>)ContextTypeElement.DeepCopy();
      if(ContextElement != null) dest.ContextElement = new List<Hl7.Fhir.Model.FhirString>(ContextElement.DeepCopy());
      if(BaseElement != null) dest.BaseElement = (Hl7.Fhir.Model.FhirUri)BaseElement.DeepCopy();
      if(Snapshot != null) dest.Snapshot = (Hl7.Fhir.Model.StructureDefinition.SnapshotComponent)Snapshot.DeepCopy();
      if(Differential != null) dest.Differential = (Hl7.Fhir.Model.StructureDefinition.DifferentialComponent)Differential.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new StructureDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as StructureDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(DisplayElement, otherT.DisplayElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(RequirementsElement, otherT.RequirementsElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(FhirVersionElement, otherT.FhirVersionElement)) return false;
      if( !DeepComparable.Matches(Mapping, otherT.Mapping)) return false;
      if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.Matches(ConstrainedTypeElement, otherT.ConstrainedTypeElement)) return false;
      if( !DeepComparable.Matches(AbstractElement, otherT.AbstractElement)) return false;
      if( !DeepComparable.Matches(ContextTypeElement, otherT.ContextTypeElement)) return false;
      if( !DeepComparable.Matches(ContextElement, otherT.ContextElement)) return false;
      if( !DeepComparable.Matches(BaseElement, otherT.BaseElement)) return false;
      if( !DeepComparable.Matches(Snapshot, otherT.Snapshot)) return false;
      if( !DeepComparable.Matches(Differential, otherT.Differential)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as StructureDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(DisplayElement, otherT.DisplayElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(RequirementsElement, otherT.RequirementsElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(FhirVersionElement, otherT.FhirVersionElement)) return false;
      if( !DeepComparable.IsExactly(Mapping, otherT.Mapping)) return false;
      if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.IsExactly(ConstrainedTypeElement, otherT.ConstrainedTypeElement)) return false;
      if( !DeepComparable.IsExactly(AbstractElement, otherT.AbstractElement)) return false;
      if( !DeepComparable.IsExactly(ContextTypeElement, otherT.ContextTypeElement)) return false;
      if( !DeepComparable.IsExactly(ContextElement, otherT.ContextElement)) return false;
      if( !DeepComparable.IsExactly(BaseElement, otherT.BaseElement)) return false;
      if( !DeepComparable.IsExactly(Snapshot, otherT.Snapshot)) return false;
      if( !DeepComparable.IsExactly(Differential, otherT.Differential)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (DisplayElement != null) yield return DisplayElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DateElement != null) yield return DateElement;
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        if (RequirementsElement != null) yield return RequirementsElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        foreach (var elem in Code) { if (elem != null) yield return elem; }
        if (FhirVersionElement != null) yield return FhirVersionElement;
        foreach (var elem in Mapping) { if (elem != null) yield return elem; }
        if (KindElement != null) yield return KindElement;
        if (ConstrainedTypeElement != null) yield return ConstrainedTypeElement;
        if (AbstractElement != null) yield return AbstractElement;
        if (ContextTypeElement != null) yield return ContextTypeElement;
        foreach (var elem in ContextElement) { if (elem != null) yield return elem; }
        if (BaseElement != null) yield return BaseElement;
        if (Snapshot != null) yield return Snapshot;
        if (Differential != null) yield return Differential;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (DisplayElement != null) yield return new ElementValue("display", DisplayElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        if (RequirementsElement != null) yield return new ElementValue("requirements", RequirementsElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
        if (FhirVersionElement != null) yield return new ElementValue("fhirVersion", FhirVersionElement);
        foreach (var elem in Mapping) { if (elem != null) yield return new ElementValue("mapping", elem); }
        if (KindElement != null) yield return new ElementValue("kind", KindElement);
        if (ConstrainedTypeElement != null) yield return new ElementValue("constrainedType", ConstrainedTypeElement);
        if (AbstractElement != null) yield return new ElementValue("abstract", AbstractElement);
        if (ContextTypeElement != null) yield return new ElementValue("contextType", ContextTypeElement);
        foreach (var elem in ContextElement) { if (elem != null) yield return new ElementValue("context", elem); }
        if (BaseElement != null) yield return new ElementValue("base", BaseElement);
        if (Snapshot != null) yield return new ElementValue("snapshot", Snapshot);
        if (Differential != null) yield return new ElementValue("differential", Differential);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "display":
          value = DisplayElement;
          return DisplayElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "requirements":
          value = RequirementsElement;
          return RequirementsElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "code":
          value = Code;
          return Code?.Any() == true;
        case "fhirVersion":
          value = FhirVersionElement;
          return FhirVersionElement is not null;
        case "mapping":
          value = Mapping;
          return Mapping?.Any() == true;
        case "kind":
          value = KindElement;
          return KindElement is not null;
        case "constrainedType":
          value = ConstrainedTypeElement;
          return ConstrainedTypeElement is not null;
        case "abstract":
          value = AbstractElement;
          return AbstractElement is not null;
        case "contextType":
          value = ContextTypeElement;
          return ContextTypeElement is not null;
        case "context":
          value = ContextElement;
          return ContextElement?.Any() == true;
        case "base":
          value = BaseElement;
          return BaseElement is not null;
        case "snapshot":
          value = Snapshot;
          return Snapshot is not null;
        case "differential":
          value = Differential;
          return Differential is not null;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (DisplayElement is not null) yield return new KeyValuePair<string,object>("display",DisplayElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (RequirementsElement is not null) yield return new KeyValuePair<string,object>("requirements",RequirementsElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
      if (FhirVersionElement is not null) yield return new KeyValuePair<string,object>("fhirVersion",FhirVersionElement);
      if (Mapping?.Any() == true) yield return new KeyValuePair<string,object>("mapping",Mapping);
      if (KindElement is not null) yield return new KeyValuePair<string,object>("kind",KindElement);
      if (ConstrainedTypeElement is not null) yield return new KeyValuePair<string,object>("constrainedType",ConstrainedTypeElement);
      if (AbstractElement is not null) yield return new KeyValuePair<string,object>("abstract",AbstractElement);
      if (ContextTypeElement is not null) yield return new KeyValuePair<string,object>("contextType",ContextTypeElement);
      if (ContextElement?.Any() == true) yield return new KeyValuePair<string,object>("context",ContextElement);
      if (BaseElement is not null) yield return new KeyValuePair<string,object>("base",BaseElement);
      if (Snapshot is not null) yield return new KeyValuePair<string,object>("snapshot",Snapshot);
      if (Differential is not null) yield return new KeyValuePair<string,object>("differential",Differential);
    }

  }

}

// end of file
