// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
  // Using Model Inheritance: True
  // Hiding Removed Parent Fields: False
  // Nesting Type Definitions: False
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Element Naming Style: PascalCase
  // Enum Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitives

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace fhir
{
  /// <summary>
  /// There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
  /// </summary>
  public class Address : Element {
    /// <summary>
    /// The name of the city, town, village or other community or delivery center.
    /// </summary>
    [JsonProperty("city")]
    public string City { get; set; }
    [JsonProperty("_city")]
    public Element _City { get; set; }
    /// <summary>
    /// Country - a nation as commonly understood or generally accepted.
    /// </summary>
    [JsonProperty("country")]
    public string Country { get; set; }
    [JsonProperty("_country")]
    public Element _Country { get; set; }
    /// <summary>
    /// The name of the administrative area (county).
    /// </summary>
    [JsonProperty("district")]
    public string District { get; set; }
    [JsonProperty("_district")]
    public Element _District { get; set; }
    /// <summary>
    /// home | work | temp | old - purpose of this address.
    /// </summary>
    [JsonProperty("line")]
    public List<string> Line { get; set; }
    [JsonProperty("_line")]
    public List<Element> _Line { get; set; }
    /// <summary>
    /// Allows addresses to be placed in historical context.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// A postal code designating a region defined by the postal service.
    /// </summary>
    [JsonProperty("postalCode")]
    public string PostalCode { get; set; }
    [JsonProperty("_postalCode")]
    public Element _PostalCode { get; set; }
    /// <summary>
    /// Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
    /// </summary>
    [JsonProperty("state")]
    public string State { get; set; }
    [JsonProperty("_state")]
    public Element _State { get; set; }
    /// <summary>
    /// A renderable, unencoded form.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// Allows an appropriate address to be chosen from a list of many.
    /// </summary>
    [JsonProperty("use")]
    public string Use { get; set; }
    [JsonProperty("_use")]
    public Element _Use { get; set; }
  }
  /// <summary>
  /// Code Values for the Address.type field
  /// </summary>
  public static class AddressTypeCodes {
    public const string POSTAL = "postal";
    public const string PHYSICAL = "physical";
    public const string BOTH = "both";
  }
  /// <summary>
  /// Code Values for the Address.use field
  /// </summary>
  public static class AddressUseCodes {
    public const string HOME = "home";
    public const string WORK = "work";
    public const string TEMP = "temp";
    public const string OLD = "old";
  }
  /// <summary>
  /// There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.  If value is present, it SHALL be positive.
  /// </summary>
  public class Age : Quantity {
  }
  /// <summary>
  /// A  text note which also  contains information about who made the statement and when.
  /// </summary>
  public class Annotation : Element {
    /// <summary>
    /// The individual responsible for making the annotation.
    /// </summary>
    [JsonProperty("authorReference")]
    public Reference AuthorReference { get; set; }
    /// <summary>
    /// The individual responsible for making the annotation.
    /// </summary>
    [JsonProperty("authorString")]
    public string AuthorString { get; set; }
    [JsonProperty("_authorString")]
    public Element _AuthorString { get; set; }
    /// <summary>
    /// The text of the annotation.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// Indicates when this particular annotation was made.
    /// </summary>
    [JsonProperty("time")]
    public string Time { get; set; }
    [JsonProperty("_time")]
    public Element _Time { get; set; }
  }
  /// <summary>
  /// For referring to data content defined in other formats.
  /// </summary>
  public class Attachment : Element {
    /// <summary>
    /// Processors of the data need to be able to know how to interpret the data.
    /// </summary>
    [JsonProperty("contentType")]
    public string ContentType { get; set; }
    [JsonProperty("_contentType")]
    public Element _ContentType { get; set; }
    /// <summary>
    /// This is often tracked as an integrity issue for use of the attachment.
    /// </summary>
    [JsonProperty("creation")]
    public string Creation { get; set; }
    [JsonProperty("_creation")]
    public Element _Creation { get; set; }
    /// <summary>
    /// The data needs to able to be transmitted inline.
    /// </summary>
    [JsonProperty("data")]
    public string Data { get; set; }
    [JsonProperty("_data")]
    public Element _Data { get; set; }
    /// <summary>
    /// Included so that applications can verify that the contents of a location have not changed and so that a signature of the content can implicitly sign the content of an image without having to include the data in the instance or reference the url in the signature.
    /// </summary>
    [JsonProperty("hash")]
    public string Hash { get; set; }
    [JsonProperty("_hash")]
    public Element _Hash { get; set; }
    /// <summary>
    /// Users need to be able to choose between the languages in a set of attachments.
    /// </summary>
    [JsonProperty("language")]
    public string Language { get; set; }
    [JsonProperty("_language")]
    public Element _Language { get; set; }
    /// <summary>
    /// Representing the size allows applications to determine whether they should fetch the content automatically in advance, or refuse to fetch it at all.
    /// </summary>
    [JsonProperty("size")]
    public uint? Size { get; set; }
    /// <summary>
    /// Applications need a label to display to a human user in place of the actual data if the data cannot be rendered or perceived by the viewer.
    /// </summary>
    [JsonProperty("title")]
    public string Title { get; set; }
    [JsonProperty("_title")]
    public Element _Title { get; set; }
    /// <summary>
    /// The data needs to be transmitted by reference.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Base definition for all elements that are defined inside a resource - but not those in a data type.
  /// </summary>
  public class BackboneElement : Element {
    /// <summary>
    /// May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
    /// </summary>
    [JsonProperty("modifierExtension")]
    public List<Extension> ModifierExtension { get; set; }
  }
  /// <summary>
  /// A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
  /// </summary>
  public class CodeableConcept : Element {
    /// <summary>
    /// Allows for translations and alternate encodings within a code system.  Also supports communication of the same instance to systems requiring different encodings.
    /// </summary>
    [JsonProperty("coding")]
    public List<Coding> Coding { get; set; }
    /// <summary>
    /// The codes from the terminologies do not always capture the correct meaning with all the nuances of the human using them, or sometimes there is no appropriate code at all. In these cases, the text is used to capture the full meaning of the source.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
  }
  /// <summary>
  /// A reference to a code defined by a terminology system.
  /// </summary>
  public class Coding : Element {
    /// <summary>
    /// Need to refer to a particular code in the system.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Need to be able to carry a human-readable meaning of the code for readers that do not know  the system.
    /// </summary>
    [JsonProperty("display")]
    public string Display { get; set; }
    [JsonProperty("_display")]
    public Element _Display { get; set; }
    /// <summary>
    /// Need to be unambiguous about the source of the definition of the symbol.
    /// </summary>
    [JsonProperty("system")]
    public string System { get; set; }
    [JsonProperty("_system")]
    public Element _System { get; set; }
    /// <summary>
    /// This has been identified as a clinical safety criterium - that this exact system/code pair was chosen explicitly, rather than inferred by the system based on some rules or language processing.
    /// </summary>
    [JsonProperty("userSelected")]
    public bool? UserSelected { get; set; }
    /// <summary>
    /// The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
  /// </summary>
  public class ContactPoint : Element {
    /// <summary>
    /// Time period when the contact point was/is in use.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.
    /// </summary>
    [JsonProperty("rank")]
    public uint? Rank { get; set; }
    /// <summary>
    /// Telecommunications form for contact point - what communications system is required to make use of the contact.
    /// </summary>
    [JsonProperty("system")]
    public string System { get; set; }
    [JsonProperty("_system")]
    public Element _System { get; set; }
    /// <summary>
    /// Need to track the way a person uses this contact, so a user can choose which is appropriate for their purpose.
    /// </summary>
    [JsonProperty("use")]
    public string Use { get; set; }
    [JsonProperty("_use")]
    public Element _Use { get; set; }
    /// <summary>
    /// Need to support legacy numbers that are not in a tightly controlled format.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// Code Values for the ContactPoint.system field
  /// </summary>
  public static class ContactPointSystemCodes {
    public const string PHONE = "phone";
    public const string FAX = "fax";
    public const string EMAIL = "email";
    public const string PAGER = "pager";
    public const string OTHER = "other";
  }
  /// <summary>
  /// Code Values for the ContactPoint.use field
  /// </summary>
  public static class ContactPointUseCodes {
    public const string HOME = "home";
    public const string WORK = "work";
    public const string TEMP = "temp";
    public const string OLD = "old";
    public const string MOBILE = "mobile";
  }
  /// <summary>
  /// There SHALL be a code with a value of "1" if there is a value and it SHALL be an expression of length.  If system is present, it SHALL be UCUM.  If present, the value SHALL a whole number.
  /// </summary>
  public class Count : Quantity {
  }
  /// <summary>
  /// There SHALL be a code if there is a value and it SHALL be an expression of length.  If system is present, it SHALL be UCUM.
  /// </summary>
  public class Distance : Quantity {
  }
  /// <summary>
  /// There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.
  /// </summary>
  public class Duration : Quantity {
  }
  /// <summary>
  /// Base definition for all elements in a resource.
  /// </summary>
  public class Element {
    /// <summary>
    /// May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    /// </summary>
    [JsonProperty("extension")]
    public List<Extension> Extension { get; set; }
    /// <summary>
    /// unique id for the element within a resource (for internal references).
    /// </summary>
    [JsonProperty("id")]
    public string Id { get; set; }
    [JsonProperty("_id")]
    public Element _Id { get; set; }
  }
  /// <summary>
  /// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
  /// </summary>
  public class ElementDefinitionSlicing : Element {
    /// <summary>
    /// A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
    /// </summary>
    [JsonProperty("discriminator")]
    public List<string> Discriminator { get; set; }
    [JsonProperty("_discriminator")]
    public List<Element> _Discriminator { get; set; }
    /// <summary>
    /// If the matching elements have to occur in the same order as defined in the profile.
    /// </summary>
    [JsonProperty("ordered")]
    public bool? Ordered { get; set; }
    /// <summary>
    /// Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
    /// </summary>
    [JsonProperty("rules")]
    public string Rules { get; set; }
    [JsonProperty("_rules")]
    public Element _Rules { get; set; }
  }
  /// <summary>
  /// Code Values for the ElementDefinition.slicing.rules field
  /// </summary>
  public static class ElementDefinitionSlicingRulesCodes {
    public const string CLOSED = "closed";
    public const string OPEN = "open";
    public const string OPENATEND = "openAtEnd";
  }
  /// <summary>
  /// Information about the base definition of the element, provided to make it unncessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.
  /// </summary>
  public class ElementDefinitionBase : Element {
    /// <summary>
    /// Maximum cardinality of the base element identified by the path.
    /// </summary>
    [JsonProperty("max")]
    public string Max { get; set; }
    [JsonProperty("_max")]
    public Element _Max { get; set; }
    /// <summary>
    /// Minimum cardinality of the base element identified by the path.
    /// </summary>
    [JsonProperty("min")]
    public int Min { get; set; }
    /// <summary>
    /// The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.
    /// </summary>
    [JsonProperty("path")]
    public string Path { get; set; }
    [JsonProperty("_path")]
    public Element _Path { get; set; }
  }
  /// <summary>
  /// The data type or resource that the value of this element is permitted to be.
  /// </summary>
  public class ElementDefinitionType : Element {
    /// <summary>
    /// If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
    /// </summary>
    [JsonProperty("aggregation")]
    public List<string> Aggregation { get; set; }
    [JsonProperty("_aggregation")]
    public List<Element> _Aggregation { get; set; }
    /// <summary>
    /// Name of Data type or Resource that is a(or the) type used for this element.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Identifies a profile structure or implementation Guide that SHALL hold for resources or datatypes referenced as the type of this element. Can be a local reference - to another structure in this profile, or a reference to a structure in another profile. When more than one profile is specified, the content must conform to all of them. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.
    /// </summary>
    [JsonProperty("profile")]
    public List<string> Profile { get; set; }
    [JsonProperty("_profile")]
    public List<Element> _Profile { get; set; }
  }
  /// <summary>
  /// Code Values for the ElementDefinition.type.aggregation field
  /// </summary>
  public static class ElementDefinitionTypeAggregationCodes {
    public const string CONTAINED = "contained";
    public const string REFERENCED = "referenced";
    public const string BUNDLED = "bundled";
  }
  /// <summary>
  /// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
  /// </summary>
  public class ElementDefinitionConstraint : Element {
    /// <summary>
    /// Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
    /// </summary>
    [JsonProperty("human")]
    public string Human { get; set; }
    [JsonProperty("_human")]
    public Element _Human { get; set; }
    /// <summary>
    /// Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
    /// </summary>
    [JsonProperty("key")]
    public string Key { get; set; }
    [JsonProperty("_key")]
    public Element _Key { get; set; }
    /// <summary>
    /// Description of why this constraint is necessary or appropriate.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// Identifies the impact constraint violation has on the conformance of the instance.
    /// </summary>
    [JsonProperty("severity")]
    public string Severity { get; set; }
    [JsonProperty("_severity")]
    public Element _Severity { get; set; }
    /// <summary>
    /// Used in Schematron tests of the validity of the resource.
    /// </summary>
    [JsonProperty("xpath")]
    public string Xpath { get; set; }
    [JsonProperty("_xpath")]
    public Element _Xpath { get; set; }
  }
  /// <summary>
  /// Code Values for the ElementDefinition.constraint.severity field
  /// </summary>
  public static class ElementDefinitionConstraintSeverityCodes {
    public const string ERROR = "error";
    public const string WARNING = "warning";
  }
  /// <summary>
  /// Binds to a value set if this element is coded (code, Coding, CodeableConcept).
  /// </summary>
  public class ElementDefinitionBinding : Element {
    /// <summary>
    /// Describes the intended use of this particular set of codes.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
    /// </summary>
    [JsonProperty("strength")]
    public string Strength { get; set; }
    [JsonProperty("_strength")]
    public Element _Strength { get; set; }
    /// <summary>
    /// Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
    /// </summary>
    [JsonProperty("valueSetUri")]
    public string ValueSetUri { get; set; }
    [JsonProperty("_valueSetUri")]
    public Element _ValueSetUri { get; set; }
    /// <summary>
    /// Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
    /// </summary>
    [JsonProperty("valueSetReference")]
    public Reference ValueSetReference { get; set; }
  }
  /// <summary>
  /// Code Values for the ElementDefinition.binding.strength field
  /// </summary>
  public static class ElementDefinitionBindingStrengthCodes {
    public const string REQUIRED = "required";
    public const string EXTENSIBLE = "extensible";
    public const string PREFERRED = "preferred";
    public const string EXAMPLE = "example";
  }
  /// <summary>
  /// Provides guidance to implementers familiar with or converting content from other specifications.
  /// </summary>
  public class ElementDefinitionMapping : Element {
    /// <summary>
    /// An internal reference to the definition of a mapping.
    /// </summary>
    [JsonProperty("identity")]
    public string Identity { get; set; }
    [JsonProperty("_identity")]
    public Element _Identity { get; set; }
    /// <summary>
    /// Identifies the computable language in which mapping.map is expressed.
    /// </summary>
    [JsonProperty("language")]
    public string Language { get; set; }
    [JsonProperty("_language")]
    public Element _Language { get; set; }
    /// <summary>
    /// Expresses what part of the target specification corresponds to this element.
    /// </summary>
    [JsonProperty("map")]
    public string Map { get; set; }
    [JsonProperty("_map")]
    public Element _Map { get; set; }
  }
  /// <summary>
  /// Captures constraints on each element within the resource, profile, or extension.
  /// </summary>
  public class ElementDefinition : Element {
    /// <summary>
    /// Allows for better easier recognition of the element by multiple communities, including international communities.
    /// </summary>
    [JsonProperty("alias")]
    public List<string> Alias { get; set; }
    [JsonProperty("_alias")]
    public List<Element> _Alias { get; set; }
    /// <summary>
    /// Information about the base definition of the element, provided to make it unncessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.
    /// </summary>
    [JsonProperty("base")]
    public ElementDefinitionBase Base { get; set; }
    /// <summary>
    /// Binds to a value set if this element is coded (code, Coding, CodeableConcept).
    /// </summary>
    [JsonProperty("binding")]
    public ElementDefinitionBinding Binding { get; set; }
    /// <summary>
    /// Links the meaning of an element to an external terminology.
    /// </summary>
    [JsonProperty("code")]
    public List<Coding> Code { get; set; }
    /// <summary>
    /// Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
    /// </summary>
    [JsonProperty("comments")]
    public string Comments { get; set; }
    [JsonProperty("_comments")]
    public Element _Comments { get; set; }
    /// <summary>
    /// A reference to an invariant that may make additional statements about the cardinality or value in the instance.
    /// </summary>
    [JsonProperty("condition")]
    public List<string> Condition { get; set; }
    [JsonProperty("_condition")]
    public List<Element> _Condition { get; set; }
    /// <summary>
    /// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
    /// </summary>
    [JsonProperty("constraint")]
    public List<ElementDefinitionConstraint> Constraint { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueBoolean")]
    public bool? DefaultValueBoolean { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueInteger")]
    public int? DefaultValueInteger { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueDecimal")]
    public decimal? DefaultValueDecimal { get; set; }
    [JsonProperty("_defaultValueDecimal")]
    public Element _DefaultValueDecimal { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueBase64Binary")]
    public string DefaultValueBase64Binary { get; set; }
    [JsonProperty("_defaultValueBase64Binary")]
    public Element _DefaultValueBase64Binary { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueInstant")]
    public string DefaultValueInstant { get; set; }
    [JsonProperty("_defaultValueInstant")]
    public Element _DefaultValueInstant { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueString")]
    public string DefaultValueString { get; set; }
    [JsonProperty("_defaultValueString")]
    public Element _DefaultValueString { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueUri")]
    public string DefaultValueUri { get; set; }
    [JsonProperty("_defaultValueUri")]
    public Element _DefaultValueUri { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueDate")]
    public string DefaultValueDate { get; set; }
    [JsonProperty("_defaultValueDate")]
    public Element _DefaultValueDate { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueDateTime")]
    public string DefaultValueDateTime { get; set; }
    [JsonProperty("_defaultValueDateTime")]
    public Element _DefaultValueDateTime { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueTime")]
    public string DefaultValueTime { get; set; }
    [JsonProperty("_defaultValueTime")]
    public Element _DefaultValueTime { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueCode")]
    public string DefaultValueCode { get; set; }
    [JsonProperty("_defaultValueCode")]
    public Element _DefaultValueCode { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueOid")]
    public string DefaultValueOid { get; set; }
    [JsonProperty("_defaultValueOid")]
    public Element _DefaultValueOid { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueId")]
    public string DefaultValueId { get; set; }
    [JsonProperty("_defaultValueId")]
    public Element _DefaultValueId { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueUnsignedInt")]
    public uint? DefaultValueUnsignedInt { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValuePositiveInt")]
    public uint? DefaultValuePositiveInt { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueMarkdown")]
    public string DefaultValueMarkdown { get; set; }
    [JsonProperty("_defaultValueMarkdown")]
    public Element _DefaultValueMarkdown { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueAnnotation")]
    public Annotation DefaultValueAnnotation { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueAttachment")]
    public Attachment DefaultValueAttachment { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueIdentifier")]
    public Identifier DefaultValueIdentifier { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueCodeableConcept")]
    public CodeableConcept DefaultValueCodeableConcept { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueCoding")]
    public Coding DefaultValueCoding { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueQuantity")]
    public Quantity DefaultValueQuantity { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueRange")]
    public Range DefaultValueRange { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValuePeriod")]
    public Period DefaultValuePeriod { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueRatio")]
    public Ratio DefaultValueRatio { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueSampledData")]
    public SampledData DefaultValueSampledData { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueSignature")]
    public Signature DefaultValueSignature { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueHumanName")]
    public HumanName DefaultValueHumanName { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueAddress")]
    public Address DefaultValueAddress { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueContactPoint")]
    public ContactPoint DefaultValueContactPoint { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueTiming")]
    public Timing DefaultValueTiming { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueReference")]
    public Reference DefaultValueReference { get; set; }
    /// <summary>
    /// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    /// </summary>
    [JsonProperty("defaultValueMeta")]
    public Meta DefaultValueMeta { get; set; }
    /// <summary>
    /// To allow a user to state the usage of an element in a particular context.
    /// </summary>
    [JsonProperty("definition")]
    public string Definition { get; set; }
    [JsonProperty("_definition")]
    public Element _Definition { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleBoolean")]
    public bool? ExampleBoolean { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleInteger")]
    public int? ExampleInteger { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleDecimal")]
    public decimal? ExampleDecimal { get; set; }
    [JsonProperty("_exampleDecimal")]
    public Element _ExampleDecimal { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleBase64Binary")]
    public string ExampleBase64Binary { get; set; }
    [JsonProperty("_exampleBase64Binary")]
    public Element _ExampleBase64Binary { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleInstant")]
    public string ExampleInstant { get; set; }
    [JsonProperty("_exampleInstant")]
    public Element _ExampleInstant { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleString")]
    public string ExampleString { get; set; }
    [JsonProperty("_exampleString")]
    public Element _ExampleString { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleUri")]
    public string ExampleUri { get; set; }
    [JsonProperty("_exampleUri")]
    public Element _ExampleUri { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleDate")]
    public string ExampleDate { get; set; }
    [JsonProperty("_exampleDate")]
    public Element _ExampleDate { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleDateTime")]
    public string ExampleDateTime { get; set; }
    [JsonProperty("_exampleDateTime")]
    public Element _ExampleDateTime { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleTime")]
    public string ExampleTime { get; set; }
    [JsonProperty("_exampleTime")]
    public Element _ExampleTime { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleCode")]
    public string ExampleCode { get; set; }
    [JsonProperty("_exampleCode")]
    public Element _ExampleCode { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleOid")]
    public string ExampleOid { get; set; }
    [JsonProperty("_exampleOid")]
    public Element _ExampleOid { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleId")]
    public string ExampleId { get; set; }
    [JsonProperty("_exampleId")]
    public Element _ExampleId { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleUnsignedInt")]
    public uint? ExampleUnsignedInt { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("examplePositiveInt")]
    public uint? ExamplePositiveInt { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleMarkdown")]
    public string ExampleMarkdown { get; set; }
    [JsonProperty("_exampleMarkdown")]
    public Element _ExampleMarkdown { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleAnnotation")]
    public Annotation ExampleAnnotation { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleAttachment")]
    public Attachment ExampleAttachment { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleIdentifier")]
    public Identifier ExampleIdentifier { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleCodeableConcept")]
    public CodeableConcept ExampleCodeableConcept { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleCoding")]
    public Coding ExampleCoding { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleQuantity")]
    public Quantity ExampleQuantity { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleRange")]
    public Range ExampleRange { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("examplePeriod")]
    public Period ExamplePeriod { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleRatio")]
    public Ratio ExampleRatio { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleSampledData")]
    public SampledData ExampleSampledData { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleSignature")]
    public Signature ExampleSignature { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleHumanName")]
    public HumanName ExampleHumanName { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleAddress")]
    public Address ExampleAddress { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleContactPoint")]
    public ContactPoint ExampleContactPoint { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleTiming")]
    public Timing ExampleTiming { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleReference")]
    public Reference ExampleReference { get; set; }
    /// <summary>
    /// A sample value for this element demonstrating the type of information that would typically be captured.
    /// </summary>
    [JsonProperty("exampleMeta")]
    public Meta ExampleMeta { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedBoolean")]
    public bool? FixedBoolean { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedInteger")]
    public int? FixedInteger { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedDecimal")]
    public decimal? FixedDecimal { get; set; }
    [JsonProperty("_fixedDecimal")]
    public Element _FixedDecimal { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedBase64Binary")]
    public string FixedBase64Binary { get; set; }
    [JsonProperty("_fixedBase64Binary")]
    public Element _FixedBase64Binary { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedInstant")]
    public string FixedInstant { get; set; }
    [JsonProperty("_fixedInstant")]
    public Element _FixedInstant { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedString")]
    public string FixedString { get; set; }
    [JsonProperty("_fixedString")]
    public Element _FixedString { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedUri")]
    public string FixedUri { get; set; }
    [JsonProperty("_fixedUri")]
    public Element _FixedUri { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedDate")]
    public string FixedDate { get; set; }
    [JsonProperty("_fixedDate")]
    public Element _FixedDate { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedDateTime")]
    public string FixedDateTime { get; set; }
    [JsonProperty("_fixedDateTime")]
    public Element _FixedDateTime { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedTime")]
    public string FixedTime { get; set; }
    [JsonProperty("_fixedTime")]
    public Element _FixedTime { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedCode")]
    public string FixedCode { get; set; }
    [JsonProperty("_fixedCode")]
    public Element _FixedCode { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedOid")]
    public string FixedOid { get; set; }
    [JsonProperty("_fixedOid")]
    public Element _FixedOid { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedId")]
    public string FixedId { get; set; }
    [JsonProperty("_fixedId")]
    public Element _FixedId { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedUnsignedInt")]
    public uint? FixedUnsignedInt { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedPositiveInt")]
    public uint? FixedPositiveInt { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedMarkdown")]
    public string FixedMarkdown { get; set; }
    [JsonProperty("_fixedMarkdown")]
    public Element _FixedMarkdown { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedAnnotation")]
    public Annotation FixedAnnotation { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedAttachment")]
    public Attachment FixedAttachment { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedIdentifier")]
    public Identifier FixedIdentifier { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedCodeableConcept")]
    public CodeableConcept FixedCodeableConcept { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedCoding")]
    public Coding FixedCoding { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedQuantity")]
    public Quantity FixedQuantity { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedRange")]
    public Range FixedRange { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedPeriod")]
    public Period FixedPeriod { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedRatio")]
    public Ratio FixedRatio { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedSampledData")]
    public SampledData FixedSampledData { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedSignature")]
    public Signature FixedSignature { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedHumanName")]
    public HumanName FixedHumanName { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedAddress")]
    public Address FixedAddress { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedContactPoint")]
    public ContactPoint FixedContactPoint { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedTiming")]
    public Timing FixedTiming { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedReference")]
    public Reference FixedReference { get; set; }
    /// <summary>
    /// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    /// </summary>
    [JsonProperty("fixedMeta")]
    public Meta FixedMeta { get; set; }
    /// <summary>
    /// Allows elements to be introduced into a specification that can't safely be ignored by applications that don't recognize them.
    /// </summary>
    [JsonProperty("isModifier")]
    public bool? IsModifier { get; set; }
    /// <summary>
    /// Allow clients to search through large resources quickly.
    /// </summary>
    [JsonProperty("isSummary")]
    public bool? IsSummary { get; set; }
    /// <summary>
    /// The text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
    /// </summary>
    [JsonProperty("label")]
    public string Label { get; set; }
    [JsonProperty("_label")]
    public Element _Label { get; set; }
    /// <summary>
    /// Provides guidance to implementers familiar with or converting content from other specifications.
    /// </summary>
    [JsonProperty("mapping")]
    public List<ElementDefinitionMapping> Mapping { get; set; }
    /// <summary>
    /// The maximum number of times this element is permitted to appear in the instance.
    /// </summary>
    [JsonProperty("max")]
    public string Max { get; set; }
    [JsonProperty("_max")]
    public Element _Max { get; set; }
    /// <summary>
    /// Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
    /// </summary>
    [JsonProperty("maxLength")]
    public int? MaxLength { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueBoolean")]
    public bool? MaxValueBoolean { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueInteger")]
    public int? MaxValueInteger { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueDecimal")]
    public decimal? MaxValueDecimal { get; set; }
    [JsonProperty("_maxValueDecimal")]
    public Element _MaxValueDecimal { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueBase64Binary")]
    public string MaxValueBase64Binary { get; set; }
    [JsonProperty("_maxValueBase64Binary")]
    public Element _MaxValueBase64Binary { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueInstant")]
    public string MaxValueInstant { get; set; }
    [JsonProperty("_maxValueInstant")]
    public Element _MaxValueInstant { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueString")]
    public string MaxValueString { get; set; }
    [JsonProperty("_maxValueString")]
    public Element _MaxValueString { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueUri")]
    public string MaxValueUri { get; set; }
    [JsonProperty("_maxValueUri")]
    public Element _MaxValueUri { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueDate")]
    public string MaxValueDate { get; set; }
    [JsonProperty("_maxValueDate")]
    public Element _MaxValueDate { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueDateTime")]
    public string MaxValueDateTime { get; set; }
    [JsonProperty("_maxValueDateTime")]
    public Element _MaxValueDateTime { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueTime")]
    public string MaxValueTime { get; set; }
    [JsonProperty("_maxValueTime")]
    public Element _MaxValueTime { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueCode")]
    public string MaxValueCode { get; set; }
    [JsonProperty("_maxValueCode")]
    public Element _MaxValueCode { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueOid")]
    public string MaxValueOid { get; set; }
    [JsonProperty("_maxValueOid")]
    public Element _MaxValueOid { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueId")]
    public string MaxValueId { get; set; }
    [JsonProperty("_maxValueId")]
    public Element _MaxValueId { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueUnsignedInt")]
    public uint? MaxValueUnsignedInt { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValuePositiveInt")]
    public uint? MaxValuePositiveInt { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueMarkdown")]
    public string MaxValueMarkdown { get; set; }
    [JsonProperty("_maxValueMarkdown")]
    public Element _MaxValueMarkdown { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueAnnotation")]
    public Annotation MaxValueAnnotation { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueAttachment")]
    public Attachment MaxValueAttachment { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueIdentifier")]
    public Identifier MaxValueIdentifier { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueCodeableConcept")]
    public CodeableConcept MaxValueCodeableConcept { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueCoding")]
    public Coding MaxValueCoding { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueQuantity")]
    public Quantity MaxValueQuantity { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueRange")]
    public Range MaxValueRange { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValuePeriod")]
    public Period MaxValuePeriod { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueRatio")]
    public Ratio MaxValueRatio { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueSampledData")]
    public SampledData MaxValueSampledData { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueSignature")]
    public Signature MaxValueSignature { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueHumanName")]
    public HumanName MaxValueHumanName { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueAddress")]
    public Address MaxValueAddress { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueContactPoint")]
    public ContactPoint MaxValueContactPoint { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueTiming")]
    public Timing MaxValueTiming { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueReference")]
    public Reference MaxValueReference { get; set; }
    /// <summary>
    /// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("maxValueMeta")]
    public Meta MaxValueMeta { get; set; }
    /// <summary>
    /// The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
    /// </summary>
    [JsonProperty("meaningWhenMissing")]
    public string MeaningWhenMissing { get; set; }
    [JsonProperty("_meaningWhenMissing")]
    public Element _MeaningWhenMissing { get; set; }
    /// <summary>
    /// The minimum number of times this element SHALL appear in the instance.
    /// </summary>
    [JsonProperty("min")]
    public int? Min { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueBoolean")]
    public bool? MinValueBoolean { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueInteger")]
    public int? MinValueInteger { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueDecimal")]
    public decimal? MinValueDecimal { get; set; }
    [JsonProperty("_minValueDecimal")]
    public Element _MinValueDecimal { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueBase64Binary")]
    public string MinValueBase64Binary { get; set; }
    [JsonProperty("_minValueBase64Binary")]
    public Element _MinValueBase64Binary { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueInstant")]
    public string MinValueInstant { get; set; }
    [JsonProperty("_minValueInstant")]
    public Element _MinValueInstant { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueString")]
    public string MinValueString { get; set; }
    [JsonProperty("_minValueString")]
    public Element _MinValueString { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueUri")]
    public string MinValueUri { get; set; }
    [JsonProperty("_minValueUri")]
    public Element _MinValueUri { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueDate")]
    public string MinValueDate { get; set; }
    [JsonProperty("_minValueDate")]
    public Element _MinValueDate { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueDateTime")]
    public string MinValueDateTime { get; set; }
    [JsonProperty("_minValueDateTime")]
    public Element _MinValueDateTime { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueTime")]
    public string MinValueTime { get; set; }
    [JsonProperty("_minValueTime")]
    public Element _MinValueTime { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueCode")]
    public string MinValueCode { get; set; }
    [JsonProperty("_minValueCode")]
    public Element _MinValueCode { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueOid")]
    public string MinValueOid { get; set; }
    [JsonProperty("_minValueOid")]
    public Element _MinValueOid { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueId")]
    public string MinValueId { get; set; }
    [JsonProperty("_minValueId")]
    public Element _MinValueId { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueUnsignedInt")]
    public uint? MinValueUnsignedInt { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValuePositiveInt")]
    public uint? MinValuePositiveInt { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueMarkdown")]
    public string MinValueMarkdown { get; set; }
    [JsonProperty("_minValueMarkdown")]
    public Element _MinValueMarkdown { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueAnnotation")]
    public Annotation MinValueAnnotation { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueAttachment")]
    public Attachment MinValueAttachment { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueIdentifier")]
    public Identifier MinValueIdentifier { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueCodeableConcept")]
    public CodeableConcept MinValueCodeableConcept { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueCoding")]
    public Coding MinValueCoding { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueQuantity")]
    public Quantity MinValueQuantity { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueRange")]
    public Range MinValueRange { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValuePeriod")]
    public Period MinValuePeriod { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueRatio")]
    public Ratio MinValueRatio { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueSampledData")]
    public SampledData MinValueSampledData { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueSignature")]
    public Signature MinValueSignature { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueHumanName")]
    public HumanName MinValueHumanName { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueAddress")]
    public Address MinValueAddress { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueContactPoint")]
    public ContactPoint MinValueContactPoint { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueTiming")]
    public Timing MinValueTiming { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueReference")]
    public Reference MinValueReference { get; set; }
    /// <summary>
    /// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    /// </summary>
    [JsonProperty("minValueMeta")]
    public Meta MinValueMeta { get; set; }
    /// <summary>
    /// Allows a profile to set expectations for system capabilities beyond merely respecting cardinality constraints.
    /// </summary>
    [JsonProperty("mustSupport")]
    public bool? MustSupport { get; set; }
    /// <summary>
    /// Allows referencing a defined element.  May also be used for code generation purposes.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Identifies the name of a slice defined elsewhere in the profile whose constraints should be applied to the current element.
    /// </summary>
    [JsonProperty("nameReference")]
    public string NameReference { get; set; }
    [JsonProperty("_nameReference")]
    public Element _NameReference { get; set; }
    /// <summary>
    /// The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
    /// </summary>
    [JsonProperty("path")]
    public string Path { get; set; }
    [JsonProperty("_path")]
    public Element _Path { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternBoolean")]
    public bool? PatternBoolean { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternInteger")]
    public int? PatternInteger { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternDecimal")]
    public decimal? PatternDecimal { get; set; }
    [JsonProperty("_patternDecimal")]
    public Element _PatternDecimal { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternBase64Binary")]
    public string PatternBase64Binary { get; set; }
    [JsonProperty("_patternBase64Binary")]
    public Element _PatternBase64Binary { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternInstant")]
    public string PatternInstant { get; set; }
    [JsonProperty("_patternInstant")]
    public Element _PatternInstant { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternString")]
    public string PatternString { get; set; }
    [JsonProperty("_patternString")]
    public Element _PatternString { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternUri")]
    public string PatternUri { get; set; }
    [JsonProperty("_patternUri")]
    public Element _PatternUri { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternDate")]
    public string PatternDate { get; set; }
    [JsonProperty("_patternDate")]
    public Element _PatternDate { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternDateTime")]
    public string PatternDateTime { get; set; }
    [JsonProperty("_patternDateTime")]
    public Element _PatternDateTime { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternTime")]
    public string PatternTime { get; set; }
    [JsonProperty("_patternTime")]
    public Element _PatternTime { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternCode")]
    public string PatternCode { get; set; }
    [JsonProperty("_patternCode")]
    public Element _PatternCode { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternOid")]
    public string PatternOid { get; set; }
    [JsonProperty("_patternOid")]
    public Element _PatternOid { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternId")]
    public string PatternId { get; set; }
    [JsonProperty("_patternId")]
    public Element _PatternId { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternUnsignedInt")]
    public uint? PatternUnsignedInt { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternPositiveInt")]
    public uint? PatternPositiveInt { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternMarkdown")]
    public string PatternMarkdown { get; set; }
    [JsonProperty("_patternMarkdown")]
    public Element _PatternMarkdown { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternAnnotation")]
    public Annotation PatternAnnotation { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternAttachment")]
    public Attachment PatternAttachment { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternIdentifier")]
    public Identifier PatternIdentifier { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternCodeableConcept")]
    public CodeableConcept PatternCodeableConcept { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternCoding")]
    public Coding PatternCoding { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternQuantity")]
    public Quantity PatternQuantity { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternRange")]
    public Range PatternRange { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternPeriod")]
    public Period PatternPeriod { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternRatio")]
    public Ratio PatternRatio { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternSampledData")]
    public SampledData PatternSampledData { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternSignature")]
    public Signature PatternSignature { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternHumanName")]
    public HumanName PatternHumanName { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternAddress")]
    public Address PatternAddress { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternContactPoint")]
    public ContactPoint PatternContactPoint { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternTiming")]
    public Timing PatternTiming { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternReference")]
    public Reference PatternReference { get; set; }
    /// <summary>
    /// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
    /// </summary>
    [JsonProperty("patternMeta")]
    public Meta PatternMeta { get; set; }
    /// <summary>
    /// Codes that define how this element is represented in instances, when the deviation varies from the normal case.
    /// </summary>
    [JsonProperty("representation")]
    public List<string> Representation { get; set; }
    [JsonProperty("_representation")]
    public List<Element> _Representation { get; set; }
    /// <summary>
    /// This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// A concise description of what this element means (e.g. for use in autogenerated summaries).
    /// </summary>
    [JsonProperty("short")]
    public string Short { get; set; }
    [JsonProperty("_short")]
    public Element _Short { get; set; }
    /// <summary>
    /// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
    /// </summary>
    [JsonProperty("slicing")]
    public ElementDefinitionSlicing Slicing { get; set; }
    /// <summary>
    /// The data type or resource that the value of this element is permitted to be.
    /// </summary>
    [JsonProperty("type")]
    public List<ElementDefinitionType> Type { get; set; }
  }
  /// <summary>
  /// Optional Extensions Element - found in all resources.
  /// </summary>
  public class Extension : Element {
    /// <summary>
    /// Source of the definition for the extension code - a logical name or a URL.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueBoolean")]
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueInteger")]
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueDecimal")]
    public decimal? ValueDecimal { get; set; }
    [JsonProperty("_valueDecimal")]
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueBase64Binary")]
    public string ValueBase64Binary { get; set; }
    [JsonProperty("_valueBase64Binary")]
    public Element _ValueBase64Binary { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueInstant")]
    public string ValueInstant { get; set; }
    [JsonProperty("_valueInstant")]
    public Element _ValueInstant { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueString")]
    public string ValueString { get; set; }
    [JsonProperty("_valueString")]
    public Element _ValueString { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueUri")]
    public string ValueUri { get; set; }
    [JsonProperty("_valueUri")]
    public Element _ValueUri { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueDate")]
    public string ValueDate { get; set; }
    [JsonProperty("_valueDate")]
    public Element _ValueDate { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueDateTime")]
    public string ValueDateTime { get; set; }
    [JsonProperty("_valueDateTime")]
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueTime")]
    public string ValueTime { get; set; }
    [JsonProperty("_valueTime")]
    public Element _ValueTime { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueCode")]
    public string ValueCode { get; set; }
    [JsonProperty("_valueCode")]
    public Element _ValueCode { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueOid")]
    public string ValueOid { get; set; }
    [JsonProperty("_valueOid")]
    public Element _ValueOid { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueId")]
    public string ValueId { get; set; }
    [JsonProperty("_valueId")]
    public Element _ValueId { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueUnsignedInt")]
    public uint? ValueUnsignedInt { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valuePositiveInt")]
    public uint? ValuePositiveInt { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueMarkdown")]
    public string ValueMarkdown { get; set; }
    [JsonProperty("_valueMarkdown")]
    public Element _ValueMarkdown { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueAnnotation")]
    public Annotation ValueAnnotation { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueAttachment")]
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueIdentifier")]
    public Identifier ValueIdentifier { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueCodeableConcept")]
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueCoding")]
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueQuantity")]
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueRange")]
    public Range ValueRange { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valuePeriod")]
    public Period ValuePeriod { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueRatio")]
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueSampledData")]
    public SampledData ValueSampledData { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueSignature")]
    public Signature ValueSignature { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueHumanName")]
    public HumanName ValueHumanName { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueAddress")]
    public Address ValueAddress { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueContactPoint")]
    public ContactPoint ValueContactPoint { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueTiming")]
    public Timing ValueTiming { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueReference")]
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
    /// </summary>
    [JsonProperty("valueMeta")]
    public Meta ValueMeta { get; set; }
  }
  /// <summary>
  /// A human's name with the ability to identify parts and usage.
  /// </summary>
  public class HumanName : Element {
    /// <summary>
    /// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
    /// </summary>
    [JsonProperty("family")]
    public List<string> Family { get; set; }
    [JsonProperty("_family")]
    public List<Element> _Family { get; set; }
    /// <summary>
    /// Given name.
    /// </summary>
    [JsonProperty("given")]
    public List<string> Given { get; set; }
    [JsonProperty("_given")]
    public List<Element> _Given { get; set; }
    /// <summary>
    /// Allows names to be placed in historical context.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
    /// </summary>
    [JsonProperty("prefix")]
    public List<string> Prefix { get; set; }
    [JsonProperty("_prefix")]
    public List<Element> _Prefix { get; set; }
    /// <summary>
    /// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
    /// </summary>
    [JsonProperty("suffix")]
    public List<string> Suffix { get; set; }
    [JsonProperty("_suffix")]
    public List<Element> _Suffix { get; set; }
    /// <summary>
    /// A renderable, unencoded form.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// Allows the appropriate name for a particular context of use to be selected from among a set of names.
    /// </summary>
    [JsonProperty("use")]
    public string Use { get; set; }
    [JsonProperty("_use")]
    public Element _Use { get; set; }
  }
  /// <summary>
  /// Code Values for the HumanName.use field
  /// </summary>
  public static class HumanNameUseCodes {
    public const string USUAL = "usual";
    public const string OFFICIAL = "official";
    public const string TEMP = "temp";
    public const string NICKNAME = "nickname";
    public const string ANONYMOUS = "anonymous";
    public const string OLD = "old";
    public const string MAIDEN = "maiden";
  }
  /// <summary>
  /// A technical identifier - identifies some entity uniquely and unambiguously.
  /// </summary>
  public class Identifier : Element {
    /// <summary>
    /// Organization that issued/manages the identifier.
    /// </summary>
    [JsonProperty("assigner")]
    public Reference Assigner { get; set; }
    /// <summary>
    /// Time period during which identifier is/was valid for use.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// There are many sequences of identifiers.  To perform matching, we need to know what sequence we're dealing with. The system identifies a particular sequence or set of unique identifiers.
    /// </summary>
    [JsonProperty("system")]
    public string System { get; set; }
    [JsonProperty("_system")]
    public Element _System { get; set; }
    /// <summary>
    /// Allows users to make use of identifiers when the identifier system is not known.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Allows the appropriate identifier for a particular context of use to be selected from among a set of identifiers.
    /// </summary>
    [JsonProperty("use")]
    public string Use { get; set; }
    [JsonProperty("_use")]
    public Element _Use { get; set; }
    /// <summary>
    /// The portion of the identifier typically displayed to the user and which is unique within the context of the system.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// Code Values for the Identifier.use field
  /// </summary>
  public static class IdentifierUseCodes {
    public const string USUAL = "usual";
    public const string OFFICIAL = "official";
    public const string TEMP = "temp";
    public const string SECONDARY = "secondary";
  }
  /// <summary>
  /// The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
  /// </summary>
  public class Meta : Element {
    /// <summary>
    /// When the resource last changed - e.g. when the version changed.
    /// </summary>
    [JsonProperty("lastUpdated")]
    public string LastUpdated { get; set; }
    [JsonProperty("_lastUpdated")]
    public Element _LastUpdated { get; set; }
    /// <summary>
    /// A list of profiles [[[StructureDefinition]]]s that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].
    /// </summary>
    [JsonProperty("profile")]
    public List<string> Profile { get; set; }
    [JsonProperty("_profile")]
    public List<Element> _Profile { get; set; }
    /// <summary>
    /// Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
    /// </summary>
    [JsonProperty("security")]
    public List<Coding> Security { get; set; }
    /// <summary>
    /// Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
    /// </summary>
    [JsonProperty("tag")]
    public List<Coding> Tag { get; set; }
    /// <summary>
    /// The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.
    /// </summary>
    [JsonProperty("versionId")]
    public string VersionId { get; set; }
    [JsonProperty("_versionId")]
    public Element _VersionId { get; set; }
  }
  /// <summary>
  /// There SHALL be a code if there is a value and it SHALL be an expression of currency.  If system is present, it SHALL be ISO 4217 (system = "urn:iso:std:iso:4217" - currency).
  /// </summary>
  public class Money : Quantity {
  }
  /// <summary>
  /// A human-readable formatted text, including images.
  /// </summary>
  public class Narrative : Element {
    /// <summary>
    /// The actual narrative content, a stripped down version of XHTML.
    /// </summary>
    [JsonProperty("div")]
    public string Div { get; set; }
    [JsonProperty("_div")]
    public Element _Div { get; set; }
    /// <summary>
    /// The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// Code Values for the Narrative.status field
  /// </summary>
  public static class NarrativeStatusCodes {
    public const string GENERATED = "generated";
    public const string EXTENSIONS = "extensions";
    public const string ADDITIONAL = "additional";
    public const string EMPTY = "empty";
  }
  /// <summary>
  /// A time period defined by a start and end date and optionally time.
  /// </summary>
  public class Period : Element {
    /// <summary>
    /// The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
    /// </summary>
    [JsonProperty("end")]
    public string End { get; set; }
    [JsonProperty("_end")]
    public Element _End { get; set; }
    /// <summary>
    /// The start of the period. The boundary is inclusive.
    /// </summary>
    [JsonProperty("start")]
    public string Start { get; set; }
    [JsonProperty("_start")]
    public Element _Start { get; set; }
  }
  /// <summary>
  /// A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  /// </summary>
  public class Quantity : Element {
    /// <summary>
    /// Need a computable form of the unit that is fixed across all forms. UCUM provides this for quantities, but SNOMED CT provides many units of interest.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Need a framework for handling measures where the value is <5ug/L or >400mg/L due to the limitations of measuring methodology.
    /// </summary>
    [JsonProperty("comparator")]
    public string Comparator { get; set; }
    [JsonProperty("_comparator")]
    public Element _Comparator { get; set; }
    /// <summary>
    /// Need to know the system that defines the coded form of the unit.
    /// </summary>
    [JsonProperty("system")]
    public string System { get; set; }
    [JsonProperty("_system")]
    public Element _System { get; set; }
    /// <summary>
    /// There are many representations for units of measure and in many contexts, particular representations are fixed and required. I.e. mcg for micrograms.
    /// </summary>
    [JsonProperty("unit")]
    public string Unit { get; set; }
    [JsonProperty("_unit")]
    public Element _Unit { get; set; }
    /// <summary>
    /// Precision is handled implicitly in almost all cases of measurement.
    /// </summary>
    [JsonProperty("value")]
    public decimal? Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// Code Values for the Quantity.comparator field
  /// </summary>
  public static class QuantityComparatorCodes {
    public const string LESS_THAN = "<";
    public const string LESS_THAN_OR_EQUALS = "<=";
    public const string GREATER_THAN_OR_EQUALS = ">=";
    public const string GREATER_THAN = ">";
  }
  /// <summary>
  /// A set of ordered Quantities defined by a low and high limit.
  /// </summary>
  public class Range : Element {
    /// <summary>
    /// The high limit. The boundary is inclusive.
    /// </summary>
    [JsonProperty("high")]
    public Quantity High { get; set; }
    /// <summary>
    /// The low limit. The boundary is inclusive.
    /// </summary>
    [JsonProperty("low")]
    public Quantity Low { get; set; }
  }
  /// <summary>
  /// A relationship of two Quantity values - expressed as a numerator and a denominator.
  /// </summary>
  public class Ratio : Element {
    /// <summary>
    /// The value of the denominator.
    /// </summary>
    [JsonProperty("denominator")]
    public Quantity Denominator { get; set; }
    /// <summary>
    /// The value of the numerator.
    /// </summary>
    [JsonProperty("numerator")]
    public Quantity Numerator { get; set; }
  }
  /// <summary>
  /// A reference from one resource to another.
  /// </summary>
  public class Reference : Element {
    /// <summary>
    /// Plain text narrative that identifies the resource in addition to the resource reference.
    /// </summary>
    [JsonProperty("display")]
    public string Display { get; set; }
    [JsonProperty("_display")]
    public Element _Display { get; set; }
    /// <summary>
    /// A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
    /// </summary>
    [JsonProperty("reference")]
    public string ReferenceField { get; set; }
    [JsonProperty("_reference")]
    public Element _ReferenceField { get; set; }
  }
  /// <summary>
  /// A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
  /// </summary>
  public class SampledData : Element {
    /// <summary>
    /// A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
    /// </summary>
    [JsonProperty("data")]
    public string Data { get; set; }
    [JsonProperty("_data")]
    public Element _Data { get; set; }
    /// <summary>
    /// The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
    /// </summary>
    [JsonProperty("dimensions")]
    public uint Dimensions { get; set; }
    /// <summary>
    /// A correction factor that is applied to the sampled data points before they are added to the origin.
    /// </summary>
    [JsonProperty("factor")]
    public decimal? Factor { get; set; }
    [JsonProperty("_factor")]
    public Element _Factor { get; set; }
    /// <summary>
    /// The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
    /// </summary>
    [JsonProperty("lowerLimit")]
    public decimal? LowerLimit { get; set; }
    [JsonProperty("_lowerLimit")]
    public Element _LowerLimit { get; set; }
    /// <summary>
    /// The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
    /// </summary>
    [JsonProperty("origin")]
    public Quantity Origin { get; set; }
    /// <summary>
    /// The length of time between sampling times, measured in milliseconds.
    /// </summary>
    [JsonProperty("period")]
    public decimal Period { get; set; }
    [JsonProperty("_period")]
    public Element _Period { get; set; }
    /// <summary>
    /// The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
    /// </summary>
    [JsonProperty("upperLimit")]
    public decimal? UpperLimit { get; set; }
    [JsonProperty("_upperLimit")]
    public Element _UpperLimit { get; set; }
  }
  /// <summary>
  /// A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
  /// </summary>
  public class Signature : Element {
    /// <summary>
    /// The base64 encoding of the Signature content.
    /// </summary>
    [JsonProperty("blob")]
    public string Blob { get; set; }
    [JsonProperty("_blob")]
    public Element _Blob { get; set; }
    /// <summary>
    /// A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature.
    /// </summary>
    [JsonProperty("contentType")]
    public string ContentType { get; set; }
    [JsonProperty("_contentType")]
    public Element _ContentType { get; set; }
    /// <summary>
    /// An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
    /// </summary>
    [JsonProperty("type")]
    public List<Coding> Type { get; set; }
    /// <summary>
    /// When the digital signature was signed.
    /// </summary>
    [JsonProperty("when")]
    public string When { get; set; }
    [JsonProperty("_when")]
    public Element _When { get; set; }
    /// <summary>
    /// A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
    /// </summary>
    [JsonProperty("whoUri")]
    public string WhoUri { get; set; }
    [JsonProperty("_whoUri")]
    public Element _WhoUri { get; set; }
    /// <summary>
    /// A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
    /// </summary>
    [JsonProperty("whoReference")]
    public Reference WhoReference { get; set; }
  }
  /// <summary>
  /// The comparator is not used on a SimpleQuantity
  /// </summary>
  public class SimpleQuantity : Quantity {
  }
  /// <summary>
  /// Many timing schedules are determined by regular repetitions.
  /// </summary>
  public class TimingRepeat : Element {
    /// <summary>
    /// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
    /// </summary>
    [JsonProperty("boundsQuantity")]
    public Quantity BoundsQuantity { get; set; }
    /// <summary>
    /// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
    /// </summary>
    [JsonProperty("boundsRange")]
    public Range BoundsRange { get; set; }
    /// <summary>
    /// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
    /// </summary>
    [JsonProperty("boundsPeriod")]
    public Period BoundsPeriod { get; set; }
    /// <summary>
    /// Repetitions may be limited by end time or total occurrences.
    /// </summary>
    [JsonProperty("count")]
    public int? Count { get; set; }
    /// <summary>
    /// Some activities are not instantaneous and need to be maintained for a period of time.
    /// </summary>
    [JsonProperty("duration")]
    public decimal? Duration { get; set; }
    [JsonProperty("_duration")]
    public Element _Duration { get; set; }
    /// <summary>
    /// Some activities are not instantaneous and need to be maintained for a period of time.
    /// </summary>
    [JsonProperty("durationMax")]
    public decimal? DurationMax { get; set; }
    [JsonProperty("_durationMax")]
    public Element _DurationMax { get; set; }
    /// <summary>
    /// The units of time for the duration, in UCUM units.
    /// </summary>
    [JsonProperty("durationUnits")]
    public string DurationUnits { get; set; }
    [JsonProperty("_durationUnits")]
    public Element _DurationUnits { get; set; }
    /// <summary>
    /// The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided).
    /// </summary>
    [JsonProperty("frequency")]
    public int? Frequency { get; set; }
    /// <summary>
    /// If present, indicates that the frequency is a range - so repeat between [frequency] and [frequencyMax] times within the period or period range.
    /// </summary>
    [JsonProperty("frequencyMax")]
    public int? FrequencyMax { get; set; }
    /// <summary>
    /// Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period.
    /// </summary>
    [JsonProperty("period")]
    public decimal? Period { get; set; }
    [JsonProperty("_period")]
    public Element _Period { get; set; }
    /// <summary>
    /// If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
    /// </summary>
    [JsonProperty("periodMax")]
    public decimal? PeriodMax { get; set; }
    [JsonProperty("_periodMax")]
    public Element _PeriodMax { get; set; }
    /// <summary>
    /// The units of time for the period in UCUM units.
    /// </summary>
    [JsonProperty("periodUnits")]
    public string PeriodUnits { get; set; }
    [JsonProperty("_periodUnits")]
    public Element _PeriodUnits { get; set; }
    /// <summary>
    /// Timings are frequently determined by occurrences such as waking, eating and sleep.
    /// </summary>
    [JsonProperty("when")]
    public string When { get; set; }
    [JsonProperty("_when")]
    public Element _When { get; set; }
  }
  /// <summary>
  /// Code Values for the Timing.repeat.durationUnits field
  /// </summary>
  public static class TimingRepeatDurationUnitsCodes {
    public const string S = "s";
    public const string MIN = "min";
    public const string H = "h";
    public const string D = "d";
    public const string WK = "wk";
    public const string MO = "mo";
    public const string A = "a";
  }
  /// <summary>
  /// Code Values for the Timing.repeat.periodUnits field
  /// </summary>
  public static class TimingRepeatPeriodUnitsCodes {
    public const string S = "s";
    public const string MIN = "min";
    public const string H = "h";
    public const string D = "d";
    public const string WK = "wk";
    public const string MO = "mo";
    public const string A = "a";
  }
  /// <summary>
  /// Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
  /// </summary>
  public class Timing : Element {
    /// <summary>
    /// A code for the timing pattern. Some codes such as BID are ubiquitous, but many institutions define their own additional codes.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// In an MAR, for instance, you need to take a general specification, and turn it into a precise specification.
    /// </summary>
    [JsonProperty("event")]
    public List<string> Event { get; set; }
    [JsonProperty("_event")]
    public List<Element> _Event { get; set; }
    /// <summary>
    /// Many timing schedules are determined by regular repetitions.
    /// </summary>
    [JsonProperty("repeat")]
    public TimingRepeat Repeat { get; set; }
  }
  /// <summary>
  /// A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
  /// </summary>
  public class Account : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Account";
    /// <summary>
    /// Indicates the period of time over which the account is allowed.
    /// </summary>
    [JsonProperty("activePeriod")]
    public Period ActivePeriod { get; set; }
    /// <summary>
    /// Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
    /// </summary>
    [JsonProperty("balance")]
    public Quantity Balance { get; set; }
    /// <summary>
    /// Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
    /// </summary>
    [JsonProperty("coveragePeriod")]
    public Period CoveragePeriod { get; set; }
    /// <summary>
    /// Identifies the currency to which transactions must be converted when crediting or debiting the account.
    /// </summary>
    [JsonProperty("currency")]
    public Coding Currency { get; set; }
    /// <summary>
    /// Provides additional information about what the account tracks and how it is used.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Name used for the account when displaying it to humans in reports, etc.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Indicates the organization, department, etc. with responsibility for the account.
    /// </summary>
    [JsonProperty("owner")]
    public Reference Owner { get; set; }
    /// <summary>
    /// Indicates whether the account is presently used/useable or not.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies the patient, device, practitioner, location or other object the account is associated with.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Categorizes the account for reporting and searching purposes.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Account.status field
  /// </summary>
  public static class AccountStatusCodes {
    public const string ACTIVE = "active";
    public const string INACTIVE = "inactive";
  }
  /// <summary>
  /// Details about each adverse reaction event linked to exposure to the identified Substance.
  /// </summary>
  public class AllergyIntoleranceReaction : BackboneElement {
    /// <summary>
    /// Statement about the degree of clinical certainty that the specific substance was the cause of the manifestation in this reaction event.
    /// </summary>
    [JsonProperty("certainty")]
    public string Certainty { get; set; }
    [JsonProperty("_certainty")]
    public Element _Certainty { get; set; }
    /// <summary>
    /// Text description about the reaction as a whole, including details of the manifestation if required.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Identification of the route by which the subject was exposed to the substance.
    /// </summary>
    [JsonProperty("exposureRoute")]
    public CodeableConcept ExposureRoute { get; set; }
    /// <summary>
    /// Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
    /// </summary>
    [JsonProperty("manifestation")]
    public List<CodeableConcept> Manifestation { get; set; }
    /// <summary>
    /// Additional text about the adverse reaction event not captured in other fields.
    /// </summary>
    [JsonProperty("note")]
    public Annotation Note { get; set; }
    /// <summary>
    /// Record of the date and/or time of the onset of the Reaction.
    /// </summary>
    [JsonProperty("onset")]
    public string Onset { get; set; }
    [JsonProperty("_onset")]
    public Element _Onset { get; set; }
    /// <summary>
    /// Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
    /// </summary>
    [JsonProperty("severity")]
    public string Severity { get; set; }
    [JsonProperty("_severity")]
    public Element _Severity { get; set; }
    /// <summary>
    /// Identification of the specific substance considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different to the substance identified as the cause of the risk, but must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite substance that includes the identified substance. It must be clinically safe to only process the AllergyIntolerance.substance and ignore the AllergyIntolerance.event.substance.
    /// </summary>
    [JsonProperty("substance")]
    public CodeableConcept Substance { get; set; }
  }
  /// <summary>
  /// Code Values for the AllergyIntolerance.reaction.certainty field
  /// </summary>
  public static class AllergyIntoleranceReactionCertaintyCodes {
    public const string UNLIKELY = "unlikely";
    public const string LIKELY = "likely";
    public const string CONFIRMED = "confirmed";
  }
  /// <summary>
  /// Code Values for the AllergyIntolerance.reaction.severity field
  /// </summary>
  public static class AllergyIntoleranceReactionSeverityCodes {
    public const string MILD = "mild";
    public const string MODERATE = "moderate";
    public const string SEVERE = "severe";
  }
  /// <summary>
  /// Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
  /// </summary>
  public class AllergyIntolerance : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "AllergyIntolerance";
    /// <summary>
    /// Category of the identified Substance.
    /// </summary>
    [JsonProperty("category")]
    public string Category { get; set; }
    [JsonProperty("_category")]
    public Element _Category { get; set; }
    /// <summary>
    /// Estimate of the potential clinical harm, or seriousness, of the reaction to the identified Substance.
    /// </summary>
    [JsonProperty("criticality")]
    public string Criticality { get; set; }
    [JsonProperty("_criticality")]
    public Element _Criticality { get; set; }
    /// <summary>
    /// This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Represents the date and/or time of the last known occurrence of a reaction event.
    /// </summary>
    [JsonProperty("lastOccurence")]
    public string LastOccurence { get; set; }
    [JsonProperty("_lastOccurence")]
    public Element _LastOccurence { get; set; }
    /// <summary>
    /// Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
    /// </summary>
    [JsonProperty("note")]
    public Annotation Note { get; set; }
    /// <summary>
    /// Record of the date and/or time of the onset of the Allergy or Intolerance.
    /// </summary>
    [JsonProperty("onset")]
    public string Onset { get; set; }
    [JsonProperty("_onset")]
    public Element _Onset { get; set; }
    /// <summary>
    /// The patient who has the allergy or intolerance.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// Details about each adverse reaction event linked to exposure to the identified Substance.
    /// </summary>
    [JsonProperty("reaction")]
    public List<AllergyIntoleranceReaction> Reaction { get; set; }
    /// <summary>
    /// Date when the sensitivity was recorded.
    /// </summary>
    [JsonProperty("recordedDate")]
    public string RecordedDate { get; set; }
    [JsonProperty("_recordedDate")]
    public Element _RecordedDate { get; set; }
    /// <summary>
    /// Individual who recorded the record and takes responsibility for its conten.
    /// </summary>
    [JsonProperty("recorder")]
    public Reference Recorder { get; set; }
    /// <summary>
    /// The source of the information about the allergy that is recorded.
    /// </summary>
    [JsonProperty("reporter")]
    public Reference Reporter { get; set; }
    /// <summary>
    /// Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified Substance.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Identification of a substance, or a class of substances, that is considered to be responsible for the adverse reaction risk.
    /// </summary>
    [JsonProperty("substance")]
    public CodeableConcept Substance { get; set; }
    /// <summary>
    /// Identification of the underlying physiological mechanism for the reaction risk.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the AllergyIntolerance.category field
  /// </summary>
  public static class AllergyIntoleranceCategoryCodes {
    public const string FOOD = "food";
    public const string MEDICATION = "medication";
    public const string ENVIRONMENT = "environment";
    public const string OTHER = "other";
  }
  /// <summary>
  /// Code Values for the AllergyIntolerance.criticality field
  /// </summary>
  public static class AllergyIntoleranceCriticalityCodes {
    public const string CRITL = "CRITL";
    public const string CRITH = "CRITH";
    public const string CRITU = "CRITU";
  }
  /// <summary>
  /// Code Values for the AllergyIntolerance.status field
  /// </summary>
  public static class AllergyIntoleranceStatusCodes {
    public const string ACTIVE = "active";
    public const string UNCONFIRMED = "unconfirmed";
    public const string CONFIRMED = "confirmed";
    public const string INACTIVE = "inactive";
    public const string RESOLVED = "resolved";
    public const string REFUTED = "refuted";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Code Values for the AllergyIntolerance.type field
  /// </summary>
  public static class AllergyIntoleranceTypeCodes {
    public const string ALLERGY = "allergy";
    public const string INTOLERANCE = "intolerance";
  }
  /// <summary>
  /// List of participants involved in the appointment.
  /// </summary>
  public class AppointmentParticipant : BackboneElement {
    /// <summary>
    /// A Person, Location/HealthcareService or Device that is participating in the appointment.
    /// </summary>
    [JsonProperty("actor")]
    public Reference Actor { get; set; }
    /// <summary>
    /// Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
    /// </summary>
    [JsonProperty("required")]
    public string Required { get; set; }
    [JsonProperty("_required")]
    public Element _Required { get; set; }
    /// <summary>
    /// Participation status of the Patient.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Role of participant in the appointment.
    /// </summary>
    [JsonProperty("type")]
    public List<CodeableConcept> Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Appointment.participant.required field
  /// </summary>
  public static class AppointmentParticipantRequiredCodes {
    public const string REQUIRED = "required";
    public const string OPTIONAL = "optional";
    public const string INFORMATION_ONLY = "information-only";
  }
  /// <summary>
  /// Code Values for the Appointment.participant.status field
  /// </summary>
  public static class AppointmentParticipantStatusCodes {
    public const string ACCEPTED = "accepted";
    public const string DECLINED = "declined";
    public const string TENTATIVE = "tentative";
    public const string NEEDS_ACTION = "needs-action";
  }
  /// <summary>
  /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
  /// </summary>
  public class Appointment : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Appointment";
    /// <summary>
    /// Additional comments about the appointment.
    /// </summary>
    [JsonProperty("comment")]
    public string Comment { get; set; }
    [JsonProperty("_comment")]
    public Element _Comment { get; set; }
    /// <summary>
    /// The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Date/Time that the appointment is to conclude.
    /// </summary>
    [JsonProperty("end")]
    public string End { get; set; }
    [JsonProperty("_end")]
    public Element _End { get; set; }
    /// <summary>
    /// This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).
    /// </summary>
    [JsonProperty("minutesDuration")]
    public uint? MinutesDuration { get; set; }
    /// <summary>
    /// List of participants involved in the appointment.
    /// </summary>
    [JsonProperty("participant")]
    public List<AppointmentParticipant> Participant { get; set; }
    /// <summary>
    /// The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
    /// </summary>
    [JsonProperty("priority")]
    public uint? Priority { get; set; }
    /// <summary>
    /// The reason that this appointment is being scheduled. This is more clinical than administrative.
    /// </summary>
    [JsonProperty("reason")]
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// The slot that this appointment is filling. If provided then the schedule will not be provided as slots are not recursive, and the start/end values MUST be the same as from the slot.
    /// </summary>
    [JsonProperty("slot")]
    public List<Reference> Slot { get; set; }
    /// <summary>
    /// Date/Time that the appointment is to take place.
    /// </summary>
    [JsonProperty("start")]
    public string Start { get; set; }
    [JsonProperty("_start")]
    public Element _Start { get; set; }
    /// <summary>
    /// The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The type of appointment that is being booked (This may also be associated with participants for location, and/or a HealthcareService).
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Appointment.status field
  /// </summary>
  public static class AppointmentStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PENDING = "pending";
    public const string BOOKED = "booked";
    public const string ARRIVED = "arrived";
    public const string FULFILLED = "fulfilled";
    public const string CANCELLED = "cancelled";
    public const string NOSHOW = "noshow";
  }
  /// <summary>
  /// A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
  /// </summary>
  public class AppointmentResponse : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "AppointmentResponse";
    /// <summary>
    /// A Person, Location/HealthcareService or Device that is participating in the appointment.
    /// </summary>
    [JsonProperty("actor")]
    public Reference Actor { get; set; }
    /// <summary>
    /// Appointment that this response is replying to.
    /// </summary>
    [JsonProperty("appointment")]
    public Reference Appointment { get; set; }
    /// <summary>
    /// Additional comments about the appointment.
    /// </summary>
    [JsonProperty("comment")]
    public string Comment { get; set; }
    [JsonProperty("_comment")]
    public Element _Comment { get; set; }
    /// <summary>
    /// This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
    /// </summary>
    [JsonProperty("end")]
    public string End { get; set; }
    [JsonProperty("_end")]
    public Element _End { get; set; }
    /// <summary>
    /// This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
    /// </summary>
    [JsonProperty("participantStatus")]
    public string ParticipantStatus { get; set; }
    [JsonProperty("_participantStatus")]
    public Element _ParticipantStatus { get; set; }
    /// <summary>
    /// Role of participant in the appointment.
    /// </summary>
    [JsonProperty("participantType")]
    public List<CodeableConcept> ParticipantType { get; set; }
    /// <summary>
    /// Date/Time that the appointment is to take place, or requested new start time.
    /// </summary>
    [JsonProperty("start")]
    public string Start { get; set; }
    [JsonProperty("_start")]
    public Element _Start { get; set; }
  }
  /// <summary>
  /// Code Values for the AppointmentResponse.participantStatus field
  /// </summary>
  public static class AppointmentResponseParticipantStatusCodes {
    public const string ACCEPTED = "accepted";
    public const string DECLINED = "declined";
    public const string TENTATIVE = "tentative";
    public const string IN_PROCESS = "in-process";
    public const string COMPLETED = "completed";
    public const string NEEDS_ACTION = "needs-action";
  }
  /// <summary>
  /// The event must be identified.
  /// </summary>
  public class AuditEventEvent : BackboneElement {
    /// <summary>
    /// This broadly indicates what kind of action was done on the Participant Object.
    /// </summary>
    [JsonProperty("action")]
    public string Action { get; set; }
    [JsonProperty("_action")]
    public Element _Action { get; set; }
    /// <summary>
    /// This ties an event to a specific date and time. Security audits typically require a consistent time base (e.g. UTC), to eliminate time-zone issues arising from geographical distribution.
    /// </summary>
    [JsonProperty("dateTime")]
    public string DateTime { get; set; }
    [JsonProperty("_dateTime")]
    public Element _DateTime { get; set; }
    /// <summary>
    /// Indicates whether the event succeeded or failed.
    /// </summary>
    [JsonProperty("outcome")]
    public string Outcome { get; set; }
    [JsonProperty("_outcome")]
    public Element _Outcome { get; set; }
    /// <summary>
    /// A free text description of the outcome of the event.
    /// </summary>
    [JsonProperty("outcomeDesc")]
    public string OutcomeDesc { get; set; }
    [JsonProperty("_outcomeDesc")]
    public Element _OutcomeDesc { get; set; }
    /// <summary>
    /// The purposeOfUse (reason) that was used during the event being recorded.
    /// </summary>
    [JsonProperty("purposeOfEvent")]
    public List<Coding> PurposeOfEvent { get; set; }
    /// <summary>
    /// This field enables queries of messages by implementation-defined event categories.
    /// </summary>
    [JsonProperty("subtype")]
    public List<Coding> Subtype { get; set; }
    /// <summary>
    /// This identifies the performed function. For "Execute" Event Action Code audit records, this identifies the application function performed.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// Logical network location for application activity, if the activity has a network location.
  /// </summary>
  public class AuditEventParticipantNetwork : BackboneElement {
    /// <summary>
    /// This datum identifies the user's network access point, which may be distinct from the server that performed the action. It is an optional value that may be used to group events recorded on separate servers for analysis of a specific network access point's data access across all servers.
    /// </summary>
    [JsonProperty("address")]
    public string Address { get; set; }
    [JsonProperty("_address")]
    public Element _Address { get; set; }
    /// <summary>
    /// This datum identifies the type of network access point identifier of the user device for the audit event. It is an optional value that may be used to group events recorded on separate servers for analysis of access according to a network access point's type.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// The event has one or more active participants.
  /// </summary>
  public class AuditEventParticipant : BackboneElement {
    /// <summary>
    /// In some situations a human user may authenticate with one identity but, to access a specific application system, may use a synonymous identify. For example, some "single sign on" implementations will do this. The alternative identifier would then be the original identify  used for authentication, and the User ID is the one known to and used by the application.
    /// </summary>
    [JsonProperty("altId")]
    public string AltId { get; set; }
    [JsonProperty("_altId")]
    public Element _AltId { get; set; }
    /// <summary>
    /// Where the event occurred.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// Usually, this is used instead of specifying a network address. This field is not used for Media Id (i.e. the serial number of a CD).
    /// </summary>
    [JsonProperty("media")]
    public Coding Media { get; set; }
    /// <summary>
    /// The User ID and Authorization User ID may be internal or otherwise obscure values. This field assists the auditor in identifying the actual user.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Logical network location for application activity, if the activity has a network location.
    /// </summary>
    [JsonProperty("network")]
    public AuditEventParticipantNetwork Network { get; set; }
    /// <summary>
    /// This value is used retrospectively to determine the authorization policies.
    /// </summary>
    [JsonProperty("policy")]
    public List<string> Policy { get; set; }
    [JsonProperty("_policy")]
    public List<Element> _Policy { get; set; }
    /// <summary>
    /// The reason (purpose of use), specific to this participant, that was used during the event being recorded.
    /// </summary>
    [JsonProperty("purposeOfUse")]
    public List<Coding> PurposeOfUse { get; set; }
    /// <summary>
    /// This field ties an audit event to a specific resource.
    /// </summary>
    [JsonProperty("reference")]
    public Reference Reference { get; set; }
    /// <summary>
    /// This value is used to distinguish between requestor-users and recipient-users. For example, one person may initiate a report-output to be sent to another user.
    /// </summary>
    [JsonProperty("requestor")]
    public bool Requestor { get; set; }
    /// <summary>
    /// This value ties an audited event to a user's role(s). It is an optional value that might be used to group events for analysis by user functional role categories.
    /// </summary>
    [JsonProperty("role")]
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// This field ties an audit event to a specific user.
    /// </summary>
    [JsonProperty("userId")]
    public Identifier UserId { get; set; }
  }
  /// <summary>
  /// The event is reported by one source.
  /// </summary>
  public class AuditEventSource : BackboneElement {
    /// <summary>
    /// This field ties the event to a specific source system. It may be used to group events for analysis according to where the event was detected.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// This value differentiates among the sites in a multi-site enterprise health information system.
    /// </summary>
    [JsonProperty("site")]
    public string Site { get; set; }
    [JsonProperty("_site")]
    public Element _Site { get; set; }
    /// <summary>
    /// This field indicates which type of source is identified by the Audit Source ID. It is an optional value that may be used to group events for analysis according to the type of source where the event occurred.
    /// </summary>
    [JsonProperty("type")]
    public List<Coding> Type { get; set; }
  }
  /// <summary>
  /// Additional Information about the Object.
  /// </summary>
  public class AuditEventObjectDetail : BackboneElement {
    /// <summary>
    /// Name of the property.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// Property value.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// The event may have other objects involved.
  /// </summary>
  public class AuditEventObject : BackboneElement {
    /// <summary>
    /// Text that describes the object in more detail.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Additional Information about the Object.
    /// </summary>
    [JsonProperty("detail")]
    public List<AuditEventObjectDetail> Detail { get; set; }
    /// <summary>
    /// Identifies a specific instance of the participant object. The reference should always be version specific.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Institutional policies for privacy and security may optionally fall under different accountability rules based on data life cycle. This provides a differentiating value for those cases.
    /// </summary>
    [JsonProperty("lifecycle")]
    public Coding Lifecycle { get; set; }
    /// <summary>
    /// An instance-specific descriptor of the Participant Object ID audited, such as a person's name.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// For query events it may be necessary to capture the actual query input to the query process in order to identify the specific event. Because of differences among query implementations and data encoding for them, this is a base 64 encoded data blob. It may be subsequently decoded or interpreted by downstream audit analysis processing.
    /// </summary>
    [JsonProperty("query")]
    public string Query { get; set; }
    [JsonProperty("_query")]
    public Element _Query { get; set; }
    /// <summary>
    /// Identifies a specific instance of the participant object. The reference should always be version specific.
    /// </summary>
    [JsonProperty("reference")]
    public Reference Reference { get; set; }
    /// <summary>
    /// For some detailed audit analysis it may be necessary to indicate a more granular type of participant, based on the application role it serves.
    /// </summary>
    [JsonProperty("role")]
    public Coding Role { get; set; }
    /// <summary>
    /// This field identifies the security labels for a specific instance of an object, such as a patient, to detect/track privacy and security issues.
    /// </summary>
    [JsonProperty("securityLabel")]
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// To describe the object being acted upon. In addition to queries on the subject of the action in an auditable event, it is also important to be able to query on the object type for the action.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
  /// </summary>
  public class AuditEvent : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "AuditEvent";
    /// <summary>
    /// The event must be identified.
    /// </summary>
    [JsonProperty("event")]
    public AuditEventEvent Event { get; set; }
    /// <summary>
    /// The event may have other objects involved.
    /// </summary>
    [JsonProperty("object")]
    public List<AuditEventObject> Object { get; set; }
    /// <summary>
    /// The event has one or more active participants.
    /// </summary>
    [JsonProperty("participant")]
    public List<AuditEventParticipant> Participant { get; set; }
    /// <summary>
    /// The event is reported by one source.
    /// </summary>
    [JsonProperty("source")]
    public AuditEventSource Source { get; set; }
  }
  /// <summary>
  /// Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
  /// </summary>
  public class Basic : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Basic";
    /// <summary>
    /// Needed for partitioning the resource.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Must be able to distinguish different types of "basic" resources.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Allows ordering resource instances by time.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// Identifier assigned to the resource for business purposes, outside the context of FHIR.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Needed for partitioning the resource by Patient.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
  /// </summary>
  public class Binary : Resource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Binary";
    /// <summary>
    /// The actual content, base64 encoded.
    /// </summary>
    [JsonProperty("content")]
    public string Content { get; set; }
    [JsonProperty("_content")]
    public Element _Content { get; set; }
    /// <summary>
    /// MimeType of the binary content represented as a standard MimeType (BCP 13).
    /// </summary>
    [JsonProperty("contentType")]
    public string ContentType { get; set; }
    [JsonProperty("_contentType")]
    public Element _ContentType { get; set; }
  }
  /// <summary>
  /// Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
  /// </summary>
  public class BodySite : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "BodySite";
    /// <summary>
    /// Named anatomical location - ideally coded where possible.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Description of anatomical location.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Identifier for this instance of the anatomical location.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Image or images used to identify a location.
    /// </summary>
    [JsonProperty("image")]
    public List<Attachment> Image { get; set; }
    /// <summary>
    /// Modifier to refine the anatomical location.  These include modifiers for laterality, relative location, directionality, number, and plane.
    /// </summary>
    [JsonProperty("modifier")]
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// The person to which the body site belongs.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
  }
  /// <summary>
  /// A series of links that provide context to this bundle.
  /// </summary>
  public class BundleLink : BackboneElement {
    /// <summary>
    /// A name which details the functional use for this link - see [[http://www.iana.org/assignments/link-relations/link-relations.xhtml]].
    /// </summary>
    [JsonProperty("relation")]
    public string Relation { get; set; }
    [JsonProperty("_relation")]
    public Element _Relation { get; set; }
    /// <summary>
    /// The reference details for the link.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Information about the search process that lead to the creation of this entry.
  /// </summary>
  public class BundleEntrySearch : BackboneElement {
    /// <summary>
    /// Why this entry is in the result set - whether it's included as a match or because of an _include requirement.
    /// </summary>
    [JsonProperty("mode")]
    public string Mode { get; set; }
    [JsonProperty("_mode")]
    public Element _Mode { get; set; }
    /// <summary>
    /// When searching, the server's search ranking score for the entry.
    /// </summary>
    [JsonProperty("score")]
    public decimal? Score { get; set; }
    [JsonProperty("_score")]
    public Element _Score { get; set; }
  }
  /// <summary>
  /// Code Values for the Bundle.entry.search.mode field
  /// </summary>
  public static class BundleEntrySearchModeCodes {
    public const string MATCH = "match";
    public const string INCLUDE = "include";
    public const string OUTCOME = "outcome";
  }
  /// <summary>
  /// Additional information about how this entry should be processed as part of a transaction.
  /// </summary>
  public class BundleEntryRequest : BackboneElement {
    /// <summary>
    /// Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
    /// </summary>
    [JsonProperty("ifMatch")]
    public string IfMatch { get; set; }
    [JsonProperty("_ifMatch")]
    public Element _IfMatch { get; set; }
    /// <summary>
    /// Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
    /// </summary>
    [JsonProperty("ifModifiedSince")]
    public string IfModifiedSince { get; set; }
    [JsonProperty("_ifModifiedSince")]
    public Element _IfModifiedSince { get; set; }
    /// <summary>
    /// Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
    /// </summary>
    [JsonProperty("ifNoneExist")]
    public string IfNoneExist { get; set; }
    [JsonProperty("_ifNoneExist")]
    public Element _IfNoneExist { get; set; }
    /// <summary>
    /// If the ETag values match, return a 304 Not modified status. See the API documentation for ["Conditional Read"](http.html#cread).
    /// </summary>
    [JsonProperty("ifNoneMatch")]
    public string IfNoneMatch { get; set; }
    [JsonProperty("_ifNoneMatch")]
    public Element _IfNoneMatch { get; set; }
    /// <summary>
    /// The HTTP verb for this entry in either a update history, or a transaction/ transaction response.
    /// </summary>
    [JsonProperty("method")]
    public string Method { get; set; }
    [JsonProperty("_method")]
    public Element _Method { get; set; }
    /// <summary>
    /// The URL for this entry, relative to the root (the address to which the request is posted).
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Code Values for the Bundle.entry.request.method field
  /// </summary>
  public static class BundleEntryRequestMethodCodes {
    public const string GET = "GET";
    public const string POST = "POST";
    public const string PUT = "PUT";
    public const string DELETE = "DELETE";
  }
  /// <summary>
  /// Additional information about how this entry should be processed as part of a transaction.
  /// </summary>
  public class BundleEntryResponse : BackboneElement {
    /// <summary>
    /// The etag for the resource, it the operation for the entry produced a versioned resource.
    /// </summary>
    [JsonProperty("etag")]
    public string Etag { get; set; }
    [JsonProperty("_etag")]
    public Element _Etag { get; set; }
    /// <summary>
    /// The date/time that the resource was modified on the server.
    /// </summary>
    [JsonProperty("lastModified")]
    public string LastModified { get; set; }
    [JsonProperty("_lastModified")]
    public Element _LastModified { get; set; }
    /// <summary>
    /// The location header created by processing this operation.
    /// </summary>
    [JsonProperty("location")]
    public string Location { get; set; }
    [JsonProperty("_location")]
    public Element _Location { get; set; }
    /// <summary>
    /// The status code returned by processing this entry.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
  /// </summary>
  public class BundleEntry : BackboneElement {
    /// <summary>
    /// The Absolute URL for the resource. This must be provided for all resources. The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource.
    /// </summary>
    [JsonProperty("fullUrl")]
    public string FullUrl { get; set; }
    [JsonProperty("_fullUrl")]
    public Element _FullUrl { get; set; }
    /// <summary>
    /// A series of links that provide context to this entry.
    /// </summary>
    [JsonProperty("link")]
    public List<BundleLink> Link { get; set; }
    /// <summary>
    /// Additional information about how this entry should be processed as part of a transaction.
    /// </summary>
    [JsonProperty("request")]
    public BundleEntryRequest Request { get; set; }
    /// <summary>
    /// The Resources for the entry.
    /// </summary>
    [JsonProperty("resource")]
    public Resource Resource { get; set; }
    /// <summary>
    /// Additional information about how this entry should be processed as part of a transaction.
    /// </summary>
    [JsonProperty("response")]
    public BundleEntryResponse Response { get; set; }
    /// <summary>
    /// Information about the search process that lead to the creation of this entry.
    /// </summary>
    [JsonProperty("search")]
    public BundleEntrySearch Search { get; set; }
  }
  /// <summary>
  /// A container for a collection of resources.
  /// </summary>
  public class Bundle : Resource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Bundle";
    /// <summary>
    /// An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
    /// </summary>
    [JsonProperty("entry")]
    public List<BundleEntry> Entry { get; set; }
    /// <summary>
    /// A series of links that provide context to this bundle.
    /// </summary>
    [JsonProperty("link")]
    public List<BundleLink> Link { get; set; }
    /// <summary>
    /// This element allows capturing signatures on documents. It also allows signatures on messages, transactions or even query responses. It may support content-authentication, non-repudiation or other business cases. This is primarily relevant where the bundle may travel through multiple hops or via other mechanisms where HTTPS non-repudiation is insufficient.
    /// </summary>
    [JsonProperty("signature")]
    public Signature Signature { get; set; }
    /// <summary>
    /// If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).
    /// </summary>
    [JsonProperty("total")]
    public uint? Total { get; set; }
    /// <summary>
    /// Indicates the purpose of this bundle- how it was intended to be used.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Bundle.type field
  /// </summary>
  public static class BundleTypeCodes {
    public const string DOCUMENT = "document";
    public const string MESSAGE = "message";
    public const string TRANSACTION = "transaction";
    public const string TRANSACTION_RESPONSE = "transaction-response";
    public const string BATCH = "batch";
    public const string BATCH_RESPONSE = "batch-response";
    public const string HISTORY = "history";
    public const string SEARCHSET = "searchset";
    public const string COLLECTION = "collection";
  }
  /// <summary>
  /// Identifies CarePlans with some sort of formal relationship to the current plan.
  /// </summary>
  public class CarePlanRelatedPlan : BackboneElement {
    /// <summary>
    /// Identifies the type of relationship this plan has to the target plan.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// A reference to the plan to which a relationship is asserted.
    /// </summary>
    [JsonProperty("plan")]
    public Reference Plan { get; set; }
  }
  /// <summary>
  /// Code Values for the CarePlan.relatedPlan.code field
  /// </summary>
  public static class CarePlanRelatedPlanCodeCodes {
    public const string INCLUDES = "includes";
    public const string REPLACES = "replaces";
    public const string FULFILLS = "fulfills";
  }
  /// <summary>
  /// Allows representation of care teams, helps scope care plan.  In some cases may be a determiner of access permissions.
  /// </summary>
  public class CarePlanParticipant : BackboneElement {
    /// <summary>
    /// The specific person or organization who is participating/expected to participate in the care plan.
    /// </summary>
    [JsonProperty("member")]
    public Reference Member { get; set; }
    /// <summary>
    /// Indicates specific responsibility of an individual within the care plan; e.g. "Primary physician", "Team coordinator", "Caregiver", etc.
    /// </summary>
    [JsonProperty("role")]
    public CodeableConcept Role { get; set; }
  }
  /// <summary>
  /// Details in a simple form for generic care plan systems.
  /// </summary>
  public class CarePlanActivityDetail : BackboneElement {
    /// <summary>
    /// May determine what types of extensions are permitted.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Allows matching performed to planned as well as validation against protocols.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Allows rough dose checking.
    /// </summary>
    [JsonProperty("dailyAmount")]
    public Quantity DailyAmount { get; set; }
    /// <summary>
    /// This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// So that participants know the link explicitly.
    /// </summary>
    [JsonProperty("goal")]
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// Helps in planning of activity.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// Helps in planning of activity.
    /// </summary>
    [JsonProperty("performer")]
    public List<Reference> Performer { get; set; }
    /// <summary>
    /// Identifies the food, drug or other product to be consumed or supplied in the activity.
    /// </summary>
    [JsonProperty("productCodeableConcept")]
    public CodeableConcept ProductCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the food, drug or other product to be consumed or supplied in the activity.
    /// </summary>
    [JsonProperty("productReference")]
    public Reference ProductReference { get; set; }
    /// <summary>
    /// Captures intention to not do something that may have been previously typical.
    /// </summary>
    [JsonProperty("prohibited")]
    public bool Prohibited { get; set; }
    /// <summary>
    /// Identifies the quantity expected to be supplied, administered or consumed by the subject.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Provides the rationale that drove the inclusion of this particular activity as part of the plan.
    /// </summary>
    [JsonProperty("reasonCode")]
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan.
    /// </summary>
    [JsonProperty("reasonReference")]
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// Allows prompting for activities and detection of missed planned activities.
    /// </summary>
    [JsonProperty("scheduledTiming")]
    public Timing ScheduledTiming { get; set; }
    /// <summary>
    /// Allows prompting for activities and detection of missed planned activities.
    /// </summary>
    [JsonProperty("scheduledPeriod")]
    public Period ScheduledPeriod { get; set; }
    /// <summary>
    /// Allows prompting for activities and detection of missed planned activities.
    /// </summary>
    [JsonProperty("scheduledString")]
    public string ScheduledString { get; set; }
    [JsonProperty("_scheduledString")]
    public Element _ScheduledString { get; set; }
    /// <summary>
    /// Indicates progress against the plan, whether the activity is still relevant for the plan.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
    /// </summary>
    [JsonProperty("statusReason")]
    public CodeableConcept StatusReason { get; set; }
  }
  /// <summary>
  /// Code Values for the CarePlan.activity.detail.status field
  /// </summary>
  public static class CarePlanActivityDetailStatusCodes {
    public const string NOT_STARTED = "not-started";
    public const string SCHEDULED = "scheduled";
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// Allows systems to prompt for performance of planned activities, and validate plans against best practice.
  /// </summary>
  public class CarePlanActivity : BackboneElement {
    /// <summary>
    /// Links plan to resulting actions.
    /// </summary>
    [JsonProperty("actionResulting")]
    public List<Reference> ActionResulting { get; set; }
    /// <summary>
    /// Details in a simple form for generic care plan systems.
    /// </summary>
    [JsonProperty("detail")]
    public CarePlanActivityDetail Detail { get; set; }
    /// <summary>
    /// Can be used to capture information about adherence, progress, concerns, etc.
    /// </summary>
    [JsonProperty("progress")]
    public List<Annotation> Progress { get; set; }
    /// <summary>
    /// Details in a form consistent with other applications and contexts of use.
    /// </summary>
    [JsonProperty("reference")]
    public Reference Reference { get; set; }
  }
  /// <summary>
  /// Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
  /// </summary>
  public class CarePlan : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "CarePlan";
    /// <summary>
    /// Allows systems to prompt for performance of planned activities, and validate plans against best practice.
    /// </summary>
    [JsonProperty("activity")]
    public List<CarePlanActivity> Activity { get; set; }
    /// <summary>
    /// Links plan to the conditions it manages.  Also scopes plans - multiple plans may exist addressing different concerns.
    /// </summary>
    [JsonProperty("addresses")]
    public List<Reference> Addresses { get; set; }
    /// <summary>
    /// Identifies the individual(s) or ogranization who is responsible for the content of the care plan.
    /// </summary>
    [JsonProperty("author")]
    public List<Reference> Author { get; set; }
    /// <summary>
    /// Used for filtering what plan(s) are retrieved and displayed to different types of users.
    /// </summary>
    [JsonProperty("category")]
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Identifies the context in which this particular CarePlan is defined.
    /// </summary>
    [JsonProperty("context")]
    public Reference Context { get; set; }
    /// <summary>
    /// Provides more detail than conveyed by category.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Provides context for plan.  Allows plan effectiveness to be evaluated by clinicians.
    /// </summary>
    [JsonProperty("goal")]
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Indicates how current the plan is.
    /// </summary>
    [JsonProperty("modified")]
    public string Modified { get; set; }
    [JsonProperty("_modified")]
    public Element _Modified { get; set; }
    /// <summary>
    /// Used to capture information that applies to the plan as a whole that doesn't fit into discrete elements.
    /// </summary>
    [JsonProperty("note")]
    public Annotation Note { get; set; }
    /// <summary>
    /// Allows representation of care teams, helps scope care plan.  In some cases may be a determiner of access permissions.
    /// </summary>
    [JsonProperty("participant")]
    public List<CarePlanParticipant> Participant { get; set; }
    /// <summary>
    /// Allows tracking what plan(s) are in effect at a particular time.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Identifies CarePlans with some sort of formal relationship to the current plan.
    /// </summary>
    [JsonProperty("relatedPlan")]
    public List<CarePlanRelatedPlan> RelatedPlan { get; set; }
    /// <summary>
    /// Allows clinicians to determine whether the plan is actionable or not.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies the patient or group whose intended care is described by the plan.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Identifies barriers and other considerations associated with the care plan.
    /// </summary>
    [JsonProperty("support")]
    public List<Reference> Support { get; set; }
  }
  /// <summary>
  /// Code Values for the CarePlan.status field
  /// </summary>
  public static class CarePlanStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// The party to be reimbursed for the services.
  /// </summary>
  public class ClaimPayee : BackboneElement {
    /// <summary>
    /// The organization who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// The person other than the subscriber who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    /// </summary>
    [JsonProperty("person")]
    public Reference Person { get; set; }
    /// <summary>
    /// The provider who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    /// </summary>
    [JsonProperty("provider")]
    public Reference Provider { get; set; }
    /// <summary>
    /// Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// Ordered list of patient diagnosis for which care is sought.
  /// </summary>
  public class ClaimDiagnosis : BackboneElement {
    /// <summary>
    /// Required to adjudicate services rendered to condition presented.
    /// </summary>
    [JsonProperty("diagnosis")]
    public Coding Diagnosis { get; set; }
    /// <summary>
    /// Required to maintain order of the diagnoses.
    /// </summary>
    [JsonProperty("sequence")]
    public uint Sequence { get; set; }
  }
  /// <summary>
  /// Health care programs and insurers are significant payors of health service costs.
  /// </summary>
  public class ClaimCoverage : BackboneElement {
    /// <summary>
    /// The contract number of a business agreement which describes the terms and conditions.
    /// </summary>
    [JsonProperty("businessArrangement")]
    public string BusinessArrangement { get; set; }
    [JsonProperty("_businessArrangement")]
    public Element _BusinessArrangement { get; set; }
    /// <summary>
    /// Used by downstream payers to determine what balance remains and the net payable.
    /// </summary>
    [JsonProperty("claimResponse")]
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// Need to identify the issuer to target for processing and for coordination of benefit processing.
    /// </summary>
    [JsonProperty("coverage")]
    public Reference Coverage { get; set; }
    /// <summary>
    /// To identify which coverage is being adjudicated.
    /// </summary>
    [JsonProperty("focal")]
    public bool Focal { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// To provide any pre=determination or prior authorization reference.
    /// </summary>
    [JsonProperty("preAuthRef")]
    public List<string> PreAuthRef { get; set; }
    [JsonProperty("_preAuthRef")]
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// To determine the relationship between the patient and the subscriber.
    /// </summary>
    [JsonProperty("relationship")]
    public Coding Relationship { get; set; }
    /// <summary>
    /// To maintain order of the coverages.
    /// </summary>
    [JsonProperty("sequence")]
    public uint Sequence { get; set; }
  }
  /// <summary>
  /// Third tier of goods and services.
  /// </summary>
  public class ClaimItemDetailSubDetail : BackboneElement {
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("factor")]
    public decimal? Factor { get; set; }
    [JsonProperty("_factor")]
    public Element _Factor { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("net")]
    public Quantity Net { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("points")]
    public decimal? Points { get; set; }
    [JsonProperty("_points")]
    public Element _Points { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    [JsonProperty("sequence")]
    public uint Sequence { get; set; }
    /// <summary>
    /// The fee for an additional  service or product or charge.
    /// </summary>
    [JsonProperty("service")]
    public Coding Service { get; set; }
    /// <summary>
    /// The type of product or service.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
    /// <summary>
    /// The UDI code and issuer if applicable for the supplied product.
    /// </summary>
    [JsonProperty("udi")]
    public Coding Udi { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("unitPrice")]
    public Quantity UnitPrice { get; set; }
  }
  /// <summary>
  /// Second tier of goods and services.
  /// </summary>
  public class ClaimItemDetail : BackboneElement {
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("factor")]
    public decimal? Factor { get; set; }
    [JsonProperty("_factor")]
    public Element _Factor { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("net")]
    public Quantity Net { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("points")]
    public decimal? Points { get; set; }
    [JsonProperty("_points")]
    public Element _Points { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    [JsonProperty("sequence")]
    public uint Sequence { get; set; }
    /// <summary>
    /// If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
    /// </summary>
    [JsonProperty("service")]
    public Coding Service { get; set; }
    /// <summary>
    /// Third tier of goods and services.
    /// </summary>
    [JsonProperty("subDetail")]
    public List<ClaimItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// The type of product or service.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
    /// <summary>
    /// The UDI code and issuer if applicable for the supplied product.
    /// </summary>
    [JsonProperty("udi")]
    public Coding Udi { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("unitPrice")]
    public Quantity UnitPrice { get; set; }
  }
  /// <summary>
  /// The materials and placement date of prior fixed prosthesis.
  /// </summary>
  public class ClaimItemProsthesis : BackboneElement {
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    [JsonProperty("initial")]
    public bool? Initial { get; set; }
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    [JsonProperty("priorDate")]
    public string PriorDate { get; set; }
    [JsonProperty("_priorDate")]
    public Element _PriorDate { get; set; }
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    [JsonProperty("priorMaterial")]
    public Coding PriorMaterial { get; set; }
  }
  /// <summary>
  /// First tier of goods and services.
  /// </summary>
  public class ClaimItem : BackboneElement {
    /// <summary>
    /// Physical service site on the patient (limb, tooth, etc.).
    /// </summary>
    [JsonProperty("bodySite")]
    public Coding BodySite { get; set; }
    /// <summary>
    /// Second tier of goods and services.
    /// </summary>
    [JsonProperty("detail")]
    public List<ClaimItemDetail> Detail { get; set; }
    /// <summary>
    /// Diagnosis applicable for this service or product line.
    /// </summary>
    [JsonProperty("diagnosisLinkId")]
    public List<uint?> DiagnosisLinkId { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("factor")]
    public decimal? Factor { get; set; }
    [JsonProperty("_factor")]
    public Element _Factor { get; set; }
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    [JsonProperty("modifier")]
    public List<Coding> Modifier { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("net")]
    public Quantity Net { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    [JsonProperty("points")]
    public decimal? Points { get; set; }
    [JsonProperty("_points")]
    public Element _Points { get; set; }
    /// <summary>
    /// The materials and placement date of prior fixed prosthesis.
    /// </summary>
    [JsonProperty("prosthesis")]
    public ClaimItemProsthesis Prosthesis { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("provider")]
    public Reference Provider { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    [JsonProperty("sequence")]
    public uint Sequence { get; set; }
    /// <summary>
    /// If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
    /// </summary>
    [JsonProperty("service")]
    public Coding Service { get; set; }
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("serviceDate")]
    public string ServiceDate { get; set; }
    [JsonProperty("_serviceDate")]
    public Element _ServiceDate { get; set; }
    /// <summary>
    /// A region or surface of the site, e.g. limb region or tooth surface(s).
    /// </summary>
    [JsonProperty("subSite")]
    public List<Coding> SubSite { get; set; }
    /// <summary>
    /// The type of product or service.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
    /// <summary>
    /// The UDI code and issuer if applicable for the supplied product.
    /// </summary>
    [JsonProperty("udi")]
    public Coding Udi { get; set; }
    /// <summary>
    /// If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
    /// </summary>
    [JsonProperty("unitPrice")]
    public Quantity UnitPrice { get; set; }
  }
  /// <summary>
  /// The list of missing teeth may influence the adjudication of services for example with Bridges.
  /// </summary>
  public class ClaimMissingTeeth : BackboneElement {
    /// <summary>
    /// Some services and adjudications require this information.
    /// </summary>
    [JsonProperty("extractionDate")]
    public string ExtractionDate { get; set; }
    [JsonProperty("_extractionDate")]
    public Element _ExtractionDate { get; set; }
    /// <summary>
    /// Provides the reason for the missing tooth.
    /// </summary>
    [JsonProperty("reason")]
    public Coding Reason { get; set; }
    /// <summary>
    /// Provides the tooth number of the missing tooth.
    /// </summary>
    [JsonProperty("tooth")]
    public Coding Tooth { get; set; }
  }
  /// <summary>
  /// A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
  /// </summary>
  public class Claim : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Claim";
    /// <summary>
    /// Coverage may be dependent on accidents.
    /// </summary>
    [JsonProperty("accident")]
    public string Accident { get; set; }
    [JsonProperty("_accident")]
    public Element _Accident { get; set; }
    /// <summary>
    /// Coverage may be dependent on the type of accident.
    /// </summary>
    [JsonProperty("accidentType")]
    public Coding AccidentType { get; set; }
    /// <summary>
    /// Code to indicate that Xrays, images, emails, documents, models or attachments are being sent in support of this submission.
    /// </summary>
    [JsonProperty("additionalMaterials")]
    public List<Coding> AdditionalMaterials { get; set; }
    /// <summary>
    /// List of patient conditions for which care is sought.
    /// </summary>
    [JsonProperty("condition")]
    public List<Coding> Condition { get; set; }
    /// <summary>
    /// Health care programs and insurers are significant payors of health service costs.
    /// </summary>
    [JsonProperty("coverage")]
    public List<ClaimCoverage> Coverage { get; set; }
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// Ordered list of patient diagnosis for which care is sought.
    /// </summary>
    [JsonProperty("diagnosis")]
    public List<ClaimDiagnosis> Diagnosis { get; set; }
    /// <summary>
    /// Person who created the invoice/claim/pre-determination or pre-authorization.
    /// </summary>
    [JsonProperty("enterer")]
    public Reference Enterer { get; set; }
    /// <summary>
    /// To determine extenuating circumstances for coverage.
    /// </summary>
    [JsonProperty("exception")]
    public List<Coding> Exception { get; set; }
    /// <summary>
    /// Facility where the services were provided.
    /// </summary>
    [JsonProperty("facility")]
    public Reference Facility { get; set; }
    /// <summary>
    /// In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.
    /// </summary>
    [JsonProperty("fundsReserve")]
    public Coding FundsReserve { get; set; }
    /// <summary>
    /// The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Coverage may be modified based on exception information provided.
    /// </summary>
    [JsonProperty("interventionException")]
    public List<Coding> InterventionException { get; set; }
    /// <summary>
    /// First tier of goods and services.
    /// </summary>
    [JsonProperty("item")]
    public List<ClaimItem> Item { get; set; }
    /// <summary>
    /// The list of missing teeth may influence the adjudication of services for example with Bridges.
    /// </summary>
    [JsonProperty("missingTeeth")]
    public List<ClaimMissingTeeth> MissingTeeth { get; set; }
    /// <summary>
    /// The organization which is responsible for the bill, claim pre-determination, pre-authorization.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Original prescription to support the dispensing of pharmacy services, medications or products.
    /// </summary>
    [JsonProperty("originalPrescription")]
    public Reference OriginalPrescription { get; set; }
    /// <summary>
    /// The version of the specification from which the original instance was created.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Patient Resource.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The party to be reimbursed for the services.
    /// </summary>
    [JsonProperty("payee")]
    public ClaimPayee Payee { get; set; }
    /// <summary>
    /// For type=Pharmacy and Vision only.
    /// </summary>
    [JsonProperty("prescription")]
    public Reference Prescription { get; set; }
    /// <summary>
    /// Immediate (stat), best effort (normal), deferred (deferred).
    /// </summary>
    [JsonProperty("priority")]
    public Coding Priority { get; set; }
    /// <summary>
    /// The provider which is responsible for the bill, claim pre-determination, pre-authorization.
    /// </summary>
    [JsonProperty("provider")]
    public Reference Provider { get; set; }
    /// <summary>
    /// The referral resource which lists the date, practitioner, reason and other supporting information.
    /// </summary>
    [JsonProperty("referral")]
    public Reference Referral { get; set; }
    /// <summary>
    /// The version of the specification on which this instance relies.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
    /// <summary>
    /// Often required for over-age dependents.
    /// </summary>
    [JsonProperty("school")]
    public string School { get; set; }
    [JsonProperty("_school")]
    public Element _School { get; set; }
    /// <summary>
    /// Insurer Identifier, typical BIN number (6 digit).
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
    /// <summary>
    /// The category of claim this is.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).
    /// </summary>
    [JsonProperty("use")]
    public string Use { get; set; }
    [JsonProperty("_use")]
    public Element _Use { get; set; }
  }
  /// <summary>
  /// Code Values for the Claim.type field
  /// </summary>
  public static class ClaimTypeCodes {
    public const string INSTITUTIONAL = "institutional";
    public const string ORAL = "oral";
    public const string PHARMACY = "pharmacy";
    public const string PROFESSIONAL = "professional";
    public const string VISION = "vision";
  }
  /// <summary>
  /// Code Values for the Claim.use field
  /// </summary>
  public static class ClaimUseCodes {
    public const string COMPLETE = "complete";
    public const string PROPOSED = "proposed";
    public const string EXPLORATORY = "exploratory";
    public const string OTHER = "other";
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  public class ClaimResponseItemAdjudication : BackboneElement {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    [JsonProperty("code")]
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    [JsonProperty("value")]
    public decimal? Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  public class ClaimResponseItemDetailAdjudication : BackboneElement {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    [JsonProperty("code")]
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    [JsonProperty("value")]
    public decimal? Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  public class ClaimResponseItemDetailSubDetailAdjudication : BackboneElement {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    [JsonProperty("code")]
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    [JsonProperty("value")]
    public decimal? Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// The third tier service adjudications for submitted services.
  /// </summary>
  public class ClaimResponseItemDetailSubDetail : BackboneElement {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    [JsonProperty("adjudication")]
    public List<ClaimResponseItemDetailSubDetailAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    [JsonProperty("sequenceLinkId")]
    public uint SequenceLinkId { get; set; }
  }
  /// <summary>
  /// The second tier service adjudications for submitted services.
  /// </summary>
  public class ClaimResponseItemDetail : BackboneElement {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    [JsonProperty("adjudication")]
    public List<ClaimResponseItemDetailAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    [JsonProperty("sequenceLinkId")]
    public uint SequenceLinkId { get; set; }
    /// <summary>
    /// The third tier service adjudications for submitted services.
    /// </summary>
    [JsonProperty("subDetail")]
    public List<ClaimResponseItemDetailSubDetail> SubDetail { get; set; }
  }
  /// <summary>
  /// The first tier service adjudications for submitted services.
  /// </summary>
  public class ClaimResponseItem : BackboneElement {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    [JsonProperty("adjudication")]
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The second tier service adjudications for submitted services.
    /// </summary>
    [JsonProperty("detail")]
    public List<ClaimResponseItemDetail> Detail { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    [JsonProperty("noteNumber")]
    public List<uint?> NoteNumber { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    [JsonProperty("sequenceLinkId")]
    public uint SequenceLinkId { get; set; }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  public class ClaimResponseAddItemAdjudication : BackboneElement {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    [JsonProperty("code")]
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    [JsonProperty("value")]
    public decimal? Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  public class ClaimResponseAddItemDetailAdjudication : BackboneElement {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    [JsonProperty("code")]
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    [JsonProperty("value")]
    public decimal? Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// The second tier service adjudications for payor added services.
  /// </summary>
  public class ClaimResponseAddItemDetail : BackboneElement {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    [JsonProperty("adjudication")]
    public List<ClaimResponseAddItemDetailAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product..
    /// </summary>
    [JsonProperty("fee")]
    public Quantity Fee { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied.
    /// </summary>
    [JsonProperty("service")]
    public Coding Service { get; set; }
  }
  /// <summary>
  /// The first tier service adjudications for payor added services.
  /// </summary>
  public class ClaimResponseAddItem : BackboneElement {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    [JsonProperty("adjudication")]
    public List<ClaimResponseAddItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The second tier service adjudications for payor added services.
    /// </summary>
    [JsonProperty("detail")]
    public List<ClaimResponseAddItemDetail> Detail { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product..
    /// </summary>
    [JsonProperty("fee")]
    public Quantity Fee { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    [JsonProperty("noteNumberLinkId")]
    public List<uint?> NoteNumberLinkId { get; set; }
    /// <summary>
    /// List of input service items which this service line is intended to replace.
    /// </summary>
    [JsonProperty("sequenceLinkId")]
    public List<uint?> SequenceLinkId { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied.
    /// </summary>
    [JsonProperty("service")]
    public Coding Service { get; set; }
  }
  /// <summary>
  /// Mutually exclusive with Services Provided (Item).
  /// </summary>
  public class ClaimResponseError : BackboneElement {
    /// <summary>
    /// An error code,froma specified code system, which details why the claim could not be adjudicated.
    /// </summary>
    [JsonProperty("code")]
    public Coding Code { get; set; }
    /// <summary>
    /// The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
    /// </summary>
    [JsonProperty("detailSequenceLinkId")]
    public uint? DetailSequenceLinkId { get; set; }
    /// <summary>
    /// The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.
    /// </summary>
    [JsonProperty("sequenceLinkId")]
    public uint? SequenceLinkId { get; set; }
    /// <summary>
    /// The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
    /// </summary>
    [JsonProperty("subdetailSequenceLinkId")]
    public uint? SubdetailSequenceLinkId { get; set; }
  }
  /// <summary>
  /// Note text.
  /// </summary>
  public class ClaimResponseNote : BackboneElement {
    /// <summary>
    /// An integer associated with each note which may be referred to from each service line item.
    /// </summary>
    [JsonProperty("number")]
    public uint? Number { get; set; }
    /// <summary>
    /// The note text.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// The note purpose: Print/Display.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// Health care programs and insurers are significant payors of health service costs.
  /// </summary>
  public class ClaimResponseCoverage : BackboneElement {
    /// <summary>
    /// The contract number of a business agreement which describes the terms and conditions.
    /// </summary>
    [JsonProperty("businessArrangement")]
    public string BusinessArrangement { get; set; }
    [JsonProperty("_businessArrangement")]
    public Element _BusinessArrangement { get; set; }
    /// <summary>
    /// Used by downstream payers to determine what balance remains and the net payable.
    /// </summary>
    [JsonProperty("claimResponse")]
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// Need to identify the issuer to target for processing and for coordination of benefit processing.
    /// </summary>
    [JsonProperty("coverage")]
    public Reference Coverage { get; set; }
    /// <summary>
    /// To identify which coverage is being adjudicated.
    /// </summary>
    [JsonProperty("focal")]
    public bool Focal { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// To provide any pre-determination or prior authorization reference.
    /// </summary>
    [JsonProperty("preAuthRef")]
    public List<string> PreAuthRef { get; set; }
    [JsonProperty("_preAuthRef")]
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// To determine the relationship between the patient and the subscriber.
    /// </summary>
    [JsonProperty("relationship")]
    public Coding Relationship { get; set; }
    /// <summary>
    /// To maintain order of the coverages.
    /// </summary>
    [JsonProperty("sequence")]
    public uint Sequence { get; set; }
  }
  /// <summary>
  /// This resource provides the adjudication details from the processing of a Claim resource.
  /// </summary>
  public class ClaimResponse : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ClaimResponse";
    /// <summary>
    /// The first tier service adjudications for payor added services.
    /// </summary>
    [JsonProperty("addItem")]
    public List<ClaimResponseAddItem> AddItem { get; set; }
    /// <summary>
    /// Health care programs and insurers are significant payors of health service costs.
    /// </summary>
    [JsonProperty("coverage")]
    public List<ClaimResponseCoverage> Coverage { get; set; }
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    [JsonProperty("disposition")]
    public string Disposition { get; set; }
    [JsonProperty("_disposition")]
    public Element _Disposition { get; set; }
    /// <summary>
    /// Mutually exclusive with Services Provided (Item).
    /// </summary>
    [JsonProperty("error")]
    public List<ClaimResponseError> Error { get; set; }
    /// <summary>
    /// The form to be used for printing the content.
    /// </summary>
    [JsonProperty("form")]
    public Coding Form { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The first tier service adjudications for submitted services.
    /// </summary>
    [JsonProperty("item")]
    public List<ClaimResponseItem> Item { get; set; }
    /// <summary>
    /// Note text.
    /// </summary>
    [JsonProperty("note")]
    public List<ClaimResponseNote> Note { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Transaction status: error, complete.
    /// </summary>
    [JsonProperty("outcome")]
    public string Outcome { get; set; }
    [JsonProperty("_outcome")]
    public Element _Outcome { get; set; }
    /// <summary>
    /// Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    [JsonProperty("payeeType")]
    public Coding PayeeType { get; set; }
    /// <summary>
    /// Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
    /// </summary>
    [JsonProperty("paymentAdjustment")]
    public Quantity PaymentAdjustment { get; set; }
    /// <summary>
    /// Reason for the payment adjustment.
    /// </summary>
    [JsonProperty("paymentAdjustmentReason")]
    public Coding PaymentAdjustmentReason { get; set; }
    /// <summary>
    /// Payable less any payment adjustment.
    /// </summary>
    [JsonProperty("paymentAmount")]
    public Quantity PaymentAmount { get; set; }
    /// <summary>
    /// Estimated payment data.
    /// </summary>
    [JsonProperty("paymentDate")]
    public string PaymentDate { get; set; }
    [JsonProperty("_paymentDate")]
    public Element _PaymentDate { get; set; }
    /// <summary>
    /// Payment identifier.
    /// </summary>
    [JsonProperty("paymentRef")]
    public Identifier PaymentRef { get; set; }
    /// <summary>
    /// Original request resource referrence.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestOrganization")]
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestProvider")]
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// Status of funds reservation (For provider, for Patient, None).
    /// </summary>
    [JsonProperty("reserved")]
    public Coding Reserved { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
    /// <summary>
    /// Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
    /// </summary>
    [JsonProperty("totalBenefit")]
    public Quantity TotalBenefit { get; set; }
    /// <summary>
    /// This is a check value that the receiver calculates and returns.
    /// </summary>
    [JsonProperty("totalCost")]
    public Quantity TotalCost { get; set; }
    /// <summary>
    /// The amount of deductible applied which was not allocated to any particular service line.
    /// </summary>
    [JsonProperty("unallocDeductable")]
    public Quantity UnallocDeductable { get; set; }
  }
  /// <summary>
  /// Code Values for the ClaimResponse.outcome field
  /// </summary>
  public static class ClaimResponseOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
  }
  /// <summary>
  /// One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
  /// </summary>
  public class ClinicalImpressionInvestigations : BackboneElement {
    /// <summary>
    /// A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutitirional) history may be used.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A record of a specific investigation that was undertaken.
    /// </summary>
    [JsonProperty("item")]
    public List<Reference> Item { get; set; }
  }
  /// <summary>
  /// Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
  /// </summary>
  public class ClinicalImpressionFinding : BackboneElement {
    /// <summary>
    /// Which investigations support finding or diagnosis.
    /// </summary>
    [JsonProperty("cause")]
    public string Cause { get; set; }
    [JsonProperty("_cause")]
    public Element _Cause { get; set; }
    /// <summary>
    /// Specific text of code for finding or diagnosis.
    /// </summary>
    [JsonProperty("item")]
    public CodeableConcept Item { get; set; }
  }
  /// <summary>
  /// Diagnosis considered not possible.
  /// </summary>
  public class ClinicalImpressionRuledOut : BackboneElement {
    /// <summary>
    /// Specific text of code for diagnosis.
    /// </summary>
    [JsonProperty("item")]
    public CodeableConcept Item { get; set; }
    /// <summary>
    /// Grounds for elimination.
    /// </summary>
    [JsonProperty("reason")]
    public string Reason { get; set; }
    [JsonProperty("_reason")]
    public Element _Reason { get; set; }
  }
  /// <summary>
  /// A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
  /// </summary>
  public class ClinicalImpression : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ClinicalImpression";
    /// <summary>
    /// Actions taken during assessment.
    /// </summary>
    [JsonProperty("action")]
    public List<Reference> Action { get; set; }
    /// <summary>
    /// The clinician performing the assessment.
    /// </summary>
    [JsonProperty("assessor")]
    public Reference Assessor { get; set; }
    /// <summary>
    /// The point in time at which the assessment was concluded (not when it was recorded).
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// A summary of the context and/or cause of the assessment - why / where was it peformed, and what patient events/sstatus prompted it.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
    /// </summary>
    [JsonProperty("finding")]
    public List<ClinicalImpressionFinding> Finding { get; set; }
    /// <summary>
    /// One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
    /// </summary>
    [JsonProperty("investigations")]
    public List<ClinicalImpressionInvestigations> Investigations { get; set; }
    /// <summary>
    /// The patient being assessed.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// Plan of action after assessment.
    /// </summary>
    [JsonProperty("plan")]
    public List<Reference> Plan { get; set; }
    /// <summary>
    /// A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
    /// </summary>
    [JsonProperty("previous")]
    public Reference Previous { get; set; }
    /// <summary>
    /// This a list of the general problems/conditions for a patient.
    /// </summary>
    [JsonProperty("problem")]
    public List<Reference> Problem { get; set; }
    /// <summary>
    /// Estimate of likely outcome.
    /// </summary>
    [JsonProperty("prognosis")]
    public string Prognosis { get; set; }
    [JsonProperty("_prognosis")]
    public Element _Prognosis { get; set; }
    /// <summary>
    /// Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
    /// </summary>
    [JsonProperty("protocol")]
    public string Protocol { get; set; }
    [JsonProperty("_protocol")]
    public Element _Protocol { get; set; }
    /// <summary>
    /// Diagnoses/conditions resolved since the last assessment.
    /// </summary>
    [JsonProperty("resolved")]
    public List<CodeableConcept> Resolved { get; set; }
    /// <summary>
    /// Diagnosis considered not possible.
    /// </summary>
    [JsonProperty("ruledOut")]
    public List<ClinicalImpressionRuledOut> RuledOut { get; set; }
    /// <summary>
    /// Identifies the workflow status of the assessment.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// A text summary of the investigations and the diagnosis.
    /// </summary>
    [JsonProperty("summary")]
    public string Summary { get; set; }
    [JsonProperty("_summary")]
    public Element _Summary { get; set; }
    /// <summary>
    /// The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.
    /// </summary>
    [JsonProperty("triggerCodeableConcept")]
    public CodeableConcept TriggerCodeableConcept { get; set; }
    /// <summary>
    /// The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.
    /// </summary>
    [JsonProperty("triggerReference")]
    public Reference TriggerReference { get; set; }
  }
  /// <summary>
  /// Code Values for the ClinicalImpression.status field
  /// </summary>
  public static class ClinicalImpressionStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Text, attachment(s), or resource(s) that was communicated to the recipient.
  /// </summary>
  public class CommunicationPayload : BackboneElement {
    /// <summary>
    /// A communicated content (or for multi-part communications, one portion of the communication).
    /// </summary>
    [JsonProperty("contentString")]
    public string ContentString { get; set; }
    [JsonProperty("_contentString")]
    public Element _ContentString { get; set; }
    /// <summary>
    /// A communicated content (or for multi-part communications, one portion of the communication).
    /// </summary>
    [JsonProperty("contentAttachment")]
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// A communicated content (or for multi-part communications, one portion of the communication).
    /// </summary>
    [JsonProperty("contentReference")]
    public Reference ContentReference { get; set; }
  }
  /// <summary>
  /// An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
  /// </summary>
  public class Communication : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Communication";
    /// <summary>
    /// The type of message conveyed such as alert, notification, reminder, instruction, etc.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The encounter within which the communication was sent.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A channel that was used for this communication (e.g. email, fax).
    /// </summary>
    [JsonProperty("medium")]
    public List<CodeableConcept> Medium { get; set; }
    /// <summary>
    /// Text, attachment(s), or resource(s) that was communicated to the recipient.
    /// </summary>
    [JsonProperty("payload")]
    public List<CommunicationPayload> Payload { get; set; }
    /// <summary>
    /// The reason or justification for the communication.
    /// </summary>
    [JsonProperty("reason")]
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// The time when this communication arrived at the destination.
    /// </summary>
    [JsonProperty("received")]
    public string Received { get; set; }
    [JsonProperty("_received")]
    public Element _Received { get; set; }
    /// <summary>
    /// The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time).
    /// </summary>
    [JsonProperty("recipient")]
    public List<Reference> Recipient { get; set; }
    /// <summary>
    /// The communication request that was responsible for producing this communication.
    /// </summary>
    [JsonProperty("requestDetail")]
    public Reference RequestDetail { get; set; }
    /// <summary>
    /// The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
    /// </summary>
    [JsonProperty("sender")]
    public Reference Sender { get; set; }
    /// <summary>
    /// The time when this communication was sent.
    /// </summary>
    [JsonProperty("sent")]
    public string Sent { get; set; }
    [JsonProperty("_sent")]
    public Element _Sent { get; set; }
    /// <summary>
    /// The status of the transmission.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The patient who was the focus of this communication.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// Code Values for the Communication.status field
  /// </summary>
  public static class CommunicationStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string FAILED = "failed";
  }
  /// <summary>
  /// Text, attachment(s), or resource(s) to be communicated to the recipient.
  /// </summary>
  public class CommunicationRequestPayload : BackboneElement {
    /// <summary>
    /// The communicated content (or for multi-part communications, one portion of the communication).
    /// </summary>
    [JsonProperty("contentString")]
    public string ContentString { get; set; }
    [JsonProperty("_contentString")]
    public Element _ContentString { get; set; }
    /// <summary>
    /// The communicated content (or for multi-part communications, one portion of the communication).
    /// </summary>
    [JsonProperty("contentAttachment")]
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// The communicated content (or for multi-part communications, one portion of the communication).
    /// </summary>
    [JsonProperty("contentReference")]
    public Reference ContentReference { get; set; }
  }
  /// <summary>
  /// A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
  /// </summary>
  public class CommunicationRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "CommunicationRequest";
    /// <summary>
    /// The type of message to be sent such as alert, notification, reminder, instruction, etc.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The encounter within which the communication request was created.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A channel that was used for this communication (e.g. email, fax).
    /// </summary>
    [JsonProperty("medium")]
    public List<CodeableConcept> Medium { get; set; }
    /// <summary>
    /// Text, attachment(s), or resource(s) to be communicated to the recipient.
    /// </summary>
    [JsonProperty("payload")]
    public List<CommunicationRequestPayload> Payload { get; set; }
    /// <summary>
    /// Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
    /// </summary>
    [JsonProperty("priority")]
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// The reason or justification for the communication request.
    /// </summary>
    [JsonProperty("reason")]
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// The entity (e.g. person, organization, clinical information system, or device) which is the intended target of the communication.
    /// </summary>
    [JsonProperty("recipient")]
    public List<Reference> Recipient { get; set; }
    /// <summary>
    /// The time when the request was made.
    /// </summary>
    [JsonProperty("requestedOn")]
    public string RequestedOn { get; set; }
    [JsonProperty("_requestedOn")]
    public Element _RequestedOn { get; set; }
    /// <summary>
    /// The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.
    /// </summary>
    [JsonProperty("requester")]
    public Reference Requester { get; set; }
    /// <summary>
    /// The time when this communication is to occur.
    /// </summary>
    [JsonProperty("scheduledDateTime")]
    public string ScheduledDateTime { get; set; }
    [JsonProperty("_scheduledDateTime")]
    public Element _ScheduledDateTime { get; set; }
    /// <summary>
    /// The time when this communication is to occur.
    /// </summary>
    [JsonProperty("scheduledPeriod")]
    public Period ScheduledPeriod { get; set; }
    /// <summary>
    /// The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
    /// </summary>
    [JsonProperty("sender")]
    public Reference Sender { get; set; }
    /// <summary>
    /// The status of the proposal or order.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The patient who is the focus of this communication request.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// Code Values for the CommunicationRequest.status field
  /// </summary>
  public static class CommunicationRequestStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PLANNED = "planned";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string FAILED = "failed";
  }
  /// <summary>
  /// Identifies responsibility for the accuracy of the composition content.
  /// </summary>
  public class CompositionAttester : BackboneElement {
    /// <summary>
    /// Indicates the level of authority of the attestation.
    /// </summary>
    [JsonProperty("mode")]
    public List<string> Mode { get; set; }
    [JsonProperty("_mode")]
    public List<Element> _Mode { get; set; }
    /// <summary>
    /// Identifies who has taken on the responsibility for accuracy of the composition content.
    /// </summary>
    [JsonProperty("party")]
    public Reference Party { get; set; }
    /// <summary>
    /// Identifies when the information in the composition was deemed accurate.  (Things may have changed since then.).
    /// </summary>
    [JsonProperty("time")]
    public string Time { get; set; }
    [JsonProperty("_time")]
    public Element _Time { get; set; }
  }
  /// <summary>
  /// Code Values for the Composition.attester.mode field
  /// </summary>
  public static class CompositionAttesterModeCodes {
    public const string PERSONAL = "personal";
    public const string PROFESSIONAL = "professional";
    public const string LEGAL = "legal";
    public const string OFFICIAL = "official";
  }
  /// <summary>
  /// Provides context for the composition and creates a linkage between a resource describing an event and the composition created describing the event.
  /// </summary>
  public class CompositionEvent : BackboneElement {
    /// <summary>
    /// This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
    /// </summary>
    [JsonProperty("code")]
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
    /// </summary>
    [JsonProperty("detail")]
    public List<Reference> Detail { get; set; }
    /// <summary>
    /// The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
  }
  /// <summary>
  /// The root of the sections that make up the composition.
  /// </summary>
  public class CompositionSection : BackboneElement {
    /// <summary>
    /// Provides computable standardized labels to topics within the document.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Allows capturing things like "none exist" or "not asked" which can be important for most lists.
    /// </summary>
    [JsonProperty("emptyReason")]
    public CodeableConcept EmptyReason { get; set; }
    /// <summary>
    /// A reference to the actual resource from which the narrative in the section is derived.
    /// </summary>
    [JsonProperty("entry")]
    public List<Reference> Entry { get; set; }
    /// <summary>
    /// Sections are used in various ways, and it must be known in what way it is safe to use the entries in them.
    /// </summary>
    [JsonProperty("mode")]
    public string Mode { get; set; }
    [JsonProperty("_mode")]
    public Element _Mode { get; set; }
    /// <summary>
    /// Important for presentation and rendering.  Lists may be sorted to place more important information first or to group related entries.
    /// </summary>
    [JsonProperty("orderedBy")]
    public CodeableConcept OrderedBy { get; set; }
    /// <summary>
    /// A nested sub-section within this section.
    /// </summary>
    [JsonProperty("section")]
    public List<CompositionSection> Section { get; set; }
    /// <summary>
    /// A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
    /// </summary>
    [JsonProperty("text")]
    public Narrative Text { get; set; }
    /// <summary>
    /// Section headings are often standardized for different types of documents.  They give guidance to humans on how the document is organized.
    /// </summary>
    [JsonProperty("title")]
    public string Title { get; set; }
    [JsonProperty("_title")]
    public Element _Title { get; set; }
  }
  /// <summary>
  /// Code Values for the Composition.section.mode field
  /// </summary>
  public static class CompositionSectionModeCodes {
    public const string WORKING = "working";
    public const string SNAPSHOT = "snapshot";
    public const string CHANGES = "changes";
  }
  /// <summary>
  /// A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
  /// </summary>
  public class Composition : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Composition";
    /// <summary>
    /// Identifies responsibility for the accuracy of the composition content.
    /// </summary>
    [JsonProperty("attester")]
    public List<CompositionAttester> Attester { get; set; }
    /// <summary>
    /// Identifies who is responsible for the content.
    /// </summary>
    [JsonProperty("author")]
    public List<Reference> Author { get; set; }
    /// <summary>
    /// Helps humans to assess whether the composition is of interest when viewing an index of compositions or documents.
    /// </summary>
    [JsonProperty("class")]
    public CodeableConcept Class { get; set; }
    /// <summary>
    /// The code specifying the level of confidentiality of the Composition.
    /// </summary>
    [JsonProperty("confidentiality")]
    public string Confidentiality { get; set; }
    [JsonProperty("_confidentiality")]
    public Element _Confidentiality { get; set; }
    /// <summary>
    /// Identifies where to go to find the current version, where to report issues, etc.
    /// </summary>
    [JsonProperty("custodian")]
    public Reference Custodian { get; set; }
    /// <summary>
    /// dateTime is used for tracking, organizing versions and searching.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Provides context for the composition and supports searching.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Provides context for the composition and creates a linkage between a resource describing an event and the composition created describing the event.
    /// </summary>
    [JsonProperty("event")]
    public List<CompositionEvent> Event { get; set; }
    /// <summary>
    /// Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The root of the sections that make up the composition.
    /// </summary>
    [JsonProperty("section")]
    public List<CompositionSection> Section { get; set; }
    /// <summary>
    /// Need to be able to mark interim, amended, or withdrawn compositions or documents.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Essential metadata for searching for the composition. Identifies who and/or what the composition/document is about.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Official human-readable label for the composition.
    /// </summary>
    [JsonProperty("title")]
    public string Title { get; set; }
    [JsonProperty("_title")]
    public Element _Title { get; set; }
    /// <summary>
    /// Key metadata element describing the composition, used in searching/filtering.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Composition.status field
  /// </summary>
  public static class CompositionStatusCodes {
    public const string PRELIMINARY = "preliminary";
    public const string FINAL = "final";
    public const string AMENDED = "amended";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class ConceptMapContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the concept map.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
  /// </summary>
  public class ConceptMapElementTargetDependsOn : BackboneElement {
    /// <summary>
    /// Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
    /// </summary>
    [JsonProperty("codeSystem")]
    public string CodeSystem { get; set; }
    [JsonProperty("_codeSystem")]
    public Element _CodeSystem { get; set; }
    /// <summary>
    /// A reference to a specific concept that holds a coded value. This can be an element in a FHIR resource, or a specific reference to a data element in a different specification (e.g. HL7 v2) or a general reference to a kind of data field, or a reference to a value set with an appropriately narrow definition.
    /// </summary>
    [JsonProperty("element")]
    public string Element { get; set; }
    [JsonProperty("_element")]
    public Element _Element { get; set; }
  }
  /// <summary>
  /// A concept from the target value set that this concept maps to.
  /// </summary>
  public class ConceptMapElementTarget : BackboneElement {
    /// <summary>
    /// Identity (code or path) or the element/item that the map refers to.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems).
    /// </summary>
    [JsonProperty("codeSystem")]
    public string CodeSystem { get; set; }
    [JsonProperty("_codeSystem")]
    public Element _CodeSystem { get; set; }
    /// <summary>
    /// A description of status/issues in mapping that conveys additional information not represented in  the structured data.
    /// </summary>
    [JsonProperty("comments")]
    public string Comments { get; set; }
    [JsonProperty("_comments")]
    public Element _Comments { get; set; }
    /// <summary>
    /// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
    /// </summary>
    [JsonProperty("dependsOn")]
    public List<ConceptMapElementTargetDependsOn> DependsOn { get; set; }
    /// <summary>
    /// The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
    /// </summary>
    [JsonProperty("equivalence")]
    public string Equivalence { get; set; }
    [JsonProperty("_equivalence")]
    public Element _Equivalence { get; set; }
    /// <summary>
    /// A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
    /// </summary>
    [JsonProperty("product")]
    public List<ConceptMapElementTargetDependsOn> Product { get; set; }
  }
  /// <summary>
  /// Code Values for the ConceptMap.element.target.equivalence field
  /// </summary>
  public static class ConceptMapElementTargetEquivalenceCodes {
    public const string EQUIVALENT = "equivalent";
    public const string EQUAL = "equal";
    public const string WIDER = "wider";
    public const string SUBSUMES = "subsumes";
    public const string NARROWER = "narrower";
    public const string SPECIALIZES = "specializes";
    public const string INEXACT = "inexact";
    public const string UNMATCHED = "unmatched";
    public const string DISJOINT = "disjoint";
  }
  /// <summary>
  /// Mappings for an individual concept in the source to one or more concepts in the target.
  /// </summary>
  public class ConceptMapElement : BackboneElement {
    /// <summary>
    /// Identity (code or path) or the element/item being mapped.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).
    /// </summary>
    [JsonProperty("codeSystem")]
    public string CodeSystem { get; set; }
    [JsonProperty("_codeSystem")]
    public Element _CodeSystem { get; set; }
    /// <summary>
    /// A concept from the target value set that this concept maps to.
    /// </summary>
    [JsonProperty("target")]
    public List<ConceptMapElementTarget> Target { get; set; }
  }
  /// <summary>
  /// A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
  /// </summary>
  public class ConceptMap : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ConceptMap";
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<ConceptMapContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the concept map and/or its contents.
    /// </summary>
    [JsonProperty("copyright")]
    public string Copyright { get; set; }
    [JsonProperty("_copyright")]
    public Element _Copyright { get; set; }
    /// <summary>
    /// Need to know when a concept map was first legal for use or became withdrawn or replaced.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Human understandability.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Mappings for an individual concept in the source to one or more concepts in the target.
    /// </summary>
    [JsonProperty("element")]
    public List<ConceptMapElement> Element { get; set; }
    /// <summary>
    /// This ConceptMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// Formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Support human navigation.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the concept map.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this concept map is needed and why it has been constrained as it has.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// The source value set that specifies the concepts that are being mapped.
    /// </summary>
    [JsonProperty("sourceUri")]
    public string SourceUri { get; set; }
    [JsonProperty("_sourceUri")]
    public Element _SourceUri { get; set; }
    /// <summary>
    /// The source value set that specifies the concepts that are being mapped.
    /// </summary>
    [JsonProperty("sourceReference")]
    public Reference SourceReference { get; set; }
    /// <summary>
    /// Identify when/if the concept map should be used.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
    /// </summary>
    [JsonProperty("targetUri")]
    public string TargetUri { get; set; }
    [JsonProperty("_targetUri")]
    public Element _TargetUri { get; set; }
    /// <summary>
    /// The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
    /// </summary>
    [JsonProperty("targetReference")]
    public Reference TargetReference { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate concept map instances.
    /// </summary>
    [JsonProperty("useContext")]
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the ConceptMap.status field
  /// </summary>
  public static class ConceptMapStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Clinical stage or grade of a condition. May include formal severity assessments.
  /// </summary>
  public class ConditionStage : BackboneElement {
    /// <summary>
    /// Reference to a formal record of the evidence on which the staging assessment is based.
    /// </summary>
    [JsonProperty("assessment")]
    public List<Reference> Assessment { get; set; }
    /// <summary>
    /// A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
    /// </summary>
    [JsonProperty("summary")]
    public CodeableConcept Summary { get; set; }
  }
  /// <summary>
  /// Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
  /// </summary>
  public class ConditionEvidence : BackboneElement {
    /// <summary>
    /// A manifestation or symptom that led to the recording of this condition.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Links to other relevant information, including pathology reports.
    /// </summary>
    [JsonProperty("detail")]
    public List<Reference> Detail { get; set; }
  }
  /// <summary>
  /// Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
  /// </summary>
  public class Condition : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Condition";
    /// <summary>
    /// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    /// </summary>
    [JsonProperty("abatementDateTime")]
    public string AbatementDateTime { get; set; }
    [JsonProperty("_abatementDateTime")]
    public Element _AbatementDateTime { get; set; }
    /// <summary>
    /// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    /// </summary>
    [JsonProperty("abatementQuantity")]
    public Quantity AbatementQuantity { get; set; }
    /// <summary>
    /// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    /// </summary>
    [JsonProperty("abatementBoolean")]
    public bool? AbatementBoolean { get; set; }
    /// <summary>
    /// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    /// </summary>
    [JsonProperty("abatementPeriod")]
    public Period AbatementPeriod { get; set; }
    /// <summary>
    /// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    /// </summary>
    [JsonProperty("abatementRange")]
    public Range AbatementRange { get; set; }
    /// <summary>
    /// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    /// </summary>
    [JsonProperty("abatementString")]
    public string AbatementString { get; set; }
    [JsonProperty("_abatementString")]
    public Element _AbatementString { get; set; }
    /// <summary>
    /// Individual who is making the condition statement.
    /// </summary>
    [JsonProperty("asserter")]
    public Reference Asserter { get; set; }
    /// <summary>
    /// The anatomical location where this condition manifests itself.
    /// </summary>
    [JsonProperty("bodySite")]
    public List<CodeableConcept> BodySite { get; set; }
    /// <summary>
    /// A category assigned to the condition.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The clinical status of the condition.
    /// </summary>
    [JsonProperty("clinicalStatus")]
    public string ClinicalStatus { get; set; }
    [JsonProperty("_clinicalStatus")]
    public Element _ClinicalStatus { get; set; }
    /// <summary>
    /// Identification of the condition, problem or diagnosis.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A date, when  the Condition statement was documented.
    /// </summary>
    [JsonProperty("dateRecorded")]
    public string DateRecorded { get; set; }
    [JsonProperty("_dateRecorded")]
    public Element _DateRecorded { get; set; }
    /// <summary>
    /// Encounter during which the condition was first asserted.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
    /// </summary>
    [JsonProperty("evidence")]
    public List<ConditionEvidence> Evidence { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
    /// </summary>
    [JsonProperty("notes")]
    public string Notes { get; set; }
    [JsonProperty("_notes")]
    public Element _Notes { get; set; }
    /// <summary>
    /// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    /// </summary>
    [JsonProperty("onsetDateTime")]
    public string OnsetDateTime { get; set; }
    [JsonProperty("_onsetDateTime")]
    public Element _OnsetDateTime { get; set; }
    /// <summary>
    /// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    /// </summary>
    [JsonProperty("onsetQuantity")]
    public Quantity OnsetQuantity { get; set; }
    /// <summary>
    /// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    /// </summary>
    [JsonProperty("onsetPeriod")]
    public Period OnsetPeriod { get; set; }
    /// <summary>
    /// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    /// </summary>
    [JsonProperty("onsetRange")]
    public Range OnsetRange { get; set; }
    /// <summary>
    /// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
    /// </summary>
    [JsonProperty("onsetString")]
    public string OnsetString { get; set; }
    [JsonProperty("_onsetString")]
    public Element _OnsetString { get; set; }
    /// <summary>
    /// Indicates the patient who the condition record is associated with.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// A subjective assessment of the severity of the condition as evaluated by the clinician.
    /// </summary>
    [JsonProperty("severity")]
    public CodeableConcept Severity { get; set; }
    /// <summary>
    /// Clinical stage or grade of a condition. May include formal severity assessments.
    /// </summary>
    [JsonProperty("stage")]
    public ConditionStage Stage { get; set; }
    /// <summary>
    /// The verification status to support the clinical status of the condition.
    /// </summary>
    [JsonProperty("verificationStatus")]
    public string VerificationStatus { get; set; }
    [JsonProperty("_verificationStatus")]
    public Element _VerificationStatus { get; set; }
  }
  /// <summary>
  /// Code Values for the Condition.clinicalStatus field
  /// </summary>
  public static class ConditionClinicalStatusCodes {
    public const string ACTIVE = "active";
    public const string RELAPSE = "relapse";
    public const string REMISSION = "remission";
    public const string RESOLVED = "resolved";
  }
  /// <summary>
  /// Code Values for the Condition.verificationStatus field
  /// </summary>
  public static class ConditionVerificationStatusCodes {
    public const string PROVISIONAL = "provisional";
    public const string DIFFERENTIAL = "differential";
    public const string CONFIRMED = "confirmed";
    public const string REFUTED = "refuted";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class ConformanceContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the conformance.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
  /// </summary>
  public class ConformanceSoftware : BackboneElement {
    /// <summary>
    /// Name software is known by.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Date this version of the software released.
    /// </summary>
    [JsonProperty("releaseDate")]
    public string ReleaseDate { get; set; }
    [JsonProperty("_releaseDate")]
    public Element _ReleaseDate { get; set; }
    /// <summary>
    /// The version identifier for the software covered by this statement.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
  /// </summary>
  public class ConformanceImplementation : BackboneElement {
    /// <summary>
    /// Information about the specific installation that this conformance statement relates to.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Certificates associated with security profiles.
  /// </summary>
  public class ConformanceRestSecurityCertificate : BackboneElement {
    /// <summary>
    /// Actual certificate.
    /// </summary>
    [JsonProperty("blob")]
    public string Blob { get; set; }
    [JsonProperty("_blob")]
    public Element _Blob { get; set; }
    /// <summary>
    /// Mime type for certificate.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Information about security implementation from an interface perspective - what a client needs to know.
  /// </summary>
  public class ConformanceRestSecurity : BackboneElement {
    /// <summary>
    /// Certificates associated with security profiles.
    /// </summary>
    [JsonProperty("certificate")]
    public List<ConformanceRestSecurityCertificate> Certificate { get; set; }
    /// <summary>
    /// Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
    /// </summary>
    [JsonProperty("cors")]
    public bool? Cors { get; set; }
    /// <summary>
    /// General description of how security works.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Types of security services are supported/required by the system.
    /// </summary>
    [JsonProperty("service")]
    public List<CodeableConcept> Service { get; set; }
  }
  /// <summary>
  /// Identifies a restful operation supported by the solution.
  /// </summary>
  public class ConformanceRestResourceInteraction : BackboneElement {
    /// <summary>
    /// Coded identifier of the operation, supported by the system resource.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// REST allows a degree of variability in the implementation of RESTful solutions that is useful for exchange partners to be aware of.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.interaction.code field
  /// </summary>
  public static class ConformanceRestResourceInteractionCodeCodes {
    public const string READ = "read";
    public const string VREAD = "vread";
    public const string UPDATE = "update";
    public const string DELETE = "delete";
    public const string HISTORY_INSTANCE = "history-instance";
    public const string VALIDATE = "validate";
    public const string HISTORY_TYPE = "history-type";
    public const string CREATE = "create";
    public const string SEARCH_TYPE = "search-type";
  }
  /// <summary>
  /// Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
  /// </summary>
  public class ConformanceRestResourceSearchParam : BackboneElement {
    /// <summary>
    /// Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.
    /// </summary>
    [JsonProperty("chain")]
    public List<string> Chain { get; set; }
    [JsonProperty("_chain")]
    public List<Element> _Chain { get; set; }
    /// <summary>
    /// An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).
    /// </summary>
    [JsonProperty("definition")]
    public string Definition { get; set; }
    [JsonProperty("_definition")]
    public Element _Definition { get; set; }
    /// <summary>
    /// This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
    /// <summary>
    /// A modifier supported for the search parameter.
    /// </summary>
    [JsonProperty("modifier")]
    public List<string> Modifier { get; set; }
    [JsonProperty("_modifier")]
    public List<Element> _Modifier { get; set; }
    /// <summary>
    /// The name of the search parameter used in the interface.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Types of resource (if a resource is referenced).
    /// </summary>
    [JsonProperty("target")]
    public List<string> Target { get; set; }
    [JsonProperty("_target")]
    public List<Element> _Target { get; set; }
    /// <summary>
    /// The type of value a search parameter refers to, and how the content is interpreted.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.searchParam.modifier field
  /// </summary>
  public static class ConformanceRestResourceSearchParamModifierCodes {
    public const string MISSING = "missing";
    public const string EXACT = "exact";
    public const string CONTAINS = "contains";
    public const string NOT = "not";
    public const string TEXT = "text";
    public const string VAL_IN = "in";
    public const string NOT_IN = "not-in";
    public const string BELOW = "below";
    public const string ABOVE = "above";
    public const string TYPE = "type";
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.searchParam.type field
  /// </summary>
  public static class ConformanceRestResourceSearchParamTypeCodes {
    public const string NUMBER = "number";
    public const string DATE = "date";
    public const string VAL_STRING = "string";
    public const string TOKEN = "token";
    public const string REFERENCE = "reference";
    public const string COMPOSITE = "composite";
    public const string QUANTITY = "quantity";
    public const string URI = "uri";
  }
  /// <summary>
  /// A specification of the restful capabilities of the solution for a specific resource type.
  /// </summary>
  public class ConformanceRestResource : BackboneElement {
    /// <summary>
    /// A flag that indicates that the server supports conditional create.
    /// </summary>
    [JsonProperty("conditionalCreate")]
    public bool? ConditionalCreate { get; set; }
    /// <summary>
    /// A code that indicates how the server supports conditional delete.
    /// </summary>
    [JsonProperty("conditionalDelete")]
    public string ConditionalDelete { get; set; }
    [JsonProperty("_conditionalDelete")]
    public Element _ConditionalDelete { get; set; }
    /// <summary>
    /// A flag that indicates that the server supports conditional update.
    /// </summary>
    [JsonProperty("conditionalUpdate")]
    public bool? ConditionalUpdate { get; set; }
    /// <summary>
    /// Identifies a restful operation supported by the solution.
    /// </summary>
    [JsonProperty("interaction")]
    public List<ConformanceRestResourceInteraction> Interaction { get; set; }
    /// <summary>
    /// A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
    /// </summary>
    [JsonProperty("profile")]
    public Reference Profile { get; set; }
    /// <summary>
    /// A flag for whether the server is able to return past versions as part of the vRead operation.
    /// </summary>
    [JsonProperty("readHistory")]
    public bool? ReadHistory { get; set; }
    /// <summary>
    /// A list of _include values supported by the server.
    /// </summary>
    [JsonProperty("searchInclude")]
    public List<string> SearchInclude { get; set; }
    [JsonProperty("_searchInclude")]
    public List<Element> _SearchInclude { get; set; }
    /// <summary>
    /// Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
    /// </summary>
    [JsonProperty("searchParam")]
    public List<ConformanceRestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// A list of _revinclude (reverse include) values supported by the server.
    /// </summary>
    [JsonProperty("searchRevInclude")]
    public List<string> SearchRevInclude { get; set; }
    [JsonProperty("_searchRevInclude")]
    public List<Element> _SearchRevInclude { get; set; }
    /// <summary>
    /// A type of resource exposed via the restful interface.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
    /// </summary>
    [JsonProperty("updateCreate")]
    public bool? UpdateCreate { get; set; }
    /// <summary>
    /// This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
    /// </summary>
    [JsonProperty("versioning")]
    public string Versioning { get; set; }
    [JsonProperty("_versioning")]
    public Element _Versioning { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.conditionalDelete field
  /// </summary>
  public static class ConformanceRestResourceConditionalDeleteCodes {
    public const string NOT_SUPPORTED = "not-supported";
    public const string SINGLE = "single";
    public const string MULTIPLE = "multiple";
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.versioning field
  /// </summary>
  public static class ConformanceRestResourceVersioningCodes {
    public const string NO_VERSION = "no-version";
    public const string VERSIONED = "versioned";
    public const string VERSIONED_UPDATE = "versioned-update";
  }
  /// <summary>
  /// A specification of restful operations supported by the system.
  /// </summary>
  public class ConformanceRestInteraction : BackboneElement {
    /// <summary>
    /// A coded identifier of the operation, supported by the system.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.interaction.code field
  /// </summary>
  public static class ConformanceRestInteractionCodeCodes {
    public const string TRANSACTION = "transaction";
    public const string SEARCH_SYSTEM = "search-system";
    public const string HISTORY_SYSTEM = "history-system";
  }
  /// <summary>
  /// Definition of an operation or a named query and with its parameters and their meaning and type.
  /// </summary>
  public class ConformanceRestOperation : BackboneElement {
    /// <summary>
    /// Where the formal definition can be found.
    /// </summary>
    [JsonProperty("definition")]
    public Reference Definition { get; set; }
    /// <summary>
    /// The name of a query, which is used in the _query parameter when the query is called.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
  }
  /// <summary>
  /// A definition of the restful capabilities of the solution, if any.
  /// </summary>
  public class ConformanceRest : BackboneElement {
    /// <summary>
    /// An absolute URI which is a reference to the definition of a compartment hosted by the system.
    /// </summary>
    [JsonProperty("compartment")]
    public List<string> Compartment { get; set; }
    [JsonProperty("_compartment")]
    public List<Element> _Compartment { get; set; }
    /// <summary>
    /// Information about the system's restful capabilities that apply across all applications, such as security.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
    /// <summary>
    /// A specification of restful operations supported by the system.
    /// </summary>
    [JsonProperty("interaction")]
    public List<ConformanceRestInteraction> Interaction { get; set; }
    /// <summary>
    /// Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.
    /// </summary>
    [JsonProperty("mode")]
    public string Mode { get; set; }
    [JsonProperty("_mode")]
    public Element _Mode { get; set; }
    /// <summary>
    /// Definition of an operation or a named query and with its parameters and their meaning and type.
    /// </summary>
    [JsonProperty("operation")]
    public List<ConformanceRestOperation> Operation { get; set; }
    /// <summary>
    /// A specification of the restful capabilities of the solution for a specific resource type.
    /// </summary>
    [JsonProperty("resource")]
    public List<ConformanceRestResource> Resource { get; set; }
    /// <summary>
    /// Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
    /// </summary>
    [JsonProperty("searchParam")]
    public List<ConformanceRestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// Information about security implementation from an interface perspective - what a client needs to know.
    /// </summary>
    [JsonProperty("security")]
    public ConformanceRestSecurity Security { get; set; }
    /// <summary>
    /// A code that indicates how transactions are supported.
    /// </summary>
    [JsonProperty("transactionMode")]
    public string TransactionMode { get; set; }
    [JsonProperty("_transactionMode")]
    public Element _TransactionMode { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.mode field
  /// </summary>
  public static class ConformanceRestModeCodes {
    public const string CLIENT = "client";
    public const string SERVER = "server";
  }
  /// <summary>
  /// Code Values for the Conformance.rest.transactionMode field
  /// </summary>
  public static class ConformanceRestTransactionModeCodes {
    public const string NOT_SUPPORTED = "not-supported";
    public const string BATCH = "batch";
    public const string TRANSACTION = "transaction";
    public const string BOTH = "both";
  }
  /// <summary>
  /// An endpoint (network accessible address) to which messages and/or replies are to be sent.
  /// </summary>
  public class ConformanceMessagingEndpoint : BackboneElement {
    /// <summary>
    /// The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
    /// </summary>
    [JsonProperty("address")]
    public string Address { get; set; }
    [JsonProperty("_address")]
    public Element _Address { get; set; }
    /// <summary>
    /// A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
    /// </summary>
    [JsonProperty("protocol")]
    public Coding Protocol { get; set; }
  }
  /// <summary>
  /// A description of the solution's support for an event at this end-point.
  /// </summary>
  public class ConformanceMessagingEvent : BackboneElement {
    /// <summary>
    /// The impact of the content of the message.
    /// </summary>
    [JsonProperty("category")]
    public string Category { get; set; }
    [JsonProperty("_category")]
    public Element _Category { get; set; }
    /// <summary>
    /// A coded identifier of a supported messaging event.
    /// </summary>
    [JsonProperty("code")]
    public Coding Code { get; set; }
    /// <summary>
    /// Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
    /// <summary>
    /// A resource associated with the event.  This is the resource that defines the event.
    /// </summary>
    [JsonProperty("focus")]
    public string Focus { get; set; }
    [JsonProperty("_focus")]
    public Element _Focus { get; set; }
    /// <summary>
    /// The mode of this event declaration - whether application is sender or receiver.
    /// </summary>
    [JsonProperty("mode")]
    public string Mode { get; set; }
    [JsonProperty("_mode")]
    public Element _Mode { get; set; }
    /// <summary>
    /// Information about the request for this event.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// Information about the response for this event.
    /// </summary>
    [JsonProperty("response")]
    public Reference Response { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.messaging.event.category field
  /// </summary>
  public static class ConformanceMessagingEventCategoryCodes {
    public const string CONSEQUENCE = "Consequence";
    public const string CURRENCY = "Currency";
    public const string NOTIFICATION = "Notification";
  }
  /// <summary>
  /// Code Values for the Conformance.messaging.event.mode field
  /// </summary>
  public static class ConformanceMessagingEventModeCodes {
    public const string SENDER = "sender";
    public const string RECEIVER = "receiver";
  }
  /// <summary>
  /// A description of the messaging capabilities of the solution.
  /// </summary>
  public class ConformanceMessaging : BackboneElement {
    /// <summary>
    /// Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
    /// <summary>
    /// An endpoint (network accessible address) to which messages and/or replies are to be sent.
    /// </summary>
    [JsonProperty("endpoint")]
    public List<ConformanceMessagingEndpoint> Endpoint { get; set; }
    /// <summary>
    /// A description of the solution's support for an event at this end-point.
    /// </summary>
    [JsonProperty("event")]
    public List<ConformanceMessagingEvent> Event { get; set; }
    /// <summary>
    /// Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
    /// </summary>
    [JsonProperty("reliableCache")]
    public uint? ReliableCache { get; set; }
  }
  /// <summary>
  /// A document definition.
  /// </summary>
  public class ConformanceDocument : BackboneElement {
    /// <summary>
    /// A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
    /// <summary>
    /// Mode of this document declaration - whether application is producer or consumer.
    /// </summary>
    [JsonProperty("mode")]
    public string Mode { get; set; }
    [JsonProperty("_mode")]
    public Element _Mode { get; set; }
    /// <summary>
    /// A constraint on a resource used in the document.
    /// </summary>
    [JsonProperty("profile")]
    public Reference Profile { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.document.mode field
  /// </summary>
  public static class ConformanceDocumentModeCodes {
    public const string PRODUCER = "producer";
    public const string CONSUMER = "consumer";
  }
  /// <summary>
  /// A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
  /// </summary>
  public class Conformance : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Conformance";
    /// <summary>
    /// A code that indicates whether the application accepts unknown elements or extensions when reading resources.
    /// </summary>
    [JsonProperty("acceptUnknown")]
    public string AcceptUnknown { get; set; }
    [JsonProperty("_acceptUnknown")]
    public Element _AcceptUnknown { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<ConformanceContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.
    /// </summary>
    [JsonProperty("copyright")]
    public string Copyright { get; set; }
    [JsonProperty("_copyright")]
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// A document definition.
    /// </summary>
    [JsonProperty("document")]
    public List<ConformanceDocument> Document { get; set; }
    /// <summary>
    /// A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// The version of the FHIR specification on which this conformance statement is based.
    /// </summary>
    [JsonProperty("fhirVersion")]
    public string FhirVersion { get; set; }
    [JsonProperty("_fhirVersion")]
    public Element _FhirVersion { get; set; }
    /// <summary>
    /// A list of the formats supported by this implementation using their content types.
    /// </summary>
    [JsonProperty("format")]
    public List<string> Format { get; set; }
    [JsonProperty("_format")]
    public List<Element> _Format { get; set; }
    /// <summary>
    /// Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
    /// </summary>
    [JsonProperty("implementation")]
    public ConformanceImplementation Implementation { get; set; }
    /// <summary>
    /// Allow searching the 3 modes.
    /// </summary>
    [JsonProperty("kind")]
    public string Kind { get; set; }
    [JsonProperty("_kind")]
    public Element _Kind { get; set; }
    /// <summary>
    /// A description of the messaging capabilities of the solution.
    /// </summary>
    [JsonProperty("messaging")]
    public List<ConformanceMessaging> Messaging { get; set; }
    /// <summary>
    /// A free text natural language name identifying the conformance statement.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
    /// </summary>
    [JsonProperty("profile")]
    public List<Reference> Profile { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the conformance.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this conformance statement is needed and why it's been constrained as it has.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// A definition of the restful capabilities of the solution, if any.
    /// </summary>
    [JsonProperty("rest")]
    public List<ConformanceRest> Rest { get; set; }
    /// <summary>
    /// Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
    /// </summary>
    [JsonProperty("software")]
    public ConformanceSoftware Software { get; set; }
    /// <summary>
    /// The status of this conformance statement.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the Conformance.acceptUnknown field
  /// </summary>
  public static class ConformanceAcceptUnknownCodes {
    public const string NO = "no";
    public const string EXTENSIONS = "extensions";
    public const string ELEMENTS = "elements";
    public const string BOTH = "both";
  }
  /// <summary>
  /// Code Values for the Conformance.format field
  /// </summary>
  public static class ConformanceFormatCodes {
    public const string FORMATS = "formats";
    public const string JSON = "json";
    public const string MIME = "mime";
  }
  /// <summary>
  /// Code Values for the Conformance.kind field
  /// </summary>
  public static class ConformanceKindCodes {
    public const string INSTANCE = "instance";
    public const string CAPABILITY = "capability";
    public const string REQUIREMENTS = "requirements";
  }
  /// <summary>
  /// Code Values for the Conformance.status field
  /// </summary>
  public static class ConformanceStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// List of Contract actors.
  /// </summary>
  public class ContractActor : BackboneElement {
    /// <summary>
    /// Who or what actors are assigned roles in this Contract.
    /// </summary>
    [JsonProperty("entity")]
    public Reference Entity { get; set; }
    /// <summary>
    /// Role type of actors assigned roles in this Contract.
    /// </summary>
    [JsonProperty("role")]
    public List<CodeableConcept> Role { get; set; }
  }
  /// <summary>
  /// Contract Valued Item List.
  /// </summary>
  public class ContractValuedItem : BackboneElement {
    /// <summary>
    /// Indicates the time during which this Contract ValuedItem information is effective.
    /// </summary>
    [JsonProperty("effectiveTime")]
    public string EffectiveTime { get; set; }
    [JsonProperty("_effectiveTime")]
    public Element _EffectiveTime { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    [JsonProperty("entityCodeableConcept")]
    public CodeableConcept EntityCodeableConcept { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    [JsonProperty("entityReference")]
    public Reference EntityReference { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    [JsonProperty("factor")]
    public decimal? Factor { get; set; }
    [JsonProperty("_factor")]
    public Element _Factor { get; set; }
    /// <summary>
    /// Identifies a Contract Valued Item instance.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    [JsonProperty("net")]
    public Quantity Net { get; set; }
    /// <summary>
    /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
    /// </summary>
    [JsonProperty("points")]
    public decimal? Points { get; set; }
    [JsonProperty("_points")]
    public Element _Points { get; set; }
    /// <summary>
    /// Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A Contract Valued Item unit valuation measure.
    /// </summary>
    [JsonProperty("unitPrice")]
    public Quantity UnitPrice { get; set; }
  }
  /// <summary>
  /// Party signing this Contract.
  /// </summary>
  public class ContractSigner : BackboneElement {
    /// <summary>
    /// Party which is a signator to this Contract.
    /// </summary>
    [JsonProperty("party")]
    public Reference Party { get; set; }
    /// <summary>
    /// Legally binding Contract DSIG signature contents in Base64.
    /// </summary>
    [JsonProperty("signature")]
    public string Signature { get; set; }
    [JsonProperty("_signature")]
    public Element _Signature { get; set; }
    /// <summary>
    /// Role of this Contract signer, e.g. notary, grantee.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// List of actors participating in this Contract Provision.
  /// </summary>
  public class ContractTermActor : BackboneElement {
    /// <summary>
    /// The actor assigned a role in this Contract Provision.
    /// </summary>
    [JsonProperty("entity")]
    public Reference Entity { get; set; }
    /// <summary>
    /// Role played by the actor assigned this role in this Contract Provision.
    /// </summary>
    [JsonProperty("role")]
    public List<CodeableConcept> Role { get; set; }
  }
  /// <summary>
  /// Contract Provision Valued Item List.
  /// </summary>
  public class ContractTermValuedItem : BackboneElement {
    /// <summary>
    /// Indicates the time during which this Contract Term ValuedItem information is effective.
    /// </summary>
    [JsonProperty("effectiveTime")]
    public string EffectiveTime { get; set; }
    [JsonProperty("_effectiveTime")]
    public Element _EffectiveTime { get; set; }
    /// <summary>
    /// Specific type of Contract Provision Valued Item that may be priced.
    /// </summary>
    [JsonProperty("entityCodeableConcept")]
    public CodeableConcept EntityCodeableConcept { get; set; }
    /// <summary>
    /// Specific type of Contract Provision Valued Item that may be priced.
    /// </summary>
    [JsonProperty("entityReference")]
    public Reference EntityReference { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    [JsonProperty("factor")]
    public decimal? Factor { get; set; }
    [JsonProperty("_factor")]
    public Element _Factor { get; set; }
    /// <summary>
    /// Identifies a Contract Provision Valued Item instance.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    [JsonProperty("net")]
    public Quantity Net { get; set; }
    /// <summary>
    /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.
    /// </summary>
    [JsonProperty("points")]
    public decimal? Points { get; set; }
    [JsonProperty("_points")]
    public Element _Points { get; set; }
    /// <summary>
    /// Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A Contract Provision Valued Item unit valuation measure.
    /// </summary>
    [JsonProperty("unitPrice")]
    public Quantity UnitPrice { get; set; }
  }
  /// <summary>
  /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
  /// </summary>
  public class ContractTerm : BackboneElement {
    /// <summary>
    /// Action stipulated by this Contract Provision.
    /// </summary>
    [JsonProperty("action")]
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Reason or purpose for the action stipulated by this Contract Provision.
    /// </summary>
    [JsonProperty("actionReason")]
    public List<CodeableConcept> ActionReason { get; set; }
    /// <summary>
    /// List of actors participating in this Contract Provision.
    /// </summary>
    [JsonProperty("actor")]
    public List<ContractTermActor> Actor { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract Provision is applicable.
    /// </summary>
    [JsonProperty("applies")]
    public Period Applies { get; set; }
    /// <summary>
    /// Nested group of Contract Provisions.
    /// </summary>
    [JsonProperty("group")]
    public List<ContractTerm> Group { get; set; }
    /// <summary>
    /// Unique identifier for this particular Contract Provision.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// When this Contract Provision was issued.
    /// </summary>
    [JsonProperty("issued")]
    public string Issued { get; set; }
    [JsonProperty("_issued")]
    public Element _Issued { get; set; }
    /// <summary>
    /// Who or what this Contract Provision is about.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.
    /// </summary>
    [JsonProperty("subType")]
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Human readable form of this Contract Provision.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Contract Provision Valued Item List.
    /// </summary>
    [JsonProperty("valuedItem")]
    public List<ContractTermValuedItem> ValuedItem { get; set; }
  }
  /// <summary>
  /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
  /// </summary>
  public class ContractFriendly : BackboneElement {
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    [JsonProperty("contentAttachment")]
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    [JsonProperty("contentReference")]
    public Reference ContentReference { get; set; }
  }
  /// <summary>
  /// List of Legal expressions or representations of this Contract.
  /// </summary>
  public class ContractLegal : BackboneElement {
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    [JsonProperty("contentAttachment")]
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    [JsonProperty("contentReference")]
    public Reference ContentReference { get; set; }
  }
  /// <summary>
  /// List of Computable Policy Rule Language Representations of this Contract.
  /// </summary>
  public class ContractRule : BackboneElement {
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    [JsonProperty("contentAttachment")]
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    [JsonProperty("contentReference")]
    public Reference ContentReference { get; set; }
  }
  /// <summary>
  /// A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
  /// </summary>
  public class Contract : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Contract";
    /// <summary>
    /// Action stipulated by this Contract.
    /// </summary>
    [JsonProperty("action")]
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Reason for action stipulated by this Contract.
    /// </summary>
    [JsonProperty("actionReason")]
    public List<CodeableConcept> ActionReason { get; set; }
    /// <summary>
    /// List of Contract actors.
    /// </summary>
    [JsonProperty("actor")]
    public List<ContractActor> Actor { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract is applicable.
    /// </summary>
    [JsonProperty("applies")]
    public Period Applies { get; set; }
    /// <summary>
    /// A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
    /// </summary>
    [JsonProperty("authority")]
    public List<Reference> Authority { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    [JsonProperty("bindingAttachment")]
    public Attachment BindingAttachment { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    [JsonProperty("bindingReference")]
    public Reference BindingReference { get; set; }
    /// <summary>
    /// Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
    /// </summary>
    [JsonProperty("domain")]
    public List<Reference> Domain { get; set; }
    /// <summary>
    /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
    /// </summary>
    [JsonProperty("friendly")]
    public List<ContractFriendly> Friendly { get; set; }
    /// <summary>
    /// Unique identifier for this Contract.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// When this  Contract was issued.
    /// </summary>
    [JsonProperty("issued")]
    public string Issued { get; set; }
    [JsonProperty("_issued")]
    public Element _Issued { get; set; }
    /// <summary>
    /// List of Legal expressions or representations of this Contract.
    /// </summary>
    [JsonProperty("legal")]
    public List<ContractLegal> Legal { get; set; }
    /// <summary>
    /// List of Computable Policy Rule Language Representations of this Contract.
    /// </summary>
    [JsonProperty("rule")]
    public List<ContractRule> Rule { get; set; }
    /// <summary>
    /// Party signing this Contract.
    /// </summary>
    [JsonProperty("signer")]
    public List<ContractSigner> Signer { get; set; }
    /// <summary>
    /// Who and/or what this Contract is about: typically a Patient, Organization, or valued items such as goods and services.
    /// </summary>
    [JsonProperty("subject")]
    public List<Reference> Subject { get; set; }
    /// <summary>
    /// More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
    /// </summary>
    [JsonProperty("subType")]
    public List<CodeableConcept> SubType { get; set; }
    /// <summary>
    /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
    /// </summary>
    [JsonProperty("term")]
    public List<ContractTerm> Term { get; set; }
    /// <summary>
    /// Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Contract Valued Item List.
    /// </summary>
    [JsonProperty("valuedItem")]
    public List<ContractValuedItem> ValuedItem { get; set; }
  }
  /// <summary>
  /// Financial instrument which may be used to pay for or reimburse health care products and services.
  /// </summary>
  public class Coverage : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Coverage";
    /// <summary>
    /// Business Identification Number (BIN number) used to identify the routing  of eclaims if the insurer themselves don't have a BIN number for all of their business.
    /// </summary>
    [JsonProperty("bin")]
    public Identifier Bin { get; set; }
    /// <summary>
    /// The policy(s) which constitute this insurance coverage.
    /// </summary>
    [JsonProperty("contract")]
    public List<Reference> Contract { get; set; }
    /// <summary>
    /// For some coverage a single identifier is issued to the PolicyHolder and dependent number issues to each to each of their dependents to track and manage the plan.
    /// </summary>
    [JsonProperty("dependent")]
    public uint? Dependent { get; set; }
    /// <summary>
    /// Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
    /// </summary>
    [JsonProperty("group")]
    public string Group { get; set; }
    [JsonProperty("_group")]
    public Element _Group { get; set; }
    /// <summary>
    /// This value may uniquely identify the coverage or it may be used in conjunction with the additional identifiers below.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Need to identify the issuer to target for processing and for coordination of benefit processing.
    /// </summary>
    [JsonProperty("issuer")]
    public Reference Issuer { get; set; }
    /// <summary>
    /// The identifier for a community of providers.
    /// </summary>
    [JsonProperty("network")]
    public Identifier Network { get; set; }
    /// <summary>
    /// Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
    /// </summary>
    [JsonProperty("plan")]
    public string Plan { get; set; }
    [JsonProperty("_plan")]
    public Element _Plan { get; set; }
    /// <summary>
    /// Some coverage, for example social plans, may be offered in short time increments, for example for a week or a month at a time, so while the rest of the plan details and identifiers may remain constant over time, the instance is incremented with each renewal and provided to the covered party on their 'card'.
    /// </summary>
    [JsonProperty("sequence")]
    public uint? Sequence { get; set; }
    /// <summary>
    /// Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a specific employer group within a class of employers. May be referred to as a Section or Division ID.
    /// </summary>
    [JsonProperty("subPlan")]
    public string SubPlan { get; set; }
    [JsonProperty("_subPlan")]
    public Element _SubPlan { get; set; }
    /// <summary>
    /// The party who 'owns' the insurance contractual relationship to the policy or to whom the benefit of the policy is due.
    /// </summary>
    [JsonProperty("subscriber")]
    public Reference Subscriber { get; set; }
    /// <summary>
    /// The id issued to the subscriber.
    /// </summary>
    [JsonProperty("subscriberId")]
    public Identifier SubscriberId { get; set; }
    /// <summary>
    /// The order of application of coverages is dependent on the types of coverage.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class DataElementContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the data element.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
  /// </summary>
  public class DataElementMapping : BackboneElement {
    /// <summary>
    /// Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
    /// </summary>
    [JsonProperty("comments")]
    public string Comments { get; set; }
    [JsonProperty("_comments")]
    public Element _Comments { get; set; }
    /// <summary>
    /// An internal id that is used to identify this mapping set when specific mappings are made on a per-element basis.
    /// </summary>
    [JsonProperty("identity")]
    public string Identity { get; set; }
    [JsonProperty("_identity")]
    public Element _Identity { get; set; }
    /// <summary>
    /// A name for the specification that is being mapped to.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// An absolute URI that identifies the specification that this mapping is expressed to.
    /// </summary>
    [JsonProperty("uri")]
    public string Uri { get; set; }
    [JsonProperty("_uri")]
    public Element _Uri { get; set; }
  }
  /// <summary>
  /// The formal description of a single piece of information that can be gathered and reported.
  /// </summary>
  public class DataElement : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DataElement";
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<DataElementContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the definition of the data element. Copyright statements are generally legal restrictions on the use and publishing of the details of the definition of the data element.
    /// </summary>
    [JsonProperty("copyright")]
    public string Copyright { get; set; }
    [JsonProperty("_copyright")]
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date this version of the data element was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the data element  changes.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// 1.
    /// </summary>
    [JsonProperty("element")]
    public List<ElementDefinition> Element { get; set; }
    /// <summary>
    /// A flag to indicate that this search data element definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// Formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
    /// </summary>
    [JsonProperty("mapping")]
    public List<DataElementMapping> Mapping { get; set; }
    /// <summary>
    /// The term used by humans to refer to the data element.  Should ideally be unique within the context in which the data element is expected to be used.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the data element.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Allows filtering of data elements that are appropriate for use.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Allows determining the degree of comparability of data element instances. Less granular data elements result in data that is less comparable (or at least requires more work to compare).
    /// </summary>
    [JsonProperty("stringency")]
    public string Stringency { get; set; }
    [JsonProperty("_stringency")]
    public Element _Stringency { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of data element definitions.
    /// </summary>
    [JsonProperty("useContext")]
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// There may be multiple resource versions of the data element that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the DataElement.status field
  /// </summary>
  public static class DataElementStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Code Values for the DataElement.stringency field
  /// </summary>
  public static class DataElementStringencyCodes {
    public const string COMPARABLE = "comparable";
    public const string FULLY_SPECIFIED = "fully-specified";
    public const string EQUIVALENT = "equivalent";
    public const string CONVERTABLE = "convertable";
    public const string SCALEABLE = "scaleable";
    public const string FLEXIBLE = "flexible";
  }
  /// <summary>
  /// Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
  /// </summary>
  public class DetectedIssueMitigation : BackboneElement {
    /// <summary>
    /// Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
    /// </summary>
    [JsonProperty("action")]
    public CodeableConcept Action { get; set; }
    /// <summary>
    /// Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Indicates when the mitigating action was documented.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
  }
  /// <summary>
  /// Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
  /// </summary>
  public class DetectedIssue : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DetectedIssue";
    /// <summary>
    /// Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Identifies the general type of issue identified.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// No-one can be responsible for mitigation prior to the issue being identified.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// A textual explanation of the detected issue.
    /// </summary>
    [JsonProperty("detail")]
    public string Detail { get; set; }
    [JsonProperty("_detail")]
    public Element _Detail { get; set; }
    /// <summary>
    /// Allows linking instances of the same detected issue found on different servers.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Indicates the resource representing the current activity or proposed activity that is potentially problematic.
    /// </summary>
    [JsonProperty("implicated")]
    public List<Reference> Implicated { get; set; }
    /// <summary>
    /// Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
    /// </summary>
    [JsonProperty("mitigation")]
    public List<DetectedIssueMitigation> Mitigation { get; set; }
    /// <summary>
    /// While the subject could be inferred by tracing the subject of the implicated resources, it's useful to have a direct link for query purposes.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
    /// </summary>
    [JsonProperty("reference")]
    public string Reference { get; set; }
    [JsonProperty("_reference")]
    public Element _Reference { get; set; }
    /// <summary>
    /// Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
    /// </summary>
    [JsonProperty("severity")]
    public string Severity { get; set; }
    [JsonProperty("_severity")]
    public Element _Severity { get; set; }
  }
  /// <summary>
  /// Code Values for the DetectedIssue.severity field
  /// </summary>
  public static class DetectedIssueSeverityCodes {
    public const string HIGH = "high";
    public const string MODERATE = "moderate";
    public const string LOW = "low";
  }
  /// <summary>
  /// This resource identifies an instance of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
  /// </summary>
  public class Device : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Device";
    /// <summary>
    /// Contact details for an organization or a particular human that is responsible for the device.
    /// </summary>
    [JsonProperty("contact")]
    public List<ContactPoint> Contact { get; set; }
    /// <summary>
    /// The date and time beyond which this device is no longer valid or should not be used (if applicable).
    /// </summary>
    [JsonProperty("expiry")]
    public string Expiry { get; set; }
    [JsonProperty("_expiry")]
    public Element _Expiry { get; set; }
    /// <summary>
    /// Unique instance identifiers assigned to a device by organizations like manufacturers or owners. If the identifier identifies the type of device, Device.type should be used.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The place where the device can be found.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// Lot number assigned by the manufacturer.
    /// </summary>
    [JsonProperty("lotNumber")]
    public string LotNumber { get; set; }
    [JsonProperty("_lotNumber")]
    public Element _LotNumber { get; set; }
    /// <summary>
    /// The date and time when the device was manufactured.
    /// </summary>
    [JsonProperty("manufactureDate")]
    public string ManufactureDate { get; set; }
    [JsonProperty("_manufactureDate")]
    public Element _ManufactureDate { get; set; }
    /// <summary>
    /// A name of the manufacturer.
    /// </summary>
    [JsonProperty("manufacturer")]
    public string Manufacturer { get; set; }
    [JsonProperty("_manufacturer")]
    public Element _Manufacturer { get; set; }
    /// <summary>
    /// The "model" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.
    /// </summary>
    [JsonProperty("model")]
    public string Model { get; set; }
    [JsonProperty("_model")]
    public Element _Model { get; set; }
    /// <summary>
    /// Descriptive information, usage information or implantation information that is not captured in an existing element.
    /// </summary>
    [JsonProperty("note")]
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// An organization that is responsible for the provision and ongoing maintenance of the device.
    /// </summary>
    [JsonProperty("owner")]
    public Reference Owner { get; set; }
    /// <summary>
    /// Patient information, if the resource is affixed to a person.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// Status of the Device availability.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Code or identifier to identify a kind of device.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// United States Food and Drug Administration mandated Unique Device Identifier (UDI). Use the human readable information (the content that the user sees, which is sometimes different to the exact syntax represented in the barcode)  - see http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/UniqueDeviceIdentification/default.htm.
    /// </summary>
    [JsonProperty("udi")]
    public string Udi { get; set; }
    [JsonProperty("_udi")]
    public Element _Udi { get; set; }
    /// <summary>
    /// A network address on which the device may be contacted directly.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the Device.status field
  /// </summary>
  public static class DeviceStatusCodes {
    public const string AVAILABLE = "available";
    public const string NOT_AVAILABLE = "not-available";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Describes the production specification such as component revision, serial number, etc.
  /// </summary>
  public class DeviceComponentProductionSpecification : BackboneElement {
    /// <summary>
    /// Describes the internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacture can make use of.
    /// </summary>
    [JsonProperty("componentId")]
    public Identifier ComponentId { get; set; }
    /// <summary>
    /// Describes the printable string defining the component.
    /// </summary>
    [JsonProperty("productionSpec")]
    public string ProductionSpec { get; set; }
    [JsonProperty("_productionSpec")]
    public Element _ProductionSpec { get; set; }
    /// <summary>
    /// Describes the specification type, such as, serial number, part number, hardware revision, software revision, etc.
    /// </summary>
    [JsonProperty("specType")]
    public CodeableConcept SpecType { get; set; }
  }
  /// <summary>
  /// Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
  /// </summary>
  public class DeviceComponent : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DeviceComponent";
    /// <summary>
    /// Describes the local assigned unique identification by the software. For example: handle ID.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Describes the language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.
    /// </summary>
    [JsonProperty("languageCode")]
    public CodeableConcept LanguageCode { get; set; }
    /// <summary>
    /// Describes the timestamp for the most recent system change which includes device configuration or setting change.
    /// </summary>
    [JsonProperty("lastSystemChange")]
    public string LastSystemChange { get; set; }
    [JsonProperty("_lastSystemChange")]
    public Element _LastSystemChange { get; set; }
    /// <summary>
    /// Describes the physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
    /// </summary>
    [JsonProperty("measurementPrinciple")]
    public string MeasurementPrinciple { get; set; }
    [JsonProperty("_measurementPrinciple")]
    public Element _MeasurementPrinciple { get; set; }
    /// <summary>
    /// Indicates current operational status of the device. For example: On, Off, Standby, etc.
    /// </summary>
    [JsonProperty("operationalStatus")]
    public List<CodeableConcept> OperationalStatus { get; set; }
    /// <summary>
    /// Describes the parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
    /// </summary>
    [JsonProperty("parameterGroup")]
    public CodeableConcept ParameterGroup { get; set; }
    /// <summary>
    /// Describes the link to the parent resource. For example: Channel is linked to its VMD parent.
    /// </summary>
    [JsonProperty("parent")]
    public Reference Parent { get; set; }
    /// <summary>
    /// Describes the production specification such as component revision, serial number, etc.
    /// </summary>
    [JsonProperty("productionSpecification")]
    public List<DeviceComponentProductionSpecification> ProductionSpecification { get; set; }
    /// <summary>
    /// Describes the link to the source Device that contains administrative device information such as manufacture, serial number, etc.
    /// </summary>
    [JsonProperty("source")]
    public Reference Source { get; set; }
    /// <summary>
    /// Describes the specific component type as defined in the object-oriented or metric nomenclature partition.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the DeviceComponent.measurementPrinciple field
  /// </summary>
  public static class DeviceComponentMeasurementPrincipleCodes {
    public const string OTHER = "other";
    public const string CHEMICAL = "chemical";
    public const string ELECTRICAL = "electrical";
    public const string IMPEDANCE = "impedance";
    public const string NUCLEAR = "nuclear";
    public const string OPTICAL = "optical";
    public const string THERMAL = "thermal";
    public const string BIOLOGICAL = "biological";
    public const string MECHANICAL = "mechanical";
    public const string ACOUSTICAL = "acoustical";
    public const string MANUAL_PLUS = "manual+";
  }
  /// <summary>
  /// Describes the calibrations that have been performed or that are required to be performed.
  /// </summary>
  public class DeviceMetricCalibration : BackboneElement {
    /// <summary>
    /// Describes the state of the calibration.
    /// </summary>
    [JsonProperty("state")]
    public string State { get; set; }
    [JsonProperty("_state")]
    public Element _State { get; set; }
    /// <summary>
    /// Describes the time last calibration has been performed.
    /// </summary>
    [JsonProperty("time")]
    public string Time { get; set; }
    [JsonProperty("_time")]
    public Element _Time { get; set; }
    /// <summary>
    /// Describes the type of the calibration method.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the DeviceMetric.calibration.state field
  /// </summary>
  public static class DeviceMetricCalibrationStateCodes {
    public const string NOT_CALIBRATED = "not-calibrated";
    public const string CALIBRATION_REQUIRED = "calibration-required";
    public const string CALIBRATED = "calibrated";
    public const string UNSPECIFIED = "unspecified";
  }
  /// <summary>
  /// Code Values for the DeviceMetric.calibration.type field
  /// </summary>
  public static class DeviceMetricCalibrationTypeCodes {
    public const string UNSPECIFIED = "unspecified";
    public const string OFFSET = "offset";
    public const string GAIN = "gain";
    public const string TWO_POINT = "two-point";
  }
  /// <summary>
  /// Describes a measurement, calculation or setting capability of a medical device.
  /// </summary>
  public class DeviceMetric : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DeviceMetric";
    /// <summary>
    /// Describes the calibrations that have been performed or that are required to be performed.
    /// </summary>
    [JsonProperty("calibration")]
    public List<DeviceMetricCalibration> Calibration { get; set; }
    /// <summary>
    /// Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
    /// </summary>
    [JsonProperty("category")]
    public string Category { get; set; }
    [JsonProperty("_category")]
    public Element _Category { get; set; }
    /// <summary>
    /// Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
    /// </summary>
    [JsonProperty("color")]
    public string Color { get; set; }
    [JsonProperty("_color")]
    public Element _Color { get; set; }
    /// <summary>
    /// Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
    /// </summary>
    [JsonProperty("measurementPeriod")]
    public Timing MeasurementPeriod { get; set; }
    /// <summary>
    /// Indicates current operational state of the device. For example: On, Off, Standby, etc.
    /// </summary>
    [JsonProperty("operationalStatus")]
    public string OperationalStatus { get; set; }
    [JsonProperty("_operationalStatus")]
    public Element _OperationalStatus { get; set; }
    /// <summary>
    /// Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
    /// </summary>
    [JsonProperty("parent")]
    public Reference Parent { get; set; }
    /// <summary>
    /// Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacture, serial number, etc.
    /// </summary>
    [JsonProperty("source")]
    public Reference Source { get; set; }
    /// <summary>
    /// Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
    /// </summary>
    [JsonProperty("unit")]
    public CodeableConcept Unit { get; set; }
  }
  /// <summary>
  /// Code Values for the DeviceMetric.category field
  /// </summary>
  public static class DeviceMetricCategoryCodes {
    public const string MEASUREMENT = "measurement";
    public const string SETTING = "setting";
    public const string CALCULATION = "calculation";
    public const string UNSPECIFIED = "unspecified";
  }
  /// <summary>
  /// Code Values for the DeviceMetric.color field
  /// </summary>
  public static class DeviceMetricColorCodes {
    public const string BLACK = "black";
    public const string RED = "red";
    public const string GREEN = "green";
    public const string YELLOW = "yellow";
    public const string BLUE = "blue";
    public const string MAGENTA = "magenta";
    public const string CYAN = "cyan";
    public const string WHITE = "white";
  }
  /// <summary>
  /// Code Values for the DeviceMetric.operationalStatus field
  /// </summary>
  public static class DeviceMetricOperationalStatusCodes {
    public const string ON = "on";
    public const string OFF = "off";
    public const string STANDBY = "standby";
  }
  /// <summary>
  /// Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
  /// </summary>
  public class DeviceUseRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DeviceUseRequest";
    /// <summary>
    /// Knowing where the device is targeted is important for tracking if multiple sites are possible.
    /// </summary>
    [JsonProperty("bodySiteCodeableConcept")]
    public CodeableConcept BodySiteCodeableConcept { get; set; }
    /// <summary>
    /// Knowing where the device is targeted is important for tracking if multiple sites are possible.
    /// </summary>
    [JsonProperty("bodySiteReference")]
    public Reference BodySiteReference { get; set; }
    /// <summary>
    /// The details of the device  to be used.
    /// </summary>
    [JsonProperty("device")]
    public Reference Device { get; set; }
    /// <summary>
    /// An encounter that provides additional context in which this request is made.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifiers assigned to this order by the orderer or by the receiver.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Reason or justification for the use of this device.
    /// </summary>
    [JsonProperty("indication")]
    public List<CodeableConcept> Indication { get; set; }
    /// <summary>
    /// Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
    /// </summary>
    [JsonProperty("notes")]
    public List<string> Notes { get; set; }
    [JsonProperty("_notes")]
    public List<Element> _Notes { get; set; }
    /// <summary>
    /// The time when the request was made.
    /// </summary>
    [JsonProperty("orderedOn")]
    public string OrderedOn { get; set; }
    [JsonProperty("_orderedOn")]
    public Element _OrderedOn { get; set; }
    /// <summary>
    /// Characterizes how quickly the  use of device must be initiated. Includes concepts such as stat, urgent, routine.
    /// </summary>
    [JsonProperty("priority")]
    public string Priority { get; set; }
    [JsonProperty("_priority")]
    public Element _Priority { get; set; }
    /// <summary>
    /// The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.
    /// </summary>
    [JsonProperty("prnReason")]
    public List<CodeableConcept> PrnReason { get; set; }
    /// <summary>
    /// The time at which the request was made/recorded.
    /// </summary>
    [JsonProperty("recordedOn")]
    public string RecordedOn { get; set; }
    [JsonProperty("_recordedOn")]
    public Element _RecordedOn { get; set; }
    /// <summary>
    /// The status of the request.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The patient who will use the device.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("timingTiming")]
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("timingPeriod")]
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("timingDateTime")]
    public string TimingDateTime { get; set; }
    [JsonProperty("_timingDateTime")]
    public Element _TimingDateTime { get; set; }
  }
  /// <summary>
  /// Code Values for the DeviceUseRequest.priority field
  /// </summary>
  public static class DeviceUseRequestPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string STAT = "stat";
    public const string ASAP = "asap";
  }
  /// <summary>
  /// Code Values for the DeviceUseRequest.status field
  /// </summary>
  public static class DeviceUseRequestStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PLANNED = "planned";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string ABORTED = "aborted";
  }
  /// <summary>
  /// A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
  /// </summary>
  public class DeviceUseStatement : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DeviceUseStatement";
    /// <summary>
    /// Knowing where the device is targeted is important for tracking if multiple sites are possible.
    /// </summary>
    [JsonProperty("bodySiteCodeableConcept")]
    public CodeableConcept BodySiteCodeableConcept { get; set; }
    /// <summary>
    /// Knowing where the device is targeted is important for tracking if multiple sites are possible.
    /// </summary>
    [JsonProperty("bodySiteReference")]
    public Reference BodySiteReference { get; set; }
    /// <summary>
    /// The details of the device used.
    /// </summary>
    [JsonProperty("device")]
    public Reference Device { get; set; }
    /// <summary>
    /// An external identifier for this statement such as an IRI.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Reason or justification for the use of the device.
    /// </summary>
    [JsonProperty("indication")]
    public List<CodeableConcept> Indication { get; set; }
    /// <summary>
    /// Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
    /// </summary>
    [JsonProperty("notes")]
    public List<string> Notes { get; set; }
    [JsonProperty("_notes")]
    public List<Element> _Notes { get; set; }
    /// <summary>
    /// The time at which the statement was made/recorded.
    /// </summary>
    [JsonProperty("recordedOn")]
    public string RecordedOn { get; set; }
    [JsonProperty("_recordedOn")]
    public Element _RecordedOn { get; set; }
    /// <summary>
    /// The patient who used the device.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// How often the device was used.
    /// </summary>
    [JsonProperty("timingTiming")]
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// How often the device was used.
    /// </summary>
    [JsonProperty("timingPeriod")]
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// How often the device was used.
    /// </summary>
    [JsonProperty("timingDateTime")]
    public string TimingDateTime { get; set; }
    [JsonProperty("_timingDateTime")]
    public Element _TimingDateTime { get; set; }
    /// <summary>
    /// The time period over which the device was used.
    /// </summary>
    [JsonProperty("whenUsed")]
    public Period WhenUsed { get; set; }
  }
  /// <summary>
  /// A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.
  /// </summary>
  public class DiagnosticOrderEvent : BackboneElement {
    /// <summary>
    /// The person responsible for performing or recording the action.
    /// </summary>
    [JsonProperty("actor")]
    public Reference Actor { get; set; }
    /// <summary>
    /// The date/time at which the event occurred.
    /// </summary>
    [JsonProperty("dateTime")]
    public string DateTime { get; set; }
    [JsonProperty("_dateTime")]
    public Element _DateTime { get; set; }
    /// <summary>
    /// Additional information about the event that occurred - e.g. if the status remained unchanged.
    /// </summary>
    [JsonProperty("description")]
    public CodeableConcept Description { get; set; }
    /// <summary>
    /// The status for the event.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// Code Values for the DiagnosticOrder.event.status field
  /// </summary>
  public static class DiagnosticOrderEventStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string PLANNED = "planned";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string REVIEW = "review";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string FAILED = "failed";
  }
  /// <summary>
  /// The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
  /// </summary>
  public class DiagnosticOrderItem : BackboneElement {
    /// <summary>
    /// Anatomical location where the request test should be performed.  This is the target site.
    /// </summary>
    [JsonProperty("bodySite")]
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// A code that identifies a particular diagnostic investigation, or panel of investigations, that have been requested.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A summary of the events of interest that have occurred as this item of the request is processed.
    /// </summary>
    [JsonProperty("event")]
    public List<DiagnosticOrderEvent> Event { get; set; }
    /// <summary>
    /// If the item is related to a specific specimen.
    /// </summary>
    [JsonProperty("specimen")]
    public List<Reference> Specimen { get; set; }
    /// <summary>
    /// The status of this individual item within the order.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// Code Values for the DiagnosticOrder.item.status field
  /// </summary>
  public static class DiagnosticOrderItemStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string PLANNED = "planned";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string REVIEW = "review";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string FAILED = "failed";
  }
  /// <summary>
  /// A record of a request for a diagnostic investigation service to be performed.
  /// </summary>
  public class DiagnosticOrder : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DiagnosticOrder";
    /// <summary>
    /// An encounter that provides additional information about the healthcare context in which this request is made.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.
    /// </summary>
    [JsonProperty("event")]
    public List<DiagnosticOrderEvent> Event { get; set; }
    /// <summary>
    /// Identifiers assigned to this order instance by the orderer and/or  the receiver and/or order fulfiller.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
    /// </summary>
    [JsonProperty("item")]
    public List<DiagnosticOrderItem> Item { get; set; }
    /// <summary>
    /// Any other notes associated with this patient, specimen or order (e.g. "patient hates needles").
    /// </summary>
    [JsonProperty("note")]
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The practitioner that holds legal responsibility for ordering the investigation.
    /// </summary>
    [JsonProperty("orderer")]
    public Reference Orderer { get; set; }
    /// <summary>
    /// The clinical priority associated with this order.
    /// </summary>
    [JsonProperty("priority")]
    public string Priority { get; set; }
    [JsonProperty("_priority")]
    public Element _Priority { get; set; }
    /// <summary>
    /// An explanation or justification for why this diagnostic investigation is being requested.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation.
    /// </summary>
    [JsonProperty("reason")]
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// One or more specimens that the diagnostic investigation is about.
    /// </summary>
    [JsonProperty("specimen")]
    public List<Reference> Specimen { get; set; }
    /// <summary>
    /// The status of the order.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Who or what the investigation is to be performed on. This is usually a human patient, but diagnostic tests can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Additional clinical information about the patient or specimen that may influence test interpretations.  This includes observations explicitly requested by the producer(filler) to provide context or supporting information needed to complete the order.
    /// </summary>
    [JsonProperty("supportingInformation")]
    public List<Reference> SupportingInformation { get; set; }
  }
  /// <summary>
  /// Code Values for the DiagnosticOrder.priority field
  /// </summary>
  public static class DiagnosticOrderPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string STAT = "stat";
    public const string ASAP = "asap";
  }
  /// <summary>
  /// Code Values for the DiagnosticOrder.status field
  /// </summary>
  public static class DiagnosticOrderStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string PLANNED = "planned";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string REVIEW = "review";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string FAILED = "failed";
  }
  /// <summary>
  /// Many diagnostic services include images in the report as part of their service.
  /// </summary>
  public class DiagnosticReportImage : BackboneElement {
    /// <summary>
    /// The provider of the report should make a comment about each image included in the report.
    /// </summary>
    [JsonProperty("comment")]
    public string Comment { get; set; }
    [JsonProperty("_comment")]
    public Element _Comment { get; set; }
    /// <summary>
    /// Reference to the image source.
    /// </summary>
    [JsonProperty("link")]
    public Reference Link { get; set; }
  }
  /// <summary>
  /// The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
  /// </summary>
  public class DiagnosticReport : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DiagnosticReport";
    /// <summary>
    /// A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// A code or name that describes this diagnostic report.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Codes for the conclusion.
    /// </summary>
    [JsonProperty("codedDiagnosis")]
    public List<CodeableConcept> CodedDiagnosis { get; set; }
    /// <summary>
    /// Need to be able to provide a conclusion that is not lost among the basic result data.
    /// </summary>
    [JsonProperty("conclusion")]
    public string Conclusion { get; set; }
    [JsonProperty("_conclusion")]
    public Element _Conclusion { get; set; }
    /// <summary>
    /// Need to know where in the patient history to file/present this report.
    /// </summary>
    [JsonProperty("effectiveDateTime")]
    public string EffectiveDateTime { get; set; }
    [JsonProperty("_effectiveDateTime")]
    public Element _EffectiveDateTime { get; set; }
    /// <summary>
    /// Need to know where in the patient history to file/present this report.
    /// </summary>
    [JsonProperty("effectivePeriod")]
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// The link to the health care event (encounter) when the order was made.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Need to know what identifier to use when making queries about this report from the source laboratory, and for linking to the report outside FHIR context.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Many diagnostic services include images in the report as part of their service.
    /// </summary>
    [JsonProperty("image")]
    public List<DiagnosticReportImage> Image { get; set; }
    /// <summary>
    /// One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
    /// </summary>
    [JsonProperty("imagingStudy")]
    public List<Reference> ImagingStudy { get; set; }
    /// <summary>
    /// Clinicians need to be able to check the date that the report was released.
    /// </summary>
    [JsonProperty("issued")]
    public string Issued { get; set; }
    [JsonProperty("_issued")]
    public Element _Issued { get; set; }
    /// <summary>
    /// Need to know whom to contact if there are queries about the results. Also may need to track the source of reports for secondary data analysis.
    /// </summary>
    [JsonProperty("performer")]
    public Reference Performer { get; set; }
    /// <summary>
    /// Gives Laboratory the ability to provide its own fully formatted report for clinical fidelity.
    /// </summary>
    [JsonProperty("presentedForm")]
    public List<Attachment> PresentedForm { get; set; }
    /// <summary>
    /// Need to be able to track completion of requests based on reports issued and also to report what diagnostic tests were requested (not always the same as what is delivered).
    /// </summary>
    [JsonProperty("request")]
    public List<Reference> Request { get; set; }
    /// <summary>
    /// Need to support individual results, or report groups of results, where the result grouping is arbitrary, but meaningful. This structure is recursive - observations can contain observations.
    /// </summary>
    [JsonProperty("result")]
    public List<Reference> Result { get; set; }
    /// <summary>
    /// Need to be able to report information about the collected specimens on which the report is based.
    /// </summary>
    [JsonProperty("specimen")]
    public List<Reference> Specimen { get; set; }
    /// <summary>
    /// Diagnostic services routinely issue provisional/incomplete reports, and sometimes withdraw previously released reports.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// SHALL know the subject context.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// Code Values for the DiagnosticReport.status field
  /// </summary>
  public static class DiagnosticReportStatusCodes {
    public const string REGISTERED = "registered";
    public const string PARTIAL = "partial";
    public const string FINAL = "final";
    public const string CORRECTED = "corrected";
    public const string APPENDED = "appended";
    public const string CANCELLED = "cancelled";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// The list of Documents included in the manifest.
  /// </summary>
  public class DocumentManifestContent : BackboneElement {
    /// <summary>
    /// The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
    /// </summary>
    [JsonProperty("pAttachment")]
    public Attachment PAttachment { get; set; }
    /// <summary>
    /// The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
    /// </summary>
    [JsonProperty("pReference")]
    public Reference PReference { get; set; }
  }
  /// <summary>
  /// Related identifiers or resources associated with the DocumentManifest.
  /// </summary>
  public class DocumentManifestRelated : BackboneElement {
    /// <summary>
    /// Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Related Resource to this DocumentManifest. For example, Order, DiagnosticOrder,  Procedure, EligibilityRequest, etc.
    /// </summary>
    [JsonProperty("ref")]
    public Reference Ref { get; set; }
  }
  /// <summary>
  /// A manifest that defines a set of documents.
  /// </summary>
  public class DocumentManifest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DocumentManifest";
    /// <summary>
    /// Identifies who is responsible for creating the manifest, and adding  documents to it.
    /// </summary>
    [JsonProperty("author")]
    public List<Reference> Author { get; set; }
    /// <summary>
    /// The list of Documents included in the manifest.
    /// </summary>
    [JsonProperty("content")]
    public List<DocumentManifestContent> Content { get; set; }
    /// <summary>
    /// When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// Helps humans to assess whether the document is of interest.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Other identifiers associated with the document manifest, including version independent  identifiers.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
    /// </summary>
    [JsonProperty("masterIdentifier")]
    public Identifier MasterIdentifier { get; set; }
    /// <summary>
    /// A patient, practitioner, or organization for which this set of documents is intended.
    /// </summary>
    [JsonProperty("recipient")]
    public List<Reference> Recipient { get; set; }
    /// <summary>
    /// Related identifiers or resources associated with the DocumentManifest.
    /// </summary>
    [JsonProperty("related")]
    public List<DocumentManifestRelated> Related { get; set; }
    /// <summary>
    /// Identifies the source system, application, or software that produced the document manifest.
    /// </summary>
    [JsonProperty("source")]
    public string Source { get; set; }
    [JsonProperty("_source")]
    public Element _Source { get; set; }
    /// <summary>
    /// The status of this document manifest.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the DocumentManifest.status field
  /// </summary>
  public static class DocumentManifestStatusCodes {
    public const string CURRENT = "current";
    public const string SUPERSEDED = "superseded";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Relationships that this document has with other document references that already exist.
  /// </summary>
  public class DocumentReferenceRelatesTo : BackboneElement {
    /// <summary>
    /// The type of relationship that this document has with anther document.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// The target document of this relationship.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
  }
  /// <summary>
  /// Code Values for the DocumentReference.relatesTo.code field
  /// </summary>
  public static class DocumentReferenceRelatesToCodeCodes {
    public const string REPLACES = "replaces";
    public const string TRANSFORMS = "transforms";
    public const string SIGNS = "signs";
    public const string APPENDS = "appends";
  }
  /// <summary>
  /// The document and format referenced. There may be multiple content element repetitions, each with a different format.
  /// </summary>
  public class DocumentReferenceContent : BackboneElement {
    /// <summary>
    /// The document or url of the document along with critical metadata to prove content has integrity.
    /// </summary>
    [JsonProperty("attachment")]
    public Attachment Attachment { get; set; }
    /// <summary>
    /// An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
    /// </summary>
    [JsonProperty("format")]
    public List<Coding> Format { get; set; }
  }
  /// <summary>
  /// Related identifiers or resources associated with the DocumentReference.
  /// </summary>
  public class DocumentReferenceContextRelated : BackboneElement {
    /// <summary>
    /// Related identifier to this DocumentReference. If both id and ref are present they shall refer to the same thing.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Related Resource to this DocumentReference. If both id and ref are present they shall refer to the same thing.
    /// </summary>
    [JsonProperty("ref")]
    public Reference Ref { get; set; }
  }
  /// <summary>
  /// The clinical context in which the document was prepared.
  /// </summary>
  public class DocumentReferenceContext : BackboneElement {
    /// <summary>
    /// Describes the clinical encounter or type of care that the document content is associated with.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
    /// </summary>
    [JsonProperty("event")]
    public List<CodeableConcept> Event { get; set; }
    /// <summary>
    /// The kind of facility where the patient was seen.
    /// </summary>
    [JsonProperty("facilityType")]
    public CodeableConcept FacilityType { get; set; }
    /// <summary>
    /// The time period over which the service that is described by the document was provided.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// This is an important piece of metadata that providers often rely upon to quickly sort and/or filter out to find specific content.
    /// </summary>
    [JsonProperty("practiceSetting")]
    public CodeableConcept PracticeSetting { get; set; }
    /// <summary>
    /// Related identifiers or resources associated with the DocumentReference.
    /// </summary>
    [JsonProperty("related")]
    public List<DocumentReferenceContextRelated> Related { get; set; }
    /// <summary>
    /// The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
    /// </summary>
    [JsonProperty("sourcePatientInfo")]
    public Reference SourcePatientInfo { get; set; }
  }
  /// <summary>
  /// A reference to a document .
  /// </summary>
  public class DocumentReference : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "DocumentReference";
    /// <summary>
    /// Which person or organization authenticates that this document is valid.
    /// </summary>
    [JsonProperty("authenticator")]
    public Reference Authenticator { get; set; }
    /// <summary>
    /// Identifies who is responsible for adding the information to the document.
    /// </summary>
    [JsonProperty("author")]
    public List<Reference> Author { get; set; }
    /// <summary>
    /// Helps humans to assess whether the document is of interest when viewing a list of documents.
    /// </summary>
    [JsonProperty("class")]
    public CodeableConcept Class { get; set; }
    /// <summary>
    /// The document and format referenced. There may be multiple content element repetitions, each with a different format.
    /// </summary>
    [JsonProperty("content")]
    public List<DocumentReferenceContent> Content { get; set; }
    /// <summary>
    /// The clinical context in which the document was prepared.
    /// </summary>
    [JsonProperty("context")]
    public DocumentReferenceContext Context { get; set; }
    /// <summary>
    /// When the document was created.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
    /// </summary>
    [JsonProperty("custodian")]
    public Reference Custodian { get; set; }
    /// <summary>
    /// Helps humans to assess whether the document is of interest.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// The status of the underlying document.
    /// </summary>
    [JsonProperty("docStatus")]
    public CodeableConcept DocStatus { get; set; }
    /// <summary>
    /// Other identifiers associated with the document, including version independent identifiers.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// When the document reference was created.
    /// </summary>
    [JsonProperty("indexed")]
    public string Indexed { get; set; }
    [JsonProperty("_indexed")]
    public Element _Indexed { get; set; }
    /// <summary>
    /// The structure and format of this Id shall be consistent with the specification corresponding to the formatCode attribute. (e.g. for a DICOM standard document a 64 character numeric UID, for an HL7 CDA format a serialization of the CDA Document Id extension and root in the form "oid^extension", where OID is a 64 digits max, and the Id is a 16 UTF-8 char max. If the OID is coded without the extension then the '^' character shall not be included.).
    /// </summary>
    [JsonProperty("masterIdentifier")]
    public Identifier MasterIdentifier { get; set; }
    /// <summary>
    /// Relationships that this document has with other document references that already exist.
    /// </summary>
    [JsonProperty("relatesTo")]
    public List<DocumentReferenceRelatesTo> RelatesTo { get; set; }
    /// <summary>
    /// Use of the Health Care Privacy/Security Classification (HCS) system of security-tag use is recommended.
    /// </summary>
    [JsonProperty("securityLabel")]
    public List<CodeableConcept> SecurityLabel { get; set; }
    /// <summary>
    /// The status of this document reference.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the DocumentReference.status field
  /// </summary>
  public static class DocumentReferenceStatusCodes {
    public const string CURRENT = "current";
    public const string SUPERSEDED = "superseded";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// A resource that includes narrative, extensions, and contained resources.
  /// </summary>
  public class DomainResource : Resource {
    /// <summary>
    /// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
    /// </summary>
    [JsonProperty("contained")]
    public List<Resource> Contained { get; set; }
    /// <summary>
    /// May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    /// </summary>
    [JsonProperty("extension")]
    public List<Extension> Extension { get; set; }
    /// <summary>
    /// May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
    /// </summary>
    [JsonProperty("modifierExtension")]
    public List<Extension> ModifierExtension { get; set; }
    /// <summary>
    /// A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
    /// </summary>
    [JsonProperty("text")]
    public Narrative Text { get; set; }
  }
  /// <summary>
  /// This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.
  /// </summary>
  public class EligibilityRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "EligibilityRequest";
    /// <summary>
    /// The date when this resource was created.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("provider")]
    public Reference Provider { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
    /// <summary>
    /// The Insurer who is target  of the request.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
  }
  /// <summary>
  /// This resource provides eligibility and plan details from the processing of an Eligibility resource.
  /// </summary>
  public class EligibilityResponse : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "EligibilityResponse";
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    [JsonProperty("disposition")]
    public string Disposition { get; set; }
    [JsonProperty("_disposition")]
    public Element _Disposition { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Transaction status: error, complete.
    /// </summary>
    [JsonProperty("outcome")]
    public string Outcome { get; set; }
    [JsonProperty("_outcome")]
    public Element _Outcome { get; set; }
    /// <summary>
    /// Original request resource reference.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestOrganization")]
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestProvider")]
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
  }
  /// <summary>
  /// Code Values for the EligibilityResponse.outcome field
  /// </summary>
  public static class EligibilityResponseOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
  }
  /// <summary>
  /// The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
  /// </summary>
  public class EncounterStatusHistory : BackboneElement {
    /// <summary>
    /// The time that the episode was in the specified status.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// planned | arrived | in-progress | onleave | finished | cancelled.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// Code Values for the Encounter.statusHistory.status field
  /// </summary>
  public static class EncounterStatusHistoryStatusCodes {
    public const string PLANNED = "planned";
    public const string ARRIVED = "arrived";
    public const string IN_PROGRESS = "in-progress";
    public const string ONLEAVE = "onleave";
    public const string FINISHED = "finished";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// The list of people responsible for providing the service.
  /// </summary>
  public class EncounterParticipant : BackboneElement {
    /// <summary>
    /// Persons involved in the encounter other than the patient.
    /// </summary>
    [JsonProperty("individual")]
    public Reference Individual { get; set; }
    /// <summary>
    /// The period of time that the specified participant was present during the encounter. These can overlap or be sub-sets of the overall encounters period.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Role of participant in encounter.
    /// </summary>
    [JsonProperty("type")]
    public List<CodeableConcept> Type { get; set; }
  }
  /// <summary>
  /// Details about the admission to a healthcare service.
  /// </summary>
  public class EncounterHospitalization : BackboneElement {
    /// <summary>
    /// From where patient was admitted (physician referral, transfer).
    /// </summary>
    [JsonProperty("admitSource")]
    public CodeableConcept AdmitSource { get; set; }
    /// <summary>
    /// The admitting diagnosis field is used to record the diagnosis codes as reported by admitting practitioner. This could be different or in addition to the conditions reported as reason-condition(s) for the encounter.
    /// </summary>
    [JsonProperty("admittingDiagnosis")]
    public List<Reference> AdmittingDiagnosis { get; set; }
    /// <summary>
    /// Location to which the patient is discharged.
    /// </summary>
    [JsonProperty("destination")]
    public Reference Destination { get; set; }
    /// <summary>
    /// Used to track patient's diet restrictions and/or preference. For a complete description of the nutrition needs of a patient during their stay, one should use the nutritionOrder resource which links to Encounter.
    /// </summary>
    [JsonProperty("dietPreference")]
    public List<CodeableConcept> DietPreference { get; set; }
    /// <summary>
    /// The final diagnosis given a patient before release from the hospital after all testing, surgery, and workup are complete.
    /// </summary>
    [JsonProperty("dischargeDiagnosis")]
    public List<Reference> DischargeDiagnosis { get; set; }
    /// <summary>
    /// Category or kind of location after discharge.
    /// </summary>
    [JsonProperty("dischargeDisposition")]
    public CodeableConcept DischargeDisposition { get; set; }
    /// <summary>
    /// The location from which the patient came before admission.
    /// </summary>
    [JsonProperty("origin")]
    public Reference Origin { get; set; }
    /// <summary>
    /// Pre-admission identifier.
    /// </summary>
    [JsonProperty("preAdmissionIdentifier")]
    public Identifier PreAdmissionIdentifier { get; set; }
    /// <summary>
    /// Whether this hospitalization is a readmission and why if known.
    /// </summary>
    [JsonProperty("reAdmission")]
    public CodeableConcept ReAdmission { get; set; }
    /// <summary>
    /// Wheelchair, translator, stretcher, etc.
    /// </summary>
    [JsonProperty("specialArrangement")]
    public List<CodeableConcept> SpecialArrangement { get; set; }
    /// <summary>
    /// Special courtesies (VIP, board member).
    /// </summary>
    [JsonProperty("specialCourtesy")]
    public List<CodeableConcept> SpecialCourtesy { get; set; }
  }
  /// <summary>
  /// List of locations where  the patient has been during this encounter.
  /// </summary>
  public class EncounterLocation : BackboneElement {
    /// <summary>
    /// The location where the encounter takes place.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// Time period during which the patient was present at the location.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// Code Values for the Encounter.location.status field
  /// </summary>
  public static class EncounterLocationStatusCodes {
    public const string PLANNED = "planned";
    public const string ACTIVE = "active";
    public const string RESERVED = "reserved";
    public const string COMPLETED = "completed";
  }
  /// <summary>
  /// An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
  /// </summary>
  public class Encounter : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Encounter";
    /// <summary>
    /// The appointment that scheduled this encounter.
    /// </summary>
    [JsonProperty("appointment")]
    public Reference Appointment { get; set; }
    /// <summary>
    /// inpatient | outpatient | ambulatory | emergency +.
    /// </summary>
    [JsonProperty("class")]
    public string Class { get; set; }
    [JsonProperty("_class")]
    public Element _Class { get; set; }
    /// <summary>
    /// Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
    /// </summary>
    [JsonProperty("episodeOfCare")]
    public List<Reference> EpisodeOfCare { get; set; }
    /// <summary>
    /// Details about the admission to a healthcare service.
    /// </summary>
    [JsonProperty("hospitalization")]
    public EncounterHospitalization Hospitalization { get; set; }
    /// <summary>
    /// Identifier(s) by which this encounter is known.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The referral request this encounter satisfies (incoming referral).
    /// </summary>
    [JsonProperty("incomingReferral")]
    public List<Reference> IncomingReferral { get; set; }
    /// <summary>
    /// Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
    /// </summary>
    [JsonProperty("indication")]
    public List<Reference> Indication { get; set; }
    /// <summary>
    /// Quantity of time the encounter lasted. This excludes the time during leaves of absence.
    /// </summary>
    [JsonProperty("length")]
    public Quantity Length { get; set; }
    /// <summary>
    /// List of locations where  the patient has been during this encounter.
    /// </summary>
    [JsonProperty("location")]
    public List<EncounterLocation> Location { get; set; }
    /// <summary>
    /// The list of people responsible for providing the service.
    /// </summary>
    [JsonProperty("participant")]
    public List<EncounterParticipant> Participant { get; set; }
    /// <summary>
    /// Another Encounter of which this encounter is a part of (administratively or in time).
    /// </summary>
    [JsonProperty("partOf")]
    public Reference PartOf { get; set; }
    /// <summary>
    /// The patient present at the encounter.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The start and end time of the encounter.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Indicates the urgency of the encounter.
    /// </summary>
    [JsonProperty("priority")]
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
    /// </summary>
    [JsonProperty("reason")]
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization.
    /// </summary>
    [JsonProperty("serviceProvider")]
    public Reference ServiceProvider { get; set; }
    /// <summary>
    /// planned | arrived | in-progress | onleave | finished | cancelled.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
    /// </summary>
    [JsonProperty("statusHistory")]
    public List<EncounterStatusHistory> StatusHistory { get; set; }
    /// <summary>
    /// Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
    /// </summary>
    [JsonProperty("type")]
    public List<CodeableConcept> Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Encounter.class field
  /// </summary>
  public static class EncounterClassCodes {
    public const string INPATIENT = "inpatient";
    public const string OUTPATIENT = "outpatient";
    public const string AMBULATORY = "ambulatory";
    public const string EMERGENCY = "emergency";
  }
  /// <summary>
  /// Code Values for the Encounter.status field
  /// </summary>
  public static class EncounterStatusCodes {
    public const string PLANNED = "planned";
    public const string ARRIVED = "arrived";
    public const string IN_PROGRESS = "in-progress";
    public const string ONLEAVE = "onleave";
    public const string FINISHED = "finished";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
  /// </summary>
  public class EnrollmentRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "EnrollmentRequest";
    /// <summary>
    /// Need to identify the issuer to target for processing and for coordination of benefit processing.
    /// </summary>
    [JsonProperty("coverage")]
    public Reference Coverage { get; set; }
    /// <summary>
    /// The date when this resource was created.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("provider")]
    public Reference Provider { get; set; }
    /// <summary>
    /// To determine the relationship between the patient and the subscriber.
    /// </summary>
    [JsonProperty("relationship")]
    public Coding Relationship { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
    /// <summary>
    /// Patient Resource.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// The Insurer who is target  of the request.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
  }
  /// <summary>
  /// This resource provides enrollment and plan details from the processing of an Enrollment resource.
  /// </summary>
  public class EnrollmentResponse : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "EnrollmentResponse";
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    [JsonProperty("disposition")]
    public string Disposition { get; set; }
    [JsonProperty("_disposition")]
    public Element _Disposition { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Transaction status: error, complete.
    /// </summary>
    [JsonProperty("outcome")]
    public string Outcome { get; set; }
    [JsonProperty("_outcome")]
    public Element _Outcome { get; set; }
    /// <summary>
    /// Original request resource reference.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestOrganization")]
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestProvider")]
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
  }
  /// <summary>
  /// Code Values for the EnrollmentResponse.outcome field
  /// </summary>
  public static class EnrollmentResponseOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
  }
  /// <summary>
  /// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
  /// </summary>
  public class EpisodeOfCareStatusHistory : BackboneElement {
    /// <summary>
    /// The period during this EpisodeOfCare that the specific status applied.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// planned | waitlist | active | onhold | finished | cancelled.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// Code Values for the EpisodeOfCare.statusHistory.status field
  /// </summary>
  public static class EpisodeOfCareStatusHistoryStatusCodes {
    public const string PLANNED = "planned";
    public const string WAITLIST = "waitlist";
    public const string ACTIVE = "active";
    public const string ONHOLD = "onhold";
    public const string FINISHED = "finished";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// The list of practitioners that may be facilitating this episode of care for specific purposes.
  /// </summary>
  public class EpisodeOfCareCareTeam : BackboneElement {
    /// <summary>
    /// The practitioner (or Organization) within the team.
    /// </summary>
    [JsonProperty("member")]
    public Reference Member { get; set; }
    /// <summary>
    /// The period of time this practitioner is performing some role within the episode of care.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// The role this team member is taking within this episode of care.
    /// </summary>
    [JsonProperty("role")]
    public List<CodeableConcept> Role { get; set; }
  }
  /// <summary>
  /// An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
  /// </summary>
  public class EpisodeOfCare : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "EpisodeOfCare";
    /// <summary>
    /// The practitioner that is the care manager/care co-ordinator for this patient.
    /// </summary>
    [JsonProperty("careManager")]
    public Reference CareManager { get; set; }
    /// <summary>
    /// The list of practitioners that may be facilitating this episode of care for specific purposes.
    /// </summary>
    [JsonProperty("careTeam")]
    public List<EpisodeOfCareCareTeam> CareTeam { get; set; }
    /// <summary>
    /// A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
    /// </summary>
    [JsonProperty("condition")]
    public List<Reference> Condition { get; set; }
    /// <summary>
    /// Identifier(s) by which this EpisodeOfCare is known.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The organization that has assumed the specific responsibilities for the specified duration.
    /// </summary>
    [JsonProperty("managingOrganization")]
    public Reference ManagingOrganization { get; set; }
    /// <summary>
    /// The patient that this EpisodeOfCare applies to.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The interval during which the managing organization assumes the defined responsibility.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
    /// </summary>
    [JsonProperty("referralRequest")]
    public List<Reference> ReferralRequest { get; set; }
    /// <summary>
    /// planned | waitlist | active | onhold | finished | cancelled.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
    /// </summary>
    [JsonProperty("statusHistory")]
    public List<EpisodeOfCareStatusHistory> StatusHistory { get; set; }
    /// <summary>
    /// A classification of the type of encounter; e.g. specialist referral, disease management, type of funded care.
    /// </summary>
    [JsonProperty("type")]
    public List<CodeableConcept> Type { get; set; }
  }
  /// <summary>
  /// Code Values for the EpisodeOfCare.status field
  /// </summary>
  public static class EpisodeOfCareStatusCodes {
    public const string PLANNED = "planned";
    public const string WAITLIST = "waitlist";
    public const string ACTIVE = "active";
    public const string ONHOLD = "onhold";
    public const string FINISHED = "finished";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
  /// </summary>
  public class ExplanationOfBenefit : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ExplanationOfBenefit";
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    [JsonProperty("disposition")]
    public string Disposition { get; set; }
    [JsonProperty("_disposition")]
    public Element _Disposition { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Transaction status: error, complete.
    /// </summary>
    [JsonProperty("outcome")]
    public string Outcome { get; set; }
    [JsonProperty("_outcome")]
    public Element _Outcome { get; set; }
    /// <summary>
    /// Original request resource reference.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestOrganization")]
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestProvider")]
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
  }
  /// <summary>
  /// Code Values for the ExplanationOfBenefit.outcome field
  /// </summary>
  public static class ExplanationOfBenefitOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
  }
  /// <summary>
  /// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
  /// </summary>
  public class FamilyMemberHistoryCondition : BackboneElement {
    /// <summary>
    /// The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// An area where general notes can be placed about this specific condition.
    /// </summary>
    [JsonProperty("note")]
    public Annotation Note { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    [JsonProperty("onsetQuantity")]
    public Quantity OnsetQuantity { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    [JsonProperty("onsetRange")]
    public Range OnsetRange { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    [JsonProperty("onsetPeriod")]
    public Period OnsetPeriod { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    [JsonProperty("onsetString")]
    public string OnsetString { get; set; }
    [JsonProperty("_onsetString")]
    public Element _OnsetString { get; set; }
    /// <summary>
    /// Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
    /// </summary>
    [JsonProperty("outcome")]
    public CodeableConcept Outcome { get; set; }
  }
  /// <summary>
  /// Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
  /// </summary>
  public class FamilyMemberHistory : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "FamilyMemberHistory";
    /// <summary>
    /// While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
    /// </summary>
    [JsonProperty("ageQuantity")]
    public Quantity AgeQuantity { get; set; }
    /// <summary>
    /// While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
    /// </summary>
    [JsonProperty("ageRange")]
    public Range AgeRange { get; set; }
    /// <summary>
    /// While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
    /// </summary>
    [JsonProperty("ageString")]
    public string AgeString { get; set; }
    [JsonProperty("_ageString")]
    public Element _AgeString { get; set; }
    /// <summary>
    /// Allows calculation of the relative's age.
    /// </summary>
    [JsonProperty("bornPeriod")]
    public Period BornPeriod { get; set; }
    /// <summary>
    /// Allows calculation of the relative's age.
    /// </summary>
    [JsonProperty("bornDate")]
    public string BornDate { get; set; }
    [JsonProperty("_bornDate")]
    public Element _BornDate { get; set; }
    /// <summary>
    /// Allows calculation of the relative's age.
    /// </summary>
    [JsonProperty("bornString")]
    public string BornString { get; set; }
    [JsonProperty("_bornString")]
    public Element _BornString { get; set; }
    /// <summary>
    /// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
    /// </summary>
    [JsonProperty("condition")]
    public List<FamilyMemberHistoryCondition> Condition { get; set; }
    /// <summary>
    /// Allows determination of how current the summary is.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    [JsonProperty("deceasedBoolean")]
    public bool? DeceasedBoolean { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    [JsonProperty("deceasedQuantity")]
    public Quantity DeceasedQuantity { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    [JsonProperty("deceasedRange")]
    public Range DeceasedRange { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    [JsonProperty("deceasedDate")]
    public string DeceasedDate { get; set; }
    [JsonProperty("_deceasedDate")]
    public Element _DeceasedDate { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    [JsonProperty("deceasedString")]
    public string DeceasedString { get; set; }
    [JsonProperty("_deceasedString")]
    public Element _DeceasedString { get; set; }
    /// <summary>
    /// Not all relationship codes imply gender and the relative's gender can be relevant for risk assessments.
    /// </summary>
    [JsonProperty("gender")]
    public string Gender { get; set; }
    [JsonProperty("_gender")]
    public Element _Gender { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Allows greater ease in ensuring the same person is being talked about.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
    /// </summary>
    [JsonProperty("note")]
    public Annotation Note { get; set; }
    /// <summary>
    /// The person who this history concerns.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The type of relationship this person has to the patient (father, mother, brother etc.).
    /// </summary>
    [JsonProperty("relationship")]
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// A code specifying a state of a Family Member History record.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
  }
  /// <summary>
  /// Code Values for the FamilyMemberHistory.gender field
  /// </summary>
  public static class FamilyMemberHistoryGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Code Values for the FamilyMemberHistory.status field
  /// </summary>
  public static class FamilyMemberHistoryStatusCodes {
    public const string PARTIAL = "partial";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string HEALTH_UNKNOWN = "health-unknown";
  }
  /// <summary>
  /// Prospective warnings of potential issues when providing care to the patient.
  /// </summary>
  public class Flag : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Flag";
    /// <summary>
    /// The person, organization or device that created the flag.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The coded value or textual component of the flag to display to the user.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// This alert is only relevant during the encounter.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifier assigned to the flag for external use (outside the FHIR environment).
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Supports basic workflow.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The patient, location, group , organization , or practitioner this is about record this flag is associated with.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// Code Values for the Flag.status field
  /// </summary>
  public static class FlagStatusCodes {
    public const string ACTIVE = "active";
    public const string INACTIVE = "inactive";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Outcome tracking is a key aspect of care planning.
  /// </summary>
  public class GoalOutcome : BackboneElement {
    /// <summary>
    /// Details of what's changed (or not changed).
    /// </summary>
    [JsonProperty("resultCodeableConcept")]
    public CodeableConcept ResultCodeableConcept { get; set; }
    /// <summary>
    /// Details of what's changed (or not changed).
    /// </summary>
    [JsonProperty("resultReference")]
    public Reference ResultReference { get; set; }
  }
  /// <summary>
  /// Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
  /// </summary>
  public class Goal : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Goal";
    /// <summary>
    /// Allows specific goals to explicitly linked to the concerns they're dealing with - makes the goal more understandable.
    /// </summary>
    [JsonProperty("addresses")]
    public List<Reference> Addresses { get; set; }
    /// <summary>
    /// Indicates whose goal this is - patient goal, practitioner goal, etc.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Allows goals to be filtered and sorted.
    /// </summary>
    [JsonProperty("category")]
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Without a description of what's trying to be achieved, element has no purpose.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// There's a need to capture information about the goal that doesn't actually describe the goal.
    /// </summary>
    [JsonProperty("note")]
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Outcome tracking is a key aspect of care planning.
    /// </summary>
    [JsonProperty("outcome")]
    public List<GoalOutcome> Outcome { get; set; }
    /// <summary>
    /// Used for sorting and presenting goals.
    /// </summary>
    [JsonProperty("priority")]
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
    /// </summary>
    [JsonProperty("startDate")]
    public string StartDate { get; set; }
    [JsonProperty("_startDate")]
    public Element _StartDate { get; set; }
    /// <summary>
    /// Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
    /// </summary>
    [JsonProperty("startCodeableConcept")]
    public CodeableConcept StartCodeableConcept { get; set; }
    /// <summary>
    /// Allows measuring outcome and whether goal needs to be further tracked.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
    /// </summary>
    [JsonProperty("statusDate")]
    public string StatusDate { get; set; }
    [JsonProperty("_statusDate")]
    public Element _StatusDate { get; set; }
    /// <summary>
    /// Captures the reason for the current status.
    /// </summary>
    [JsonProperty("statusReason")]
    public CodeableConcept StatusReason { get; set; }
    /// <summary>
    /// Subject is optional to support annonymized reporting.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Identifies when the goal should be evaluated.
    /// </summary>
    [JsonProperty("targetDate")]
    public string TargetDate { get; set; }
    [JsonProperty("_targetDate")]
    public Element _TargetDate { get; set; }
    /// <summary>
    /// Identifies when the goal should be evaluated.
    /// </summary>
    [JsonProperty("targetQuantity")]
    public Quantity TargetQuantity { get; set; }
  }
  /// <summary>
  /// Code Values for the Goal.status field
  /// </summary>
  public static class GoalStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PLANNED = "planned";
    public const string ACCEPTED = "accepted";
    public const string REJECTED = "rejected";
    public const string IN_PROGRESS = "in-progress";
    public const string ACHIEVED = "achieved";
    public const string SUSTAINING = "sustaining";
    public const string ON_HOLD = "on-hold";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// Needs to be a generic mechanism for identifying what individuals can be part of a group.
  /// </summary>
  public class GroupCharacteristic : BackboneElement {
    /// <summary>
    /// Need a formal way of identifying the characteristic being described.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Sometimes group membership is determined by characteristics not possessed.
    /// </summary>
    [JsonProperty("exclude")]
    public bool Exclude { get; set; }
    /// <summary>
    /// The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// The value of the characteristic is what determines group membership.
    /// </summary>
    [JsonProperty("valueCodeableConcept")]
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The value of the characteristic is what determines group membership.
    /// </summary>
    [JsonProperty("valueBoolean")]
    public bool ValueBoolean { get; set; }
    /// <summary>
    /// The value of the characteristic is what determines group membership.
    /// </summary>
    [JsonProperty("valueQuantity")]
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The value of the characteristic is what determines group membership.
    /// </summary>
    [JsonProperty("valueRange")]
    public Range ValueRange { get; set; }
  }
  /// <summary>
  /// Often the only thing of interest about a group is "who's in it".
  /// </summary>
  public class GroupMember : BackboneElement {
    /// <summary>
    /// A reference to the entity that is a member of the group. Must be consistent with Group.type.
    /// </summary>
    [JsonProperty("entity")]
    public Reference Entity { get; set; }
    /// <summary>
    /// Sometimes you don't know when someone stopped being in a group, but not when.
    /// </summary>
    [JsonProperty("inactive")]
    public bool? Inactive { get; set; }
    /// <summary>
    /// Need to track who was in a group at a  particular time.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
  }
  /// <summary>
  /// Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
  /// </summary>
  public class Group : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Group";
    /// <summary>
    /// There are use-cases for groups that define specific collections of individuals, and other groups that define "types" of intended individuals.  The requirements for both kinds of groups are similar, so we use a single resource, distinguished by this flag.
    /// </summary>
    [JsonProperty("actual")]
    public bool Actual { get; set; }
    /// <summary>
    /// Needs to be a generic mechanism for identifying what individuals can be part of a group.
    /// </summary>
    [JsonProperty("characteristic")]
    public List<GroupCharacteristic> Characteristic { get; set; }
    /// <summary>
    /// Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Allows the group to be referenced from external specifications.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Often the only thing of interest about a group is "who's in it".
    /// </summary>
    [JsonProperty("member")]
    public List<GroupMember> Member { get; set; }
    /// <summary>
    /// Used to identify the group in human communication.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Group size is a common defining characteristic.
    /// </summary>
    [JsonProperty("quantity")]
    public uint? Quantity { get; set; }
    /// <summary>
    /// Identifies what type of resources the group is made up of.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Group.type field
  /// </summary>
  public static class GroupTypeCodes {
    public const string PERSON = "person";
    public const string ANIMAL = "animal";
    public const string PRACTITIONER = "practitioner";
    public const string DEVICE = "device";
    public const string MEDICATION = "medication";
    public const string SUBSTANCE = "substance";
  }
  /// <summary>
  /// A specific type of service that may be delivered or performed.
  /// </summary>
  public class HealthcareServiceServiceType : BackboneElement {
    /// <summary>
    /// Collection of specialties handled by the service site. This is more of a medical term.
    /// </summary>
    [JsonProperty("specialty")]
    public List<CodeableConcept> Specialty { get; set; }
    /// <summary>
    /// The specific type of service being delivered or performed.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// A collection of times that the Service Site is available.
  /// </summary>
  public class HealthcareServiceAvailableTime : BackboneElement {
    /// <summary>
    /// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
    /// </summary>
    [JsonProperty("allDay")]
    public bool? AllDay { get; set; }
    /// <summary>
    /// The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
    /// </summary>
    [JsonProperty("availableEndTime")]
    public string AvailableEndTime { get; set; }
    [JsonProperty("_availableEndTime")]
    public Element _AvailableEndTime { get; set; }
    /// <summary>
    /// The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
    /// </summary>
    [JsonProperty("availableStartTime")]
    public string AvailableStartTime { get; set; }
    [JsonProperty("_availableStartTime")]
    public Element _AvailableStartTime { get; set; }
    /// <summary>
    /// Indicates which days of the week are available between the start and end Times.
    /// </summary>
    [JsonProperty("daysOfWeek")]
    public List<string> DaysOfWeek { get; set; }
    [JsonProperty("_daysOfWeek")]
    public List<Element> _DaysOfWeek { get; set; }
  }
  /// <summary>
  /// Code Values for the HealthcareService.availableTime.daysOfWeek field
  /// </summary>
  public static class HealthcareServiceAvailableTimeDaysOfWeekCodes {
    public const string MON = "mon";
    public const string TUE = "tue";
    public const string WED = "wed";
    public const string THU = "thu";
    public const string FRI = "fri";
    public const string SAT = "sat";
    public const string SUN = "sun";
  }
  /// <summary>
  /// The HealthcareService is not available during this period of time due to the provided reason.
  /// </summary>
  public class HealthcareServiceNotAvailable : BackboneElement {
    /// <summary>
    /// The reason that can be presented to the user as to why this time is not available.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Service is not available (seasonally or for a public holiday) from this date.
    /// </summary>
    [JsonProperty("during")]
    public Period During { get; set; }
  }
  /// <summary>
  /// The details of a healthcare service available at a location.
  /// </summary>
  public class HealthcareService : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "HealthcareService";
    /// <summary>
    /// Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
    /// </summary>
    [JsonProperty("appointmentRequired")]
    public bool? AppointmentRequired { get; set; }
    /// <summary>
    /// A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
    /// </summary>
    [JsonProperty("availabilityExceptions")]
    public string AvailabilityExceptions { get; set; }
    [JsonProperty("_availabilityExceptions")]
    public Element _AvailabilityExceptions { get; set; }
    /// <summary>
    /// A collection of times that the Service Site is available.
    /// </summary>
    [JsonProperty("availableTime")]
    public List<HealthcareServiceAvailableTime> AvailableTime { get; set; }
    /// <summary>
    /// Collection of characteristics (attributes).
    /// </summary>
    [JsonProperty("characteristic")]
    public List<CodeableConcept> Characteristic { get; set; }
    /// <summary>
    /// Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
    /// </summary>
    [JsonProperty("comment")]
    public string Comment { get; set; }
    [JsonProperty("_comment")]
    public Element _Comment { get; set; }
    /// <summary>
    /// The location(s) that this service is available to (not where the service is provided).
    /// </summary>
    [JsonProperty("coverageArea")]
    public List<Reference> CoverageArea { get; set; }
    /// <summary>
    /// Does this service have specific eligibility requirements that need to be met in order to use the service?
    /// </summary>
    [JsonProperty("eligibility")]
    public CodeableConcept Eligibility { get; set; }
    /// <summary>
    /// Describes the eligibility conditions for the service.
    /// </summary>
    [JsonProperty("eligibilityNote")]
    public string EligibilityNote { get; set; }
    [JsonProperty("_eligibilityNote")]
    public Element _EligibilityNote { get; set; }
    /// <summary>
    /// Extra details about the service that can't be placed in the other fields.
    /// </summary>
    [JsonProperty("extraDetails")]
    public string ExtraDetails { get; set; }
    [JsonProperty("_extraDetails")]
    public Element _ExtraDetails { get; set; }
    /// <summary>
    /// External identifiers for this item.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The location where this healthcare service may be provided.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// The HealthcareService is not available during this period of time due to the provided reason.
    /// </summary>
    [JsonProperty("notAvailable")]
    public List<HealthcareServiceNotAvailable> NotAvailable { get; set; }
    /// <summary>
    /// If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
    /// </summary>
    [JsonProperty("photo")]
    public Attachment Photo { get; set; }
    /// <summary>
    /// Program Names that can be used to categorize the service.
    /// </summary>
    [JsonProperty("programName")]
    public List<string> ProgramName { get; set; }
    [JsonProperty("_programName")]
    public List<Element> _ProgramName { get; set; }
    /// <summary>
    /// The organization that provides this healthcare service.
    /// </summary>
    [JsonProperty("providedBy")]
    public Reference ProvidedBy { get; set; }
    /// <summary>
    /// The public part of the 'keys' allocated to an Organization by an accredited body to support secure exchange of data over the internet. To be provided by the Organization, where available.
    /// </summary>
    [JsonProperty("publicKey")]
    public string PublicKey { get; set; }
    [JsonProperty("_publicKey")]
    public Element _PublicKey { get; set; }
    /// <summary>
    /// Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
    /// </summary>
    [JsonProperty("referralMethod")]
    public List<CodeableConcept> ReferralMethod { get; set; }
    /// <summary>
    /// Identifies the broad category of service being performed or delivered.
    /// </summary>
    [JsonProperty("serviceCategory")]
    public CodeableConcept ServiceCategory { get; set; }
    /// <summary>
    /// Further description of the service as it would be presented to a consumer while searching.
    /// </summary>
    [JsonProperty("serviceName")]
    public string ServiceName { get; set; }
    [JsonProperty("_serviceName")]
    public Element _ServiceName { get; set; }
    /// <summary>
    /// The code(s) that detail the conditions under which the healthcare service is available/offered.
    /// </summary>
    [JsonProperty("serviceProvisionCode")]
    public List<CodeableConcept> ServiceProvisionCode { get; set; }
    /// <summary>
    /// A specific type of service that may be delivered or performed.
    /// </summary>
    [JsonProperty("serviceType")]
    public List<HealthcareServiceServiceType> ServiceType { get; set; }
    /// <summary>
    /// List of contacts related to this specific healthcare service.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
  /// </summary>
  public class ImagingObjectSelectionStudySeriesInstanceFrames : BackboneElement {
    /// <summary>
    /// One or more non-duplicate frame numbers in the selected instance.
    /// </summary>
    [JsonProperty("frameNumbers")]
    public List<uint> FrameNumbers { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the frames using DICOM WADO-RS API.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
  /// </summary>
  public class ImagingObjectSelectionStudySeriesInstance : BackboneElement {
    /// <summary>
    /// The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
    /// </summary>
    [JsonProperty("frames")]
    public List<ImagingObjectSelectionStudySeriesInstanceFrames> Frames { get; set; }
    /// <summary>
    /// DICOM SOP instances can be an image or other data object. The SOP class UID provide the accurate information about what type the instance is.
    /// </summary>
    [JsonProperty("sopClass")]
    public string SopClass { get; set; }
    [JsonProperty("_sopClass")]
    public Element _SopClass { get; set; }
    /// <summary>
    /// SOP instance UID is required to fully identify the DICOM SOP instance in the selection.
    /// </summary>
    [JsonProperty("uid")]
    public string Uid { get; set; }
    [JsonProperty("_uid")]
    public Element _Uid { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the SOP instance using DICOM WADO-RS API.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
  /// </summary>
  public class ImagingObjectSelectionStudySeries : BackboneElement {
    /// <summary>
    /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
    /// </summary>
    [JsonProperty("instance")]
    public List<ImagingObjectSelectionStudySeriesInstance> Instance { get; set; }
    /// <summary>
    /// Series instance UID is required to fully identify the DICOM SOP instances in the selection.
    /// </summary>
    [JsonProperty("uid")]
    public string Uid { get; set; }
    [JsonProperty("_uid")]
    public Element _Uid { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the entire series using DICOM WADO-RS API.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
  /// </summary>
  public class ImagingObjectSelectionStudy : BackboneElement {
    /// <summary>
    /// Used to retrieve the ImagingStudy that contain the images referenced in the Imaging ObjectSelection.study.
    /// </summary>
    [JsonProperty("imagingStudy")]
    public Reference ImagingStudy { get; set; }
    /// <summary>
    /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
    /// </summary>
    [JsonProperty("series")]
    public List<ImagingObjectSelectionStudySeries> Series { get; set; }
    /// <summary>
    /// Study instance UID is required to fully identify the DICOM SOP instances in the selection.
    /// </summary>
    [JsonProperty("uid")]
    public string Uid { get; set; }
    [JsonProperty("_uid")]
    public Element _Uid { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the entire study using DICOM WADO-RS API.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
  /// </summary>
  public class ImagingObjectSelection : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ImagingObjectSelection";
    /// <summary>
    /// Track the selection decision maker.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Date and time when the selection was made can be important to understand the content of selection.
    /// </summary>
    [JsonProperty("authoringTime")]
    public string AuthoringTime { get; set; }
    [JsonProperty("_authoringTime")]
    public Element _AuthoringTime { get; set; }
    /// <summary>
    /// Need to provide a narrative description of the SOP instances in the selection.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// SOP Instances in ImagingObjectSelection must be from the same patient.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
    /// </summary>
    [JsonProperty("study")]
    public List<ImagingObjectSelectionStudy> Study { get; set; }
    /// <summary>
    /// Need to represent the application purpose that the SOP instances in ImagingObjectSelection are selected for.
    /// </summary>
    [JsonProperty("title")]
    public CodeableConcept Title { get; set; }
    /// <summary>
    /// DICOM SOP Instance is always assigned with a unique identifier (UID).
    /// </summary>
    [JsonProperty("uid")]
    public string Uid { get; set; }
    [JsonProperty("_uid")]
    public Element _Uid { get; set; }
  }
  /// <summary>
  /// A single SOP Instance within the series, e.g. an image, or presentation state.
  /// </summary>
  public class ImagingStudySeriesInstance : BackboneElement {
    /// <summary>
    /// Content of the instance or a rendering thereof (e.g. a JPEG of an image, or an XML of a structured report). May be represented for example by inline encoding; by a URL reference to a WADO-RS service that makes the instance available; or to a FHIR Resource (e.g. Media, Document, etc.). Multiple content attachments may be used for alternate representations of the instance.
    /// </summary>
    [JsonProperty("content")]
    public List<Attachment> Content { get; set; }
    /// <summary>
    /// The number of instance in the series.
    /// </summary>
    [JsonProperty("number")]
    public uint? Number { get; set; }
    /// <summary>
    /// DICOM instance  type.
    /// </summary>
    [JsonProperty("sopClass")]
    public string SopClass { get; set; }
    [JsonProperty("_sopClass")]
    public Element _SopClass { get; set; }
    /// <summary>
    /// The description of the instance.
    /// </summary>
    [JsonProperty("title")]
    public string Title { get; set; }
    [JsonProperty("_title")]
    public Element _Title { get; set; }
    /// <summary>
    /// A human-friendly SOP Class name.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// Formal identifier for this image or other content.
    /// </summary>
    [JsonProperty("uid")]
    public string Uid { get; set; }
    [JsonProperty("_uid")]
    public Element _Uid { get; set; }
  }
  /// <summary>
  /// Each study has one or more series of images or other content.
  /// </summary>
  public class ImagingStudySeries : BackboneElement {
    /// <summary>
    /// Availability of series (online, offline or nearline).
    /// </summary>
    [JsonProperty("availability")]
    public string Availability { get; set; }
    [JsonProperty("_availability")]
    public Element _Availability { get; set; }
    /// <summary>
    /// Body part examined. See  DICOM Part 16 Annex L for the mapping from DICOM to Snomed CT.
    /// </summary>
    [JsonProperty("bodySite")]
    public Coding BodySite { get; set; }
    /// <summary>
    /// A description of the series.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// A single SOP Instance within the series, e.g. an image, or presentation state.
    /// </summary>
    [JsonProperty("instance")]
    public List<ImagingStudySeriesInstance> Instance { get; set; }
    /// <summary>
    /// Laterality if body site is paired anatomic structure and laterality is not pre-coordinated in body site code.
    /// </summary>
    [JsonProperty("laterality")]
    public Coding Laterality { get; set; }
    /// <summary>
    /// The modality of this series sequence.
    /// </summary>
    [JsonProperty("modality")]
    public Coding Modality { get; set; }
    /// <summary>
    /// The Numeric identifier of this series in the study.
    /// </summary>
    [JsonProperty("number")]
    public uint? Number { get; set; }
    /// <summary>
    /// Number of SOP Instances in Series.
    /// </summary>
    [JsonProperty("numberOfInstances")]
    public uint NumberOfInstances { get; set; }
    /// <summary>
    /// The date and time the series was started.
    /// </summary>
    [JsonProperty("started")]
    public string Started { get; set; }
    [JsonProperty("_started")]
    public Element _Started { get; set; }
    /// <summary>
    /// Formal identifier for this series.
    /// </summary>
    [JsonProperty("uid")]
    public string Uid { get; set; }
    [JsonProperty("_uid")]
    public Element _Uid { get; set; }
    /// <summary>
    /// URI/URL specifying the location of the referenced series using WADO-RS.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Code Values for the ImagingStudy.series.availability field
  /// </summary>
  public static class ImagingStudySeriesAvailabilityCodes {
    public const string ONLINE = "ONLINE";
    public const string OFFLINE = "OFFLINE";
    public const string NEARLINE = "NEARLINE";
    public const string UNAVAILABLE = "UNAVAILABLE";
  }
  /// <summary>
  /// Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
  /// </summary>
  public class ImagingStudy : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ImagingStudy";
    /// <summary>
    /// Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
    /// </summary>
    [JsonProperty("accession")]
    public Identifier Accession { get; set; }
    /// <summary>
    /// Availability of study (online, offline or nearline).
    /// </summary>
    [JsonProperty("availability")]
    public string Availability { get; set; }
    [JsonProperty("_availability")]
    public Element _Availability { get; set; }
    /// <summary>
    /// Institution-generated description or classification of the Study performed.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Other identifiers for the study.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Who read the study and interpreted the images or other content.
    /// </summary>
    [JsonProperty("interpreter")]
    public Reference Interpreter { get; set; }
    /// <summary>
    /// A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
    /// </summary>
    [JsonProperty("modalityList")]
    public List<Coding> ModalityList { get; set; }
    /// <summary>
    /// Number of SOP Instances in Study.
    /// </summary>
    [JsonProperty("numberOfInstances")]
    public uint NumberOfInstances { get; set; }
    /// <summary>
    /// Number of Series in Study.
    /// </summary>
    [JsonProperty("numberOfSeries")]
    public uint NumberOfSeries { get; set; }
    /// <summary>
    /// To support grouped procedures (one imaging study supporting multiple ordered procedures, e.g. chest/abdomen/pelvis CT).
    /// </summary>
    [JsonProperty("order")]
    public List<Reference> Order { get; set; }
    /// <summary>
    /// The patient imaged in the study.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// Type of procedure performed.
    /// </summary>
    [JsonProperty("procedure")]
    public List<Reference> Procedure { get; set; }
    /// <summary>
    /// The requesting/referring physician.
    /// </summary>
    [JsonProperty("referrer")]
    public Reference Referrer { get; set; }
    /// <summary>
    /// Each study has one or more series of images or other content.
    /// </summary>
    [JsonProperty("series")]
    public List<ImagingStudySeries> Series { get; set; }
    /// <summary>
    /// Date and Time the study started.
    /// </summary>
    [JsonProperty("started")]
    public string Started { get; set; }
    [JsonProperty("_started")]
    public Element _Started { get; set; }
    /// <summary>
    /// Formal identifier for the study.
    /// </summary>
    [JsonProperty("uid")]
    public string Uid { get; set; }
    [JsonProperty("_uid")]
    public Element _Uid { get; set; }
    /// <summary>
    /// WADO-RS resource where Study is available.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Code Values for the ImagingStudy.availability field
  /// </summary>
  public static class ImagingStudyAvailabilityCodes {
    public const string ONLINE = "ONLINE";
    public const string OFFLINE = "OFFLINE";
    public const string NEARLINE = "NEARLINE";
    public const string UNAVAILABLE = "UNAVAILABLE";
  }
  /// <summary>
  /// Reasons why a vaccine was or was not administered.
  /// </summary>
  public class ImmunizationExplanation : BackboneElement {
    /// <summary>
    /// Reasons why a vaccine was administered.
    /// </summary>
    [JsonProperty("reason")]
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// Reason why a vaccine was not administered.
    /// </summary>
    [JsonProperty("reasonNotGiven")]
    public List<CodeableConcept> ReasonNotGiven { get; set; }
  }
  /// <summary>
  /// Categorical data indicating that an adverse event is associated in time to an immunization.
  /// </summary>
  public class ImmunizationReaction : BackboneElement {
    /// <summary>
    /// Date of reaction to the immunization.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Details of the reaction.
    /// </summary>
    [JsonProperty("detail")]
    public Reference Detail { get; set; }
    /// <summary>
    /// Self-reported indicator.
    /// </summary>
    [JsonProperty("reported")]
    public bool? Reported { get; set; }
  }
  /// <summary>
  /// Contains information about the protocol(s) under which the vaccine was administered.
  /// </summary>
  public class ImmunizationVaccinationProtocol : BackboneElement {
    /// <summary>
    /// Indicates the authority who published the protocol.  E.g. ACIP.
    /// </summary>
    [JsonProperty("authority")]
    public Reference Authority { get; set; }
    /// <summary>
    /// Contains the description about the protocol under which the vaccine was administered.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Nominal position in a series.
    /// </summary>
    [JsonProperty("doseSequence")]
    public uint DoseSequence { get; set; }
    /// <summary>
    /// Indicates if the immunization event should "count" against  the protocol.
    /// </summary>
    [JsonProperty("doseStatus")]
    public CodeableConcept DoseStatus { get; set; }
    /// <summary>
    /// Provides an explanation as to why an immunization event should or should not count against the protocol.
    /// </summary>
    [JsonProperty("doseStatusReason")]
    public CodeableConcept DoseStatusReason { get; set; }
    /// <summary>
    /// One possible path to achieve presumed immunity against a disease - within the context of an authority.
    /// </summary>
    [JsonProperty("series")]
    public string Series { get; set; }
    [JsonProperty("_series")]
    public Element _Series { get; set; }
    /// <summary>
    /// The recommended number of doses to achieve immunity.
    /// </summary>
    [JsonProperty("seriesDoses")]
    public uint? SeriesDoses { get; set; }
    /// <summary>
    /// The targeted disease.
    /// </summary>
    [JsonProperty("targetDisease")]
    public List<CodeableConcept> TargetDisease { get; set; }
  }
  /// <summary>
  /// Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
  /// </summary>
  public class Immunization : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Immunization";
    /// <summary>
    /// Date vaccine administered or was to be administered.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// The quantity of vaccine product that was administered.
    /// </summary>
    [JsonProperty("doseQuantity")]
    public Quantity DoseQuantity { get; set; }
    /// <summary>
    /// The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Date vaccine batch expires.
    /// </summary>
    [JsonProperty("expirationDate")]
    public string ExpirationDate { get; set; }
    [JsonProperty("_expirationDate")]
    public Element _ExpirationDate { get; set; }
    /// <summary>
    /// Reasons why a vaccine was or was not administered.
    /// </summary>
    [JsonProperty("explanation")]
    public ImmunizationExplanation Explanation { get; set; }
    /// <summary>
    /// A unique identifier assigned to this immunization record.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The service delivery location where the vaccine administration occurred.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// Lot number of the  vaccine product.
    /// </summary>
    [JsonProperty("lotNumber")]
    public string LotNumber { get; set; }
    [JsonProperty("_lotNumber")]
    public Element _LotNumber { get; set; }
    /// <summary>
    /// Name of vaccine manufacturer.
    /// </summary>
    [JsonProperty("manufacturer")]
    public Reference Manufacturer { get; set; }
    /// <summary>
    /// Extra information about the immunization that is not conveyed by the other attributes.
    /// </summary>
    [JsonProperty("note")]
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The patient who either received or did not receive the immunization.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// Clinician who administered the vaccine.
    /// </summary>
    [JsonProperty("performer")]
    public Reference Performer { get; set; }
    /// <summary>
    /// Categorical data indicating that an adverse event is associated in time to an immunization.
    /// </summary>
    [JsonProperty("reaction")]
    public List<ImmunizationReaction> Reaction { get; set; }
    /// <summary>
    /// True if this administration was reported rather than directly administered.
    /// </summary>
    [JsonProperty("reported")]
    public bool Reported { get; set; }
    /// <summary>
    /// Clinician who ordered the vaccination.
    /// </summary>
    [JsonProperty("requester")]
    public Reference Requester { get; set; }
    /// <summary>
    /// The path by which the vaccine product is taken into the body.
    /// </summary>
    [JsonProperty("route")]
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// Body site where vaccine was administered.
    /// </summary>
    [JsonProperty("site")]
    public CodeableConcept Site { get; set; }
    /// <summary>
    /// Indicates the current status of the vaccination event.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Contains information about the protocol(s) under which the vaccine was administered.
    /// </summary>
    [JsonProperty("vaccinationProtocol")]
    public List<ImmunizationVaccinationProtocol> VaccinationProtocol { get; set; }
    /// <summary>
    /// Vaccine that was administered or was to be administered.
    /// </summary>
    [JsonProperty("vaccineCode")]
    public CodeableConcept VaccineCode { get; set; }
    /// <summary>
    /// Indicates if the vaccination was or was not given.
    /// </summary>
    [JsonProperty("wasNotGiven")]
    public bool WasNotGiven { get; set; }
  }
  /// <summary>
  /// Code Values for the Immunization.status field
  /// </summary>
  public static class ImmunizationStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string STOPPED = "stopped";
  }
  /// <summary>
  /// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
  /// </summary>
  public class ImmunizationRecommendationRecommendationDateCriterion : BackboneElement {
    /// <summary>
    /// Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The date whose meaning is specified by dateCriterion.code.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// Contains information about the protocol under which the vaccine was administered.
  /// </summary>
  public class ImmunizationRecommendationRecommendationProtocol : BackboneElement {
    /// <summary>
    /// Indicates the authority who published the protocol.  For example, ACIP.
    /// </summary>
    [JsonProperty("authority")]
    public Reference Authority { get; set; }
    /// <summary>
    /// Contains the description about the protocol under which the vaccine was administered.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
    /// </summary>
    [JsonProperty("doseSequence")]
    public int? DoseSequence { get; set; }
    /// <summary>
    /// One possible path to achieve presumed immunity against a disease - within the context of an authority.
    /// </summary>
    [JsonProperty("series")]
    public string Series { get; set; }
    [JsonProperty("_series")]
    public Element _Series { get; set; }
  }
  /// <summary>
  /// Vaccine administration recommendations.
  /// </summary>
  public class ImmunizationRecommendationRecommendation : BackboneElement {
    /// <summary>
    /// The date the immunization recommendation was created.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
    /// </summary>
    [JsonProperty("dateCriterion")]
    public List<ImmunizationRecommendationRecommendationDateCriterion> DateCriterion { get; set; }
    /// <summary>
    /// This indicates the next recommended dose number (e.g. dose 2 is the next recommended dose).
    /// </summary>
    [JsonProperty("doseNumber")]
    public uint? DoseNumber { get; set; }
    /// <summary>
    /// Vaccine administration status.
    /// </summary>
    [JsonProperty("forecastStatus")]
    public CodeableConcept ForecastStatus { get; set; }
    /// <summary>
    /// Contains information about the protocol under which the vaccine was administered.
    /// </summary>
    [JsonProperty("protocol")]
    public ImmunizationRecommendationRecommendationProtocol Protocol { get; set; }
    /// <summary>
    /// Immunization event history that supports the status and recommendation.
    /// </summary>
    [JsonProperty("supportingImmunization")]
    public List<Reference> SupportingImmunization { get; set; }
    /// <summary>
    /// Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
    /// </summary>
    [JsonProperty("supportingPatientInformation")]
    public List<Reference> SupportingPatientInformation { get; set; }
    /// <summary>
    /// Vaccine that pertains to the recommendation.
    /// </summary>
    [JsonProperty("vaccineCode")]
    public CodeableConcept VaccineCode { get; set; }
  }
  /// <summary>
  /// A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
  /// </summary>
  public class ImmunizationRecommendation : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ImmunizationRecommendation";
    /// <summary>
    /// A unique identifier assigned to this particular recommendation record.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The patient for whom the recommendations are for.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// Vaccine administration recommendations.
    /// </summary>
    [JsonProperty("recommendation")]
    public List<ImmunizationRecommendationRecommendation> Recommendation { get; set; }
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class ImplementationGuideContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the implementation guide.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
  /// </summary>
  public class ImplementationGuideDependency : BackboneElement {
    /// <summary>
    /// How the dependency is represented when the guide is published.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// Where the dependency is located.
    /// </summary>
    [JsonProperty("uri")]
    public string Uri { get; set; }
    [JsonProperty("_uri")]
    public Element _Uri { get; set; }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.dependency.type field
  /// </summary>
  public static class ImplementationGuideDependencyTypeCodes {
    public const string REFERENCE = "reference";
    public const string INCLUSION = "inclusion";
  }
  /// <summary>
  /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
  /// </summary>
  public class ImplementationGuidePackageResource : BackboneElement {
    /// <summary>
    /// A short code that may be used to identify the resource throughout the implementation guide.
    /// </summary>
    [JsonProperty("acronym")]
    public string Acronym { get; set; }
    [JsonProperty("_acronym")]
    public Element _Acronym { get; set; }
    /// <summary>
    /// A description of the reason that a resource has been included in the implementation guide.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.
    /// </summary>
    [JsonProperty("exampleFor")]
    public Reference ExampleFor { get; set; }
    /// <summary>
    /// A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// This element is provided so that implementation guide tooling does not have to guess the purpose of including a resource in the implementation guide based on the type or context.
    /// </summary>
    [JsonProperty("purpose")]
    public string Purpose { get; set; }
    [JsonProperty("_purpose")]
    public Element _Purpose { get; set; }
    /// <summary>
    /// Where this resource is found.
    /// </summary>
    [JsonProperty("sourceUri")]
    public string SourceUri { get; set; }
    [JsonProperty("_sourceUri")]
    public Element _SourceUri { get; set; }
    /// <summary>
    /// Where this resource is found.
    /// </summary>
    [JsonProperty("sourceReference")]
    public Reference SourceReference { get; set; }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.package.resource.purpose field
  /// </summary>
  public static class ImplementationGuidePackageResourcePurposeCodes {
    public const string EXAMPLE = "example";
    public const string TERMINOLOGY = "terminology";
    public const string PROFILE = "profile";
    public const string EXTENSION = "extension";
    public const string DICTIONARY = "dictionary";
    public const string LOGICAL = "logical";
  }
  /// <summary>
  /// A logical group of resources. Logical groups can be used when building pages.
  /// </summary>
  public class ImplementationGuidePackage : BackboneElement {
    /// <summary>
    /// Human readable text describing the package.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// The name for the group, as used in page.package.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
    /// </summary>
    [JsonProperty("resource")]
    public List<ImplementationGuidePackageResource> Resource { get; set; }
  }
  /// <summary>
  /// A set of profiles that all resources covered by this implementation guide must conform to.
  /// </summary>
  public class ImplementationGuideGlobal : BackboneElement {
    /// <summary>
    /// A reference to the profile that all instances must conform to.
    /// </summary>
    [JsonProperty("profile")]
    public Reference Profile { get; set; }
    /// <summary>
    /// The type of resource that all instances must conform to.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// A page / section in the implementation guide. The root page is the implementation guide home page.
  /// </summary>
  public class ImplementationGuidePage : BackboneElement {
    /// <summary>
    /// The format of the page.
    /// </summary>
    [JsonProperty("format")]
    public string Format { get; set; }
    [JsonProperty("_format")]
    public Element _Format { get; set; }
    /// <summary>
    /// The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
    /// </summary>
    [JsonProperty("kind")]
    public string Kind { get; set; }
    [JsonProperty("_kind")]
    public Element _Kind { get; set; }
    /// <summary>
    /// A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// For constructed pages, a list of packages to include in the page (or else empty for everything).
    /// </summary>
    [JsonProperty("package")]
    public List<string> Package { get; set; }
    [JsonProperty("_package")]
    public List<Element> _Package { get; set; }
    /// <summary>
    /// Nested Pages/Sections under this page.
    /// </summary>
    [JsonProperty("page")]
    public List<ImplementationGuidePage> Page { get; set; }
    /// <summary>
    /// The source address for the page.
    /// </summary>
    [JsonProperty("source")]
    public string Source { get; set; }
    [JsonProperty("_source")]
    public Element _Source { get; set; }
    /// <summary>
    /// For constructed pages, what kind of resources to include in the list.
    /// </summary>
    [JsonProperty("type")]
    public List<string> Type { get; set; }
    [JsonProperty("_type")]
    public List<Element> _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.page.kind field
  /// </summary>
  public static class ImplementationGuidePageKindCodes {
    public const string PAGE = "page";
    public const string EXAMPLE = "example";
    public const string LIST = "list";
    public const string INCLUDE = "include";
    public const string DIRECTORY = "directory";
    public const string DICTIONARY = "dictionary";
    public const string TOC = "toc";
    public const string RESOURCE = "resource";
  }
  /// <summary>
  /// A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
  /// </summary>
  public class ImplementationGuide : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ImplementationGuide";
    /// <summary>
    /// A binary file that is included in the  implementation guide when it is published.
    /// </summary>
    [JsonProperty("binary")]
    public List<string> Binary { get; set; }
    [JsonProperty("_binary")]
    public List<Element> _Binary { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<ImplementationGuideContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    /// </summary>
    [JsonProperty("copyright")]
    public string Copyright { get; set; }
    [JsonProperty("_copyright")]
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date this version of the implementation guide was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
    /// </summary>
    [JsonProperty("dependency")]
    public List<ImplementationGuideDependency> Dependency { get; set; }
    /// <summary>
    /// A free text natural language description of the Implementation Guide and its use.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of Implementation Guides that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
    /// </summary>
    [JsonProperty("fhirVersion")]
    public string FhirVersion { get; set; }
    [JsonProperty("_fhirVersion")]
    public Element _FhirVersion { get; set; }
    /// <summary>
    /// A set of profiles that all resources covered by this implementation guide must conform to.
    /// </summary>
    [JsonProperty("global")]
    public List<ImplementationGuideGlobal> Global { get; set; }
    /// <summary>
    /// A free text natural language name identifying the Implementation Guide.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// A logical group of resources. Logical groups can be used when building pages.
    /// </summary>
    [JsonProperty("package")]
    public List<ImplementationGuidePackage> Package { get; set; }
    /// <summary>
    /// A page / section in the implementation guide. The root page is the implementation guide home page.
    /// </summary>
    [JsonProperty("page")]
    public ImplementationGuidePage Page { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the implementation guide.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Allows filtering of Implementation Guides that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// This is required to allow hosting Implementation Guides on multiple different servers, and to allow for the editorial process.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate implementation guide.
    /// </summary>
    [JsonProperty("useContext")]
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// There may be multiple resource versions of the Implementation Guide that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.status field
  /// </summary>
  public static class ImplementationGuideStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Entries in this list.
  /// </summary>
  public class ListEntry : BackboneElement {
    /// <summary>
    /// The date may be significant for understanding the meaning of items in a working list.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// The flag element may contain codes that an application processing the list does not understand. However there can be no ambiguity if a list item is actually marked as "deleted".
    /// </summary>
    [JsonProperty("deleted")]
    public bool? Deleted { get; set; }
    /// <summary>
    /// This field is present to support various clinical uses of lists, such as a discharge summary medication list, where flags specify whether the medication was added, modified, or deleted from the list.
    /// </summary>
    [JsonProperty("flag")]
    public CodeableConcept Flag { get; set; }
    /// <summary>
    /// A reference to the actual resource from which data was derived.
    /// </summary>
    [JsonProperty("item")]
    public Reference Item { get; set; }
  }
  /// <summary>
  /// A set of information summarized from a list of other resources.
  /// </summary>
  public class List : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "List";
    /// <summary>
    /// Lists often contain subsets of resources rather than an exhaustive list.  The code identifies what type of subset is included.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Identifies how current the list is which affects relevance.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Allows capturing things like "none exist" or "not asked" which can be important for most lists.
    /// </summary>
    [JsonProperty("emptyReason")]
    public CodeableConcept EmptyReason { get; set; }
    /// <summary>
    /// The encounter that is the context in which this list was created.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Entries in this list.
    /// </summary>
    [JsonProperty("entry")]
    public List<ListEntry> Entry { get; set; }
    /// <summary>
    /// Identifier for the List assigned for business purposes outside the context of FHIR.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Lists are used in various ways, and it must be known in what way it is safe to use them.
    /// </summary>
    [JsonProperty("mode")]
    public string Mode { get; set; }
    [JsonProperty("_mode")]
    public Element _Mode { get; set; }
    /// <summary>
    /// Comments that apply to the overall list.
    /// </summary>
    [JsonProperty("note")]
    public string Note { get; set; }
    [JsonProperty("_note")]
    public Element _Note { get; set; }
    /// <summary>
    /// Important for presentation and rendering.  Lists may be sorted to place more important information first or to group related entries.
    /// </summary>
    [JsonProperty("orderedBy")]
    public CodeableConcept OrderedBy { get; set; }
    /// <summary>
    /// Allows follow-up as well as context.
    /// </summary>
    [JsonProperty("source")]
    public Reference Source { get; set; }
    /// <summary>
    /// Indicates the current state of this list.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The primary purpose of listing the subject explicitly is to help with finding the right list.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Allows customization beyond just the code identifying the kind of list.
    /// </summary>
    [JsonProperty("title")]
    public string Title { get; set; }
    [JsonProperty("_title")]
    public Element _Title { get; set; }
  }
  /// <summary>
  /// Code Values for the List.mode field
  /// </summary>
  public static class ListModeCodes {
    public const string WORKING = "working";
    public const string SNAPSHOT = "snapshot";
    public const string CHANGES = "changes";
  }
  /// <summary>
  /// Code Values for the List.status field
  /// </summary>
  public static class ListStatusCodes {
    public const string CURRENT = "current";
    public const string RETIRED = "retired";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// For mobile applications and automated route-finding knowing the exact location of the Location is required.
  /// </summary>
  public class LocationPosition : BackboneElement {
    /// <summary>
    /// Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
    /// </summary>
    [JsonProperty("altitude")]
    public decimal? Altitude { get; set; }
    [JsonProperty("_altitude")]
    public Element _Altitude { get; set; }
    /// <summary>
    /// Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
    /// </summary>
    [JsonProperty("latitude")]
    public decimal Latitude { get; set; }
    [JsonProperty("_latitude")]
    public Element _Latitude { get; set; }
    /// <summary>
    /// Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
    /// </summary>
    [JsonProperty("longitude")]
    public decimal Longitude { get; set; }
    [JsonProperty("_longitude")]
    public Element _Longitude { get; set; }
  }
  /// <summary>
  /// Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
  /// </summary>
  public class Location : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Location";
    /// <summary>
    /// If locations can be visited, we need to keep track of their address.
    /// </summary>
    [JsonProperty("address")]
    public Address Address { get; set; }
    /// <summary>
    /// Humans need additional information to verify a correct location has been identified.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Organization label locations in registries, need to keep track of those.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Need to know who manages the location.
    /// </summary>
    [JsonProperty("managingOrganization")]
    public Reference ManagingOrganization { get; set; }
    /// <summary>
    /// When using a Location resource for scheduling or orders, we need to be able to refer to a class of Locations instead of a specific Location.
    /// </summary>
    [JsonProperty("mode")]
    public string Mode { get; set; }
    [JsonProperty("_mode")]
    public Element _Mode { get; set; }
    /// <summary>
    /// Name of the location as used by humans. Does not need to be unique.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// For purposes of location, display and identification, knowing which locations are located within other locations is important.
    /// </summary>
    [JsonProperty("partOf")]
    public Reference PartOf { get; set; }
    /// <summary>
    /// For purposes of showing relevant locations in queries, we need to categorize locations.
    /// </summary>
    [JsonProperty("physicalType")]
    public CodeableConcept PhysicalType { get; set; }
    /// <summary>
    /// For mobile applications and automated route-finding knowing the exact location of the Location is required.
    /// </summary>
    [JsonProperty("position")]
    public LocationPosition Position { get; set; }
    /// <summary>
    /// active | suspended | inactive.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Indicates the type of function performed at the location.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Location.mode field
  /// </summary>
  public static class LocationModeCodes {
    public const string INSTANCE = "instance";
    public const string KIND = "kind";
  }
  /// <summary>
  /// Code Values for the Location.status field
  /// </summary>
  public static class LocationStatusCodes {
    public const string ACTIVE = "active";
    public const string SUSPENDED = "suspended";
    public const string INACTIVE = "inactive";
  }
  /// <summary>
  /// A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
  /// </summary>
  public class Media : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Media";
    /// <summary>
    /// The actual content of the media - inline or by direct reference to the media source file.
    /// </summary>
    [JsonProperty("content")]
    public Attachment Content { get; set; }
    /// <summary>
    /// The name of the device / manufacturer of the device  that was used to make the recording.
    /// </summary>
    [JsonProperty("deviceName")]
    public string DeviceName { get; set; }
    [JsonProperty("_deviceName")]
    public Element _DeviceName { get; set; }
    /// <summary>
    /// The duration of the recording in seconds - for audio and video.
    /// </summary>
    [JsonProperty("duration")]
    public uint? Duration { get; set; }
    /// <summary>
    /// The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
    /// </summary>
    [JsonProperty("frames")]
    public uint? Frames { get; set; }
    /// <summary>
    /// Height of the image in pixels (photo/video).
    /// </summary>
    [JsonProperty("height")]
    public uint? Height { get; set; }
    /// <summary>
    /// Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The person who administered the collection of the image.
    /// </summary>
    [JsonProperty("operator")]
    public Reference Operator { get; set; }
    /// <summary>
    /// Who/What this Media is a record of.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
    /// </summary>
    [JsonProperty("subtype")]
    public CodeableConcept Subtype { get; set; }
    /// <summary>
    /// Whether the media is a photo (still image), an audio recording, or a video recording.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// The name of the imaging view e.g. Lateral or Antero-posterior (AP).
    /// </summary>
    [JsonProperty("view")]
    public CodeableConcept View { get; set; }
    /// <summary>
    /// Width of the image in pixels (photo/video).
    /// </summary>
    [JsonProperty("width")]
    public uint? Width { get; set; }
  }
  /// <summary>
  /// Code Values for the Media.type field
  /// </summary>
  public static class MediaTypeCodes {
    public const string PHOTO = "photo";
    public const string VIDEO = "video";
    public const string AUDIO = "audio";
  }
  /// <summary>
  /// Identifies a particular constituent of interest in the product.
  /// </summary>
  public class MedicationProductIngredient : BackboneElement {
    /// <summary>
    /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.
    /// </summary>
    [JsonProperty("amount")]
    public Ratio Amount { get; set; }
    /// <summary>
    /// The actual ingredient - either a substance (simple ingredient) or another medication.
    /// </summary>
    [JsonProperty("item")]
    public Reference Item { get; set; }
  }
  /// <summary>
  /// Information about a group of medication produced or packaged from one production run.
  /// </summary>
  public class MedicationProductBatch : BackboneElement {
    /// <summary>
    /// When this specific batch of product will expire.
    /// </summary>
    [JsonProperty("expirationDate")]
    public string ExpirationDate { get; set; }
    [JsonProperty("_expirationDate")]
    public Element _ExpirationDate { get; set; }
    /// <summary>
    /// The assigned lot number of a batch of the specified product.
    /// </summary>
    [JsonProperty("lotNumber")]
    public string LotNumber { get; set; }
    [JsonProperty("_lotNumber")]
    public Element _LotNumber { get; set; }
  }
  /// <summary>
  /// Information that only applies to products (not packages).
  /// </summary>
  public class MedicationProduct : BackboneElement {
    /// <summary>
    /// Information about a group of medication produced or packaged from one production run.
    /// </summary>
    [JsonProperty("batch")]
    public List<MedicationProductBatch> Batch { get; set; }
    /// <summary>
    /// Describes the form of the item.  Powder; tablets; carton.
    /// </summary>
    [JsonProperty("form")]
    public CodeableConcept Form { get; set; }
    /// <summary>
    /// Identifies a particular constituent of interest in the product.
    /// </summary>
    [JsonProperty("ingredient")]
    public List<MedicationProductIngredient> Ingredient { get; set; }
  }
  /// <summary>
  /// A set of components that go to make up the described item.
  /// </summary>
  public class MedicationPackageContent : BackboneElement {
    /// <summary>
    /// The amount of the product that is in the package.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// Identifies one of the items in the package.
    /// </summary>
    [JsonProperty("item")]
    public Reference Item { get; set; }
  }
  /// <summary>
  /// Information that only applies to packages (not products).
  /// </summary>
  public class MedicationPackage : BackboneElement {
    /// <summary>
    /// The kind of container that this package comes as.
    /// </summary>
    [JsonProperty("container")]
    public CodeableConcept Container { get; set; }
    /// <summary>
    /// A set of components that go to make up the described item.
    /// </summary>
    [JsonProperty("content")]
    public List<MedicationPackageContent> Content { get; set; }
  }
  /// <summary>
  /// This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
  /// </summary>
  public class Medication : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Medication";
    /// <summary>
    /// A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Set to true if the item is attributable to a specific manufacturer.
    /// </summary>
    [JsonProperty("isBrand")]
    public bool? IsBrand { get; set; }
    /// <summary>
    /// Describes the details of the manufacturer.
    /// </summary>
    [JsonProperty("manufacturer")]
    public Reference Manufacturer { get; set; }
    /// <summary>
    /// Information that only applies to packages (not products).
    /// </summary>
    [JsonProperty("package")]
    public MedicationPackage Package { get; set; }
    /// <summary>
    /// Information that only applies to products (not packages).
    /// </summary>
    [JsonProperty("product")]
    public MedicationProduct Product { get; set; }
  }
  /// <summary>
  /// Describes the medication dosage information details e.g. dose, rate, site, route, etc.
  /// </summary>
  public class MedicationAdministrationDosage : BackboneElement {
    /// <summary>
    /// A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
    /// </summary>
    [JsonProperty("method")]
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Currently we do not specify a default of '1' in the denominator, but this is being discussed.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRatio")]
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Currently we do not specify a default of '1' in the denominator, but this is being discussed.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRange")]
    public Range RateRange { get; set; }
    /// <summary>
    /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
    /// </summary>
    [JsonProperty("route")]
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
    /// </summary>
    [JsonProperty("siteCodeableConcept")]
    public CodeableConcept SiteCodeableConcept { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
    /// </summary>
    [JsonProperty("siteReference")]
    public Reference SiteReference { get; set; }
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
  }
  /// <summary>
  /// Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
  /// </summary>
  public class MedicationAdministration : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "MedicationAdministration";
    /// <summary>
    /// The device used in administering the medication to the patient.  For example, a particular infusion pump.
    /// </summary>
    [JsonProperty("device")]
    public List<Reference> Device { get; set; }
    /// <summary>
    /// Describes the medication dosage information details e.g. dose, rate, site, route, etc.
    /// </summary>
    [JsonProperty("dosage")]
    public MedicationAdministrationDosage Dosage { get; set; }
    /// <summary>
    /// A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
    /// </summary>
    [JsonProperty("effectiveTimeDateTime")]
    public string EffectiveTimeDateTime { get; set; }
    [JsonProperty("_effectiveTimeDateTime")]
    public Element _EffectiveTimeDateTime { get; set; }
    /// <summary>
    /// A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
    /// </summary>
    [JsonProperty("effectiveTimePeriod")]
    public Period EffectiveTimePeriod { get; set; }
    /// <summary>
    /// The visit, admission or other contact between patient and health care provider the medication administration was performed as part of.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationCodeableConcept")]
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationReference")]
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Extra information about the medication administration that is not conveyed by the other attributes.
    /// </summary>
    [JsonProperty("note")]
    public string Note { get; set; }
    [JsonProperty("_note")]
    public Element _Note { get; set; }
    /// <summary>
    /// The person or animal receiving the medication.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The individual who was responsible for giving the medication to the patient.
    /// </summary>
    [JsonProperty("practitioner")]
    public Reference Practitioner { get; set; }
    /// <summary>
    /// The original request, instruction or authority to perform the administration.
    /// </summary>
    [JsonProperty("prescription")]
    public Reference Prescription { get; set; }
    /// <summary>
    /// A code indicating why the medication was given.
    /// </summary>
    [JsonProperty("reasonGiven")]
    public List<CodeableConcept> ReasonGiven { get; set; }
    /// <summary>
    /// A code indicating why the administration was not performed.
    /// </summary>
    [JsonProperty("reasonNotGiven")]
    public List<CodeableConcept> ReasonNotGiven { get; set; }
    /// <summary>
    /// Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Set this to true if the record is saying that the medication was NOT administered.
    /// </summary>
    [JsonProperty("wasNotGiven")]
    public bool? WasNotGiven { get; set; }
  }
  /// <summary>
  /// Code Values for the MedicationAdministration.status field
  /// </summary>
  public static class MedicationAdministrationStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string STOPPED = "stopped";
  }
  /// <summary>
  /// Indicates how the medication is to be used by the patient.
  /// </summary>
  public class MedicationDispenseDosageInstruction : BackboneElement {
    /// <summary>
    /// Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
    /// </summary>
    [JsonProperty("additionalInstructions")]
    public CodeableConcept AdditionalInstructions { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    [JsonProperty("asNeededBoolean")]
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    [JsonProperty("asNeededCodeableConcept")]
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    [JsonProperty("doseRange")]
    public Range DoseRange { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    [JsonProperty("doseQuantity")]
    public Quantity DoseQuantity { get; set; }
    /// <summary>
    /// The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time,  e.g. 1000mg in 24 hours.
    /// </summary>
    [JsonProperty("maxDosePerPeriod")]
    public Ratio MaxDosePerPeriod { get; set; }
    /// <summary>
    /// A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.
    /// </summary>
    [JsonProperty("method")]
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRatio")]
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRange")]
    public Range RateRange { get; set; }
    /// <summary>
    /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
    /// </summary>
    [JsonProperty("route")]
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    [JsonProperty("siteCodeableConcept")]
    public CodeableConcept SiteCodeableConcept { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    [JsonProperty("siteReference")]
    public Reference SiteReference { get; set; }
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions.  For example, "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("timing")]
    public Timing Timing { get; set; }
  }
  /// <summary>
  /// Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
  /// </summary>
  public class MedicationDispenseSubstitution : BackboneElement {
    /// <summary>
    /// Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
    /// </summary>
    [JsonProperty("reason")]
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// The person or organization that has primary responsibility for the substitution.
    /// </summary>
    [JsonProperty("responsibleParty")]
    public List<Reference> ResponsibleParty { get; set; }
    /// <summary>
    /// A code signifying whether a different drug was dispensed from what was prescribed.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
  /// </summary>
  public class MedicationDispense : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "MedicationDispense";
    /// <summary>
    /// Indicates the medication order that is being dispensed against.
    /// </summary>
    [JsonProperty("authorizingPrescription")]
    public List<Reference> AuthorizingPrescription { get; set; }
    /// <summary>
    /// The amount of medication expressed as a timing amount.
    /// </summary>
    [JsonProperty("daysSupply")]
    public Quantity DaysSupply { get; set; }
    /// <summary>
    /// Identification of the facility/location where the medication was shipped to, as part of the dispense event.
    /// </summary>
    [JsonProperty("destination")]
    public Reference Destination { get; set; }
    /// <summary>
    /// The individual responsible for dispensing the medication.
    /// </summary>
    [JsonProperty("dispenser")]
    public Reference Dispenser { get; set; }
    /// <summary>
    /// Indicates how the medication is to be used by the patient.
    /// </summary>
    [JsonProperty("dosageInstruction")]
    public List<MedicationDispenseDosageInstruction> DosageInstruction { get; set; }
    /// <summary>
    /// Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationCodeableConcept")]
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationReference")]
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Extra information about the dispense that could not be conveyed in the other attributes.
    /// </summary>
    [JsonProperty("note")]
    public string Note { get; set; }
    [JsonProperty("_note")]
    public Element _Note { get; set; }
    /// <summary>
    /// A link to a resource representing the person to whom the medication will be given.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The amount of medication that has been dispensed. Includes unit of measure.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
    /// </summary>
    [JsonProperty("receiver")]
    public List<Reference> Receiver { get; set; }
    /// <summary>
    /// A code specifying the state of the set of dispense events.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
    /// </summary>
    [JsonProperty("substitution")]
    public MedicationDispenseSubstitution Substitution { get; set; }
    /// <summary>
    /// Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The time the dispensed product was provided to the patient or their representative.
    /// </summary>
    [JsonProperty("whenHandedOver")]
    public string WhenHandedOver { get; set; }
    [JsonProperty("_whenHandedOver")]
    public Element _WhenHandedOver { get; set; }
    /// <summary>
    /// The time when the dispensed product was packaged and reviewed.
    /// </summary>
    [JsonProperty("whenPrepared")]
    public string WhenPrepared { get; set; }
    [JsonProperty("_whenPrepared")]
    public Element _WhenPrepared { get; set; }
  }
  /// <summary>
  /// Code Values for the MedicationDispense.status field
  /// </summary>
  public static class MedicationDispenseStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string STOPPED = "stopped";
  }
  /// <summary>
  /// Indicates how the medication is to be used by the patient.
  /// </summary>
  public class MedicationOrderDosageInstruction : BackboneElement {
    /// <summary>
    /// Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
    /// </summary>
    [JsonProperty("additionalInstructions")]
    public CodeableConcept AdditionalInstructions { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
    /// </summary>
    [JsonProperty("asNeededBoolean")]
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
    /// </summary>
    [JsonProperty("asNeededCodeableConcept")]
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    [JsonProperty("doseRange")]
    public Range DoseRange { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    [JsonProperty("doseQuantity")]
    public Quantity DoseQuantity { get; set; }
    /// <summary>
    /// The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
    /// </summary>
    [JsonProperty("maxDosePerPeriod")]
    public Ratio MaxDosePerPeriod { get; set; }
    /// <summary>
    /// A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  For examples, Slow Push; Deep IV.
    /// </summary>
    [JsonProperty("method")]
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRatio")]
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRange")]
    public Range RateRange { get; set; }
    /// <summary>
    /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto a patient's body.
    /// </summary>
    [JsonProperty("route")]
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    [JsonProperty("siteCodeableConcept")]
    public CodeableConcept SiteCodeableConcept { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    [JsonProperty("siteReference")]
    public Reference SiteReference { get; set; }
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code.  The content of this attribute does not include the name or description of the medication. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication. It is expected that the text instructions will always be populated.  If the dosage.timing attribute is also populated, then the dosage.text should reflect the same information as the timing.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// The timing schedule for giving the medication to the patient. The Schedule data type allows many different expressions. For example: "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("timing")]
    public Timing Timing { get; set; }
  }
  /// <summary>
  /// Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
  /// </summary>
  public class MedicationOrderDispenseRequest : BackboneElement {
    /// <summary>
    /// Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
    /// </summary>
    [JsonProperty("expectedSupplyDuration")]
    public Quantity ExpectedSupplyDuration { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationCodeableConcept")]
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationReference")]
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// An integer indicating the number of additional times (aka refills or repeats) the patient can receive the prescribed medication.   Usage Notes: This integer does NOT include the original order dispense.   This means that if an order indicates dispense 30 tablets plus  "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.
    /// </summary>
    [JsonProperty("numberOfRepeatsAllowed")]
    public uint? NumberOfRepeatsAllowed { get; set; }
    /// <summary>
    /// The amount that is to be dispensed for one fill.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Indicates when the Prescription becomes valid, and when it ceases to be a dispensable Prescription.
    /// </summary>
    [JsonProperty("validityPeriod")]
    public Period ValidityPeriod { get; set; }
  }
  /// <summary>
  /// Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  /// </summary>
  public class MedicationOrderSubstitution : BackboneElement {
    /// <summary>
    /// Indicates the reason for the substitution, or why substitution must or must not be performed.
    /// </summary>
    [JsonProperty("reason")]
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// A code signifying whether a different drug should be dispensed from what was prescribed.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
  /// </summary>
  public class MedicationOrder : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "MedicationOrder";
    /// <summary>
    /// The date (and perhaps time) when the prescription was stopped.
    /// </summary>
    [JsonProperty("dateEnded")]
    public string DateEnded { get; set; }
    [JsonProperty("_dateEnded")]
    public Element _DateEnded { get; set; }
    /// <summary>
    /// The date (and perhaps time) when the prescription was written.
    /// </summary>
    [JsonProperty("dateWritten")]
    public string DateWritten { get; set; }
    [JsonProperty("_dateWritten")]
    public Element _DateWritten { get; set; }
    /// <summary>
    /// Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
    /// </summary>
    [JsonProperty("dispenseRequest")]
    public MedicationOrderDispenseRequest DispenseRequest { get; set; }
    /// <summary>
    /// Indicates how the medication is to be used by the patient.
    /// </summary>
    [JsonProperty("dosageInstruction")]
    public List<MedicationOrderDosageInstruction> DosageInstruction { get; set; }
    /// <summary>
    /// A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// External identifier - one that would be used by another non-FHIR system - for example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records have to be tracked through an entire system.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationCodeableConcept")]
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationReference")]
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Extra information about the prescription that could not be conveyed by the other attributes.
    /// </summary>
    [JsonProperty("note")]
    public string Note { get; set; }
    [JsonProperty("_note")]
    public Element _Note { get; set; }
    /// <summary>
    /// A link to a resource representing the person to whom the medication will be given.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The healthcare professional responsible for authorizing the prescription.
    /// </summary>
    [JsonProperty("prescriber")]
    public Reference Prescriber { get; set; }
    /// <summary>
    /// A link to a resource representing an earlier order or prescription that this order supersedes.
    /// </summary>
    [JsonProperty("priorPrescription")]
    public Reference PriorPrescription { get; set; }
    /// <summary>
    /// Can be the reason or the indication for writing the prescription.
    /// </summary>
    [JsonProperty("reasonCodeableConcept")]
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// Can be the reason or the indication for writing the prescription.
    /// </summary>
    [JsonProperty("reasonReference")]
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// The reason why the prescription was stopped, if it was.
    /// </summary>
    [JsonProperty("reasonEnded")]
    public CodeableConcept ReasonEnded { get; set; }
    /// <summary>
    /// A code specifying the state of the order.  Generally this will be active or completed state.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
    /// </summary>
    [JsonProperty("substitution")]
    public MedicationOrderSubstitution Substitution { get; set; }
  }
  /// <summary>
  /// Code Values for the MedicationOrder.status field
  /// </summary>
  public static class MedicationOrderStatusCodes {
    public const string ACTIVE = "active";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string STOPPED = "stopped";
    public const string DRAFT = "draft";
  }
  /// <summary>
  /// Indicates how the medication is/was used by the patient.
  /// </summary>
  public class MedicationStatementDosage : BackboneElement {
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    [JsonProperty("asNeededBoolean")]
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    [JsonProperty("asNeededCodeableConcept")]
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
    /// </summary>
    [JsonProperty("maxDosePerPeriod")]
    public Ratio MaxDosePerPeriod { get; set; }
    /// <summary>
    /// A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
    /// </summary>
    [JsonProperty("method")]
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    [JsonProperty("quantityQuantity")]
    public Quantity QuantityQuantity { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    [JsonProperty("quantityRange")]
    public Range QuantityRange { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRatio")]
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    [JsonProperty("rateRange")]
    public Range RateRange { get; set; }
    /// <summary>
    /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
    /// </summary>
    [JsonProperty("route")]
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// A coded specification of or a reference to the anatomic site where the medication first enters the body.
    /// </summary>
    [JsonProperty("siteCodeableConcept")]
    public CodeableConcept SiteCodeableConcept { get; set; }
    /// <summary>
    /// A coded specification of or a reference to the anatomic site where the medication first enters the body.
    /// </summary>
    [JsonProperty("siteReference")]
    public Reference SiteReference { get; set; }
    /// <summary>
    /// Free text dosage information as reported about a patient's medication use. When coded dosage information is present, the free text may still be present for display to humans.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("timing")]
    public Timing Timing { get; set; }
  }
  /// <summary>
  /// A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains   The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
  /// </summary>
  public class MedicationStatement : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "MedicationStatement";
    /// <summary>
    /// The date when the medication statement was asserted by the information source.
    /// </summary>
    [JsonProperty("dateAsserted")]
    public string DateAsserted { get; set; }
    [JsonProperty("_dateAsserted")]
    public Element _DateAsserted { get; set; }
    /// <summary>
    /// Indicates how the medication is/was used by the patient.
    /// </summary>
    [JsonProperty("dosage")]
    public List<MedicationStatementDosage> Dosage { get; set; }
    /// <summary>
    /// The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
    /// </summary>
    [JsonProperty("effectiveDateTime")]
    public string EffectiveDateTime { get; set; }
    [JsonProperty("_effectiveDateTime")]
    public Element _EffectiveDateTime { get; set; }
    /// <summary>
    /// The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
    /// </summary>
    [JsonProperty("effectivePeriod")]
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The person who provided the information about the taking of this medication.
    /// </summary>
    [JsonProperty("informationSource")]
    public Reference InformationSource { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationCodeableConcept")]
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    [JsonProperty("medicationReference")]
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Provides extra information about the medication statement that is not conveyed by the other attributes.
    /// </summary>
    [JsonProperty("note")]
    public string Note { get; set; }
    [JsonProperty("_note")]
    public Element _Note { get; set; }
    /// <summary>
    /// The person or animal who is/was taking the medication.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// A reason for why the medication is being/was taken.
    /// </summary>
    [JsonProperty("reasonForUseCodeableConcept")]
    public CodeableConcept ReasonForUseCodeableConcept { get; set; }
    /// <summary>
    /// A reason for why the medication is being/was taken.
    /// </summary>
    [JsonProperty("reasonForUseReference")]
    public Reference ReasonForUseReference { get; set; }
    /// <summary>
    /// A code indicating why the medication was not taken.
    /// </summary>
    [JsonProperty("reasonNotTaken")]
    public List<CodeableConcept> ReasonNotTaken { get; set; }
    /// <summary>
    /// A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Allows linking the MedicationStatement to the underlying MedicationOrder, or to other information that supports the MedicationStatement.
    /// </summary>
    [JsonProperty("supportingInformation")]
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// Set this to true if the record is saying that the medication was NOT taken.
    /// </summary>
    [JsonProperty("wasNotTaken")]
    public bool? WasNotTaken { get; set; }
  }
  /// <summary>
  /// Code Values for the MedicationStatement.status field
  /// </summary>
  public static class MedicationStatementStatusCodes {
    public const string ACTIVE = "active";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string INTENDED = "intended";
  }
  /// <summary>
  /// Information about the message that this message is a response to.  Only present if this message is a response.
  /// </summary>
  public class MessageHeaderResponse : BackboneElement {
    /// <summary>
    /// Allows the sender of the acknowledge message to know if the request was successful or if action is needed.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Allows the sender of the message to determine what the specific issues are.
    /// </summary>
    [JsonProperty("details")]
    public Reference Details { get; set; }
    /// <summary>
    /// Allows receiver to know what message is being responded to.
    /// </summary>
    [JsonProperty("identifier")]
    public string Identifier { get; set; }
    [JsonProperty("_identifier")]
    public Element _Identifier { get; set; }
  }
  /// <summary>
  /// Code Values for the MessageHeader.response.code field
  /// </summary>
  public static class MessageHeaderResponseCodeCodes {
    public const string OK = "ok";
    public const string TRANSIENT_ERROR = "transient-error";
    public const string FATAL_ERROR = "fatal-error";
  }
  /// <summary>
  /// Allows replies, supports audit.
  /// </summary>
  public class MessageHeaderSource : BackboneElement {
    /// <summary>
    /// Allows escalation of technical issues.
    /// </summary>
    [JsonProperty("contact")]
    public ContactPoint Contact { get; set; }
    /// <summary>
    /// Identifies where to send responses, may influence security permissions.
    /// </summary>
    [JsonProperty("endpoint")]
    public string Endpoint { get; set; }
    [JsonProperty("_endpoint")]
    public Element _Endpoint { get; set; }
    /// <summary>
    /// May be used to support audit.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Supports audit and possibly interface engine behavior.
    /// </summary>
    [JsonProperty("software")]
    public string Software { get; set; }
    [JsonProperty("_software")]
    public Element _Software { get; set; }
    /// <summary>
    /// Supports audit and possibly interface engine behavior.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Indicates where message is to be sent for routing purposes.  Allows verification of "am I the intended recipient".
  /// </summary>
  public class MessageHeaderDestination : BackboneElement {
    /// <summary>
    /// Identifies where to route the message.
    /// </summary>
    [JsonProperty("endpoint")]
    public string Endpoint { get; set; }
    [JsonProperty("_endpoint")]
    public Element _Endpoint { get; set; }
    /// <summary>
    /// May be used for routing of response and/or to support audit.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Supports multi-hop routing.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
  }
  /// <summary>
  /// The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
  /// </summary>
  public class MessageHeader : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "MessageHeader";
    /// <summary>
    /// Need to know for audit/traceback requirements and possibly for authorization.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Every message event is about actual data, a single resource, that is identified in the definition of the event, and perhaps some or all linked resources.
    /// </summary>
    [JsonProperty("data")]
    public List<Reference> Data { get; set; }
    /// <summary>
    /// Indicates where message is to be sent for routing purposes.  Allows verification of "am I the intended recipient".
    /// </summary>
    [JsonProperty("destination")]
    public List<MessageHeaderDestination> Destination { get; set; }
    /// <summary>
    /// Need to know for audit/traceback requirements and possibly for authorization.
    /// </summary>
    [JsonProperty("enterer")]
    public Reference Enterer { get; set; }
    /// <summary>
    /// Drives the behavior associated with this message.
    /// </summary>
    [JsonProperty("event")]
    public Coding Event { get; set; }
    /// <summary>
    /// Need to be able to track why resources are being changed and report in the audit log/history of the resource.  May affect authorization.
    /// </summary>
    [JsonProperty("reason")]
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// Allows routing beyond just the application level.
    /// </summary>
    [JsonProperty("receiver")]
    public Reference Receiver { get; set; }
    /// <summary>
    /// Information about the message that this message is a response to.  Only present if this message is a response.
    /// </summary>
    [JsonProperty("response")]
    public MessageHeaderResponse Response { get; set; }
    /// <summary>
    /// Need to know for audit/traceback requirements and possibly for authorization.
    /// </summary>
    [JsonProperty("responsible")]
    public Reference Responsible { get; set; }
    /// <summary>
    /// Allows replies, supports audit.
    /// </summary>
    [JsonProperty("source")]
    public MessageHeaderSource Source { get; set; }
    /// <summary>
    /// Allows limited detection of out-of-order and delayed transmission.  Also supports audit.
    /// </summary>
    [JsonProperty("timestamp")]
    public string Timestamp { get; set; }
    [JsonProperty("_timestamp")]
    public Element _Timestamp { get; set; }
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class NamingSystemContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the naming system.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Indicates how the system may be identified when referenced in electronic exchange.
  /// </summary>
  public class NamingSystemUniqueId : BackboneElement {
    /// <summary>
    /// Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Indicates whether this identifier is the "preferred" identifier of this type.
    /// </summary>
    [JsonProperty("preferred")]
    public bool? Preferred { get; set; }
    /// <summary>
    /// Identifies the unique identifier scheme used for this particular identifier.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// The string that should be sent over the wire to identify the code system or identifier system.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// Code Values for the NamingSystem.uniqueId.type field
  /// </summary>
  public static class NamingSystemUniqueIdTypeCodes {
    public const string OID = "oid";
    public const string UUID = "uuid";
    public const string URI = "uri";
    public const string OTHER = "other";
  }
  /// <summary>
  /// A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
  /// </summary>
  public class NamingSystem : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "NamingSystem";
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<NamingSystemContact> Contact { get; set; }
    /// <summary>
    /// The date  (and optionally time) when the system was registered or published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the registration changes.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Details about what the namespace identifies including scope, granularity, version labeling, etc.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Indicates the purpose for the naming system - what kinds of things does it make unique?
    /// </summary>
    [JsonProperty("kind")]
    public string Kind { get; set; }
    [JsonProperty("_kind")]
    public Element _Kind { get; set; }
    /// <summary>
    /// The descriptive name of this particular identifier type or code system.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the naming system.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// For naming systems that are retired, indicates the naming system that should be used in their place (if any).
    /// </summary>
    [JsonProperty("replacedBy")]
    public Reference ReplacedBy { get; set; }
    /// <summary>
    /// The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
    /// </summary>
    [JsonProperty("responsible")]
    public string Responsible { get; set; }
    [JsonProperty("_responsible")]
    public Element _Responsible { get; set; }
    /// <summary>
    /// Indicates whether the naming system is "ready for use" or not.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Categorizes a naming system for easier search by grouping related naming systems.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Indicates how the system may be identified when referenced in electronic exchange.
    /// </summary>
    [JsonProperty("uniqueId")]
    public List<NamingSystemUniqueId> UniqueId { get; set; }
    /// <summary>
    /// Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
    /// </summary>
    [JsonProperty("usage")]
    public string Usage { get; set; }
    [JsonProperty("_usage")]
    public Element _Usage { get; set; }
    /// <summary>
    /// Assist in searching for appropriate content.
    /// </summary>
    [JsonProperty("useContext")]
    public List<CodeableConcept> UseContext { get; set; }
  }
  /// <summary>
  /// Code Values for the NamingSystem.kind field
  /// </summary>
  public static class NamingSystemKindCodes {
    public const string CODESYSTEM = "codesystem";
    public const string IDENTIFIER = "identifier";
    public const string ROOT = "root";
  }
  /// <summary>
  /// Code Values for the NamingSystem.status field
  /// </summary>
  public static class NamingSystemStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Class that defines the quantity and type of nutrient modifications required for the oral diet.
  /// </summary>
  public class NutritionOrderOralDietNutrient : BackboneElement {
    /// <summary>
    /// The quantity of the specified nutrient to include in diet.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// The nutrient that is being modified such as carbohydrate or sodium.
    /// </summary>
    [JsonProperty("modifier")]
    public CodeableConcept Modifier { get; set; }
  }
  /// <summary>
  /// Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
  /// </summary>
  public class NutritionOrderOralDietTexture : BackboneElement {
    /// <summary>
    /// The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
    /// </summary>
    [JsonProperty("foodType")]
    public CodeableConcept FoodType { get; set; }
    /// <summary>
    /// Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
    /// </summary>
    [JsonProperty("modifier")]
    public CodeableConcept Modifier { get; set; }
  }
  /// <summary>
  /// Diet given orally in contrast to enteral (tube) feeding.
  /// </summary>
  public class NutritionOrderOralDiet : BackboneElement {
    /// <summary>
    /// The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
    /// </summary>
    [JsonProperty("fluidConsistencyType")]
    public List<CodeableConcept> FluidConsistencyType { get; set; }
    /// <summary>
    /// Free text or additional instructions or information pertaining to the oral diet.
    /// </summary>
    [JsonProperty("instruction")]
    public string Instruction { get; set; }
    [JsonProperty("_instruction")]
    public Element _Instruction { get; set; }
    /// <summary>
    /// Class that defines the quantity and type of nutrient modifications required for the oral diet.
    /// </summary>
    [JsonProperty("nutrient")]
    public List<NutritionOrderOralDietNutrient> Nutrient { get; set; }
    /// <summary>
    /// The time period and frequency at which the diet should be given.
    /// </summary>
    [JsonProperty("schedule")]
    public List<Timing> Schedule { get; set; }
    /// <summary>
    /// Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
    /// </summary>
    [JsonProperty("texture")]
    public List<NutritionOrderOralDietTexture> Texture { get; set; }
    /// <summary>
    /// The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
    /// </summary>
    [JsonProperty("type")]
    public List<CodeableConcept> Type { get; set; }
  }
  /// <summary>
  /// Oral nutritional products given in order to add further nutritional value to the patient's diet.
  /// </summary>
  public class NutritionOrderSupplement : BackboneElement {
    /// <summary>
    /// Free text or additional instructions or information pertaining to the oral supplement.
    /// </summary>
    [JsonProperty("instruction")]
    public string Instruction { get; set; }
    [JsonProperty("_instruction")]
    public Element _Instruction { get; set; }
    /// <summary>
    /// The product or brand name of the nutritional supplement such as "Acme Protein Shake".
    /// </summary>
    [JsonProperty("productName")]
    public string ProductName { get; set; }
    [JsonProperty("_productName")]
    public Element _ProductName { get; set; }
    /// <summary>
    /// The amount of the nutritional supplement to be given.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The time period and frequency at which the supplement(s) should be given.
    /// </summary>
    [JsonProperty("schedule")]
    public List<Timing> Schedule { get; set; }
    /// <summary>
    /// The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
  /// </summary>
  public class NutritionOrderEnteralFormulaAdministration : BackboneElement {
    /// <summary>
    /// The volume of formula to provide to the patient per the specified administration schedule.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
    /// </summary>
    [JsonProperty("rateQuantity")]
    public Quantity RateQuantity { get; set; }
    /// <summary>
    /// The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
    /// </summary>
    [JsonProperty("rateRatio")]
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// The time period and frequency at which the enteral formula should be delivered to the patient.
    /// </summary>
    [JsonProperty("schedule")]
    public Timing Schedule { get; set; }
  }
  /// <summary>
  /// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
  /// </summary>
  public class NutritionOrderEnteralFormula : BackboneElement {
    /// <summary>
    /// The product or brand name of the type of modular component to be added to the formula.
    /// </summary>
    [JsonProperty("additiveProductName")]
    public string AdditiveProductName { get; set; }
    [JsonProperty("_additiveProductName")]
    public Element _AdditiveProductName { get; set; }
    /// <summary>
    /// Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
    /// </summary>
    [JsonProperty("additiveType")]
    public CodeableConcept AdditiveType { get; set; }
    /// <summary>
    /// Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
    /// </summary>
    [JsonProperty("administration")]
    public List<NutritionOrderEnteralFormulaAdministration> Administration { get; set; }
    /// <summary>
    /// Free text formula administration, feeding instructions or additional instructions or information.
    /// </summary>
    [JsonProperty("administrationInstruction")]
    public string AdministrationInstruction { get; set; }
    [JsonProperty("_administrationInstruction")]
    public Element _AdministrationInstruction { get; set; }
    /// <summary>
    /// The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
    /// </summary>
    [JsonProperty("baseFormulaProductName")]
    public string BaseFormulaProductName { get; set; }
    [JsonProperty("_baseFormulaProductName")]
    public Element _BaseFormulaProductName { get; set; }
    /// <summary>
    /// The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
    /// </summary>
    [JsonProperty("baseFormulaType")]
    public CodeableConcept BaseFormulaType { get; set; }
    /// <summary>
    /// The amount of energy (Calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 Calories per fluid ounce or an adult may require an enteral formula that provides 1.5 Calorie/mL.
    /// </summary>
    [JsonProperty("caloricDensity")]
    public Quantity CaloricDensity { get; set; }
    /// <summary>
    /// The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
    /// </summary>
    [JsonProperty("maxVolumeToDeliver")]
    public Quantity MaxVolumeToDeliver { get; set; }
    /// <summary>
    /// The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
    /// </summary>
    [JsonProperty("routeofAdministration")]
    public CodeableConcept RouteofAdministration { get; set; }
  }
  /// <summary>
  /// A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
  /// </summary>
  public class NutritionOrder : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "NutritionOrder";
    /// <summary>
    /// A link to a record of allergies or intolerances  which should be included in the nutrition order.
    /// </summary>
    [JsonProperty("allergyIntolerance")]
    public List<Reference> AllergyIntolerance { get; set; }
    /// <summary>
    /// The date and time that this nutrition order was requested.
    /// </summary>
    [JsonProperty("dateTime")]
    public string DateTime { get; set; }
    [JsonProperty("_dateTime")]
    public Element _DateTime { get; set; }
    /// <summary>
    /// An encounter that provides additional information about the healthcare context in which this request is made.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
    /// </summary>
    [JsonProperty("enteralFormula")]
    public NutritionOrderEnteralFormula EnteralFormula { get; set; }
    /// <summary>
    /// This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced allergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
    /// </summary>
    [JsonProperty("excludeFoodModifier")]
    public List<CodeableConcept> ExcludeFoodModifier { get; set; }
    /// <summary>
    /// This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
    /// </summary>
    [JsonProperty("foodPreferenceModifier")]
    public List<CodeableConcept> FoodPreferenceModifier { get; set; }
    /// <summary>
    /// Identifiers assigned to this order by the order sender or by the order receiver.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Diet given orally in contrast to enteral (tube) feeding.
    /// </summary>
    [JsonProperty("oralDiet")]
    public NutritionOrderOralDiet OralDiet { get; set; }
    /// <summary>
    /// The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
    /// </summary>
    [JsonProperty("orderer")]
    public Reference Orderer { get; set; }
    /// <summary>
    /// The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The workflow status of the nutrition order/request.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Oral nutritional products given in order to add further nutritional value to the patient's diet.
    /// </summary>
    [JsonProperty("supplement")]
    public List<NutritionOrderSupplement> Supplement { get; set; }
  }
  /// <summary>
  /// Code Values for the NutritionOrder.status field
  /// </summary>
  public static class NutritionOrderStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string PLANNED = "planned";
    public const string REQUESTED = "requested";
    public const string ACTIVE = "active";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// Knowing what values are considered "normal" can help evaluate the significance of a particular result. Need to be able to provide multiple reference ranges for different contexts.
  /// </summary>
  public class ObservationReferenceRange : BackboneElement {
    /// <summary>
    /// Some analytes vary greatly over age.
    /// </summary>
    [JsonProperty("age")]
    public Range Age { get; set; }
    /// <summary>
    /// The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
    /// </summary>
    [JsonProperty("high")]
    public Quantity High { get; set; }
    /// <summary>
    /// The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
    /// </summary>
    [JsonProperty("low")]
    public Quantity Low { get; set; }
    /// <summary>
    /// Need to be able to say what kind of reference range this is - normal, recommended, therapeutic, or perhaps what state this reference range applies to (i.e. age, hormonal cycles, etc.).
    /// </summary>
    [JsonProperty("meaning")]
    public CodeableConcept Meaning { get; set; }
    /// <summary>
    /// Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of 'normals'.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
  }
  /// <summary>
  /// Normally, an observation will have either a value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and a set of related observations or sometimes QuestionnaireResponse  from which the measure is derived.
  /// </summary>
  public class ObservationRelated : BackboneElement {
    /// <summary>
    /// A reference to the observation or [[[QuestionnaireResponse]]] resource that is related to this observation.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
    /// <summary>
    /// A relationship type SHOULD be provided.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Observation.related.type field
  /// </summary>
  public static class ObservationRelatedTypeCodes {
    public const string HAS_MEMBER = "has-member";
    public const string DERIVED_FROM = "derived-from";
    public const string SEQUEL_TO = "sequel-to";
    public const string REPLACES = "replaces";
    public const string QUALIFIED_BY = "qualified-by";
    public const string INTERFERED_BY = "interfered-by";
  }
  /// <summary>
  /// Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.
  /// </summary>
  public class ObservationComponent : BackboneElement {
    /// <summary>
    /// Knowing what kind of observation is being made is essential to understanding the observation.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// For many results it is necessary to handle exceptional values in measurements.
    /// </summary>
    [JsonProperty("dataAbsentReason")]
    public CodeableConcept DataAbsentReason { get; set; }
    /// <summary>
    /// Knowing what values are considered "normal" can help evaluate the significance of a particular result. Need to be able to provide multiple reference ranges for different contexts.
    /// </summary>
    [JsonProperty("referenceRange")]
    public List<ObservationReferenceRange> ReferenceRange { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueQuantity")]
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueCodeableConcept")]
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueString")]
    public string ValueString { get; set; }
    [JsonProperty("_valueString")]
    public Element _ValueString { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueRange")]
    public Range ValueRange { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueRatio")]
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueSampledData")]
    public SampledData ValueSampledData { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueAttachment")]
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueTime")]
    public string ValueTime { get; set; }
    [JsonProperty("_valueTime")]
    public Element _ValueTime { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueDateTime")]
    public string ValueDateTime { get; set; }
    [JsonProperty("_valueDateTime")]
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valuePeriod")]
    public Period ValuePeriod { get; set; }
  }
  /// <summary>
  /// Measurements and simple assertions made about a patient, device or other subject.
  /// </summary>
  public class Observation : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Observation";
    /// <summary>
    /// Knowing where the observation is made is important for tracking if multiple sites are possible.
    /// </summary>
    [JsonProperty("bodySite")]
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// A code that classifies the general type of observation being made.  This is used  for searching, sorting and display purposes.
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Knowing what kind of observation is being made is essential to understanding the observation.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Need to be able to provide free text additional information.
    /// </summary>
    [JsonProperty("comments")]
    public string Comments { get; set; }
    [JsonProperty("_comments")]
    public Element _Comments { get; set; }
    /// <summary>
    /// Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.
    /// </summary>
    [JsonProperty("component")]
    public List<ObservationComponent> Component { get; set; }
    /// <summary>
    /// For many results it is necessary to handle exceptional values in measurements.
    /// </summary>
    [JsonProperty("dataAbsentReason")]
    public CodeableConcept DataAbsentReason { get; set; }
    /// <summary>
    /// The device used to generate the observation data.
    /// </summary>
    [JsonProperty("device")]
    public Reference Device { get; set; }
    /// <summary>
    /// Knowing when an observation was deemed true is important to its relevance as well as determining trends.
    /// </summary>
    [JsonProperty("effectiveDateTime")]
    public string EffectiveDateTime { get; set; }
    [JsonProperty("_effectiveDateTime")]
    public Element _EffectiveDateTime { get; set; }
    /// <summary>
    /// Knowing when an observation was deemed true is important to its relevance as well as determining trends.
    /// </summary>
    [JsonProperty("effectivePeriod")]
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// For some observations it may be important to know the link between an observation and a particular encounter.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Allows observations to be distinguished and referenced.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// For some results, particularly numeric results, an interpretation is necessary to fully understand the significance of a result.
    /// </summary>
    [JsonProperty("interpretation")]
    public CodeableConcept Interpretation { get; set; }
    /// <summary>
    /// The date and time this observation was made available to providers, typically after the results have been reviewed and verified.
    /// </summary>
    [JsonProperty("issued")]
    public string Issued { get; set; }
    [JsonProperty("_issued")]
    public Element _Issued { get; set; }
    /// <summary>
    /// In some cases, method can impact results and is thus used for determining whether results can be compared or determining significance of results.
    /// </summary>
    [JsonProperty("method")]
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// May give a degree of confidence in the observation and also indicates where follow-up questions should be directed.
    /// </summary>
    [JsonProperty("performer")]
    public List<Reference> Performer { get; set; }
    /// <summary>
    /// Knowing what values are considered "normal" can help evaluate the significance of a particular result. Need to be able to provide multiple reference ranges for different contexts.
    /// </summary>
    [JsonProperty("referenceRange")]
    public List<ObservationReferenceRange> ReferenceRange { get; set; }
    /// <summary>
    /// Normally, an observation will have either a value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and a set of related observations or sometimes QuestionnaireResponse  from which the measure is derived.
    /// </summary>
    [JsonProperty("related")]
    public List<ObservationRelated> Related { get; set; }
    /// <summary>
    /// The specimen that was used when this observation was made.
    /// </summary>
    [JsonProperty("specimen")]
    public Reference Specimen { get; set; }
    /// <summary>
    /// Need to track the status of individual results. Some results are finalized before the whole report is finalized.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Observations have no value if you don't know who or what they're about.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueQuantity")]
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueCodeableConcept")]
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueString")]
    public string ValueString { get; set; }
    [JsonProperty("_valueString")]
    public Element _ValueString { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueRange")]
    public Range ValueRange { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueRatio")]
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueSampledData")]
    public SampledData ValueSampledData { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueAttachment")]
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueTime")]
    public string ValueTime { get; set; }
    [JsonProperty("_valueTime")]
    public Element _ValueTime { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valueDateTime")]
    public string ValueDateTime { get; set; }
    [JsonProperty("_valueDateTime")]
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
    /// </summary>
    [JsonProperty("valuePeriod")]
    public Period ValuePeriod { get; set; }
  }
  /// <summary>
  /// Code Values for the Observation.status field
  /// </summary>
  public static class ObservationStatusCodes {
    public const string REGISTERED = "registered";
    public const string PRELIMINARY = "preliminary";
    public const string FINAL = "final";
    public const string AMENDED = "amended";
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class OperationDefinitionContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the operation definition.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
  /// </summary>
  public class OperationDefinitionParameterBinding : BackboneElement {
    /// <summary>
    /// Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
    /// </summary>
    [JsonProperty("strength")]
    public string Strength { get; set; }
    [JsonProperty("_strength")]
    public Element _Strength { get; set; }
    /// <summary>
    /// Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
    /// </summary>
    [JsonProperty("valueSetUri")]
    public string ValueSetUri { get; set; }
    [JsonProperty("_valueSetUri")]
    public Element _ValueSetUri { get; set; }
    /// <summary>
    /// Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
    /// </summary>
    [JsonProperty("valueSetReference")]
    public Reference ValueSetReference { get; set; }
  }
  /// <summary>
  /// Code Values for the OperationDefinition.parameter.binding.strength field
  /// </summary>
  public static class OperationDefinitionParameterBindingStrengthCodes {
    public const string REQUIRED = "required";
    public const string EXTENSIBLE = "extensible";
    public const string PREFERRED = "preferred";
    public const string EXAMPLE = "example";
  }
  /// <summary>
  /// The parameters for the operation/query.
  /// </summary>
  public class OperationDefinitionParameter : BackboneElement {
    /// <summary>
    /// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
    /// </summary>
    [JsonProperty("binding")]
    public OperationDefinitionParameterBinding Binding { get; set; }
    /// <summary>
    /// Describes the meaning or use of this parameter.
    /// </summary>
    [JsonProperty("documentation")]
    public string Documentation { get; set; }
    [JsonProperty("_documentation")]
    public Element _Documentation { get; set; }
    /// <summary>
    /// The maximum number of times this element is permitted to appear in the request or response.
    /// </summary>
    [JsonProperty("max")]
    public string Max { get; set; }
    [JsonProperty("_max")]
    public Element _Max { get; set; }
    /// <summary>
    /// The minimum number of times this parameter SHALL appear in the request or response.
    /// </summary>
    [JsonProperty("min")]
    public int Min { get; set; }
    /// <summary>
    /// The name of used to identify the parameter.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// The parts of a Tuple Parameter.
    /// </summary>
    [JsonProperty("part")]
    public List<OperationDefinitionParameter> Part { get; set; }
    /// <summary>
    /// A profile the specifies the rules that this parameter must conform to.
    /// </summary>
    [JsonProperty("profile")]
    public Reference Profile { get; set; }
    /// <summary>
    /// The type for this parameter.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// Whether this is an input or an output parameter.
    /// </summary>
    [JsonProperty("use")]
    public string Use { get; set; }
    [JsonProperty("_use")]
    public Element _Use { get; set; }
  }
  /// <summary>
  /// Code Values for the OperationDefinition.parameter.use field
  /// </summary>
  public static class OperationDefinitionParameterUseCodes {
    public const string VAL_IN = "in";
    public const string VAL_OUT = "out";
  }
  /// <summary>
  /// A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
  /// </summary>
  public class OperationDefinition : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "OperationDefinition";
    /// <summary>
    /// Indicates that this operation definition is a constraining profile on the base.
    /// </summary>
    [JsonProperty("base")]
    public Reference Base { get; set; }
    /// <summary>
    /// The name used to invoke the operation.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<OperationDefinitionContact> Contact { get; set; }
    /// <summary>
    /// The date this version of the operation definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the Operation Definition changes.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// A free text natural language description of the profile and its use.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of profiles that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST.
    /// </summary>
    [JsonProperty("idempotent")]
    public bool? Idempotent { get; set; }
    /// <summary>
    /// Indicates whether this operation can be invoked on a particular instance of one of the given types.
    /// </summary>
    [JsonProperty("instance")]
    public bool Instance { get; set; }
    /// <summary>
    /// Whether this is an operation or a named query.
    /// </summary>
    [JsonProperty("kind")]
    public string Kind { get; set; }
    [JsonProperty("_kind")]
    public Element _Kind { get; set; }
    /// <summary>
    /// A free text natural language name identifying the operation.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Additional information about how to use this operation or named query.
    /// </summary>
    [JsonProperty("notes")]
    public string Notes { get; set; }
    [JsonProperty("_notes")]
    public Element _Notes { get; set; }
    /// <summary>
    /// The parameters for the operation/query.
    /// </summary>
    [JsonProperty("parameter")]
    public List<OperationDefinitionParameter> Parameter { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the operation definition.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this operation definition is needed and why it's been constrained as it has.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// Allows filtering of profiles that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
    /// </summary>
    [JsonProperty("system")]
    public bool System { get; set; }
    /// <summary>
    /// Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a resource type for the context).
    /// </summary>
    [JsonProperty("type")]
    public List<string> Type { get; set; }
    [JsonProperty("_type")]
    public List<Element> _Type { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// There may be multiple resource versions of the profile that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the OperationDefinition.kind field
  /// </summary>
  public static class OperationDefinitionKindCodes {
    public const string OPERATION = "operation";
    public const string QUERY = "query";
  }
  /// <summary>
  /// Code Values for the OperationDefinition.status field
  /// </summary>
  public static class OperationDefinitionStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// An error, warning or information message that results from a system action.
  /// </summary>
  public class OperationOutcomeIssue : BackboneElement {
    /// <summary>
    /// Expresses the issue in a human and computer-friendly way, allowing the requesting system to behave differently based on the type of issue.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Additional details about the error. This may be a text description of the error, or a system code that identifies the error.
    /// </summary>
    [JsonProperty("details")]
    public CodeableConcept Details { get; set; }
    /// <summary>
    /// Additional diagnostic information about the issue.  Typically, this may be a description of how a value is erroneous, or a stack dump to help trace the issue.
    /// </summary>
    [JsonProperty("diagnostics")]
    public string Diagnostics { get; set; }
    [JsonProperty("_diagnostics")]
    public Element _Diagnostics { get; set; }
    /// <summary>
    /// Allows systems to highlight or otherwise guide users to elements implicated in issues to allow them to be fixed more easily.
    /// </summary>
    [JsonProperty("location")]
    public List<string> Location { get; set; }
    [JsonProperty("_location")]
    public List<Element> _Location { get; set; }
    /// <summary>
    /// Indicates how relevant the issue is to the overall success of the action.
    /// </summary>
    [JsonProperty("severity")]
    public string Severity { get; set; }
    [JsonProperty("_severity")]
    public Element _Severity { get; set; }
  }
  /// <summary>
  /// Code Values for the OperationOutcome.issue.severity field
  /// </summary>
  public static class OperationOutcomeIssueSeverityCodes {
    public const string FATAL = "fatal";
    public const string ERROR = "error";
    public const string WARNING = "warning";
    public const string INFORMATION = "information";
  }
  /// <summary>
  /// A collection of error, warning or information messages that result from a system action.
  /// </summary>
  public class OperationOutcome : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "OperationOutcome";
    /// <summary>
    /// An error, warning or information message that results from a system action.
    /// </summary>
    [JsonProperty("issue")]
    public List<OperationOutcomeIssue> Issue { get; set; }
  }
  /// <summary>
  /// When order should be fulfilled.
  /// </summary>
  public class OrderWhen : BackboneElement {
    /// <summary>
    /// Code specifies when request should be done. The code may simply be a priority code.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A formal schedule.
    /// </summary>
    [JsonProperty("schedule")]
    public Timing Schedule { get; set; }
  }
  /// <summary>
  /// A request to perform an action.
  /// </summary>
  public class Order : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Order";
    /// <summary>
    /// When the order was made.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// What action is being ordered.
    /// </summary>
    [JsonProperty("detail")]
    public List<Reference> Detail { get; set; }
    /// <summary>
    /// Identifiers assigned to this order by the orderer or by the receiver.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Text - why the order was made.
    /// </summary>
    [JsonProperty("reasonCodeableConcept")]
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// Text - why the order was made.
    /// </summary>
    [JsonProperty("reasonReference")]
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// Who initiated the order.
    /// </summary>
    [JsonProperty("source")]
    public Reference Source { get; set; }
    /// <summary>
    /// Patient this order is about.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Who is intended to fulfill the order.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
    /// <summary>
    /// When order should be fulfilled.
    /// </summary>
    [JsonProperty("when")]
    public OrderWhen When { get; set; }
  }
  /// <summary>
  /// A response to an order.
  /// </summary>
  public class OrderResponse : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "OrderResponse";
    /// <summary>
    /// The date and time at which this order response was made (created/posted).
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Links to resources that provide details of the outcome of performing the order; e.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.
    /// </summary>
    [JsonProperty("fulfillment")]
    public List<Reference> Fulfillment { get; set; }
    /// <summary>
    /// Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// What this response says about the status of the original order.
    /// </summary>
    [JsonProperty("orderStatus")]
    public string OrderStatus { get; set; }
    [JsonProperty("_orderStatus")]
    public Element _OrderStatus { get; set; }
    /// <summary>
    /// A reference to the order that this is in response to.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The person, organization, or device credited with making the response.
    /// </summary>
    [JsonProperty("who")]
    public Reference Who { get; set; }
  }
  /// <summary>
  /// Code Values for the OrderResponse.orderStatus field
  /// </summary>
  public static class OrderResponseOrderStatusCodes {
    public const string PENDING = "pending";
    public const string REVIEW = "review";
    public const string REJECTED = "rejected";
    public const string ERROR = "error";
    public const string ACCEPTED = "accepted";
    public const string CANCELLED = "cancelled";
    public const string REPLACED = "replaced";
    public const string ABORTED = "aborted";
    public const string COMPLETED = "completed";
  }
  /// <summary>
  /// Need to keep track of assigned contact points within bigger organization.
  /// </summary>
  public class OrganizationContact : BackboneElement {
    /// <summary>
    /// May need to keep track of a contact party's address for contacting, billing or reporting requirements.
    /// </summary>
    [JsonProperty("address")]
    public Address Address { get; set; }
    /// <summary>
    /// Need to be able to track the person by name.
    /// </summary>
    [JsonProperty("name")]
    public HumanName Name { get; set; }
    /// <summary>
    /// Need to distinguish between multiple contact persons.
    /// </summary>
    [JsonProperty("purpose")]
    public CodeableConcept Purpose { get; set; }
    /// <summary>
    /// People have (primary) ways to contact them in some way such as phone, email.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
  /// </summary>
  public class Organization : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Organization";
    /// <summary>
    /// Need a flag to indicate a record is no longer to be used and should generally be hidden for the user in the UI.
    /// </summary>
    [JsonProperty("active")]
    public bool? Active { get; set; }
    /// <summary>
    /// May need to keep track of the organization's addresses for contacting, billing or reporting requirements.
    /// </summary>
    [JsonProperty("address")]
    public List<Address> Address { get; set; }
    /// <summary>
    /// Need to keep track of assigned contact points within bigger organization.
    /// </summary>
    [JsonProperty("contact")]
    public List<OrganizationContact> Contact { get; set; }
    /// <summary>
    /// Organizations are known by a variety of ids. Some institutions maintain several, and most collect identifiers for exchange with other organizations concerning the organization.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Need to use the name as the label of the organization.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Need to be able to track the hierarchy of organizations within an organization.
    /// </summary>
    [JsonProperty("partOf")]
    public Reference PartOf { get; set; }
    /// <summary>
    /// Human contact for the organization.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Need to be able to track the kind of organization that this is - different organization types have different uses.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// A parameter passed to or received from the operation.
  /// </summary>
  public class ParametersParameter : BackboneElement {
    /// <summary>
    /// The name of the parameter (reference to the operation definition).
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// A named part of a parameter. In many implementation context, a set of named parts is known as a "Tuple".
    /// </summary>
    [JsonProperty("part")]
    public List<OperationDefinitionParameter> Part { get; set; }
    /// <summary>
    /// If the parameter is a whole resource.
    /// </summary>
    [JsonProperty("resource")]
    public Resource Resource { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueBoolean")]
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueInteger")]
    public int? ValueInteger { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueDecimal")]
    public decimal? ValueDecimal { get; set; }
    [JsonProperty("_valueDecimal")]
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueBase64Binary")]
    public string ValueBase64Binary { get; set; }
    [JsonProperty("_valueBase64Binary")]
    public Element _ValueBase64Binary { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueInstant")]
    public string ValueInstant { get; set; }
    [JsonProperty("_valueInstant")]
    public Element _ValueInstant { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueString")]
    public string ValueString { get; set; }
    [JsonProperty("_valueString")]
    public Element _ValueString { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueUri")]
    public string ValueUri { get; set; }
    [JsonProperty("_valueUri")]
    public Element _ValueUri { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueDate")]
    public string ValueDate { get; set; }
    [JsonProperty("_valueDate")]
    public Element _ValueDate { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueDateTime")]
    public string ValueDateTime { get; set; }
    [JsonProperty("_valueDateTime")]
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueTime")]
    public string ValueTime { get; set; }
    [JsonProperty("_valueTime")]
    public Element _ValueTime { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueCode")]
    public string ValueCode { get; set; }
    [JsonProperty("_valueCode")]
    public Element _ValueCode { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueOid")]
    public string ValueOid { get; set; }
    [JsonProperty("_valueOid")]
    public Element _ValueOid { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueId")]
    public string ValueId { get; set; }
    [JsonProperty("_valueId")]
    public Element _ValueId { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueUnsignedInt")]
    public uint? ValueUnsignedInt { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valuePositiveInt")]
    public uint? ValuePositiveInt { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueMarkdown")]
    public string ValueMarkdown { get; set; }
    [JsonProperty("_valueMarkdown")]
    public Element _ValueMarkdown { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueAnnotation")]
    public Annotation ValueAnnotation { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueAttachment")]
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueIdentifier")]
    public Identifier ValueIdentifier { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueCodeableConcept")]
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueCoding")]
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueQuantity")]
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueRange")]
    public Range ValueRange { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valuePeriod")]
    public Period ValuePeriod { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueRatio")]
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueSampledData")]
    public SampledData ValueSampledData { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueSignature")]
    public Signature ValueSignature { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueHumanName")]
    public HumanName ValueHumanName { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueAddress")]
    public Address ValueAddress { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueContactPoint")]
    public ContactPoint ValueContactPoint { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueTiming")]
    public Timing ValueTiming { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueReference")]
    public Reference ValueReference { get; set; }
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    [JsonProperty("valueMeta")]
    public Meta ValueMeta { get; set; }
  }
  /// <summary>
  /// This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
  /// </summary>
  public class Parameters : Resource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Parameters";
    /// <summary>
    /// A parameter passed to or received from the operation.
    /// </summary>
    [JsonProperty("parameter")]
    public List<ParametersParameter> Parameter { get; set; }
  }
  /// <summary>
  /// Need to track people you can contact about the patient.
  /// </summary>
  public class PatientContact : BackboneElement {
    /// <summary>
    /// Need to keep track where the contact person can be contacted per postal mail or visited.
    /// </summary>
    [JsonProperty("address")]
    public Address Address { get; set; }
    /// <summary>
    /// Needed to address the person correctly.
    /// </summary>
    [JsonProperty("gender")]
    public string Gender { get; set; }
    [JsonProperty("_gender")]
    public Element _Gender { get; set; }
    /// <summary>
    /// Contact persons need to be identified by name, but it is uncommon to need details about multiple other names for that contact person.
    /// </summary>
    [JsonProperty("name")]
    public HumanName Name { get; set; }
    /// <summary>
    /// For guardians or business related contacts, the organization is relevant.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// The period during which this contact person or organization is valid to be contacted relating to this patient.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Used to determine which contact person is the most relevant to approach, depending on circumstances.
    /// </summary>
    [JsonProperty("relationship")]
    public List<CodeableConcept> Relationship { get; set; }
    /// <summary>
    /// People have (primary) ways to contact them in some way such as phone, email.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Code Values for the Patient.contact.gender field
  /// </summary>
  public static class PatientContactGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Many clinical systems are extended to care for animal patients as well as human.
  /// </summary>
  public class PatientAnimal : BackboneElement {
    /// <summary>
    /// May need to know the specific kind within the species.
    /// </summary>
    [JsonProperty("breed")]
    public CodeableConcept Breed { get; set; }
    /// <summary>
    /// Gender status can affect housing and animal behavior.
    /// </summary>
    [JsonProperty("genderStatus")]
    public CodeableConcept GenderStatus { get; set; }
    /// <summary>
    /// Need to know what kind of animal.
    /// </summary>
    [JsonProperty("species")]
    public CodeableConcept Species { get; set; }
  }
  /// <summary>
  /// If a patient does not speak the local language, interpreters may be required, so languages spoken and proficiency is an important things to keep track of both for patient and other persons of interest.
  /// </summary>
  public class PatientCommunication : BackboneElement {
    /// <summary>
    /// Most systems in multilingual countries will want to convey language. Not all systems actually need the regional dialect.
    /// </summary>
    [JsonProperty("language")]
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// People that master multiple languages up to certain level may prefer one or more, i.e. feel more confident in communicating in a particular language making other languages sort of a fall back method.
    /// </summary>
    [JsonProperty("preferred")]
    public bool? Preferred { get; set; }
  }
  /// <summary>
  /// There are multiple usecases:   * Duplicate patient records due to the clerical errors associated with the difficulties of identifying humans consistently, and * Distribution of patient information across multiple servers.
  /// </summary>
  public class PatientLink : BackboneElement {
    /// <summary>
    /// The other patient resource that the link refers to.
    /// </summary>
    [JsonProperty("other")]
    public Reference Other { get; set; }
    /// <summary>
    /// The type of link between this patient resource and another patient resource.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Patient.link.type field
  /// </summary>
  public static class PatientLinkTypeCodes {
    public const string REPLACE = "replace";
    public const string REFER = "refer";
    public const string SEEALSO = "seealso";
  }
  /// <summary>
  /// Demographics and other administrative information about an individual or animal receiving care or other health-related services.
  /// </summary>
  public class Patient : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Patient";
    /// <summary>
    /// Need to be able to mark a patient record as not to be used because it was created in error.
    /// </summary>
    [JsonProperty("active")]
    public bool? Active { get; set; }
    /// <summary>
    /// May need to keep track of patient addresses for contacting, billing or reporting requirements and also to help with identification.
    /// </summary>
    [JsonProperty("address")]
    public List<Address> Address { get; set; }
    /// <summary>
    /// Many clinical systems are extended to care for animal patients as well as human.
    /// </summary>
    [JsonProperty("animal")]
    public PatientAnimal Animal { get; set; }
    /// <summary>
    /// Age of the individual drives many clinical processes.
    /// </summary>
    [JsonProperty("birthDate")]
    public string BirthDate { get; set; }
    [JsonProperty("_birthDate")]
    public Element _BirthDate { get; set; }
    /// <summary>
    /// Patient's nominated care provider.
    /// </summary>
    [JsonProperty("careProvider")]
    public List<Reference> CareProvider { get; set; }
    /// <summary>
    /// If a patient does not speak the local language, interpreters may be required, so languages spoken and proficiency is an important things to keep track of both for patient and other persons of interest.
    /// </summary>
    [JsonProperty("communication")]
    public List<PatientCommunication> Communication { get; set; }
    /// <summary>
    /// Need to track people you can contact about the patient.
    /// </summary>
    [JsonProperty("contact")]
    public List<PatientContact> Contact { get; set; }
    /// <summary>
    /// The fact that a patient is deceased influences the clinical process. Also, in human communication and relation management it is necessary to know whether the person is alive.
    /// </summary>
    [JsonProperty("deceasedBoolean")]
    public bool? DeceasedBoolean { get; set; }
    /// <summary>
    /// The fact that a patient is deceased influences the clinical process. Also, in human communication and relation management it is necessary to know whether the person is alive.
    /// </summary>
    [JsonProperty("deceasedDateTime")]
    public string DeceasedDateTime { get; set; }
    [JsonProperty("_deceasedDateTime")]
    public Element _DeceasedDateTime { get; set; }
    /// <summary>
    /// Needed for identification of the individual, in combination with (at least) name and birth date. Gender of individual drives many clinical processes.
    /// </summary>
    [JsonProperty("gender")]
    public string Gender { get; set; }
    [JsonProperty("_gender")]
    public Element _Gender { get; set; }
    /// <summary>
    /// Patients are almost always assigned specific numerical identifiers.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// There are multiple usecases:   * Duplicate patient records due to the clerical errors associated with the difficulties of identifying humans consistently, and * Distribution of patient information across multiple servers.
    /// </summary>
    [JsonProperty("link")]
    public List<PatientLink> Link { get; set; }
    /// <summary>
    /// Need to know who recognizes this patient record, manages and updates it.
    /// </summary>
    [JsonProperty("managingOrganization")]
    public Reference ManagingOrganization { get; set; }
    /// <summary>
    /// Most, if not all systems capture it.
    /// </summary>
    [JsonProperty("maritalStatus")]
    public CodeableConcept MaritalStatus { get; set; }
    /// <summary>
    /// For disambiguation of multiple-birth children, especially relevant where the care provider doesn't meet the patient, such as labs.
    /// </summary>
    [JsonProperty("multipleBirthBoolean")]
    public bool? MultipleBirthBoolean { get; set; }
    /// <summary>
    /// For disambiguation of multiple-birth children, especially relevant where the care provider doesn't meet the patient, such as labs.
    /// </summary>
    [JsonProperty("multipleBirthInteger")]
    public int? MultipleBirthInteger { get; set; }
    /// <summary>
    /// Need to be able to track the patient by multiple names. Examples are your official name and a partner name.
    /// </summary>
    [JsonProperty("name")]
    public List<HumanName> Name { get; set; }
    /// <summary>
    /// Many EHR systems have the capability to capture an image of the patient. Fits with newer social media usage too.
    /// </summary>
    [JsonProperty("photo")]
    public List<Attachment> Photo { get; set; }
    /// <summary>
    /// People have (primary) ways to contact them in some way such as phone, email.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Code Values for the Patient.gender field
  /// </summary>
  public static class PatientGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
  /// </summary>
  public class PaymentNotice : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "PaymentNotice";
    /// <summary>
    /// The date when this resource was created.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// The payment status, typically paid: payment sent, cleared: payment received.
    /// </summary>
    [JsonProperty("paymentStatus")]
    public Coding PaymentStatus { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("provider")]
    public Reference Provider { get; set; }
    /// <summary>
    /// Reference of resource to reverse.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// Reference of response to resource to reverse.
    /// </summary>
    [JsonProperty("response")]
    public Reference Response { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
    /// <summary>
    /// The Insurer who is target  of the request.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
  }
  /// <summary>
  /// List of individual settlement amounts and the corresponding transaction.
  /// </summary>
  public class PaymentReconciliationDetail : BackboneElement {
    /// <summary>
    /// Amount paid for this detail.
    /// </summary>
    [JsonProperty("amount")]
    public Quantity Amount { get; set; }
    /// <summary>
    /// The date of the invoice or financial resource.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// The organization which is receiving the payment.
    /// </summary>
    [JsonProperty("payee")]
    public Reference Payee { get; set; }
    /// <summary>
    /// The claim or financial resource.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The claim response resource.
    /// </summary>
    [JsonProperty("responce")]
    public Reference Responce { get; set; }
    /// <summary>
    /// The Organization which submitted the invoice or financial transaction.
    /// </summary>
    [JsonProperty("submitter")]
    public Reference Submitter { get; set; }
    /// <summary>
    /// Code to indicate the nature of the payment, adjustment, funds advance, etc.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// Suite of notes.
  /// </summary>
  public class PaymentReconciliationNote : BackboneElement {
    /// <summary>
    /// The note text.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// The note purpose: Print/Display.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// This resource provides payment details and claim references supporting a bulk payment.
  /// </summary>
  public class PaymentReconciliation : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "PaymentReconciliation";
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// List of individual settlement amounts and the corresponding transaction.
    /// </summary>
    [JsonProperty("detail")]
    public List<PaymentReconciliationDetail> Detail { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    [JsonProperty("disposition")]
    public string Disposition { get; set; }
    [JsonProperty("_disposition")]
    public Element _Disposition { get; set; }
    /// <summary>
    /// The form to be used for printing the content.
    /// </summary>
    [JsonProperty("form")]
    public Coding Form { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Suite of notes.
    /// </summary>
    [JsonProperty("note")]
    public List<PaymentReconciliationNote> Note { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Transaction status: error, complete.
    /// </summary>
    [JsonProperty("outcome")]
    public string Outcome { get; set; }
    [JsonProperty("_outcome")]
    public Element _Outcome { get; set; }
    /// <summary>
    /// The period of time for which payments have been gathered into this bulk payment for settlement.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Original request resource reference.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestOrganization")]
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestProvider")]
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
    /// <summary>
    /// Total payment amount.
    /// </summary>
    [JsonProperty("total")]
    public Quantity Total { get; set; }
  }
  /// <summary>
  /// Code Values for the PaymentReconciliation.outcome field
  /// </summary>
  public static class PaymentReconciliationOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
  }
  /// <summary>
  /// Link to a resource that concerns the same actual person.
  /// </summary>
  public class PersonLink : BackboneElement {
    /// <summary>
    /// Level of assurance that this link is actually associated with the target resource.
    /// </summary>
    [JsonProperty("assurance")]
    public string Assurance { get; set; }
    [JsonProperty("_assurance")]
    public Element _Assurance { get; set; }
    /// <summary>
    /// The resource to which this actual person is associated.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
  }
  /// <summary>
  /// Code Values for the Person.link.assurance field
  /// </summary>
  public static class PersonLinkAssuranceCodes {
    public const string LEVEL1 = "level1";
    public const string LEVEL2 = "level2";
    public const string LEVEL3 = "level3";
    public const string LEVEL4 = "level4";
  }
  /// <summary>
  /// Demographics and administrative information about a person independent of a specific health-related context.
  /// </summary>
  public class Person : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Person";
    /// <summary>
    /// Need to be able to mark a person record as not to be used because it was created in error.
    /// </summary>
    [JsonProperty("active")]
    public bool? Active { get; set; }
    /// <summary>
    /// May need to keep track of person's addresses for contacting, billing or reporting requirements and also to help with identification.
    /// </summary>
    [JsonProperty("address")]
    public List<Address> Address { get; set; }
    /// <summary>
    /// Age of person drives many clinical processes, and is often used in performing identification of the person. Times are not included so as to not confuse things with potential timezone issues.
    /// </summary>
    [JsonProperty("birthDate")]
    public string BirthDate { get; set; }
    [JsonProperty("_birthDate")]
    public Element _BirthDate { get; set; }
    /// <summary>
    /// Needed for identification of the person, in combination with (at least) name and birth date. Gender of person drives many clinical processes.
    /// </summary>
    [JsonProperty("gender")]
    public string Gender { get; set; }
    [JsonProperty("_gender")]
    public Element _Gender { get; set; }
    /// <summary>
    /// People are known by a variety of ids. Some institutions maintain several, and most collect identifiers for exchange with other organizations concerning the person. Examples are national person identifier and local identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Link to a resource that concerns the same actual person.
    /// </summary>
    [JsonProperty("link")]
    public List<PersonLink> Link { get; set; }
    /// <summary>
    /// Need to know who recognizes this person record, manages and updates it.
    /// </summary>
    [JsonProperty("managingOrganization")]
    public Reference ManagingOrganization { get; set; }
    /// <summary>
    /// Need to be able to track the person by multiple names. Examples are your official name and a partner name.
    /// </summary>
    [JsonProperty("name")]
    public List<HumanName> Name { get; set; }
    /// <summary>
    /// An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
    /// </summary>
    [JsonProperty("photo")]
    public Attachment Photo { get; set; }
    /// <summary>
    /// People have (primary) ways to contact them in some way such as phone, email.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Code Values for the Person.gender field
  /// </summary>
  public static class PersonGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// The list of roles/organizations that the practitioner is associated with.
  /// </summary>
  public class PractitionerPractitionerRole : BackboneElement {
    /// <summary>
    /// The list of healthcare services that this worker provides for this role's Organization/Location(s).
    /// </summary>
    [JsonProperty("healthcareService")]
    public List<Reference> HealthcareService { get; set; }
    /// <summary>
    /// The location(s) at which this practitioner provides care.
    /// </summary>
    [JsonProperty("location")]
    public List<Reference> Location { get; set; }
    /// <summary>
    /// The organization where the Practitioner performs the roles associated.
    /// </summary>
    [JsonProperty("managingOrganization")]
    public Reference ManagingOrganization { get; set; }
    /// <summary>
    /// Even after the agencies is revoked, the fact that it existed must still be recorded.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Need to know what authority the practitioner has - what can they do?
    /// </summary>
    [JsonProperty("role")]
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Specific specialty of the practitioner.
    /// </summary>
    [JsonProperty("specialty")]
    public List<CodeableConcept> Specialty { get; set; }
  }
  /// <summary>
  /// Qualifications obtained by training and certification.
  /// </summary>
  public class PractitionerQualification : BackboneElement {
    /// <summary>
    /// Coded representation of the qualification.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Often, specific identities are assigned for the qualification.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Organization that regulates and issues the qualification.
    /// </summary>
    [JsonProperty("issuer")]
    public Reference Issuer { get; set; }
    /// <summary>
    /// Qualifications are often for a limited period of time, and can be revoked.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
  }
  /// <summary>
  /// A person who is directly or indirectly involved in the provisioning of healthcare.
  /// </summary>
  public class Practitioner : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Practitioner";
    /// <summary>
    /// Need to be able to mark a practitioner record as not to be used because it was created in error.
    /// </summary>
    [JsonProperty("active")]
    public bool? Active { get; set; }
    /// <summary>
    /// Need to keep track where the practitioner can found during work or for directing mail.
    /// </summary>
    [JsonProperty("address")]
    public List<Address> Address { get; set; }
    /// <summary>
    /// Needed for identification.
    /// </summary>
    [JsonProperty("birthDate")]
    public string BirthDate { get; set; }
    [JsonProperty("_birthDate")]
    public Element _BirthDate { get; set; }
    /// <summary>
    /// Knowing which language a practitioner speaks can help in facilitating communication with patients.
    /// </summary>
    [JsonProperty("communication")]
    public List<CodeableConcept> Communication { get; set; }
    /// <summary>
    /// Needed to address the person correctly.
    /// </summary>
    [JsonProperty("gender")]
    public string Gender { get; set; }
    [JsonProperty("_gender")]
    public Element _Gender { get; set; }
    /// <summary>
    /// Often, specific identities are assigned for the agent.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Contact persons need to be identified by name, but it is uncommon to need details about multiple other names for that person.
    /// </summary>
    [JsonProperty("name")]
    public HumanName Name { get; set; }
    /// <summary>
    /// Many EHR systems have the capability to capture an image of patients and personnel. Fits with newer social media usage too.
    /// </summary>
    [JsonProperty("photo")]
    public List<Attachment> Photo { get; set; }
    /// <summary>
    /// The list of roles/organizations that the practitioner is associated with.
    /// </summary>
    [JsonProperty("practitionerRole")]
    public List<PractitionerPractitionerRole> PractitionerRole { get; set; }
    /// <summary>
    /// Qualifications obtained by training and certification.
    /// </summary>
    [JsonProperty("qualification")]
    public List<PractitionerQualification> Qualification { get; set; }
    /// <summary>
    /// Need to know how to reach a practitioner.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Code Values for the Practitioner.gender field
  /// </summary>
  public static class PractitionerGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Limited to 'real' people rather than equipment.
  /// </summary>
  public class ProcedurePerformer : BackboneElement {
    /// <summary>
    /// The practitioner who was involved in the procedure.
    /// </summary>
    [JsonProperty("actor")]
    public Reference Actor { get; set; }
    /// <summary>
    /// For example: surgeon, anaethetist, endoscopist.
    /// </summary>
    [JsonProperty("role")]
    public CodeableConcept Role { get; set; }
  }
  /// <summary>
  /// A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
  /// </summary>
  public class ProcedureFocalDevice : BackboneElement {
    /// <summary>
    /// The kind of change that happened to the device during the procedure.
    /// </summary>
    [JsonProperty("action")]
    public CodeableConcept Action { get; set; }
    /// <summary>
    /// The device that was manipulated (changed) during the procedure.
    /// </summary>
    [JsonProperty("manipulated")]
    public Reference Manipulated { get; set; }
  }
  /// <summary>
  /// An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
  /// </summary>
  public class Procedure : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Procedure";
    /// <summary>
    /// Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
    /// </summary>
    [JsonProperty("bodySite")]
    public List<CodeableConcept> BodySite { get; set; }
    /// <summary>
    /// A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
    /// </summary>
    [JsonProperty("category")]
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
    /// </summary>
    [JsonProperty("complication")]
    public List<CodeableConcept> Complication { get; set; }
    /// <summary>
    /// The encounter during which the procedure was performed.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
    /// </summary>
    [JsonProperty("focalDevice")]
    public List<ProcedureFocalDevice> FocalDevice { get; set; }
    /// <summary>
    /// If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used.
    /// </summary>
    [JsonProperty("followUp")]
    public List<CodeableConcept> FollowUp { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Ties a procedure to where the records are likely kept.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// Any other notes about the procedure.  E.g. the operative notes.
    /// </summary>
    [JsonProperty("notes")]
    public List<Annotation> Notes { get; set; }
    /// <summary>
    /// Set this to true if the record is saying that the procedure was NOT performed.
    /// </summary>
    [JsonProperty("notPerformed")]
    public bool? NotPerformed { get; set; }
    /// <summary>
    /// The outcome of the procedure - did it resolve reasons for the procedure being performed?
    /// </summary>
    [JsonProperty("outcome")]
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
    /// </summary>
    [JsonProperty("performedDateTime")]
    public string PerformedDateTime { get; set; }
    [JsonProperty("_performedDateTime")]
    public Element _PerformedDateTime { get; set; }
    /// <summary>
    /// The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
    /// </summary>
    [JsonProperty("performedPeriod")]
    public Period PerformedPeriod { get; set; }
    /// <summary>
    /// Limited to 'real' people rather than equipment.
    /// </summary>
    [JsonProperty("performer")]
    public List<ProcedurePerformer> Performer { get; set; }
    /// <summary>
    /// The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
    /// </summary>
    [JsonProperty("reasonCodeableConcept")]
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
    /// </summary>
    [JsonProperty("reasonReference")]
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// A code indicating why the procedure was not performed.
    /// </summary>
    [JsonProperty("reasonNotPerformed")]
    public List<CodeableConcept> ReasonNotPerformed { get; set; }
    /// <summary>
    /// This could be a histology result, pathology report, surgical report, etc..
    /// </summary>
    [JsonProperty("report")]
    public List<Reference> Report { get; set; }
    /// <summary>
    /// A reference to a resource that contains details of the request for this procedure.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// A code specifying the state of the procedure. Generally this will be in-progress or completed state.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The person, animal or group on which the procedure was performed.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Used for tracking contamination, etc.
    /// </summary>
    [JsonProperty("used")]
    public List<Reference> Used { get; set; }
  }
  /// <summary>
  /// Code Values for the Procedure.status field
  /// </summary>
  public static class ProcedureStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string ABORTED = "aborted";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// A request for a procedure to be performed. May be a proposal or an order.
  /// </summary>
  public class ProcedureRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ProcedureRequest";
    /// <summary>
    /// If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
    /// </summary>
    [JsonProperty("asNeededBoolean")]
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
    /// </summary>
    [JsonProperty("asNeededCodeableConcept")]
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// Knowing where the procedure is made is important for tracking if multiple sites are possible.
    /// </summary>
    [JsonProperty("bodySite")]
    public List<CodeableConcept> BodySite { get; set; }
    /// <summary>
    /// The specific procedure that is ordered. Use text if the exact nature of the procedure cannot be coded.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The encounter within which the procedure proposal or request was created.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifiers assigned to this order by the order or by the receiver.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Any other notes associated with this proposal or order - e.g. provider instructions.
    /// </summary>
    [JsonProperty("notes")]
    public List<Annotation> Notes { get; set; }
    /// <summary>
    /// The time when the request was made.
    /// </summary>
    [JsonProperty("orderedOn")]
    public string OrderedOn { get; set; }
    [JsonProperty("_orderedOn")]
    public Element _OrderedOn { get; set; }
    /// <summary>
    /// The healthcare professional responsible for proposing or ordering the procedure.
    /// </summary>
    [JsonProperty("orderer")]
    public Reference Orderer { get; set; }
    /// <summary>
    /// For example, the surgeon, anaethetist, endoscopist, etc.
    /// </summary>
    [JsonProperty("performer")]
    public Reference Performer { get; set; }
    /// <summary>
    /// The clinical priority associated with this order.
    /// </summary>
    [JsonProperty("priority")]
    public string Priority { get; set; }
    [JsonProperty("_priority")]
    public Element _Priority { get; set; }
    /// <summary>
    /// The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
    /// </summary>
    [JsonProperty("reasonCodeableConcept")]
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
    /// </summary>
    [JsonProperty("reasonReference")]
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("scheduledDateTime")]
    public string ScheduledDateTime { get; set; }
    [JsonProperty("_scheduledDateTime")]
    public Element _ScheduledDateTime { get; set; }
    /// <summary>
    /// The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("scheduledPeriod")]
    public Period ScheduledPeriod { get; set; }
    /// <summary>
    /// The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    [JsonProperty("scheduledTiming")]
    public Timing ScheduledTiming { get; set; }
    /// <summary>
    /// The status of the order.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The person, animal or group that should receive the procedure.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// Code Values for the ProcedureRequest.priority field
  /// </summary>
  public static class ProcedureRequestPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string STAT = "stat";
    public const string ASAP = "asap";
  }
  /// <summary>
  /// Code Values for the ProcedureRequest.status field
  /// </summary>
  public static class ProcedureRequestStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string ABORTED = "aborted";
  }
  /// <summary>
  /// List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
  /// </summary>
  public class ProcessRequestItem : BackboneElement {
    /// <summary>
    /// A service line number.
    /// </summary>
    [JsonProperty("sequenceLinkId")]
    public int SequenceLinkId { get; set; }
  }
  /// <summary>
  /// This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
  /// </summary>
  public class ProcessRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ProcessRequest";
    /// <summary>
    /// The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest.
    /// </summary>
    [JsonProperty("action")]
    public string Action { get; set; }
    [JsonProperty("_action")]
    public Element _Action { get; set; }
    /// <summary>
    /// The date when this resource was created.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// Names of resource types to exclude.
    /// </summary>
    [JsonProperty("exclude")]
    public List<string> Exclude { get; set; }
    [JsonProperty("_exclude")]
    public List<Element> _Exclude { get; set; }
    /// <summary>
    /// The ProcessRequest business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Names of resource types to include.
    /// </summary>
    [JsonProperty("include")]
    public List<string> Include { get; set; }
    [JsonProperty("_include")]
    public List<Element> _Include { get; set; }
    /// <summary>
    /// List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
    /// </summary>
    [JsonProperty("item")]
    public List<ProcessRequestItem> Item { get; set; }
    /// <summary>
    /// Some resources must not simply be reversed in a processing or accounting sense but rather must have all history removed, such as the accidental submission of sensitive and/or wrong information. If the receiver cannot comply with a Nullify request then they must reject the request.
    /// </summary>
    [JsonProperty("nullify")]
    public bool? Nullify { get; set; }
    /// <summary>
    /// The organization which is responsible for the action speccified in thise request.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// A period of time during which the fulfilling resources would have been created.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the action specified in thise request.
    /// </summary>
    [JsonProperty("provider")]
    public Reference Provider { get; set; }
    /// <summary>
    /// A reference to supply which authenticates the process.
    /// </summary>
    [JsonProperty("reference")]
    public string Reference { get; set; }
    [JsonProperty("_reference")]
    public Element _Reference { get; set; }
    /// <summary>
    /// Reference of resource which is the target or subject of this action.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// Reference of a prior response to resource which is the target or subject of this action.
    /// </summary>
    [JsonProperty("response")]
    public Reference Response { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
    /// <summary>
    /// The organization which is the target of the request.
    /// </summary>
    [JsonProperty("target")]
    public Reference Target { get; set; }
  }
  /// <summary>
  /// Code Values for the ProcessRequest.action field
  /// </summary>
  public static class ProcessRequestActionCodes {
    public const string CANCEL = "cancel";
    public const string POLL = "poll";
    public const string REPROCESS = "reprocess";
    public const string STATUS = "status";
  }
  /// <summary>
  /// Suite of processing note or additional requirements is the processing has been held.
  /// </summary>
  public class ProcessResponseNotes : BackboneElement {
    /// <summary>
    /// The note text.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// The note purpose: Print/Display.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// This resource provides processing status, errors and notes from the processing of a resource.
  /// </summary>
  public class ProcessResponse : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ProcessResponse";
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    [JsonProperty("created")]
    public string Created { get; set; }
    [JsonProperty("_created")]
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication or processing.
    /// </summary>
    [JsonProperty("disposition")]
    public string Disposition { get; set; }
    [JsonProperty("_disposition")]
    public Element _Disposition { get; set; }
    /// <summary>
    /// Processing errors.
    /// </summary>
    [JsonProperty("error")]
    public List<Coding> Error { get; set; }
    /// <summary>
    /// The form to be used for printing the content.
    /// </summary>
    [JsonProperty("form")]
    public Coding Form { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Suite of processing note or additional requirements is the processing has been held.
    /// </summary>
    [JsonProperty("notes")]
    public List<ProcessResponseNotes> Notes { get; set; }
    /// <summary>
    /// The organization who produced this adjudicated response.
    /// </summary>
    [JsonProperty("organization")]
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    [JsonProperty("originalRuleset")]
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Transaction status: error, complete, held.
    /// </summary>
    [JsonProperty("outcome")]
    public Coding Outcome { get; set; }
    /// <summary>
    /// Original request resource reference.
    /// </summary>
    [JsonProperty("request")]
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestOrganization")]
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    [JsonProperty("requestProvider")]
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    [JsonProperty("ruleset")]
    public Coding Ruleset { get; set; }
  }
  /// <summary>
  /// A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
  /// </summary>
  public class ProvenanceAgentRelatedAgent : BackboneElement {
    /// <summary>
    /// An internal reference to another agent listed in this provenance by its identifier.
    /// </summary>
    [JsonProperty("target")]
    public string Target { get; set; }
    [JsonProperty("_target")]
    public Element _Target { get; set; }
    /// <summary>
    /// The type of relationship between agents.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
  /// </summary>
  public class ProvenanceAgent : BackboneElement {
    /// <summary>
    /// The individual, device or organization that participated in the event.
    /// </summary>
    [JsonProperty("actor")]
    public Reference Actor { get; set; }
    /// <summary>
    /// A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
    /// </summary>
    [JsonProperty("relatedAgent")]
    public List<ProvenanceAgentRelatedAgent> RelatedAgent { get; set; }
    /// <summary>
    /// The function of the agent with respect to the activity.
    /// </summary>
    [JsonProperty("role")]
    public Coding Role { get; set; }
    /// <summary>
    /// The identity of the agent as known by the authorization system.
    /// </summary>
    [JsonProperty("userId")]
    public Identifier UserId { get; set; }
  }
  /// <summary>
  /// An entity used in this activity.
  /// </summary>
  public class ProvenanceEntity : BackboneElement {
    /// <summary>
    /// The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
    /// </summary>
    [JsonProperty("agent")]
    public ProvenanceAgent Agent { get; set; }
    /// <summary>
    /// Human-readable description of the entity.
    /// </summary>
    [JsonProperty("display")]
    public string Display { get; set; }
    [JsonProperty("_display")]
    public Element _Display { get; set; }
    /// <summary>
    /// Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
    /// </summary>
    [JsonProperty("reference")]
    public string Reference { get; set; }
    [JsonProperty("_reference")]
    public Element _Reference { get; set; }
    /// <summary>
    /// How the entity was used during the activity.
    /// </summary>
    [JsonProperty("role")]
    public string Role { get; set; }
    [JsonProperty("_role")]
    public Element _Role { get; set; }
    /// <summary>
    /// If the type is "resource" then the resource itself was the participant. If the type is a type of resource, then the entity identified by the resource is the participant.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Provenance.entity.role field
  /// </summary>
  public static class ProvenanceEntityRoleCodes {
    public const string DERIVATION = "derivation";
    public const string REVISION = "revision";
    public const string QUOTATION = "quotation";
    public const string SOURCE = "source";
  }
  /// <summary>
  /// Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
  /// </summary>
  public class Provenance : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Provenance";
    /// <summary>
    /// An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
    /// </summary>
    [JsonProperty("activity")]
    public CodeableConcept Activity { get; set; }
    /// <summary>
    /// An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
    /// </summary>
    [JsonProperty("agent")]
    public List<ProvenanceAgent> Agent { get; set; }
    /// <summary>
    /// An entity used in this activity.
    /// </summary>
    [JsonProperty("entity")]
    public List<ProvenanceEntity> Entity { get; set; }
    /// <summary>
    /// Where the activity occurred, if relevant.
    /// </summary>
    [JsonProperty("location")]
    public Reference Location { get; set; }
    /// <summary>
    /// The period during which the activity occurred.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
    /// </summary>
    [JsonProperty("policy")]
    public List<string> Policy { get; set; }
    [JsonProperty("_policy")]
    public List<Element> _Policy { get; set; }
    /// <summary>
    /// The reason that the activity was taking place.
    /// </summary>
    [JsonProperty("reason")]
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// The instant of time at which the activity was recorded.
    /// </summary>
    [JsonProperty("recorded")]
    public string Recorded { get; set; }
    [JsonProperty("_recorded")]
    public Element _Recorded { get; set; }
    /// <summary>
    /// A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
    /// </summary>
    [JsonProperty("signature")]
    public List<Signature> Signature { get; set; }
    /// <summary>
    /// The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
    /// </summary>
    [JsonProperty("target")]
    public List<Reference> Target { get; set; }
  }
  /// <summary>
  /// Must register answers to questions.
  /// </summary>
  public class QuestionnaireGroupQuestion : BackboneElement {
    /// <summary>
    /// Allows linking of questions (and their answers) to formal terminologies.
    /// </summary>
    [JsonProperty("concept")]
    public List<Coding> Concept { get; set; }
    /// <summary>
    /// It is useful to have "sub-questions", questions which normally appear when certain answers are given and which collect additional details.
    /// </summary>
    [JsonProperty("group")]
    public List<QuestionnaireGroup> Group { get; set; }
    /// <summary>
    /// [[[QuestionnaireResponse]]] does not require omitted groups to be included and may have some groups that repeat, so linkage based on position alone is not sufficient.
    /// </summary>
    [JsonProperty("linkId")]
    public string LinkId { get; set; }
    [JsonProperty("_linkId")]
    public Element _LinkId { get; set; }
    /// <summary>
    /// For a "choice" question, identifies one of the permitted answers for the question.
    /// </summary>
    [JsonProperty("option")]
    public List<Coding> Option { get; set; }
    /// <summary>
    /// Reference to a value set containing a list of codes representing permitted answers for the question.
    /// </summary>
    [JsonProperty("options")]
    public Reference Options { get; set; }
    /// <summary>
    /// Used for "check all that apply" types of questions or "list your top 3", etc.
    /// </summary>
    [JsonProperty("repeats")]
    public bool? Repeats { get; set; }
    /// <summary>
    /// If true, indicates that the question must be answered and have required groups within it also present.  If false, the question and any contained groups may be skipped when answering the questionnaire.
    /// </summary>
    [JsonProperty("required")]
    public bool? Required { get; set; }
    /// <summary>
    /// When including text for the questionnaire, each question may contain its actual question display text.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// Defines the format in which the user is to be prompted for the answer.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Questionnaire.group.question.type field
  /// </summary>
  public static class QuestionnaireGroupQuestionTypeCodes {
    public const string BOOLEAN = "boolean";
    public const string VAL_DECIMAL = "decimal";
    public const string INTEGER = "integer";
    public const string DATE = "date";
    public const string DATETIME = "dateTime";
  }
  /// <summary>
  /// Need to be able to logically group answers to grouped questions.
  /// </summary>
  public class QuestionnaireGroup : BackboneElement {
    /// <summary>
    /// Allows linking of groups of questions (and complete Questionnaire resources) to formal terminologies.
    /// </summary>
    [JsonProperty("concept")]
    public List<Coding> Concept { get; set; }
    /// <summary>
    /// Reports can consist of complex nested groups.
    /// </summary>
    [JsonProperty("group")]
    public List<QuestionnaireGroup> Group { get; set; }
    /// <summary>
    /// [[[QuestionnaireResponse]]] does not require omitted groups to be included and may have some groups that repeat, so linkage based on position alone is not sufficient.
    /// </summary>
    [JsonProperty("linkId")]
    public string LinkId { get; set; }
    [JsonProperty("_linkId")]
    public Element _LinkId { get; set; }
    /// <summary>
    /// Must register answers to questions.
    /// </summary>
    [JsonProperty("question")]
    public List<QuestionnaireGroupQuestion> Question { get; set; }
    /// <summary>
    /// Groups may be used to create set of (related) questions that can be repeated to give multiple answers to such a set.
    /// </summary>
    [JsonProperty("repeats")]
    public bool? Repeats { get; set; }
    /// <summary>
    /// If true, indicates that the group must be present and have required questions within it answered.  If false, the group may be skipped when answering the questionnaire.
    /// </summary>
    [JsonProperty("required")]
    public bool? Required { get; set; }
    /// <summary>
    /// When including text for the questionnaire, each section may contain additional explanations are background text.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// When including text for the questionnaire with the answers, sections may have a section header.
    /// </summary>
    [JsonProperty("title")]
    public string Title { get; set; }
    [JsonProperty("_title")]
    public Element _Title { get; set; }
  }
  /// <summary>
  /// A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
  /// </summary>
  public class Questionnaire : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Questionnaire";
    /// <summary>
    /// The date that this questionnaire was last changed.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Need to be able to logically group answers to grouped questions.
    /// </summary>
    [JsonProperty("group")]
    public QuestionnaireGroup Group { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Conveys responsibility for the questions and their organization and also helps evaluate the questionnaire's "authority".
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// The lifecycle status of the questionnaire as a whole.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies the types of subjects that can be the subject of the questionnaire.
    /// </summary>
    [JsonProperty("subjectType")]
    public List<string> SubjectType { get; set; }
    [JsonProperty("_subjectType")]
    public List<Element> _SubjectType { get; set; }
    /// <summary>
    /// Contact details to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// In some cases, separate resource instances might be created for each version (if an older version can be maintained once a new version exists).
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the Questionnaire.status field
  /// </summary>
  public static class QuestionnaireStatusCodes {
    public const string DRAFT = "draft";
    public const string PUBLISHED = "published";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// The respondent's answer(s) to the question.
  /// </summary>
  public class QuestionnaireResponseGroupQuestionAnswer : BackboneElement {
    /// <summary>
    /// It is useful to have "sub-questions", questions which normally appear when certain answers are given and which collect additional details.
    /// </summary>
    [JsonProperty("group")]
    public List<QuestionnaireGroup> Group { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueBoolean")]
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueDecimal")]
    public decimal? ValueDecimal { get; set; }
    [JsonProperty("_valueDecimal")]
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueInteger")]
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueDate")]
    public string ValueDate { get; set; }
    [JsonProperty("_valueDate")]
    public Element _ValueDate { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueDateTime")]
    public string ValueDateTime { get; set; }
    [JsonProperty("_valueDateTime")]
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueInstant")]
    public string ValueInstant { get; set; }
    [JsonProperty("_valueInstant")]
    public Element _ValueInstant { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueTime")]
    public string ValueTime { get; set; }
    [JsonProperty("_valueTime")]
    public Element _ValueTime { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueString")]
    public string ValueString { get; set; }
    [JsonProperty("_valueString")]
    public Element _ValueString { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueUri")]
    public string ValueUri { get; set; }
    [JsonProperty("_valueUri")]
    public Element _ValueUri { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueAttachment")]
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueCoding")]
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueQuantity")]
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// Ability to retain a single-valued answer to a question.
    /// </summary>
    [JsonProperty("valueReference")]
    public Reference ValueReference { get; set; }
  }
  /// <summary>
  /// Must register answers to questions.
  /// </summary>
  public class QuestionnaireResponseGroupQuestion : BackboneElement {
    /// <summary>
    /// The respondent's answer(s) to the question.
    /// </summary>
    [JsonProperty("answer")]
    public List<QuestionnaireResponseGroupQuestionAnswer> Answer { get; set; }
    /// <summary>
    /// Groups can repeat in the answers, so a direct 1..1 correspondence may not exist - requiring correspondence by id.
    /// </summary>
    [JsonProperty("linkId")]
    public string LinkId { get; set; }
    [JsonProperty("_linkId")]
    public Element _LinkId { get; set; }
    /// <summary>
    /// When including text for the questionnaire, each question may contain its actual question display text.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
  }
  /// <summary>
  /// Need to be able to logically group answers to grouped questions.
  /// </summary>
  public class QuestionnaireResponseGroup : BackboneElement {
    /// <summary>
    /// Reports can consist of complex nested groups.
    /// </summary>
    [JsonProperty("group")]
    public List<QuestionnaireGroup> Group { get; set; }
    /// <summary>
    /// Groups can repeat in the answers, so a direct 1..1 correspondence may not exist - requiring correspondence by identifier.
    /// </summary>
    [JsonProperty("linkId")]
    public string LinkId { get; set; }
    [JsonProperty("_linkId")]
    public Element _LinkId { get; set; }
    /// <summary>
    /// Must register answers to questions.
    /// </summary>
    [JsonProperty("question")]
    public List<QuestionnaireResponseGroupQuestion> Question { get; set; }
    /// <summary>
    /// Sometimes a group of answers is about a specific participant, artifact or piece of information in the patient's care or record, e.g. a specific Problem, RelatedPerson, Allergy etc.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// When including text for the questionnaire, each section may contain additional explanations are background text.
    /// </summary>
    [JsonProperty("text")]
    public string Text { get; set; }
    [JsonProperty("_text")]
    public Element _Text { get; set; }
    /// <summary>
    /// When including text for the questionnaire with the answers, sections may have a section header.
    /// </summary>
    [JsonProperty("title")]
    public string Title { get; set; }
    [JsonProperty("_title")]
    public Element _Title { get; set; }
  }
  /// <summary>
  /// A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
  /// </summary>
  public class QuestionnaireResponse : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "QuestionnaireResponse";
    /// <summary>
    /// Need to know who interpreted the subject's answers to the questions in the questionnaire, and selected the appropriate options for answers.
    /// </summary>
    [JsonProperty("author")]
    public Reference Author { get; set; }
    /// <summary>
    /// Clinicians need to be able to check the date that the information in the questionnaire was collected, to derive the context of the answers.
    /// </summary>
    [JsonProperty("authored")]
    public string Authored { get; set; }
    [JsonProperty("_authored")]
    public Element _Authored { get; set; }
    /// <summary>
    /// Some institutions track questionnaires under a specific encounter.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Need to be able to logically group answers to grouped questions.
    /// </summary>
    [JsonProperty("group")]
    public QuestionnaireResponseGroup Group { get; set; }
    /// <summary>
    /// Used for tracking, registration and other business purposes.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Needed to allow editing of the questionnaire in a manner that enforces the constraints of the original form.
    /// </summary>
    [JsonProperty("questionnaire")]
    public Reference Questionnaire { get; set; }
    /// <summary>
    /// When answering questions about a subject that is minor, incapable of answering or an animal, another human source is used to answer the questions.
    /// </summary>
    [JsonProperty("source")]
    public Reference Source { get; set; }
    /// <summary>
    /// The information on Questionnaire resources  may possibly be gathered during multiple sessions and altered after considered being finished. Questionnaire resources with just questions may serve as template forms, with the applicable publication statuses.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// The subject context must be known.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// Code Values for the QuestionnaireResponse.status field
  /// </summary>
  public static class QuestionnaireResponseStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string AMENDED = "amended";
  }
  /// <summary>
  /// Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
  /// </summary>
  public class ReferralRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ReferralRequest";
    /// <summary>
    /// Date/DateTime of creation for draft requests and date of activation for active requests.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Date/DateTime the request for referral or transfer of care is sent by the author.
    /// </summary>
    [JsonProperty("dateSent")]
    public string DateSent { get; set; }
    [JsonProperty("_dateSent")]
    public Element _DateSent { get; set; }
    /// <summary>
    /// The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// The encounter at which the request for referral or transfer of care is initiated.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Use cases: (1) to indicate that the requested service is not to happen before a specified date, and saving the start date in Period.start; (2) to indicate that the requested service must happen before a specified date, and saving the end date in Period.end; (3) to indicate that the requested service must happen during the specified dates ("start" and "end" values).
    /// </summary>
    [JsonProperty("fulfillmentTime")]
    public Period FulfillmentTime { get; set; }
    /// <summary>
    /// Business identifier that uniquely identifies the referral/care transfer request instance.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The patient who is the subject of a referral or transfer of care request.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// An indication of the urgency of referral (or where applicable the type of transfer of care) request.
    /// </summary>
    [JsonProperty("priority")]
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
    /// </summary>
    [JsonProperty("reason")]
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
    /// </summary>
    [JsonProperty("recipient")]
    public List<Reference> Recipient { get; set; }
    /// <summary>
    /// The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).
    /// </summary>
    [JsonProperty("requester")]
    public Reference Requester { get; set; }
    /// <summary>
    /// The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
    /// </summary>
    [JsonProperty("serviceRequested")]
    public List<CodeableConcept> ServiceRequested { get; set; }
    /// <summary>
    /// Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
    /// </summary>
    [JsonProperty("specialty")]
    public CodeableConcept Specialty { get; set; }
    /// <summary>
    /// The workflow status of the referral or transfer of care request.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
    /// </summary>
    [JsonProperty("supportingInformation")]
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// An indication of the type of referral (or where applicable the type of transfer of care) request.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the ReferralRequest.status field
  /// </summary>
  public static class ReferralRequestStatusCodes {
    public const string DRAFT = "draft";
    public const string REQUESTED = "requested";
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string ACCEPTED = "accepted";
    public const string REJECTED = "rejected";
    public const string COMPLETED = "completed";
  }
  /// <summary>
  /// Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
  /// </summary>
  public class RelatedPerson : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "RelatedPerson";
    /// <summary>
    /// Need to keep track where the related person can be contacted per postal mail or visited.
    /// </summary>
    [JsonProperty("address")]
    public List<Address> Address { get; set; }
    /// <summary>
    /// The date on which the related person was born.
    /// </summary>
    [JsonProperty("birthDate")]
    public string BirthDate { get; set; }
    [JsonProperty("_birthDate")]
    public Element _BirthDate { get; set; }
    /// <summary>
    /// Needed for identification of the person, in combination with (at least) name and birth date.
    /// </summary>
    [JsonProperty("gender")]
    public string Gender { get; set; }
    [JsonProperty("_gender")]
    public Element _Gender { get; set; }
    /// <summary>
    /// People are known by a variety of ids. Some institutions maintain several, and most collect identifiers for exchange with other organizations concerning the patient. Examples are national person identifier and local identifier.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Related persons need to be identified by name, but it is uncommon to need details about multiple other names for that person.
    /// </summary>
    [JsonProperty("name")]
    public HumanName Name { get; set; }
    /// <summary>
    /// We need to know which patient this RelatedPerson is related to.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown.
    /// </summary>
    [JsonProperty("period")]
    public Period Period { get; set; }
    /// <summary>
    /// Many EHR systems have the capability to capture an image of persons. Fits with newer social media usage too.
    /// </summary>
    [JsonProperty("photo")]
    public List<Attachment> Photo { get; set; }
    /// <summary>
    /// We need to know the relationship with the patient since it influences the interpretation of the information attributed to this person.
    /// </summary>
    [JsonProperty("relationship")]
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// People have (primary) ways to contact them in some way such as phone, email.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Code Values for the RelatedPerson.gender field
  /// </summary>
  public static class RelatedPersonGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// This is the base resource type for everything.
  /// </summary>
  public class Resource {
    /// <summary>
    /// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
    /// </summary>
    [JsonProperty("id")]
    public string Id { get; set; }
    [JsonProperty("_id")]
    public Element _Id { get; set; }
    /// <summary>
    /// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
    /// </summary>
    [JsonProperty("implicitRules")]
    public string ImplicitRules { get; set; }
    [JsonProperty("_implicitRules")]
    public Element _ImplicitRules { get; set; }
    /// <summary>
    /// The base language in which the resource is written.
    /// </summary>
    [JsonProperty("language")]
    public string Language { get; set; }
    [JsonProperty("_language")]
    public Element _Language { get; set; }
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
    /// </summary>
    [JsonProperty("meta")]
    public Meta Meta { get; set; }
  }
  /// <summary>
  /// Describes the expected outcome for the subject.
  /// </summary>
  public class RiskAssessmentPrediction : BackboneElement {
    /// <summary>
    /// One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
    /// </summary>
    [JsonProperty("outcome")]
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// How likely is the outcome (in the specified timeframe).
    /// </summary>
    [JsonProperty("probabilityDecimal")]
    public decimal? ProbabilityDecimal { get; set; }
    [JsonProperty("_probabilityDecimal")]
    public Element _ProbabilityDecimal { get; set; }
    /// <summary>
    /// How likely is the outcome (in the specified timeframe).
    /// </summary>
    [JsonProperty("probabilityRange")]
    public Range ProbabilityRange { get; set; }
    /// <summary>
    /// How likely is the outcome (in the specified timeframe).
    /// </summary>
    [JsonProperty("probabilityCodeableConcept")]
    public CodeableConcept ProbabilityCodeableConcept { get; set; }
    /// <summary>
    /// Additional information explaining the basis for the prediction.
    /// </summary>
    [JsonProperty("rationale")]
    public string Rationale { get; set; }
    [JsonProperty("_rationale")]
    public Element _Rationale { get; set; }
    /// <summary>
    /// Absolute risk is less meaningful than relative risk.
    /// </summary>
    [JsonProperty("relativeRisk")]
    public decimal? RelativeRisk { get; set; }
    [JsonProperty("_relativeRisk")]
    public Element _RelativeRisk { get; set; }
    /// <summary>
    /// Indicates the period of time or age range of the subject to which the specified probability applies.
    /// </summary>
    [JsonProperty("whenPeriod")]
    public Period WhenPeriod { get; set; }
    /// <summary>
    /// Indicates the period of time or age range of the subject to which the specified probability applies.
    /// </summary>
    [JsonProperty("whenRange")]
    public Range WhenRange { get; set; }
  }
  /// <summary>
  /// An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
  /// </summary>
  public class RiskAssessment : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "RiskAssessment";
    /// <summary>
    /// Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
    /// </summary>
    [JsonProperty("basis")]
    public List<Reference> Basis { get; set; }
    /// <summary>
    /// For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
    /// </summary>
    [JsonProperty("condition")]
    public Reference Condition { get; set; }
    /// <summary>
    /// The assessment results lose validity the more time elapses from when they are first made.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// The encounter where the assessment was performed.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Business identifier assigned to the risk assessment.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The method can influence the results of the assessment.
    /// </summary>
    [JsonProperty("method")]
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// One of the main reasons for assessing risks is to identify whether interventional steps are needed to reduce risk.
    /// </summary>
    [JsonProperty("mitigation")]
    public string Mitigation { get; set; }
    [JsonProperty("_mitigation")]
    public Element _Mitigation { get; set; }
    /// <summary>
    /// The provider or software application that performed the assessment.
    /// </summary>
    [JsonProperty("performer")]
    public Reference Performer { get; set; }
    /// <summary>
    /// Describes the expected outcome for the subject.
    /// </summary>
    [JsonProperty("prediction")]
    public List<RiskAssessmentPrediction> Prediction { get; set; }
    /// <summary>
    /// The patient or group the risk assessment applies to.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
  }
  /// <summary>
  /// A container for slot(s) of time that may be available for booking appointments.
  /// </summary>
  public class Schedule : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Schedule";
    /// <summary>
    /// The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, Device, Patient or RelatedPerson.
    /// </summary>
    [JsonProperty("actor")]
    public Reference Actor { get; set; }
    /// <summary>
    /// Comments on the availability to describe any extended information. Such as custom constraints on the slot(s) that may be associated.
    /// </summary>
    [JsonProperty("comment")]
    public string Comment { get; set; }
    [JsonProperty("_comment")]
    public Element _Comment { get; set; }
    /// <summary>
    /// External Ids for this item.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
    /// </summary>
    [JsonProperty("planningHorizon")]
    public Period PlanningHorizon { get; set; }
    /// <summary>
    /// The schedule type can be used for the categorization of healthcare services or other appointment types.
    /// </summary>
    [JsonProperty("type")]
    public List<CodeableConcept> Type { get; set; }
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class SearchParameterContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the search parameter.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// A search parameter that defines a named search item that can be used to search/filter on a resource.
  /// </summary>
  public class SearchParameter : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "SearchParameter";
    /// <summary>
    /// The base resource type that this search parameter refers to.
    /// </summary>
    [JsonProperty("base")]
    public string Base { get; set; }
    [JsonProperty("_base")]
    public Element _Base { get; set; }
    /// <summary>
    /// The code used in the URL or the parameter name in a parameters resource for this search parameter.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<SearchParameterContact> Contact { get; set; }
    /// <summary>
    /// The date  (and optionally time) when the search parameter definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// A description of the search parameters and how it used.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// A flag to indicate that this search parameter definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// A free text natural language name identifying the search parameter.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the search parameter.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// The Scope and Usage that this search parameter was created to meet.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// The status of this search parameter definition.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Types of resource (if a resource is referenced).
    /// </summary>
    [JsonProperty("target")]
    public List<string> Target { get; set; }
    [JsonProperty("_target")]
    public List<Element> _Target { get; set; }
    /// <summary>
    /// The type of value a search parameter refers to, and how the content is interpreted.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
    /// <summary>
    /// To allow referencing and reusing search parameter definitions under other names on operational systems (in case of name clash).
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// An XPath expression that returns a set of elements for the search parameter.
    /// </summary>
    [JsonProperty("xpath")]
    public string Xpath { get; set; }
    [JsonProperty("_xpath")]
    public Element _Xpath { get; set; }
    /// <summary>
    /// How the search parameter relates to the set of elements returned by evaluating the xpath query.
    /// </summary>
    [JsonProperty("xpathUsage")]
    public string XpathUsage { get; set; }
    [JsonProperty("_xpathUsage")]
    public Element _XpathUsage { get; set; }
  }
  /// <summary>
  /// Code Values for the SearchParameter.status field
  /// </summary>
  public static class SearchParameterStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Code Values for the SearchParameter.type field
  /// </summary>
  public static class SearchParameterTypeCodes {
    public const string NUMBER = "number";
    public const string DATE = "date";
    public const string VAL_STRING = "string";
    public const string TOKEN = "token";
    public const string REFERENCE = "reference";
    public const string COMPOSITE = "composite";
    public const string QUANTITY = "quantity";
    public const string URI = "uri";
  }
  /// <summary>
  /// Code Values for the SearchParameter.xpathUsage field
  /// </summary>
  public static class SearchParameterXpathUsageCodes {
    public const string NORMAL = "normal";
    public const string PHONETIC = "phonetic";
    public const string NEARBY = "nearby";
    public const string DISTANCE = "distance";
    public const string OTHER = "other";
  }
  /// <summary>
  /// A slot of time on a schedule that may be available for booking appointments.
  /// </summary>
  public class Slot : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Slot";
    /// <summary>
    /// Comments on the slot to describe any extended information. Such as custom constraints on the slot.
    /// </summary>
    [JsonProperty("comment")]
    public string Comment { get; set; }
    [JsonProperty("_comment")]
    public Element _Comment { get; set; }
    /// <summary>
    /// Date/Time that the slot is to conclude.
    /// </summary>
    [JsonProperty("end")]
    public string End { get; set; }
    [JsonProperty("_end")]
    public Element _End { get; set; }
    /// <summary>
    /// busy | free | busy-unavailable | busy-tentative.
    /// </summary>
    [JsonProperty("freeBusyType")]
    public string FreeBusyType { get; set; }
    [JsonProperty("_freeBusyType")]
    public Element _FreeBusyType { get; set; }
    /// <summary>
    /// External Ids for this item.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// This slot has already been overbooked, appointments are unlikely to be accepted for this time.
    /// </summary>
    [JsonProperty("overbooked")]
    public bool? Overbooked { get; set; }
    /// <summary>
    /// The schedule resource that this slot defines an interval of status information.
    /// </summary>
    [JsonProperty("schedule")]
    public Reference Schedule { get; set; }
    /// <summary>
    /// Date/Time that the slot is to begin.
    /// </summary>
    [JsonProperty("start")]
    public string Start { get; set; }
    [JsonProperty("_start")]
    public Element _Start { get; set; }
    /// <summary>
    /// The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Slot.freeBusyType field
  /// </summary>
  public static class SlotFreeBusyTypeCodes {
    public const string BUSY = "busy";
    public const string FREE = "free";
    public const string BUSY_UNAVAILABLE = "busy-unavailable";
    public const string BUSY_TENTATIVE = "busy-tentative";
  }
  /// <summary>
  /// Details concerning the specimen collection.
  /// </summary>
  public class SpecimenCollection : BackboneElement {
    /// <summary>
    /// Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
    /// </summary>
    [JsonProperty("bodySite")]
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// Time when specimen was collected from subject - the physiologically relevant time.
    /// </summary>
    [JsonProperty("collectedDateTime")]
    public string CollectedDateTime { get; set; }
    [JsonProperty("_collectedDateTime")]
    public Element _CollectedDateTime { get; set; }
    /// <summary>
    /// Time when specimen was collected from subject - the physiologically relevant time.
    /// </summary>
    [JsonProperty("collectedPeriod")]
    public Period CollectedPeriod { get; set; }
    /// <summary>
    /// Person who collected the specimen.
    /// </summary>
    [JsonProperty("collector")]
    public Reference Collector { get; set; }
    /// <summary>
    /// To communicate any details or issues encountered during the specimen collection procedure.
    /// </summary>
    [JsonProperty("comment")]
    public List<string> Comment { get; set; }
    [JsonProperty("_comment")]
    public List<Element> _Comment { get; set; }
    /// <summary>
    /// A coded value specifying the technique that is used to perform the procedure.
    /// </summary>
    [JsonProperty("method")]
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
  }
  /// <summary>
  /// Details concerning treatment and processing steps for the specimen.
  /// </summary>
  public class SpecimenTreatment : BackboneElement {
    /// <summary>
    /// Material used in the processing step.
    /// </summary>
    [JsonProperty("additive")]
    public List<Reference> Additive { get; set; }
    /// <summary>
    /// Textual description of procedure.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// A coded value specifying the procedure used to process the specimen.
    /// </summary>
    [JsonProperty("procedure")]
    public CodeableConcept Procedure { get; set; }
  }
  /// <summary>
  /// The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
  /// </summary>
  public class SpecimenContainer : BackboneElement {
    /// <summary>
    /// Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
    /// </summary>
    [JsonProperty("additiveCodeableConcept")]
    public CodeableConcept AdditiveCodeableConcept { get; set; }
    /// <summary>
    /// Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
    /// </summary>
    [JsonProperty("additiveReference")]
    public Reference AdditiveReference { get; set; }
    /// <summary>
    /// The capacity (volume or other measure) the container may contain.
    /// </summary>
    [JsonProperty("capacity")]
    public Quantity Capacity { get; set; }
    /// <summary>
    /// Textual description of the container.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
    /// </summary>
    [JsonProperty("specimenQuantity")]
    public Quantity SpecimenQuantity { get; set; }
    /// <summary>
    /// The type of container associated with the specimen (e.g. slide, aliquot, etc.).
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// A sample to be used for analysis.
  /// </summary>
  public class Specimen : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Specimen";
    /// <summary>
    /// The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
    /// </summary>
    [JsonProperty("accessionIdentifier")]
    public Identifier AccessionIdentifier { get; set; }
    /// <summary>
    /// Details concerning the specimen collection.
    /// </summary>
    [JsonProperty("collection")]
    public SpecimenCollection Collection { get; set; }
    /// <summary>
    /// The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
    /// </summary>
    [JsonProperty("container")]
    public List<SpecimenContainer> Container { get; set; }
    /// <summary>
    /// Id for specimen.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
    /// </summary>
    [JsonProperty("parent")]
    public List<Reference> Parent { get; set; }
    /// <summary>
    /// Time when specimen was received for processing or testing.
    /// </summary>
    [JsonProperty("receivedTime")]
    public string ReceivedTime { get; set; }
    [JsonProperty("_receivedTime")]
    public Element _ReceivedTime { get; set; }
    /// <summary>
    /// The availability of the specimen.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Must know the subject context.
    /// </summary>
    [JsonProperty("subject")]
    public Reference Subject { get; set; }
    /// <summary>
    /// Details concerning treatment and processing steps for the specimen.
    /// </summary>
    [JsonProperty("treatment")]
    public List<SpecimenTreatment> Treatment { get; set; }
    /// <summary>
    /// The kind of material that forms the specimen.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Specimen.status field
  /// </summary>
  public static class SpecimenStatusCodes {
    public const string AVAILABLE = "available";
    public const string UNAVAILABLE = "unavailable";
    public const string UNSATISFACTORY = "unsatisfactory";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class StructureDefinitionContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the structure definition.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// An external specification that the content is mapped to.
  /// </summary>
  public class StructureDefinitionMapping : BackboneElement {
    /// <summary>
    /// Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
    /// </summary>
    [JsonProperty("comments")]
    public string Comments { get; set; }
    [JsonProperty("_comments")]
    public Element _Comments { get; set; }
    /// <summary>
    /// An Internal id that is used to identify this mapping set when specific mappings are made.
    /// </summary>
    [JsonProperty("identity")]
    public string Identity { get; set; }
    [JsonProperty("_identity")]
    public Element _Identity { get; set; }
    /// <summary>
    /// A name for the specification that is being mapped to.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// An absolute URI that identifies the specification that this mapping is expressed to.
    /// </summary>
    [JsonProperty("uri")]
    public string Uri { get; set; }
    [JsonProperty("_uri")]
    public Element _Uri { get; set; }
  }
  /// <summary>
  /// A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
  /// </summary>
  public class StructureDefinitionSnapshot : BackboneElement {
    /// <summary>
    /// Captures constraints on each element within the resource.
    /// </summary>
    [JsonProperty("element")]
    public List<ElementDefinition> Element { get; set; }
  }
  /// <summary>
  /// A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
  /// </summary>
  public class StructureDefinitionDifferential : BackboneElement {
    /// <summary>
    /// Captures constraints on each element within the resource.
    /// </summary>
    [JsonProperty("element")]
    public List<ElementDefinition> Element { get; set; }
  }
  /// <summary>
  /// A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
  /// </summary>
  public class StructureDefinition : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "StructureDefinition";
    /// <summary>
    /// Whether structure this definition describes is abstract or not  - that is, whether an actual exchanged item can ever be of this type.
    /// </summary>
    [JsonProperty("abstract")]
    public bool Abstract { get; set; }
    /// <summary>
    /// An absolute URI that is the base structure from which this set of constraints is derived.
    /// </summary>
    [JsonProperty("base")]
    public string Base { get; set; }
    [JsonProperty("_base")]
    public Element _Base { get; set; }
    /// <summary>
    /// Assist in searching for appropriate StructureDefinitions.
    /// </summary>
    [JsonProperty("code")]
    public List<Coding> Code { get; set; }
    /// <summary>
    /// The type of type that is being constrained - a data type, an extension, a resource, including abstract ones. If this field is present, it indicates that the structure definition is a constraint. If it is not present, then the structure definition is the definition of a base structure.
    /// </summary>
    [JsonProperty("constrainedType")]
    public string ConstrainedType { get; set; }
    [JsonProperty("_constrainedType")]
    public Element _ConstrainedType { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<StructureDefinitionContact> Contact { get; set; }
    /// <summary>
    /// Identifies the types of resource or data type elements to which the extension can be applied.
    /// </summary>
    [JsonProperty("context")]
    public List<string> Context { get; set; }
    [JsonProperty("_context")]
    public List<Element> _Context { get; set; }
    /// <summary>
    /// If this is an extension, Identifies the context within FHIR resources where the extension can be used.
    /// </summary>
    [JsonProperty("contextType")]
    public string ContextType { get; set; }
    [JsonProperty("_contextType")]
    public Element _ContextType { get; set; }
    /// <summary>
    /// A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    /// </summary>
    [JsonProperty("copyright")]
    public string Copyright { get; set; }
    [JsonProperty("_copyright")]
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date this version of the structure definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// A free text natural language description of the StructureDefinition and its use.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
    /// </summary>
    [JsonProperty("differential")]
    public StructureDefinitionDifferential Differential { get; set; }
    /// <summary>
    /// Defined so that applications can use this name when displaying the value of the extension to the user.
    /// </summary>
    [JsonProperty("display")]
    public string Display { get; set; }
    [JsonProperty("_display")]
    public Element _Display { get; set; }
    /// <summary>
    /// Allows filtering of StructureDefinitions that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
    /// </summary>
    [JsonProperty("fhirVersion")]
    public string FhirVersion { get; set; }
    [JsonProperty("_fhirVersion")]
    public Element _FhirVersion { get; set; }
    /// <summary>
    /// Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI).
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Defines the kind of structure that this definition is describing.
    /// </summary>
    [JsonProperty("kind")]
    public string Kind { get; set; }
    [JsonProperty("_kind")]
    public Element _Kind { get; set; }
    /// <summary>
    /// An external specification that the content is mapped to.
    /// </summary>
    [JsonProperty("mapping")]
    public List<StructureDefinitionMapping> Mapping { get; set; }
    /// <summary>
    /// A free text natural language name identifying the StructureDefinition.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the structure definition.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this structure definition is needed and why it's been constrained as it has.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
    /// </summary>
    [JsonProperty("snapshot")]
    public StructureDefinitionSnapshot Snapshot { get; set; }
    /// <summary>
    /// Allows filtering of StructureDefinitions that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// So you can say, in a StructureDefinition, what the full extension URLs should be. This is required to allow hosting StructureDefinitions on multiple different servers, and to allow for the editorial process.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate content.
    /// </summary>
    [JsonProperty("useContext")]
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// There may be multiple resource versions of the StructureDefinition that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the StructureDefinition.contextType field
  /// </summary>
  public static class StructureDefinitionContextTypeCodes {
    public const string RESOURCE = "resource";
    public const string DATATYPE = "datatype";
    public const string MAPPING = "mapping";
    public const string EXTENSION = "extension";
  }
  /// <summary>
  /// Code Values for the StructureDefinition.kind field
  /// </summary>
  public static class StructureDefinitionKindCodes {
    public const string DATATYPE = "datatype";
    public const string RESOURCE = "resource";
    public const string LOGICAL = "logical";
  }
  /// <summary>
  /// Code Values for the StructureDefinition.status field
  /// </summary>
  public static class StructureDefinitionStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Details where to send notifications when resources are received that meet the criteria.
  /// </summary>
  public class SubscriptionChannel : BackboneElement {
    /// <summary>
    /// The uri that describes the actual end-point to send messages to.
    /// </summary>
    [JsonProperty("endpoint")]
    public string Endpoint { get; set; }
    [JsonProperty("_endpoint")]
    public Element _Endpoint { get; set; }
    /// <summary>
    /// Additional headers / information to send as part of the notification.
    /// </summary>
    [JsonProperty("header")]
    public string Header { get; set; }
    [JsonProperty("_header")]
    public Element _Header { get; set; }
    /// <summary>
    /// The mime type to send the payload in - either application/xml+fhir, or application/json+fhir. If the mime type is blank, then there is no payload in the notification, just a notification.
    /// </summary>
    [JsonProperty("payload")]
    public string Payload { get; set; }
    [JsonProperty("_payload")]
    public Element _Payload { get; set; }
    /// <summary>
    /// The type of channel to send notifications on.
    /// </summary>
    [JsonProperty("type")]
    public string Type { get; set; }
    [JsonProperty("_type")]
    public Element _Type { get; set; }
  }
  /// <summary>
  /// Code Values for the Subscription.channel.type field
  /// </summary>
  public static class SubscriptionChannelTypeCodes {
    public const string REST_HOOK = "rest-hook";
    public const string WEBSOCKET = "websocket";
    public const string EMAIL = "email";
    public const string SMS = "sms";
    public const string MESSAGE = "message";
  }
  /// <summary>
  /// The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
  /// </summary>
  public class Subscription : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Subscription";
    /// <summary>
    /// Details where to send notifications when resources are received that meet the criteria.
    /// </summary>
    [JsonProperty("channel")]
    public SubscriptionChannel Channel { get; set; }
    /// <summary>
    /// Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
    /// </summary>
    [JsonProperty("contact")]
    public List<ContactPoint> Contact { get; set; }
    /// <summary>
    /// The rules that the server should use to determine when to generate notifications for this subscription.
    /// </summary>
    [JsonProperty("criteria")]
    public string Criteria { get; set; }
    [JsonProperty("_criteria")]
    public Element _Criteria { get; set; }
    /// <summary>
    /// The time for the server to turn the subscription off.
    /// </summary>
    [JsonProperty("end")]
    public string End { get; set; }
    [JsonProperty("_end")]
    public Element _End { get; set; }
    /// <summary>
    /// A record of the last error that occurred when the server processed a notification.
    /// </summary>
    [JsonProperty("error")]
    public string Error { get; set; }
    [JsonProperty("_error")]
    public Element _Error { get; set; }
    /// <summary>
    /// A description of why this subscription is defined.
    /// </summary>
    [JsonProperty("reason")]
    public string Reason { get; set; }
    [JsonProperty("_reason")]
    public Element _Reason { get; set; }
    /// <summary>
    /// The status of the subscription, which marks the server state for managing the subscription.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// A tag to add to any resource that matches the criteria, after the subscription is processed.
    /// </summary>
    [JsonProperty("tag")]
    public List<Coding> Tag { get; set; }
  }
  /// <summary>
  /// Code Values for the Subscription.status field
  /// </summary>
  public static class SubscriptionStatusCodes {
    public const string REQUESTED = "requested";
    public const string ACTIVE = "active";
    public const string ERROR = "error";
    public const string OFF = "off";
  }
  /// <summary>
  /// Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
  /// </summary>
  public class SubstanceInstance : BackboneElement {
    /// <summary>
    /// When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
    /// </summary>
    [JsonProperty("expiry")]
    public string Expiry { get; set; }
    [JsonProperty("_expiry")]
    public Element _Expiry { get; set; }
    /// <summary>
    /// Identifier associated with the package/container (usually a label affixed directly).
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The amount of the substance.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
  }
  /// <summary>
  /// A substance can be composed of other substances.
  /// </summary>
  public class SubstanceIngredient : BackboneElement {
    /// <summary>
    /// The amount of the ingredient in the substance - a concentration ratio.
    /// </summary>
    [JsonProperty("quantity")]
    public Ratio Quantity { get; set; }
    /// <summary>
    /// Another substance that is a component of this substance.
    /// </summary>
    [JsonProperty("substance")]
    public Reference Substance { get; set; }
  }
  /// <summary>
  /// A homogeneous material with a definite composition.
  /// </summary>
  public class Substance : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "Substance";
    /// <summary>
    /// A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
    /// </summary>
    [JsonProperty("category")]
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// A code (or set of codes) that identify this substance.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A description of the substance - its appearance, handling requirements, and other usage notes.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Unique identifier for the substance.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A substance can be composed of other substances.
    /// </summary>
    [JsonProperty("ingredient")]
    public List<SubstanceIngredient> Ingredient { get; set; }
    /// <summary>
    /// Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
    /// </summary>
    [JsonProperty("instance")]
    public List<SubstanceInstance> Instance { get; set; }
  }
  /// <summary>
  /// Record of delivery of what is supplied.
  /// </summary>
  public class SupplyDelivery : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "SupplyDelivery";
    /// <summary>
    /// Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
    /// </summary>
    [JsonProperty("destination")]
    public Reference Destination { get; set; }
    /// <summary>
    /// Identifier assigned by the dispensing facility when the item(s) is dispensed.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// A link to a resource representing the person whom the delivered item is for.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The amount of supply that has been dispensed. Includes unit of measure.
    /// </summary>
    [JsonProperty("quantity")]
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Identifies the person who picked up the Supply.
    /// </summary>
    [JsonProperty("receiver")]
    public List<Reference> Receiver { get; set; }
    /// <summary>
    /// A code specifying the state of the dispense event.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a simple attribute carrying a code that identifies the item from a known list.
    /// </summary>
    [JsonProperty("suppliedItem")]
    public Reference SuppliedItem { get; set; }
    /// <summary>
    /// The individual responsible for dispensing the medication, supplier or device.
    /// </summary>
    [JsonProperty("supplier")]
    public Reference Supplier { get; set; }
    /// <summary>
    /// The time the dispensed item was sent or handed to the patient (or agent).
    /// </summary>
    [JsonProperty("time")]
    public string Time { get; set; }
    [JsonProperty("_time")]
    public Element _Time { get; set; }
    /// <summary>
    /// Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
    /// </summary>
    [JsonProperty("type")]
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The time the dispense event occurred.
    /// </summary>
    [JsonProperty("whenPrepared")]
    public Period WhenPrepared { get; set; }
  }
  /// <summary>
  /// Code Values for the SupplyDelivery.status field
  /// </summary>
  public static class SupplyDeliveryStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string ABANDONED = "abandoned";
  }
  /// <summary>
  /// When the request should be fulfilled.
  /// </summary>
  public class SupplyRequestWhen : BackboneElement {
    /// <summary>
    /// Code indicating when the request should be fulfilled.
    /// </summary>
    [JsonProperty("code")]
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Formal fulfillment schedule.
    /// </summary>
    [JsonProperty("schedule")]
    public Timing Schedule { get; set; }
  }
  /// <summary>
  /// A record of a request for a medication, substance or device used in the healthcare setting.
  /// </summary>
  public class SupplyRequest : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "SupplyRequest";
    /// <summary>
    /// When the request was made.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Unique identifier for this supply request.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
    /// </summary>
    [JsonProperty("kind")]
    public CodeableConcept Kind { get; set; }
    /// <summary>
    /// The item that is requested to be supplied.
    /// </summary>
    [JsonProperty("orderedItem")]
    public Reference OrderedItem { get; set; }
    /// <summary>
    /// A link to a resource representing the person whom the ordered item is for.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// Why the supply item was requested.
    /// </summary>
    [JsonProperty("reasonCodeableConcept")]
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// Why the supply item was requested.
    /// </summary>
    [JsonProperty("reasonReference")]
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// The Practitioner , Organization or Patient who initiated this order for the supply.
    /// </summary>
    [JsonProperty("source")]
    public Reference Source { get; set; }
    /// <summary>
    /// Status of the supply request.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// Who is intended to fulfill the request.
    /// </summary>
    [JsonProperty("supplier")]
    public List<Reference> Supplier { get; set; }
    /// <summary>
    /// When the request should be fulfilled.
    /// </summary>
    [JsonProperty("when")]
    public SupplyRequestWhen When { get; set; }
  }
  /// <summary>
  /// Code Values for the SupplyRequest.status field
  /// </summary>
  public static class SupplyRequestStatusCodes {
    public const string REQUESTED = "requested";
    public const string COMPLETED = "completed";
    public const string FAILED = "failed";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class TestScriptContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the Test Script.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// A link to the FHIR specification that this test is covering.
  /// </summary>
  public class TestScriptMetadataLink : BackboneElement {
    /// <summary>
    /// Short description of the link.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// URL to a particular requirement or feature within the FHIR specification.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
  /// </summary>
  public class TestScriptMetadataCapability : BackboneElement {
    /// <summary>
    /// Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.
    /// </summary>
    [JsonProperty("conformance")]
    public Reference Conformance { get; set; }
    /// <summary>
    /// Description of the capabilities that this test script is requiring the server to support.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Which server these requirements apply to.
    /// </summary>
    [JsonProperty("destination")]
    public int? Destination { get; set; }
    /// <summary>
    /// Links to the FHIR specification that describes this interaction and the resources involved in more detail.
    /// </summary>
    [JsonProperty("link")]
    public List<string> Link { get; set; }
    [JsonProperty("_link")]
    public List<Element> _Link { get; set; }
    /// <summary>
    /// Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
    /// </summary>
    [JsonProperty("required")]
    public bool? Required { get; set; }
    /// <summary>
    /// Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
    /// </summary>
    [JsonProperty("validated")]
    public bool? Validated { get; set; }
  }
  /// <summary>
  /// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
  /// </summary>
  public class TestScriptMetadata : BackboneElement {
    /// <summary>
    /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    [JsonProperty("capability")]
    public List<TestScriptMetadataCapability> Capability { get; set; }
    /// <summary>
    /// A link to the FHIR specification that this test is covering.
    /// </summary>
    [JsonProperty("link")]
    public List<TestScriptMetadataLink> Link { get; set; }
  }
  /// <summary>
  /// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
  /// </summary>
  public class TestScriptFixture : BackboneElement {
    /// <summary>
    /// Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
    /// </summary>
    [JsonProperty("autocreate")]
    public bool? Autocreate { get; set; }
    /// <summary>
    /// Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
    /// </summary>
    [JsonProperty("autodelete")]
    public bool? Autodelete { get; set; }
    /// <summary>
    /// Reference to the resource (containing the contents of the resource needed for operations).
    /// </summary>
    [JsonProperty("resource")]
    public Reference Resource { get; set; }
  }
  /// <summary>
  /// Variable is set based either on element value in response body or on header field value in the response headers.
  /// </summary>
  public class TestScriptVariable : BackboneElement {
    /// <summary>
    /// Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
    /// </summary>
    [JsonProperty("headerField")]
    public string HeaderField { get; set; }
    [JsonProperty("_headerField")]
    public Element _HeaderField { get; set; }
    /// <summary>
    /// Descriptive name for this variable.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.
    /// </summary>
    [JsonProperty("path")]
    public string Path { get; set; }
    [JsonProperty("_path")]
    public Element _Path { get; set; }
    /// <summary>
    /// Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
    /// </summary>
    [JsonProperty("sourceId")]
    public string SourceId { get; set; }
    [JsonProperty("_sourceId")]
    public Element _SourceId { get; set; }
  }
  /// <summary>
  /// Header elements would be used to set HTTP headers.
  /// </summary>
  public class TestScriptSetupActionOperationRequestHeader : BackboneElement {
    /// <summary>
    /// The HTTP header field e.g. "Accept".
    /// </summary>
    [JsonProperty("field")]
    public string Field { get; set; }
    [JsonProperty("_field")]
    public Element _Field { get; set; }
    /// <summary>
    /// The value of the header e.g. "application/xml".
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// The operation to perform.
  /// </summary>
  public class TestScriptSetupActionOperation : BackboneElement {
    /// <summary>
    /// The content-type or mime-type to use for RESTful operation in the 'Accept' header.
    /// </summary>
    [JsonProperty("accept")]
    public string Accept { get; set; }
    [JsonProperty("_accept")]
    public Element _Accept { get; set; }
    /// <summary>
    /// The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
    /// </summary>
    [JsonProperty("contentType")]
    public string ContentType { get; set; }
    [JsonProperty("_contentType")]
    public Element _ContentType { get; set; }
    /// <summary>
    /// The description would be used by test engines for tracking and reporting purposes.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Which server to perform the operation on.
    /// </summary>
    [JsonProperty("destination")]
    public int? Destination { get; set; }
    /// <summary>
    /// Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
    /// </summary>
    [JsonProperty("encodeRequestUrl")]
    public bool? EncodeRequestUrl { get; set; }
    /// <summary>
    /// The label would be used for tracking/logging purposes by test engines.
    /// </summary>
    [JsonProperty("label")]
    public string Label { get; set; }
    [JsonProperty("_label")]
    public Element _Label { get; set; }
    /// <summary>
    /// Path plus parameters after [type].  Used to set parts of the request URL explicitly.
    /// </summary>
    [JsonProperty("params")]
    public string Params { get; set; }
    [JsonProperty("_params")]
    public Element _Params { get; set; }
    /// <summary>
    /// Header elements would be used to set HTTP headers.
    /// </summary>
    [JsonProperty("requestHeader")]
    public List<TestScriptSetupActionOperationRequestHeader> RequestHeader { get; set; }
    /// <summary>
    /// The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
    /// </summary>
    [JsonProperty("resource")]
    public string Resource { get; set; }
    [JsonProperty("_resource")]
    public Element _Resource { get; set; }
    /// <summary>
    /// The fixture id (maybe new) to map to the response.
    /// </summary>
    [JsonProperty("responseId")]
    public string ResponseId { get; set; }
    [JsonProperty("_responseId")]
    public Element _ResponseId { get; set; }
    /// <summary>
    /// The id of the fixture used as the body of a PUT or POST request.
    /// </summary>
    [JsonProperty("sourceId")]
    public string SourceId { get; set; }
    [JsonProperty("_sourceId")]
    public Element _SourceId { get; set; }
    /// <summary>
    /// Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
    /// </summary>
    [JsonProperty("targetId")]
    public string TargetId { get; set; }
    [JsonProperty("_targetId")]
    public Element _TargetId { get; set; }
    /// <summary>
    /// Server interaction or operation type.
    /// </summary>
    [JsonProperty("type")]
    public Coding Type { get; set; }
    /// <summary>
    /// Complete request URL.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.operation.accept field
  /// </summary>
  public static class TestScriptSetupActionOperationAcceptCodes {
    public const string XML = "xml";
    public const string JSON = "json";
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.operation.contentType field
  /// </summary>
  public static class TestScriptSetupActionOperationContentTypeCodes {
    public const string XML = "xml";
    public const string JSON = "json";
  }
  /// <summary>
  /// Evaluates the results of previous operations to determine if the server under test behaves appropriately.
  /// </summary>
  public class TestScriptSetupActionAssert : BackboneElement {
    /// <summary>
    /// Id of fixture used to compare the "sourceId/path" evaluations to.
    /// </summary>
    [JsonProperty("compareToSourceId")]
    public string CompareToSourceId { get; set; }
    [JsonProperty("_compareToSourceId")]
    public Element _CompareToSourceId { get; set; }
    /// <summary>
    /// XPath or JSONPath expression against fixture used to compare the "sourceId/path" evaluations to.
    /// </summary>
    [JsonProperty("compareToSourcePath")]
    public string CompareToSourcePath { get; set; }
    [JsonProperty("_compareToSourcePath")]
    public Element _CompareToSourcePath { get; set; }
    /// <summary>
    /// The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
    /// </summary>
    [JsonProperty("contentType")]
    public string ContentType { get; set; }
    [JsonProperty("_contentType")]
    public Element _ContentType { get; set; }
    /// <summary>
    /// The description would be used by test engines for tracking and reporting purposes.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// The direction to use for the assertion.
    /// </summary>
    [JsonProperty("direction")]
    public string Direction { get; set; }
    [JsonProperty("_direction")]
    public Element _Direction { get; set; }
    /// <summary>
    /// The HTTP header field name e.g. 'Location'.
    /// </summary>
    [JsonProperty("headerField")]
    public string HeaderField { get; set; }
    [JsonProperty("_headerField")]
    public Element _HeaderField { get; set; }
    /// <summary>
    /// The label would be used for tracking/logging purposes by test engines.
    /// </summary>
    [JsonProperty("label")]
    public string Label { get; set; }
    [JsonProperty("_label")]
    public Element _Label { get; set; }
    /// <summary>
    /// The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.
    /// </summary>
    [JsonProperty("minimumId")]
    public string MinimumId { get; set; }
    [JsonProperty("_minimumId")]
    public Element _MinimumId { get; set; }
    /// <summary>
    /// Whether or not the test execution performs validation on the bundle navigation links.
    /// </summary>
    [JsonProperty("navigationLinks")]
    public bool? NavigationLinks { get; set; }
    /// <summary>
    /// The operator type.
    /// </summary>
    [JsonProperty("operator")]
    public string Operator { get; set; }
    [JsonProperty("_operator")]
    public Element _Operator { get; set; }
    /// <summary>
    /// The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
    /// </summary>
    [JsonProperty("path")]
    public string Path { get; set; }
    [JsonProperty("_path")]
    public Element _Path { get; set; }
    /// <summary>
    /// The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
    /// </summary>
    [JsonProperty("resource")]
    public string Resource { get; set; }
    [JsonProperty("_resource")]
    public Element _Resource { get; set; }
    /// <summary>
    /// okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
    /// </summary>
    [JsonProperty("response")]
    public string Response { get; set; }
    [JsonProperty("_response")]
    public Element _Response { get; set; }
    /// <summary>
    /// The value of the HTTP response code to be tested.
    /// </summary>
    [JsonProperty("responseCode")]
    public string ResponseCode { get; set; }
    [JsonProperty("_responseCode")]
    public Element _ResponseCode { get; set; }
    /// <summary>
    /// Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
    /// </summary>
    [JsonProperty("sourceId")]
    public string SourceId { get; set; }
    [JsonProperty("_sourceId")]
    public Element _SourceId { get; set; }
    /// <summary>
    /// The ID of the Profile to validate against.
    /// </summary>
    [JsonProperty("validateProfileId")]
    public string ValidateProfileId { get; set; }
    [JsonProperty("_validateProfileId")]
    public Element _ValidateProfileId { get; set; }
    /// <summary>
    /// The value to compare to.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
    /// <summary>
    /// Whether or not the test execution will produce a warning only on error for this assert.
    /// </summary>
    [JsonProperty("warningOnly")]
    public bool? WarningOnly { get; set; }
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.contentType field
  /// </summary>
  public static class TestScriptSetupActionAssertContentTypeCodes {
    public const string XML = "xml";
    public const string JSON = "json";
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.direction field
  /// </summary>
  public static class TestScriptSetupActionAssertDirectionCodes {
    public const string RESPONSE = "response";
    public const string REQUEST = "request";
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.operator field
  /// </summary>
  public static class TestScriptSetupActionAssertOperatorCodes {
    public const string EQUALS = "equals";
    public const string NOTEQUALS = "notEquals";
    public const string VAL_IN = "in";
    public const string NOTIN = "notIn";
    public const string GREATERTHAN = "greaterThan";
    public const string LESSTHAN = "lessThan";
    public const string EMPTY = "empty";
    public const string NOTEMPTY = "notEmpty";
    public const string CONTAINS = "contains";
    public const string NOTCONTAINS = "notContains";
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.response field
  /// </summary>
  public static class TestScriptSetupActionAssertResponseCodes {
    public const string OKAY = "okay";
    public const string CREATED = "created";
    public const string NOCONTENT = "noContent";
    public const string NOTMODIFIED = "notModified";
    public const string BAD = "bad";
    public const string FORBIDDEN = "forbidden";
    public const string NOTFOUND = "notFound";
    public const string METHODNOTALLOWED = "methodNotAllowed";
    public const string CONFLICT = "conflict";
    public const string GONE = "gone";
    public const string PRECONDITIONFAILED = "preconditionFailed";
    public const string UNPROCESSABLE = "unprocessable";
  }
  /// <summary>
  /// Action would contain either an operation or an assertion.
  /// </summary>
  public class TestScriptSetupAction : BackboneElement {
    /// <summary>
    /// Evaluates the results of previous operations to determine if the server under test behaves appropriately.
    /// </summary>
    [JsonProperty("assert")]
    public TestScriptSetupActionAssert Assert { get; set; }
    /// <summary>
    /// The operation to perform.
    /// </summary>
    [JsonProperty("operation")]
    public TestScriptSetupActionOperation Operation { get; set; }
  }
  /// <summary>
  /// A series of required setup operations before tests are executed.
  /// </summary>
  public class TestScriptSetup : BackboneElement {
    /// <summary>
    /// Action would contain either an operation or an assertion.
    /// </summary>
    [JsonProperty("action")]
    public List<TestScriptSetupAction> Action { get; set; }
    /// <summary>
    /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    [JsonProperty("metadata")]
    public TestScriptMetadata Metadata { get; set; }
  }
  /// <summary>
  /// Action would contain either an operation or an assertion.
  /// </summary>
  public class TestScriptTestAction : BackboneElement {
    /// <summary>
    /// Evaluates the results of previous operations to determine if the server under test behaves appropriately.
    /// </summary>
    [JsonProperty("assert")]
    public TestScriptSetupActionAssert Assert { get; set; }
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    [JsonProperty("operation")]
    public TestScriptSetupActionOperation Operation { get; set; }
  }
  /// <summary>
  /// A test in this script.
  /// </summary>
  public class TestScriptTest : BackboneElement {
    /// <summary>
    /// Action would contain either an operation or an assertion.
    /// </summary>
    [JsonProperty("action")]
    public List<TestScriptTestAction> Action { get; set; }
    /// <summary>
    /// A short description of the test used by test engines for tracking and reporting purposes.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    [JsonProperty("metadata")]
    public TestScriptMetadata Metadata { get; set; }
    /// <summary>
    /// The name of this test used for tracking/logging purposes by test engines.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
  }
  /// <summary>
  /// The teardown action will only contain an operation.
  /// </summary>
  public class TestScriptTeardownAction : BackboneElement {
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    [JsonProperty("operation")]
    public TestScriptSetupActionOperation Operation { get; set; }
  }
  /// <summary>
  /// A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
  /// </summary>
  public class TestScriptTeardown : BackboneElement {
    /// <summary>
    /// The teardown action will only contain an operation.
    /// </summary>
    [JsonProperty("action")]
    public List<TestScriptTeardownAction> Action { get; set; }
  }
  /// <summary>
  /// TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
  /// </summary>
  public class TestScript : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "TestScript";
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<TestScriptContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    /// </summary>
    [JsonProperty("copyright")]
    public string Copyright { get; set; }
    [JsonProperty("_copyright")]
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// A free text natural language description of the TestScript and its use.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of TestScripts that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
    /// </summary>
    [JsonProperty("fixture")]
    public List<TestScriptFixture> Fixture { get; set; }
    /// <summary>
    /// Identifier for the TestScript assigned for external purposes outside the context of FHIR.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    [JsonProperty("metadata")]
    public TestScriptMetadata Metadata { get; set; }
    /// <summary>
    /// If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.
    /// </summary>
    [JsonProperty("multiserver")]
    public bool? Multiserver { get; set; }
    /// <summary>
    /// A free text natural language name identifying the TestScript.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Reference to the profile to be used for validation.
    /// </summary>
    [JsonProperty("profile")]
    public List<Reference> Profile { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the Test Script.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this Test Script is needed and why it's been constrained as it has.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// A series of required setup operations before tests are executed.
    /// </summary>
    [JsonProperty("setup")]
    public TestScriptSetup Setup { get; set; }
    /// <summary>
    /// Allows filtering of TestScripts that are appropriate for use vs. not.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
    /// </summary>
    [JsonProperty("teardown")]
    public TestScriptTeardown Teardown { get; set; }
    /// <summary>
    /// A test in this script.
    /// </summary>
    [JsonProperty("test")]
    public List<TestScriptTest> Test { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate content.
    /// </summary>
    [JsonProperty("useContext")]
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// Variable is set based either on element value in response body or on header field value in the response headers.
    /// </summary>
    [JsonProperty("variable")]
    public List<TestScriptVariable> Variable { get; set; }
    /// <summary>
    /// There may be multiple resource versions of the TestScript that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the TestScript.status field
  /// </summary>
  public static class TestScriptStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  public class ValueSetContact : BackboneElement {
    /// <summary>
    /// The name of an individual to contact regarding the value set.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    [JsonProperty("telecom")]
    public List<ContactPoint> Telecom { get; set; }
  }
  /// <summary>
  /// Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.
  /// </summary>
  public class ValueSetCodeSystemConceptDesignation : BackboneElement {
    /// <summary>
    /// The language this designation is defined for.
    /// </summary>
    [JsonProperty("language")]
    public string Language { get; set; }
    [JsonProperty("_language")]
    public Element _Language { get; set; }
    /// <summary>
    /// A code that details how this designation would be used.
    /// </summary>
    [JsonProperty("use")]
    public Coding Use { get; set; }
    /// <summary>
    /// The text value for this designation.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
  /// </summary>
  public class ValueSetCodeSystemConcept : BackboneElement {
    /// <summary>
    /// If this code is not for use as a real concept.
    /// </summary>
    [JsonProperty("abstract")]
    public bool? Abstract { get; set; }
    /// <summary>
    /// A code - a text symbol - that uniquely identifies the concept within the code system.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) and can only be determined by examining the definitions of the concepts.
    /// </summary>
    [JsonProperty("concept")]
    public List<ValueSetCodeSystemConcept> Concept { get; set; }
    /// <summary>
    /// The formal definition of the concept. The value set resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
    /// </summary>
    [JsonProperty("definition")]
    public string Definition { get; set; }
    [JsonProperty("_definition")]
    public Element _Definition { get; set; }
    /// <summary>
    /// Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.
    /// </summary>
    [JsonProperty("designation")]
    public List<ValueSetCodeSystemConceptDesignation> Designation { get; set; }
    /// <summary>
    /// A human readable string that is the recommended default way to present this concept to a user.
    /// </summary>
    [JsonProperty("display")]
    public string Display { get; set; }
    [JsonProperty("_display")]
    public Element _Display { get; set; }
  }
  /// <summary>
  /// A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
  /// </summary>
  public class ValueSetCodeSystem : BackboneElement {
    /// <summary>
    /// If code comparison is case sensitive when codes within this system are compared to each other.
    /// </summary>
    [JsonProperty("caseSensitive")]
    public bool? CaseSensitive { get; set; }
    /// <summary>
    /// Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
    /// </summary>
    [JsonProperty("concept")]
    public List<ValueSetCodeSystemConcept> Concept { get; set; }
    /// <summary>
    /// An absolute URI that is used to reference this code system, including in [Coding]{datatypes.html#Coding}.system.
    /// </summary>
    [JsonProperty("system")]
    public string System { get; set; }
    [JsonProperty("_system")]
    public Element _System { get; set; }
    /// <summary>
    /// The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Specifies a concept to be included or excluded.
  /// </summary>
  public class ValueSetComposeIncludeConcept : BackboneElement {
    /// <summary>
    /// Specifies a code for the concept to be included or excluded.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
    /// </summary>
    [JsonProperty("designation")]
    public List<ValueSetCodeSystemConceptDesignation> Designation { get; set; }
    /// <summary>
    /// The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
    /// </summary>
    [JsonProperty("display")]
    public string Display { get; set; }
    [JsonProperty("_display")]
    public Element _Display { get; set; }
  }
  /// <summary>
  /// Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
  /// </summary>
  public class ValueSetComposeIncludeFilter : BackboneElement {
    /// <summary>
    /// The kind of operation to perform as a part of the filter criteria.
    /// </summary>
    [JsonProperty("op")]
    public string Op { get; set; }
    [JsonProperty("_op")]
    public Element _Op { get; set; }
    /// <summary>
    /// A code that identifies a property defined in the code system.
    /// </summary>
    [JsonProperty("property")]
    public string Property { get; set; }
    [JsonProperty("_property")]
    public Element _Property { get; set; }
    /// <summary>
    /// The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value.
    /// </summary>
    [JsonProperty("value")]
    public string Value { get; set; }
    [JsonProperty("_value")]
    public Element _Value { get; set; }
  }
  /// <summary>
  /// Code Values for the ValueSet.compose.include.filter.op field
  /// </summary>
  public static class ValueSetComposeIncludeFilterOpCodes {
    public const string EQUALS = "=";
    public const string IS_A = "is-a";
    public const string IS_NOT_A = "is-not-a";
    public const string REGEX = "regex";
    public const string VAL_IN = "in";
    public const string NOT_IN = "not-in";
  }
  /// <summary>
  /// Include one or more codes from a code system.
  /// </summary>
  public class ValueSetComposeInclude : BackboneElement {
    /// <summary>
    /// Specifies a concept to be included or excluded.
    /// </summary>
    [JsonProperty("concept")]
    public List<ValueSetComposeIncludeConcept> Concept { get; set; }
    /// <summary>
    /// Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
    /// </summary>
    [JsonProperty("filter")]
    public List<ValueSetComposeIncludeFilter> Filter { get; set; }
    /// <summary>
    /// An absolute URI which is the code system from which the selected codes come from.
    /// </summary>
    [JsonProperty("system")]
    public string System { get; set; }
    [JsonProperty("_system")]
    public Element _System { get; set; }
    /// <summary>
    /// The version of the code system that the codes are selected from.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
  /// </summary>
  public class ValueSetCompose : BackboneElement {
    /// <summary>
    /// Exclude one or more codes from the value set.
    /// </summary>
    [JsonProperty("exclude")]
    public List<ValueSetComposeInclude> Exclude { get; set; }
    /// <summary>
    /// Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri.
    /// </summary>
    [JsonProperty("import")]
    public List<string> Import { get; set; }
    [JsonProperty("_import")]
    public List<Element> _Import { get; set; }
    /// <summary>
    /// Include one or more codes from a code system.
    /// </summary>
    [JsonProperty("include")]
    public List<ValueSetComposeInclude> Include { get; set; }
  }
  /// <summary>
  /// A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
  /// </summary>
  public class ValueSetExpansionParameter : BackboneElement {
    /// <summary>
    /// The name of the parameter.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    [JsonProperty("valueString")]
    public string ValueString { get; set; }
    [JsonProperty("_valueString")]
    public Element _ValueString { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    [JsonProperty("valueBoolean")]
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    [JsonProperty("valueInteger")]
    public int? ValueInteger { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    [JsonProperty("valueDecimal")]
    public decimal? ValueDecimal { get; set; }
    [JsonProperty("_valueDecimal")]
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    [JsonProperty("valueUri")]
    public string ValueUri { get; set; }
    [JsonProperty("_valueUri")]
    public Element _ValueUri { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    [JsonProperty("valueCode")]
    public string ValueCode { get; set; }
    [JsonProperty("_valueCode")]
    public Element _ValueCode { get; set; }
  }
  /// <summary>
  /// The codes that are contained in the value set expansion.
  /// </summary>
  public class ValueSetExpansionContains : BackboneElement {
    /// <summary>
    /// If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
    /// </summary>
    [JsonProperty("abstract")]
    public bool? Abstract { get; set; }
    /// <summary>
    /// The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; }
    [JsonProperty("_code")]
    public Element _Code { get; set; }
    /// <summary>
    /// Other codes and entries contained under this entry in the hierarchy.
    /// </summary>
    [JsonProperty("contains")]
    public List<ValueSetExpansionContains> Contains { get; set; }
    /// <summary>
    /// The recommended display for this item in the expansion.
    /// </summary>
    [JsonProperty("display")]
    public string Display { get; set; }
    [JsonProperty("_display")]
    public Element _Display { get; set; }
    /// <summary>
    /// An absolute URI which is the code system in which the code for this item in the expansion is defined.
    /// </summary>
    [JsonProperty("system")]
    public string System { get; set; }
    [JsonProperty("_system")]
    public Element _System { get; set; }
    /// <summary>
    /// The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
  /// </summary>
  public class ValueSetExpansion : BackboneElement {
    /// <summary>
    /// The codes that are contained in the value set expansion.
    /// </summary>
    [JsonProperty("contains")]
    public List<ValueSetExpansionContains> Contains { get; set; }
    /// <summary>
    /// An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.
    /// </summary>
    [JsonProperty("identifier")]
    public string Identifier { get; set; }
    [JsonProperty("_identifier")]
    public Element _Identifier { get; set; }
    /// <summary>
    /// If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.
    /// </summary>
    [JsonProperty("offset")]
    public int? Offset { get; set; }
    /// <summary>
    /// A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
    /// </summary>
    [JsonProperty("parameter")]
    public List<ValueSetExpansionParameter> Parameter { get; set; }
    /// <summary>
    /// The time at which the expansion was produced by the expanding system.
    /// </summary>
    [JsonProperty("timestamp")]
    public string Timestamp { get; set; }
    [JsonProperty("_timestamp")]
    public Element _Timestamp { get; set; }
    /// <summary>
    /// The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
    /// </summary>
    [JsonProperty("total")]
    public int? Total { get; set; }
  }
  /// <summary>
  /// A value set specifies a set of codes drawn from one or more code systems.
  /// </summary>
  public class ValueSet : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "ValueSet";
    /// <summary>
    /// A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
    /// </summary>
    [JsonProperty("codeSystem")]
    public ValueSetCodeSystem CodeSystem { get; set; }
    /// <summary>
    /// A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
    /// </summary>
    [JsonProperty("compose")]
    public ValueSetCompose Compose { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    [JsonProperty("contact")]
    public List<ValueSetContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
    /// </summary>
    [JsonProperty("copyright")]
    public string Copyright { get; set; }
    [JsonProperty("_copyright")]
    public Element _Copyright { get; set; }
    /// <summary>
    /// Need to know when a value set was first legal for use or became withdrawn or replaced.
    /// </summary>
    [JsonProperty("date")]
    public string Date { get; set; }
    [JsonProperty("_date")]
    public Element _Date { get; set; }
    /// <summary>
    /// Human understandability.
    /// </summary>
    [JsonProperty("description")]
    public string Description { get; set; }
    [JsonProperty("_description")]
    public Element _Description { get; set; }
    /// <summary>
    /// A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
    /// </summary>
    [JsonProperty("expansion")]
    public ValueSetExpansion Expansion { get; set; }
    /// <summary>
    /// This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    [JsonProperty("experimental")]
    public bool? Experimental { get; set; }
    /// <summary>
    /// It is not required to say whether this intent applies.
    /// </summary>
    [JsonProperty("extensible")]
    public bool? Extensible { get; set; }
    /// <summary>
    /// Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
    /// </summary>
    [JsonProperty("identifier")]
    public Identifier Identifier { get; set; }
    /// <summary>
    /// If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
    /// </summary>
    [JsonProperty("immutable")]
    public bool? Immutable { get; set; }
    /// <summary>
    /// If a locked date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value set instances as of the locked date.
    /// </summary>
    [JsonProperty("lockedDate")]
    public string LockedDate { get; set; }
    [JsonProperty("_lockedDate")]
    public Element _LockedDate { get; set; }
    /// <summary>
    /// Support human navigation.
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("_name")]
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the value set.  May also allow for contact.
    /// </summary>
    [JsonProperty("publisher")]
    public string Publisher { get; set; }
    [JsonProperty("_publisher")]
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this value set is needed and why it has been constrained as it has.
    /// </summary>
    [JsonProperty("requirements")]
    public string Requirements { get; set; }
    [JsonProperty("_requirements")]
    public Element _Requirements { get; set; }
    /// <summary>
    /// Identify when/if the value set should be used.
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; }
    [JsonProperty("_status")]
    public Element _Status { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
    [JsonProperty("_url")]
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate content.
    /// </summary>
    [JsonProperty("useContext")]
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    /// </summary>
    [JsonProperty("version")]
    public string Version { get; set; }
    [JsonProperty("_version")]
    public Element _Version { get; set; }
  }
  /// <summary>
  /// Code Values for the ValueSet.status field
  /// </summary>
  public static class ValueSetStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
  /// <summary>
  /// Deals with details of the dispense part of the supply specification.
  /// </summary>
  public class VisionPrescriptionDispense : BackboneElement {
    /// <summary>
    /// Power adjustment for multifocal lenses measured in diopters (0.25 units).
    /// </summary>
    [JsonProperty("add")]
    public decimal? Add { get; set; }
    [JsonProperty("_add")]
    public Element _Add { get; set; }
    /// <summary>
    /// Adjustment for astigmatism measured in integer degrees.
    /// </summary>
    [JsonProperty("axis")]
    public int? Axis { get; set; }
    /// <summary>
    /// Back curvature measured in millimeters.
    /// </summary>
    [JsonProperty("backCurve")]
    public decimal? BackCurve { get; set; }
    [JsonProperty("_backCurve")]
    public Element _BackCurve { get; set; }
    /// <summary>
    /// The relative base, or reference lens edge, for the prism.
    /// </summary>
    [JsonProperty("base")]
    public string Base { get; set; }
    [JsonProperty("_base")]
    public Element _Base { get; set; }
    /// <summary>
    /// Brand recommendations or restrictions.
    /// </summary>
    [JsonProperty("brand")]
    public string Brand { get; set; }
    [JsonProperty("_brand")]
    public Element _Brand { get; set; }
    /// <summary>
    /// Special color or pattern.
    /// </summary>
    [JsonProperty("color")]
    public string Color { get; set; }
    [JsonProperty("_color")]
    public Element _Color { get; set; }
    /// <summary>
    /// Power adjustment for astigmatism measured in diopters (0.25 units).
    /// </summary>
    [JsonProperty("cylinder")]
    public decimal? Cylinder { get; set; }
    [JsonProperty("_cylinder")]
    public Element _Cylinder { get; set; }
    /// <summary>
    /// Contact lens diameter measured in millimeters.
    /// </summary>
    [JsonProperty("diameter")]
    public decimal? Diameter { get; set; }
    [JsonProperty("_diameter")]
    public Element _Diameter { get; set; }
    /// <summary>
    /// The recommended maximum wear period for the lens.
    /// </summary>
    [JsonProperty("duration")]
    public Quantity Duration { get; set; }
    /// <summary>
    /// The eye for which the lens applies.
    /// </summary>
    [JsonProperty("eye")]
    public string Eye { get; set; }
    [JsonProperty("_eye")]
    public Element _Eye { get; set; }
    /// <summary>
    /// Notes for special requirements such as coatings and lens materials.
    /// </summary>
    [JsonProperty("notes")]
    public string Notes { get; set; }
    [JsonProperty("_notes")]
    public Element _Notes { get; set; }
    /// <summary>
    /// Contact lens power measured in diopters (0.25 units).
    /// </summary>
    [JsonProperty("power")]
    public decimal? Power { get; set; }
    [JsonProperty("_power")]
    public Element _Power { get; set; }
    /// <summary>
    /// Amount of prism to compensate for eye alignment in fractional units.
    /// </summary>
    [JsonProperty("prism")]
    public decimal? Prism { get; set; }
    [JsonProperty("_prism")]
    public Element _Prism { get; set; }
    /// <summary>
    /// Identifies the type of vision correction product which is required for the patient.
    /// </summary>
    [JsonProperty("product")]
    public Coding Product { get; set; }
    /// <summary>
    /// Lens power measured in diopters (0.25 units).
    /// </summary>
    [JsonProperty("sphere")]
    public decimal? Sphere { get; set; }
    [JsonProperty("_sphere")]
    public Element _Sphere { get; set; }
  }
  /// <summary>
  /// Code Values for the VisionPrescription.dispense.base field
  /// </summary>
  public static class VisionPrescriptionDispenseBaseCodes {
    public const string UP = "up";
    public const string DOWN = "down";
    public const string VAL_IN = "in";
    public const string VAL_OUT = "out";
  }
  /// <summary>
  /// Code Values for the VisionPrescription.dispense.eye field
  /// </summary>
  public static class VisionPrescriptionDispenseEyeCodes {
    public const string RIGHT = "right";
    public const string LEFT = "left";
  }
  /// <summary>
  /// An authorization for the supply of glasses and/or contact lenses to a patient.
  /// </summary>
  public class VisionPrescription : DomainResource {
    /** Resource Type Name (for serialization) */
    [JsonProperty("resourceType")]
    public string ResourceType => "VisionPrescription";
    /// <summary>
    /// The date (and perhaps time) when the prescription was written.
    /// </summary>
    [JsonProperty("dateWritten")]
    public string DateWritten { get; set; }
    [JsonProperty("_dateWritten")]
    public Element _DateWritten { get; set; }
    /// <summary>
    /// Deals with details of the dispense part of the supply specification.
    /// </summary>
    [JsonProperty("dispense")]
    public List<VisionPrescriptionDispense> Dispense { get; set; }
    /// <summary>
    /// A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
    /// </summary>
    [JsonProperty("encounter")]
    public Reference Encounter { get; set; }
    /// <summary>
    /// Business identifier which may be used by other parties to reference or identify the prescription.
    /// </summary>
    [JsonProperty("identifier")]
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A link to a resource representing the person to whom the vision products will be supplied.
    /// </summary>
    [JsonProperty("patient")]
    public Reference Patient { get; set; }
    /// <summary>
    /// The healthcare professional responsible for authorizing the prescription.
    /// </summary>
    [JsonProperty("prescriber")]
    public Reference Prescriber { get; set; }
    /// <summary>
    /// Can be the reason or the indication for writing the prescription.
    /// </summary>
    [JsonProperty("reasonCodeableConcept")]
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// Can be the reason or the indication for writing the prescription.
    /// </summary>
    [JsonProperty("reasonReference")]
    public Reference ReasonReference { get; set; }
  }
  /// <summary>
  /// Indicates whether the account is available to be used.
  /// </summary>
  public static class AccountStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/account-status"
    };
    public static readonly Coding Inactive = new Coding
    {
      Code = "inactive",
      Display = "Inactive",
      System = "http://hl7.org/fhir/account-status"
    };
  };
  /// <summary>
  /// List of allowable action which this resource can request.
  /// </summary>
  public static class ActionlistValueSet
  {
    public static readonly Coding CancelReverseOrNullify = new Coding
    {
      Code = "cancel",
      Display = "Cancel, Reverse or Nullify",
      System = "http://hl7.org/fhir/actionlist"
    };
    public static readonly Coding Poll = new Coding
    {
      Code = "poll",
      Display = "Poll",
      System = "http://hl7.org/fhir/actionlist"
    };
    public static readonly Coding ReProcess = new Coding
    {
      Code = "reprocess",
      Display = "Re-Process",
      System = "http://hl7.org/fhir/actionlist"
    };
    public static readonly Coding StatusCheck = new Coding
    {
      Code = "status",
      Display = "Status Check",
      System = "http://hl7.org/fhir/actionlist"
    };
  };
  /// <summary>
  /// The type of an address (physical / postal)
  /// 
  /// The type of an address (physical / postal).
  /// </summary>
  public static class AddressTypeValueSet
  {
    public static readonly Coding PostalAndPhysical = new Coding
    {
      Code = "both",
      Display = "Postal & Physical",
      System = "http://hl7.org/fhir/address-type"
    };
    public static readonly Coding Physical = new Coding
    {
      Code = "physical",
      Display = "Physical",
      System = "http://hl7.org/fhir/address-type"
    };
    public static readonly Coding Postal = new Coding
    {
      Code = "postal",
      Display = "Postal",
      System = "http://hl7.org/fhir/address-type"
    };
  };
  /// <summary>
  /// The use of an address
  /// 
  /// The use of an address (home / work / etc.).
  /// </summary>
  public static class AddressUseValueSet
  {
    public static readonly Coding Home = new Coding
    {
      Code = "home",
      Display = "Home",
      System = "http://hl7.org/fhir/address-use"
    };
    public static readonly Coding OldIncorrect = new Coding
    {
      Code = "old",
      Display = "Old / Incorrect",
      System = "http://hl7.org/fhir/address-use"
    };
    public static readonly Coding Temporary = new Coding
    {
      Code = "temp",
      Display = "Temporary",
      System = "http://hl7.org/fhir/address-use"
    };
    public static readonly Coding Work = new Coding
    {
      Code = "work",
      Display = "Work",
      System = "http://hl7.org/fhir/address-use"
    };
  };
  /// <summary>
  /// The gender of a person used for administrative purposes.
  /// </summary>
  public static class AdministrativeGenderValueSet
  {
    public static readonly Coding Female = new Coding
    {
      Code = "female",
      Display = "Female",
      System = "http://hl7.org/fhir/administrative-gender"
    };
    public static readonly Coding Male = new Coding
    {
      Code = "male",
      Display = "Male",
      System = "http://hl7.org/fhir/administrative-gender"
    };
    public static readonly Coding Other = new Coding
    {
      Code = "other",
      Display = "Other",
      System = "http://hl7.org/fhir/administrative-gender"
    };
    public static readonly Coding Unknown = new Coding
    {
      Code = "unknown",
      Display = "Unknown",
      System = "http://hl7.org/fhir/administrative-gender"
    };
  };
  /// <summary>
  /// A valueSet of UCUM codes for representing age value units.
  /// </summary>
  public static class AgeUnitsValueSet
  {
    public static readonly Coding Year = new Coding
    {
      Code = "a",
      Display = "Year",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding Day = new Coding
    {
      Code = "d",
      Display = "Day",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding Hour = new Coding
    {
      Code = "h",
      Display = "Hour",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding Minute = new Coding
    {
      Code = "min",
      Display = "Minute",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding Month = new Coding
    {
      Code = "mo",
      Display = "Month",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding Week = new Coding
    {
      Code = "wk",
      Display = "Week",
      System = "http://unitsofmeasure.org"
    };
  };
  /// <summary>
  /// Category of an identified Substance.
  /// </summary>
  public static class AllergyIntoleranceCategoryValueSet
  {
    public static readonly Coding Environment = new Coding
    {
      Code = "environment",
      Display = "Environment",
      System = "http://hl7.org/fhir/allergy-intolerance-category"
    };
    public static readonly Coding Food = new Coding
    {
      Code = "food",
      Display = "Food",
      System = "http://hl7.org/fhir/allergy-intolerance-category"
    };
    public static readonly Coding Medication = new Coding
    {
      Code = "medication",
      Display = "Medication",
      System = "http://hl7.org/fhir/allergy-intolerance-category"
    };
    public static readonly Coding Other = new Coding
    {
      Code = "other",
      Display = "Other",
      System = "http://hl7.org/fhir/allergy-intolerance-category"
    };
  };
  /// <summary>
  /// Estimate of the potential clinical harm, or seriousness, of a reaction to an identified Substance.
  /// </summary>
  public static class AllergyIntoleranceCriticalityValueSet
  {
    public static readonly Coding HighRisk = new Coding
    {
      Code = "CRITH",
      Display = "High Risk",
      System = "http://hl7.org/fhir/allergy-intolerance-criticality"
    };
    public static readonly Coding LowRisk = new Coding
    {
      Code = "CRITL",
      Display = "Low Risk",
      System = "http://hl7.org/fhir/allergy-intolerance-criticality"
    };
    public static readonly Coding UnableToDetermine = new Coding
    {
      Code = "CRITU",
      Display = "Unable to determine",
      System = "http://hl7.org/fhir/allergy-intolerance-criticality"
    };
  };
  /// <summary>
  /// Assertion about certainty associated with a propensity, or potential risk, of a reaction to the identified Substance.
  /// </summary>
  public static class AllergyIntoleranceStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/allergy-intolerance-status"
    };
    public static readonly Coding Confirmed = new Coding
    {
      Code = "confirmed",
      Display = "Confirmed",
      System = "http://hl7.org/fhir/allergy-intolerance-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered In Error",
      System = "http://hl7.org/fhir/allergy-intolerance-status"
    };
    public static readonly Coding Inactive = new Coding
    {
      Code = "inactive",
      Display = "Inactive",
      System = "http://hl7.org/fhir/allergy-intolerance-status"
    };
    public static readonly Coding Refuted = new Coding
    {
      Code = "refuted",
      Display = "Refuted",
      System = "http://hl7.org/fhir/allergy-intolerance-status"
    };
    public static readonly Coding Resolved = new Coding
    {
      Code = "resolved",
      Display = "Resolved",
      System = "http://hl7.org/fhir/allergy-intolerance-status"
    };
    public static readonly Coding Unconfirmed = new Coding
    {
      Code = "unconfirmed",
      Display = "Unconfirmed",
      System = "http://hl7.org/fhir/allergy-intolerance-status"
    };
  };
  /// <summary>
  /// Identification of the underlying physiological mechanism for a Reaction Risk.
  /// </summary>
  public static class AllergyIntoleranceTypeValueSet
  {
    public static readonly Coding Allergy = new Coding
    {
      Code = "allergy",
      Display = "Allergy",
      System = "http://hl7.org/fhir/allergy-intolerance-type"
    };
    public static readonly Coding Intolerance = new Coding
    {
      Code = "intolerance",
      Display = "Intolerance",
      System = "http://hl7.org/fhir/allergy-intolerance-type"
    };
  };
  /// <summary>
  /// The expected format of an answer.
  /// </summary>
  public static class AnswerFormatValueSet
  {
    public static readonly Coding Attachment = new Coding
    {
      Code = "attachment",
      Display = "Attachment",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Boolean = new Coding
    {
      Code = "boolean",
      Display = "Boolean",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Choice = new Coding
    {
      Code = "choice",
      Display = "Choice",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Date = new Coding
    {
      Code = "date",
      Display = "Date",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding DateTime = new Coding
    {
      Code = "dateTime",
      Display = "Date Time",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Decimal = new Coding
    {
      Code = "decimal",
      Display = "Decimal",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Instant = new Coding
    {
      Code = "instant",
      Display = "Instant",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Integer = new Coding
    {
      Code = "integer",
      Display = "Integer",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding OpenChoice = new Coding
    {
      Code = "open-choice",
      Display = "Open Choice",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Quantity = new Coding
    {
      Code = "quantity",
      Display = "Quantity",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Reference = new Coding
    {
      Code = "reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding String = new Coding
    {
      Code = "string",
      Display = "String",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Text = new Coding
    {
      Code = "text",
      Display = "Text",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Time = new Coding
    {
      Code = "time",
      Display = "Time",
      System = "http://hl7.org/fhir/answer-format"
    };
    public static readonly Coding Url = new Coding
    {
      Code = "url",
      Display = "Url",
      System = "http://hl7.org/fhir/answer-format"
    };
  };
  /// <summary>
  /// The free/busy status of an appointment.
  /// </summary>
  public static class AppointmentstatusValueSet
  {
    public static readonly Coding Arrived = new Coding
    {
      Code = "arrived",
      Display = "Arrived",
      System = "http://hl7.org/fhir/appointmentstatus"
    };
    public static readonly Coding Booked = new Coding
    {
      Code = "booked",
      Display = "Booked",
      System = "http://hl7.org/fhir/appointmentstatus"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/appointmentstatus"
    };
    public static readonly Coding Fulfilled = new Coding
    {
      Code = "fulfilled",
      Display = "Fulfilled",
      System = "http://hl7.org/fhir/appointmentstatus"
    };
    public static readonly Coding NoShow = new Coding
    {
      Code = "noshow",
      Display = "No Show",
      System = "http://hl7.org/fhir/appointmentstatus"
    };
    public static readonly Coding Pending = new Coding
    {
      Code = "pending",
      Display = "Pending",
      System = "http://hl7.org/fhir/appointmentstatus"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/appointmentstatus"
    };
  };
  /// <summary>
  /// The type of direction to use for assertion.
  /// 
  /// The direction to use for assertions.
  /// </summary>
  public static class AssertDirectionCodesValueSet
  {
    public static readonly Coding Request = new Coding
    {
      Code = "request",
      Display = "request",
      System = "http://hl7.org/fhir/assert-direction-codes"
    };
    public static readonly Coding Response = new Coding
    {
      Code = "response",
      Display = "response",
      System = "http://hl7.org/fhir/assert-direction-codes"
    };
  };
  /// <summary>
  /// The type of operator to use for assertion.
  /// 
  /// The type of operator to use for assertions.
  /// </summary>
  public static class AssertOperatorCodesValueSet
  {
    public static readonly Coding Contains = new Coding
    {
      Code = "contains",
      Display = "contains",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding Empty = new Coding
    {
      Code = "empty",
      Display = "empty",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly new Coding Equals = new Coding
    {
      Code = "equals",
      Display = "equals",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding GreaterThan = new Coding
    {
      Code = "greaterThan",
      Display = "greaterThan",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding VALIn = new Coding
    {
      Code = "in",
      Display = "in",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding LessThan = new Coding
    {
      Code = "lessThan",
      Display = "lessThan",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding NotContains = new Coding
    {
      Code = "notContains",
      Display = "notContains",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding NotEmpty = new Coding
    {
      Code = "notEmpty",
      Display = "notEmpty",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding NotEquals = new Coding
    {
      Code = "notEquals",
      Display = "notEquals",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
    public static readonly Coding NotIn = new Coding
    {
      Code = "notIn",
      Display = "notIn",
      System = "http://hl7.org/fhir/assert-operator-codes"
    };
  };
  /// <summary>
  /// The type of response code to use for assertion.
  /// 
  /// The response code to expect in the response.
  /// </summary>
  public static class AssertResponseCodeTypesValueSet
  {
    public static readonly Coding Bad = new Coding
    {
      Code = "bad",
      Display = "bad",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding Conflict = new Coding
    {
      Code = "conflict",
      Display = "conflict",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding Created = new Coding
    {
      Code = "created",
      Display = "created",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding Forbidden = new Coding
    {
      Code = "forbidden",
      Display = "forbidden",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding Gone = new Coding
    {
      Code = "gone",
      Display = "gone",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding MethodNotAllowed = new Coding
    {
      Code = "methodNotAllowed",
      Display = "methodNotAllowed",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding NoContent = new Coding
    {
      Code = "noContent",
      Display = "noContent",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding NotFound = new Coding
    {
      Code = "notFound",
      Display = "notFound",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding NotModified = new Coding
    {
      Code = "notModified",
      Display = "notModified",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding Okay = new Coding
    {
      Code = "okay",
      Display = "okay",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding PreconditionFailed = new Coding
    {
      Code = "preconditionFailed",
      Display = "preconditionFailed",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
    public static readonly Coding Unprocessable = new Coding
    {
      Code = "unprocessable",
      Display = "unprocessable",
      System = "http://hl7.org/fhir/assert-response-code-types"
    };
  };
  /// <summary>
  /// Indicator for type of action performed during the event that generated the audit.
  /// </summary>
  public static class AuditEventActionValueSet
  {
    public static readonly Coding Create = new Coding
    {
      Code = "C",
      Display = "Create",
      System = "http://hl7.org/fhir/audit-event-action"
    };
    public static readonly Coding Delete = new Coding
    {
      Code = "D",
      Display = "Delete",
      System = "http://hl7.org/fhir/audit-event-action"
    };
    public static readonly Coding Execute = new Coding
    {
      Code = "E",
      Display = "Execute",
      System = "http://hl7.org/fhir/audit-event-action"
    };
    public static readonly Coding ReadViewPrint = new Coding
    {
      Code = "R",
      Display = "Read/View/Print",
      System = "http://hl7.org/fhir/audit-event-action"
    };
    public static readonly Coding Update = new Coding
    {
      Code = "U",
      Display = "Update",
      System = "http://hl7.org/fhir/audit-event-action"
    };
  };
  /// <summary>
  /// Indicates whether the event succeeded or failed
  /// </summary>
  public static class AuditEventOutcomeValueSet
  {
    public static readonly Coding Success = new Coding
    {
      Code = "0",
      Display = "Success",
      System = "http://hl7.org/fhir/audit-event-outcome"
    };
    public static readonly Coding MajorFailure = new Coding
    {
      Code = "12",
      Display = "Major failure",
      System = "http://hl7.org/fhir/audit-event-outcome"
    };
    public static readonly Coding MinorFailure = new Coding
    {
      Code = "4",
      Display = "Minor failure",
      System = "http://hl7.org/fhir/audit-event-outcome"
    };
    public static readonly Coding SeriousFailure = new Coding
    {
      Code = "8",
      Display = "Serious failure",
      System = "http://hl7.org/fhir/audit-event-outcome"
    };
  };
  /// <summary>
  /// Indication of the degree of conformance expectations associated with a binding.
  /// </summary>
  public static class BindingStrengthValueSet
  {
    public static readonly Coding Example = new Coding
    {
      Code = "example",
      Display = "Example",
      System = "http://hl7.org/fhir/binding-strength"
    };
    public static readonly Coding Extensible = new Coding
    {
      Code = "extensible",
      Display = "Extensible",
      System = "http://hl7.org/fhir/binding-strength"
    };
    public static readonly Coding Preferred = new Coding
    {
      Code = "preferred",
      Display = "Preferred",
      System = "http://hl7.org/fhir/binding-strength"
    };
    public static readonly Coding Required = new Coding
    {
      Code = "required",
      Display = "Required",
      System = "http://hl7.org/fhir/binding-strength"
    };
  };
  /// <summary>
  /// Indicates the purpose of a bundle - how it was intended to be used.
  /// </summary>
  public static class BundleTypeValueSet
  {
    public static readonly Coding Batch = new Coding
    {
      Code = "batch",
      Display = "Batch",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding BatchResponse = new Coding
    {
      Code = "batch-response",
      Display = "Batch Response",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding Collection = new Coding
    {
      Code = "collection",
      Display = "Collection",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding Document = new Coding
    {
      Code = "document",
      Display = "Document",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding HistoryList = new Coding
    {
      Code = "history",
      Display = "History List",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding Message = new Coding
    {
      Code = "message",
      Display = "Message",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding SearchResults = new Coding
    {
      Code = "searchset",
      Display = "Search Results",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding Transaction = new Coding
    {
      Code = "transaction",
      Display = "Transaction",
      System = "http://hl7.org/fhir/bundle-type"
    };
    public static readonly Coding TransactionResponse = new Coding
    {
      Code = "transaction-response",
      Display = "Transaction Response",
      System = "http://hl7.org/fhir/bundle-type"
    };
  };
  /// <summary>
  /// Indicates where the activity is at in its overall life cycle.
  /// </summary>
  public static class CarePlanActivityStatusValueSet
  {
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/care-plan-activity-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/care-plan-activity-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/care-plan-activity-status"
    };
    public static readonly Coding NotStarted = new Coding
    {
      Code = "not-started",
      Display = "Not Started",
      System = "http://hl7.org/fhir/care-plan-activity-status"
    };
    public static readonly Coding OnHold = new Coding
    {
      Code = "on-hold",
      Display = "On Hold",
      System = "http://hl7.org/fhir/care-plan-activity-status"
    };
    public static readonly Coding Scheduled = new Coding
    {
      Code = "scheduled",
      Display = "Scheduled",
      System = "http://hl7.org/fhir/care-plan-activity-status"
    };
  };
  /// <summary>
  /// Codes identifying the types of relationships between two plans.
  /// </summary>
  public static class CarePlanRelationshipValueSet
  {
    public static readonly Coding Fulfills = new Coding
    {
      Code = "fulfills",
      Display = "Fulfills",
      System = "http://hl7.org/fhir/care-plan-relationship"
    };
    public static readonly Coding Includes = new Coding
    {
      Code = "includes",
      Display = "Includes",
      System = "http://hl7.org/fhir/care-plan-relationship"
    };
    public static readonly Coding Replaces = new Coding
    {
      Code = "replaces",
      Display = "Replaces",
      System = "http://hl7.org/fhir/care-plan-relationship"
    };
  };
  /// <summary>
  /// Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
  /// </summary>
  public static class CarePlanStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/care-plan-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/care-plan-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/care-plan-status"
    };
    public static readonly Coding Pending = new Coding
    {
      Code = "draft",
      Display = "Pending",
      System = "http://hl7.org/fhir/care-plan-status"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/care-plan-status"
    };
  };
  /// <summary>
  /// The type or discipline-style of the claim.
  /// </summary>
  public static class ClaimTypeLinkValueSet
  {
    public static readonly Coding Institutional = new Coding
    {
      Code = "institutional",
      Display = "Institutional",
      System = "http://hl7.org/fhir/claim-type-link"
    };
    public static readonly Coding OralHealth = new Coding
    {
      Code = "oral",
      Display = "Oral Health",
      System = "http://hl7.org/fhir/claim-type-link"
    };
    public static readonly Coding Pharmacy = new Coding
    {
      Code = "pharmacy",
      Display = "Pharmacy",
      System = "http://hl7.org/fhir/claim-type-link"
    };
    public static readonly Coding Professional = new Coding
    {
      Code = "professional",
      Display = "Professional",
      System = "http://hl7.org/fhir/claim-type-link"
    };
    public static readonly Coding Vision = new Coding
    {
      Code = "vision",
      Display = "Vision",
      System = "http://hl7.org/fhir/claim-type-link"
    };
  };
  /// <summary>
  /// Complete, proposed, exploratory, other.
  /// </summary>
  public static class ClaimUseLinkValueSet
  {
    public static readonly Coding Complete = new Coding
    {
      Code = "complete",
      Display = "Complete",
      System = "http://hl7.org/fhir/claim-use-link"
    };
    public static readonly Coding Exploratory = new Coding
    {
      Code = "exploratory",
      Display = "Exploratory",
      System = "http://hl7.org/fhir/claim-use-link"
    };
    public static readonly Coding Other = new Coding
    {
      Code = "other",
      Display = "Other",
      System = "http://hl7.org/fhir/claim-use-link"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/claim-use-link"
    };
  };
  /// <summary>
  /// The workflow state of a clinical impression.
  /// </summary>
  public static class ClinicalImpressionStatusValueSet
  {
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/clinical-impression-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/clinical-impression-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In progress",
      System = "http://hl7.org/fhir/clinical-impression-status"
    };
  };
  /// <summary>
  /// The status of the communication.
  /// </summary>
  public static class CommunicationRequestStatusValueSet
  {
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Failed = new Coding
    {
      Code = "failed",
      Display = "Failed",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Received = new Coding
    {
      Code = "received",
      Display = "Received",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/communication-request-status"
    };
    public static readonly Coding Suspended = new Coding
    {
      Code = "suspended",
      Display = "Suspended",
      System = "http://hl7.org/fhir/communication-request-status"
    };
  };
  /// <summary>
  /// The status of the communication.
  /// </summary>
  public static class CommunicationStatusValueSet
  {
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/communication-status"
    };
    public static readonly Coding Failed = new Coding
    {
      Code = "failed",
      Display = "Failed",
      System = "http://hl7.org/fhir/communication-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/communication-status"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/communication-status"
    };
    public static readonly Coding Suspended = new Coding
    {
      Code = "suspended",
      Display = "Suspended",
      System = "http://hl7.org/fhir/communication-status"
    };
  };
  /// <summary>
  /// The way in which a person authenticated a composition.
  /// </summary>
  public static class CompositionAttestationModeValueSet
  {
    public static readonly Coding Legal = new Coding
    {
      Code = "legal",
      Display = "Legal",
      System = "http://hl7.org/fhir/composition-attestation-mode"
    };
    public static readonly Coding Official = new Coding
    {
      Code = "official",
      Display = "Official",
      System = "http://hl7.org/fhir/composition-attestation-mode"
    };
    public static readonly Coding Personal = new Coding
    {
      Code = "personal",
      Display = "Personal",
      System = "http://hl7.org/fhir/composition-attestation-mode"
    };
    public static readonly Coding Professional = new Coding
    {
      Code = "professional",
      Display = "Professional",
      System = "http://hl7.org/fhir/composition-attestation-mode"
    };
  };
  /// <summary>
  /// The workflow/clinical status of the composition.
  /// </summary>
  public static class CompositionStatusValueSet
  {
    public static readonly Coding Amended = new Coding
    {
      Code = "amended",
      Display = "Amended",
      System = "http://hl7.org/fhir/composition-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/composition-status"
    };
    public static readonly Coding Final = new Coding
    {
      Code = "final",
      Display = "Final",
      System = "http://hl7.org/fhir/composition-status"
    };
    public static readonly Coding Preliminary = new Coding
    {
      Code = "preliminary",
      Display = "Preliminary",
      System = "http://hl7.org/fhir/composition-status"
    };
  };
  /// <summary>
  /// The degree of equivalence between concepts.
  /// </summary>
  public static class ConceptMapEquivalenceValueSet
  {
    public static readonly Coding Disjoint = new Coding
    {
      Code = "disjoint",
      Display = "Disjoint",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Equal = new Coding
    {
      Code = "equal",
      Display = "Equal",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Equivalent = new Coding
    {
      Code = "equivalent",
      Display = "Equivalent",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Inexact = new Coding
    {
      Code = "inexact",
      Display = "Inexact",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Narrower = new Coding
    {
      Code = "narrower",
      Display = "Narrower",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Specializes = new Coding
    {
      Code = "specializes",
      Display = "Specializes",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Subsumes = new Coding
    {
      Code = "subsumes",
      Display = "Subsumes",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Unmatched = new Coding
    {
      Code = "unmatched",
      Display = "Unmatched",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    public static readonly Coding Wider = new Coding
    {
      Code = "wider",
      Display = "Wider",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
  };
  /// <summary>
  /// A code that indicates how the server supports conditional delete.
  /// </summary>
  public static class ConditionalDeleteStatusValueSet
  {
    public static readonly Coding MultipleDeletesSupported = new Coding
    {
      Code = "multiple",
      Display = "Multiple Deletes Supported",
      System = "http://hl7.org/fhir/conditional-delete-status"
    };
    public static readonly Coding NotSupported = new Coding
    {
      Code = "not-supported",
      Display = "Not Supported",
      System = "http://hl7.org/fhir/conditional-delete-status"
    };
    public static readonly Coding SingleDeletesSupported = new Coding
    {
      Code = "single",
      Display = "Single Deletes Supported",
      System = "http://hl7.org/fhir/conditional-delete-status"
    };
  };
  /// <summary>
  /// Preferred value set for Condition Clinical Status.
  /// </summary>
  public static class ConditionClinicalValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/condition-clinical"
    };
    public static readonly Coding Relapse = new Coding
    {
      Code = "relapse",
      Display = "Relapse",
      System = "http://hl7.org/fhir/condition-clinical"
    };
    public static readonly Coding Remission = new Coding
    {
      Code = "remission",
      Display = "Remission",
      System = "http://hl7.org/fhir/condition-clinical"
    };
    public static readonly Coding Resolved = new Coding
    {
      Code = "resolved",
      Display = "Resolved",
      System = "http://hl7.org/fhir/condition-clinical"
    };
  };
  /// <summary>
  /// The verification status to support or decline the clinical status of the condition or diagnosis.
  /// </summary>
  public static class ConditionVerStatusValueSet
  {
    public static readonly Coding Confirmed = new Coding
    {
      Code = "confirmed",
      Display = "Confirmed",
      System = "http://hl7.org/fhir/condition-ver-status"
    };
    public static readonly Coding Differential = new Coding
    {
      Code = "differential",
      Display = "Differential",
      System = "http://hl7.org/fhir/condition-ver-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered In Error",
      System = "http://hl7.org/fhir/condition-ver-status"
    };
    public static readonly Coding Provisional = new Coding
    {
      Code = "provisional",
      Display = "Provisional",
      System = "http://hl7.org/fhir/condition-ver-status"
    };
    public static readonly Coding Refuted = new Coding
    {
      Code = "refuted",
      Display = "Refuted",
      System = "http://hl7.org/fhir/condition-ver-status"
    };
    public static readonly Coding Unknown = new Coding
    {
      Code = "unknown",
      Display = "Unknown",
      System = "http://hl7.org/fhir/condition-ver-status"
    };
  };
  /// <summary>
  /// The lifecycle status of a Value Set or Concept Map.
  /// </summary>
  public static class ConformanceResourceStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/conformance-resource-status"
    };
    public static readonly Coding Draft = new Coding
    {
      Code = "draft",
      Display = "Draft",
      System = "http://hl7.org/fhir/conformance-resource-status"
    };
    public static readonly Coding Retired = new Coding
    {
      Code = "retired",
      Display = "Retired",
      System = "http://hl7.org/fhir/conformance-resource-status"
    };
  };
  /// <summary>
  /// How a conformance statement is intended to be used.
  /// </summary>
  public static class ConformanceStatementKindValueSet
  {
    public static readonly Coding Capability = new Coding
    {
      Code = "capability",
      Display = "Capability",
      System = "http://hl7.org/fhir/conformance-statement-kind"
    };
    public static readonly Coding Instance = new Coding
    {
      Code = "instance",
      Display = "Instance",
      System = "http://hl7.org/fhir/conformance-statement-kind"
    };
    public static readonly Coding Requirements = new Coding
    {
      Code = "requirements",
      Display = "Requirements",
      System = "http://hl7.org/fhir/conformance-statement-kind"
    };
  };
  /// <summary>
  /// SHALL applications comply with this constraint?
  /// </summary>
  public static class ConstraintSeverityValueSet
  {
    public static readonly Coding Error = new Coding
    {
      Code = "error",
      Display = "Error",
      System = "http://hl7.org/fhir/constraint-severity"
    };
    public static readonly Coding Warning = new Coding
    {
      Code = "warning",
      Display = "Warning",
      System = "http://hl7.org/fhir/constraint-severity"
    };
  };
  /// <summary>
  /// Telecommunications form for contact point
  /// </summary>
  public static class ContactPointSystemValueSet
  {
    public static readonly Coding Email = new Coding
    {
      Code = "email",
      Display = "Email",
      System = "http://hl7.org/fhir/contact-point-system"
    };
    public static readonly Coding Fax = new Coding
    {
      Code = "fax",
      Display = "Fax",
      System = "http://hl7.org/fhir/contact-point-system"
    };
    public static readonly Coding URL = new Coding
    {
      Code = "other",
      Display = "URL",
      System = "http://hl7.org/fhir/contact-point-system"
    };
    public static readonly Coding Pager = new Coding
    {
      Code = "pager",
      Display = "Pager",
      System = "http://hl7.org/fhir/contact-point-system"
    };
    public static readonly Coding Phone = new Coding
    {
      Code = "phone",
      Display = "Phone",
      System = "http://hl7.org/fhir/contact-point-system"
    };
  };
  /// <summary>
  /// Use of contact point
  /// </summary>
  public static class ContactPointUseValueSet
  {
    public static readonly Coding Home = new Coding
    {
      Code = "home",
      Display = "Home",
      System = "http://hl7.org/fhir/contact-point-use"
    };
    public static readonly Coding Mobile = new Coding
    {
      Code = "mobile",
      Display = "Mobile",
      System = "http://hl7.org/fhir/contact-point-use"
    };
    public static readonly Coding Old = new Coding
    {
      Code = "old",
      Display = "Old",
      System = "http://hl7.org/fhir/contact-point-use"
    };
    public static readonly Coding Temp = new Coding
    {
      Code = "temp",
      Display = "Temp",
      System = "http://hl7.org/fhir/contact-point-use"
    };
    public static readonly Coding Work = new Coding
    {
      Code = "work",
      Display = "Work",
      System = "http://hl7.org/fhir/contact-point-use"
    };
  };
  /// <summary>
  /// The content or mime type.
  /// 
  /// The content type or mime type to be specified in Accept or Content-Type header.
  /// </summary>
  public static class ContentTypeValueSet
  {
    public static readonly Coding Json = new Coding
    {
      Code = "json",
      Display = "json",
      System = "http://hl7.org/fhir/content-type"
    };
    public static readonly Coding Xml = new Coding
    {
      Code = "xml",
      Display = "xml",
      System = "http://hl7.org/fhir/content-type"
    };
  };
  /// <summary>
  /// Used to specify why the normally expected content of the data element is missing.
  /// </summary>
  public static class DataAbsentReasonValueSet
  {
    public static readonly Coding Asked = new Coding
    {
      Code = "asked",
      Display = "Asked",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding AsText = new Coding
    {
      Code = "astext",
      Display = "As Text",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding Error = new Coding
    {
      Code = "error",
      Display = "Error",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding Masked = new Coding
    {
      Code = "masked",
      Display = "Masked",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding NotANumber = new Coding
    {
      Code = "NaN",
      Display = "Not a Number",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding NotAsked = new Coding
    {
      Code = "not-asked",
      Display = "Not Asked",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding Temp = new Coding
    {
      Code = "temp",
      Display = "Temp",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding Unknown = new Coding
    {
      Code = "unknown",
      Display = "Unknown",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
    public static readonly Coding Unsupported = new Coding
    {
      Code = "unsupported",
      Display = "Unsupported",
      System = "http://hl7.org/fhir/data-absent-reason"
    };
  };
  /// <summary>
  /// Indicates the degree of precision of the data element definition.
  /// </summary>
  public static class DataelementStringencyValueSet
  {
    public static readonly Coding Comparable = new Coding
    {
      Code = "comparable",
      Display = "Comparable",
      System = "http://hl7.org/fhir/dataelement-stringency"
    };
    public static readonly Coding Convertable = new Coding
    {
      Code = "convertable",
      Display = "Convertable",
      System = "http://hl7.org/fhir/dataelement-stringency"
    };
    public static readonly Coding Equivalent = new Coding
    {
      Code = "equivalent",
      Display = "Equivalent",
      System = "http://hl7.org/fhir/dataelement-stringency"
    };
    public static readonly Coding Flexible = new Coding
    {
      Code = "flexible",
      Display = "Flexible",
      System = "http://hl7.org/fhir/dataelement-stringency"
    };
    public static readonly Coding FullySpecified = new Coding
    {
      Code = "fully-specified",
      Display = "Fully Specified",
      System = "http://hl7.org/fhir/dataelement-stringency"
    };
    public static readonly Coding Scaleable = new Coding
    {
      Code = "scaleable",
      Display = "Scaleable",
      System = "http://hl7.org/fhir/dataelement-stringency"
    };
  };
  /// <summary>
  /// The type of an element - one of the FHIR data types.
  /// </summary>
  public static class DataTypesValueSet
  {
    public static readonly Coding Address = new Coding
    {
      Code = "Address",
      Display = "Address",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Age = new Coding
    {
      Code = "Age",
      Display = "Age",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Annotation = new Coding
    {
      Code = "Annotation",
      Display = "Annotation",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Attachment = new Coding
    {
      Code = "Attachment",
      Display = "Attachment",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding BackboneElement = new Coding
    {
      Code = "BackboneElement",
      Display = "BackboneElement",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Base64Binary = new Coding
    {
      Code = "base64Binary",
      Display = "base64Binary",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Boolean = new Coding
    {
      Code = "boolean",
      Display = "boolean",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Code = new Coding
    {
      Code = "code",
      Display = "code",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding CodeableConcept = new Coding
    {
      Code = "CodeableConcept",
      Display = "CodeableConcept",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Coding = new Coding
    {
      Code = "Coding",
      Display = "Coding",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ContactPoint = new Coding
    {
      Code = "ContactPoint",
      Display = "ContactPoint",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Count = new Coding
    {
      Code = "Count",
      Display = "Count",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Date = new Coding
    {
      Code = "date",
      Display = "date",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DateTime = new Coding
    {
      Code = "dateTime",
      Display = "dateTime",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding VALDecimal = new Coding
    {
      Code = "decimal",
      Display = "decimal",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Distance = new Coding
    {
      Code = "Distance",
      Display = "Distance",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Duration = new Coding
    {
      Code = "Duration",
      Display = "Duration",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Element = new Coding
    {
      Code = "Element",
      Display = "Element",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ElementDefinition = new Coding
    {
      Code = "ElementDefinition",
      Display = "ElementDefinition",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Extension = new Coding
    {
      Code = "Extension",
      Display = "Extension",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding HumanName = new Coding
    {
      Code = "HumanName",
      Display = "HumanName",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Id = new Coding
    {
      Code = "id",
      Display = "id",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Identifier = new Coding
    {
      Code = "Identifier",
      Display = "Identifier",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Instant = new Coding
    {
      Code = "instant",
      Display = "instant",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Integer = new Coding
    {
      Code = "integer",
      Display = "integer",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Markdown = new Coding
    {
      Code = "markdown",
      Display = "markdown",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Meta = new Coding
    {
      Code = "Meta",
      Display = "Meta",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Money = new Coding
    {
      Code = "Money",
      Display = "Money",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Narrative = new Coding
    {
      Code = "Narrative",
      Display = "Narrative",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Oid = new Coding
    {
      Code = "oid",
      Display = "oid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Period = new Coding
    {
      Code = "Period",
      Display = "Period",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding PositiveInt = new Coding
    {
      Code = "positiveInt",
      Display = "positiveInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Quantity = new Coding
    {
      Code = "Quantity",
      Display = "Quantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Range = new Coding
    {
      Code = "Range",
      Display = "Range",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Ratio = new Coding
    {
      Code = "Ratio",
      Display = "Ratio",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Reference = new Coding
    {
      Code = "Reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding SampledData = new Coding
    {
      Code = "SampledData",
      Display = "SampledData",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Signature = new Coding
    {
      Code = "Signature",
      Display = "Signature",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding SimpleQuantity = new Coding
    {
      Code = "SimpleQuantity",
      Display = "SimpleQuantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding VALString = new Coding
    {
      Code = "string",
      Display = "string",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Time = new Coding
    {
      Code = "time",
      Display = "time",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Timing = new Coding
    {
      Code = "Timing",
      Display = "Timing",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding UnsignedInt = new Coding
    {
      Code = "unsignedInt",
      Display = "unsignedInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Uri = new Coding
    {
      Code = "uri",
      Display = "uri",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Uuid = new Coding
    {
      Code = "uuid",
      Display = "uuid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding XHTML = new Coding
    {
      Code = "xhtml",
      Display = "XHTML",
      System = "http://hl7.org/fhir/data-types"
    };
  };
  /// <summary>
  /// The days of the week.
  /// </summary>
  public static class DaysOfWeekValueSet
  {
    public static readonly Coding Friday = new Coding
    {
      Code = "fri",
      Display = "Friday",
      System = "http://hl7.org/fhir/days-of-week"
    };
    public static readonly Coding Monday = new Coding
    {
      Code = "mon",
      Display = "Monday",
      System = "http://hl7.org/fhir/days-of-week"
    };
    public static readonly Coding Saturday = new Coding
    {
      Code = "sat",
      Display = "Saturday",
      System = "http://hl7.org/fhir/days-of-week"
    };
    public static readonly Coding Sunday = new Coding
    {
      Code = "sun",
      Display = "Sunday",
      System = "http://hl7.org/fhir/days-of-week"
    };
    public static readonly Coding Thursday = new Coding
    {
      Code = "thu",
      Display = "Thursday",
      System = "http://hl7.org/fhir/days-of-week"
    };
    public static readonly Coding Tuesday = new Coding
    {
      Code = "tue",
      Display = "Tuesday",
      System = "http://hl7.org/fhir/days-of-week"
    };
    public static readonly Coding Wednesday = new Coding
    {
      Code = "wed",
      Display = "Wednesday",
      System = "http://hl7.org/fhir/days-of-week"
    };
  };
  /// <summary>
  /// Either a resource or a data type.
  /// </summary>
  public static class DefinedTypesValueSet
  {
    public static readonly Coding Account_resource_types = new Coding
    {
      Code = "Account",
      Display = "Account",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Account_resource_types_2 = new Coding
    {
      Code = "Account",
      Display = "Account",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Address_data_types = new Coding
    {
      Code = "Address",
      Display = "Address",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Address_data_types_2 = new Coding
    {
      Code = "Address",
      Display = "Address",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Age_data_types = new Coding
    {
      Code = "Age",
      Display = "Age",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Age_data_types_2 = new Coding
    {
      Code = "Age",
      Display = "Age",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding AllergyIntolerance_resource_types = new Coding
    {
      Code = "AllergyIntolerance",
      Display = "AllergyIntolerance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AllergyIntolerance_resource_types_2 = new Coding
    {
      Code = "AllergyIntolerance",
      Display = "AllergyIntolerance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Annotation_data_types = new Coding
    {
      Code = "Annotation",
      Display = "Annotation",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Annotation_data_types_2 = new Coding
    {
      Code = "Annotation",
      Display = "Annotation",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Appointment_resource_types = new Coding
    {
      Code = "Appointment",
      Display = "Appointment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Appointment_resource_types_2 = new Coding
    {
      Code = "Appointment",
      Display = "Appointment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AppointmentResponse_resource_types = new Coding
    {
      Code = "AppointmentResponse",
      Display = "AppointmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AppointmentResponse_resource_types_2 = new Coding
    {
      Code = "AppointmentResponse",
      Display = "AppointmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Attachment_data_types = new Coding
    {
      Code = "Attachment",
      Display = "Attachment",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Attachment_data_types_2 = new Coding
    {
      Code = "Attachment",
      Display = "Attachment",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding AuditEvent_resource_types = new Coding
    {
      Code = "AuditEvent",
      Display = "AuditEvent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AuditEvent_resource_types_2 = new Coding
    {
      Code = "AuditEvent",
      Display = "AuditEvent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding BackboneElement_data_types = new Coding
    {
      Code = "BackboneElement",
      Display = "BackboneElement",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding BackboneElement_data_types_2 = new Coding
    {
      Code = "BackboneElement",
      Display = "BackboneElement",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Base64Binary_data_types = new Coding
    {
      Code = "base64Binary",
      Display = "base64Binary",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Base64Binary_data_types_2 = new Coding
    {
      Code = "base64Binary",
      Display = "base64Binary",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Basic_resource_types = new Coding
    {
      Code = "Basic",
      Display = "Basic",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Basic_resource_types_2 = new Coding
    {
      Code = "Basic",
      Display = "Basic",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Binary_resource_types = new Coding
    {
      Code = "Binary",
      Display = "Binary",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Binary_resource_types_2 = new Coding
    {
      Code = "Binary",
      Display = "Binary",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding BodySite_resource_types = new Coding
    {
      Code = "BodySite",
      Display = "BodySite",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding BodySite_resource_types_2 = new Coding
    {
      Code = "BodySite",
      Display = "BodySite",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Boolean_data_types = new Coding
    {
      Code = "boolean",
      Display = "boolean",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Boolean_data_types_2 = new Coding
    {
      Code = "boolean",
      Display = "boolean",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Bundle_resource_types = new Coding
    {
      Code = "Bundle",
      Display = "Bundle",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Bundle_resource_types_2 = new Coding
    {
      Code = "Bundle",
      Display = "Bundle",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CarePlan_resource_types = new Coding
    {
      Code = "CarePlan",
      Display = "CarePlan",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CarePlan_resource_types_2 = new Coding
    {
      Code = "CarePlan",
      Display = "CarePlan",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Claim_resource_types = new Coding
    {
      Code = "Claim",
      Display = "Claim",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Claim_resource_types_2 = new Coding
    {
      Code = "Claim",
      Display = "Claim",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClaimResponse_resource_types = new Coding
    {
      Code = "ClaimResponse",
      Display = "ClaimResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClaimResponse_resource_types_2 = new Coding
    {
      Code = "ClaimResponse",
      Display = "ClaimResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClinicalImpression_resource_types = new Coding
    {
      Code = "ClinicalImpression",
      Display = "ClinicalImpression",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClinicalImpression_resource_types_2 = new Coding
    {
      Code = "ClinicalImpression",
      Display = "ClinicalImpression",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Code_data_types = new Coding
    {
      Code = "code",
      Display = "code",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Code_data_types_2 = new Coding
    {
      Code = "code",
      Display = "code",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding CodeableConcept_data_types = new Coding
    {
      Code = "CodeableConcept",
      Display = "CodeableConcept",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding CodeableConcept_data_types_2 = new Coding
    {
      Code = "CodeableConcept",
      Display = "CodeableConcept",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Coding_data_types = new Coding
    {
      Code = "Coding",
      Display = "Coding",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Coding_data_types_2 = new Coding
    {
      Code = "Coding",
      Display = "Coding",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Communication_resource_types = new Coding
    {
      Code = "Communication",
      Display = "Communication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Communication_resource_types_2 = new Coding
    {
      Code = "Communication",
      Display = "Communication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CommunicationRequest_resource_types = new Coding
    {
      Code = "CommunicationRequest",
      Display = "CommunicationRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CommunicationRequest_resource_types_2 = new Coding
    {
      Code = "CommunicationRequest",
      Display = "CommunicationRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Composition_resource_types = new Coding
    {
      Code = "Composition",
      Display = "Composition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Composition_resource_types_2 = new Coding
    {
      Code = "Composition",
      Display = "Composition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ConceptMap_resource_types = new Coding
    {
      Code = "ConceptMap",
      Display = "ConceptMap",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ConceptMap_resource_types_2 = new Coding
    {
      Code = "ConceptMap",
      Display = "ConceptMap",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Condition_resource_types = new Coding
    {
      Code = "Condition",
      Display = "Condition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Condition_resource_types_2 = new Coding
    {
      Code = "Condition",
      Display = "Condition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Conformance_resource_types = new Coding
    {
      Code = "Conformance",
      Display = "Conformance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Conformance_resource_types_2 = new Coding
    {
      Code = "Conformance",
      Display = "Conformance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ContactPoint_data_types = new Coding
    {
      Code = "ContactPoint",
      Display = "ContactPoint",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ContactPoint_data_types_2 = new Coding
    {
      Code = "ContactPoint",
      Display = "ContactPoint",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Contract_resource_types = new Coding
    {
      Code = "Contract",
      Display = "Contract",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Contract_resource_types_2 = new Coding
    {
      Code = "Contract",
      Display = "Contract",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Count_data_types = new Coding
    {
      Code = "Count",
      Display = "Count",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Count_data_types_2 = new Coding
    {
      Code = "Count",
      Display = "Count",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Coverage_resource_types = new Coding
    {
      Code = "Coverage",
      Display = "Coverage",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Coverage_resource_types_2 = new Coding
    {
      Code = "Coverage",
      Display = "Coverage",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DataElement_resource_types = new Coding
    {
      Code = "DataElement",
      Display = "DataElement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DataElement_resource_types_2 = new Coding
    {
      Code = "DataElement",
      Display = "DataElement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Date_data_types = new Coding
    {
      Code = "date",
      Display = "date",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Date_data_types_2 = new Coding
    {
      Code = "date",
      Display = "date",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DateTime_data_types = new Coding
    {
      Code = "dateTime",
      Display = "dateTime",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DateTime_data_types_2 = new Coding
    {
      Code = "dateTime",
      Display = "dateTime",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding VALDecimal_data_types = new Coding
    {
      Code = "decimal",
      Display = "decimal",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding VALDecimal_data_types_2 = new Coding
    {
      Code = "decimal",
      Display = "decimal",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DetectedIssue_resource_types = new Coding
    {
      Code = "DetectedIssue",
      Display = "DetectedIssue",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DetectedIssue_resource_types_2 = new Coding
    {
      Code = "DetectedIssue",
      Display = "DetectedIssue",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Device_resource_types = new Coding
    {
      Code = "Device",
      Display = "Device",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Device_resource_types_2 = new Coding
    {
      Code = "Device",
      Display = "Device",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceComponent_resource_types = new Coding
    {
      Code = "DeviceComponent",
      Display = "DeviceComponent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceComponent_resource_types_2 = new Coding
    {
      Code = "DeviceComponent",
      Display = "DeviceComponent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceMetric_resource_types = new Coding
    {
      Code = "DeviceMetric",
      Display = "DeviceMetric",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceMetric_resource_types_2 = new Coding
    {
      Code = "DeviceMetric",
      Display = "DeviceMetric",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseRequest_resource_types = new Coding
    {
      Code = "DeviceUseRequest",
      Display = "DeviceUseRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseRequest_resource_types_2 = new Coding
    {
      Code = "DeviceUseRequest",
      Display = "DeviceUseRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseStatement_resource_types = new Coding
    {
      Code = "DeviceUseStatement",
      Display = "DeviceUseStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseStatement_resource_types_2 = new Coding
    {
      Code = "DeviceUseStatement",
      Display = "DeviceUseStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticOrder_resource_types = new Coding
    {
      Code = "DiagnosticOrder",
      Display = "DiagnosticOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticOrder_resource_types_2 = new Coding
    {
      Code = "DiagnosticOrder",
      Display = "DiagnosticOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticReport_resource_types = new Coding
    {
      Code = "DiagnosticReport",
      Display = "DiagnosticReport",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticReport_resource_types_2 = new Coding
    {
      Code = "DiagnosticReport",
      Display = "DiagnosticReport",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Distance_data_types = new Coding
    {
      Code = "Distance",
      Display = "Distance",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Distance_data_types_2 = new Coding
    {
      Code = "Distance",
      Display = "Distance",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DocumentManifest_resource_types = new Coding
    {
      Code = "DocumentManifest",
      Display = "DocumentManifest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DocumentManifest_resource_types_2 = new Coding
    {
      Code = "DocumentManifest",
      Display = "DocumentManifest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DocumentReference_resource_types = new Coding
    {
      Code = "DocumentReference",
      Display = "DocumentReference",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DocumentReference_resource_types_2 = new Coding
    {
      Code = "DocumentReference",
      Display = "DocumentReference",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DomainResource_resource_types = new Coding
    {
      Code = "DomainResource",
      Display = "DomainResource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DomainResource_resource_types_2 = new Coding
    {
      Code = "DomainResource",
      Display = "DomainResource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Duration_data_types = new Coding
    {
      Code = "Duration",
      Display = "Duration",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Duration_data_types_2 = new Coding
    {
      Code = "Duration",
      Display = "Duration",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Element_data_types = new Coding
    {
      Code = "Element",
      Display = "Element",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Element_data_types_2 = new Coding
    {
      Code = "Element",
      Display = "Element",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ElementDefinition_data_types = new Coding
    {
      Code = "ElementDefinition",
      Display = "ElementDefinition",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ElementDefinition_data_types_2 = new Coding
    {
      Code = "ElementDefinition",
      Display = "ElementDefinition",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding EligibilityRequest_resource_types = new Coding
    {
      Code = "EligibilityRequest",
      Display = "EligibilityRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EligibilityRequest_resource_types_2 = new Coding
    {
      Code = "EligibilityRequest",
      Display = "EligibilityRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EligibilityResponse_resource_types = new Coding
    {
      Code = "EligibilityResponse",
      Display = "EligibilityResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EligibilityResponse_resource_types_2 = new Coding
    {
      Code = "EligibilityResponse",
      Display = "EligibilityResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Encounter_resource_types = new Coding
    {
      Code = "Encounter",
      Display = "Encounter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Encounter_resource_types_2 = new Coding
    {
      Code = "Encounter",
      Display = "Encounter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentRequest_resource_types = new Coding
    {
      Code = "EnrollmentRequest",
      Display = "EnrollmentRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentRequest_resource_types_2 = new Coding
    {
      Code = "EnrollmentRequest",
      Display = "EnrollmentRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentResponse_resource_types = new Coding
    {
      Code = "EnrollmentResponse",
      Display = "EnrollmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentResponse_resource_types_2 = new Coding
    {
      Code = "EnrollmentResponse",
      Display = "EnrollmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EpisodeOfCare_resource_types = new Coding
    {
      Code = "EpisodeOfCare",
      Display = "EpisodeOfCare",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EpisodeOfCare_resource_types_2 = new Coding
    {
      Code = "EpisodeOfCare",
      Display = "EpisodeOfCare",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ExplanationOfBenefit_resource_types = new Coding
    {
      Code = "ExplanationOfBenefit",
      Display = "ExplanationOfBenefit",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ExplanationOfBenefit_resource_types_2 = new Coding
    {
      Code = "ExplanationOfBenefit",
      Display = "ExplanationOfBenefit",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Extension_data_types = new Coding
    {
      Code = "Extension",
      Display = "Extension",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Extension_data_types_2 = new Coding
    {
      Code = "Extension",
      Display = "Extension",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding FamilyMemberHistory_resource_types = new Coding
    {
      Code = "FamilyMemberHistory",
      Display = "FamilyMemberHistory",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding FamilyMemberHistory_resource_types_2 = new Coding
    {
      Code = "FamilyMemberHistory",
      Display = "FamilyMemberHistory",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Flag_resource_types = new Coding
    {
      Code = "Flag",
      Display = "Flag",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Flag_resource_types_2 = new Coding
    {
      Code = "Flag",
      Display = "Flag",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Goal_resource_types = new Coding
    {
      Code = "Goal",
      Display = "Goal",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Goal_resource_types_2 = new Coding
    {
      Code = "Goal",
      Display = "Goal",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Group_resource_types = new Coding
    {
      Code = "Group",
      Display = "Group",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Group_resource_types_2 = new Coding
    {
      Code = "Group",
      Display = "Group",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding HealthcareService_resource_types = new Coding
    {
      Code = "HealthcareService",
      Display = "HealthcareService",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding HealthcareService_resource_types_2 = new Coding
    {
      Code = "HealthcareService",
      Display = "HealthcareService",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding HumanName_data_types = new Coding
    {
      Code = "HumanName",
      Display = "HumanName",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding HumanName_data_types_2 = new Coding
    {
      Code = "HumanName",
      Display = "HumanName",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Id_data_types = new Coding
    {
      Code = "id",
      Display = "id",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Id_data_types_2 = new Coding
    {
      Code = "id",
      Display = "id",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Identifier_data_types = new Coding
    {
      Code = "Identifier",
      Display = "Identifier",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Identifier_data_types_2 = new Coding
    {
      Code = "Identifier",
      Display = "Identifier",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ImagingObjectSelection_resource_types = new Coding
    {
      Code = "ImagingObjectSelection",
      Display = "ImagingObjectSelection",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImagingObjectSelection_resource_types_2 = new Coding
    {
      Code = "ImagingObjectSelection",
      Display = "ImagingObjectSelection",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImagingStudy_resource_types = new Coding
    {
      Code = "ImagingStudy",
      Display = "ImagingStudy",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImagingStudy_resource_types_2 = new Coding
    {
      Code = "ImagingStudy",
      Display = "ImagingStudy",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Immunization_resource_types = new Coding
    {
      Code = "Immunization",
      Display = "Immunization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Immunization_resource_types_2 = new Coding
    {
      Code = "Immunization",
      Display = "Immunization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImmunizationRecommendation_resource_types = new Coding
    {
      Code = "ImmunizationRecommendation",
      Display = "ImmunizationRecommendation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImmunizationRecommendation_resource_types_2 = new Coding
    {
      Code = "ImmunizationRecommendation",
      Display = "ImmunizationRecommendation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImplementationGuide_resource_types = new Coding
    {
      Code = "ImplementationGuide",
      Display = "ImplementationGuide",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImplementationGuide_resource_types_2 = new Coding
    {
      Code = "ImplementationGuide",
      Display = "ImplementationGuide",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Instant_data_types = new Coding
    {
      Code = "instant",
      Display = "instant",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Instant_data_types_2 = new Coding
    {
      Code = "instant",
      Display = "instant",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Integer_data_types = new Coding
    {
      Code = "integer",
      Display = "integer",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Integer_data_types_2 = new Coding
    {
      Code = "integer",
      Display = "integer",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding List_resource_types = new Coding
    {
      Code = "List",
      Display = "List",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding List_resource_types_2 = new Coding
    {
      Code = "List",
      Display = "List",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Location_resource_types = new Coding
    {
      Code = "Location",
      Display = "Location",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Location_resource_types_2 = new Coding
    {
      Code = "Location",
      Display = "Location",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Markdown_data_types = new Coding
    {
      Code = "markdown",
      Display = "markdown",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Markdown_data_types_2 = new Coding
    {
      Code = "markdown",
      Display = "markdown",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Media_resource_types = new Coding
    {
      Code = "Media",
      Display = "Media",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Media_resource_types_2 = new Coding
    {
      Code = "Media",
      Display = "Media",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Medication_resource_types = new Coding
    {
      Code = "Medication",
      Display = "Medication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Medication_resource_types_2 = new Coding
    {
      Code = "Medication",
      Display = "Medication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationAdministration_resource_types = new Coding
    {
      Code = "MedicationAdministration",
      Display = "MedicationAdministration",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationAdministration_resource_types_2 = new Coding
    {
      Code = "MedicationAdministration",
      Display = "MedicationAdministration",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationDispense_resource_types = new Coding
    {
      Code = "MedicationDispense",
      Display = "MedicationDispense",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationDispense_resource_types_2 = new Coding
    {
      Code = "MedicationDispense",
      Display = "MedicationDispense",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationOrder_resource_types = new Coding
    {
      Code = "MedicationOrder",
      Display = "MedicationOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationOrder_resource_types_2 = new Coding
    {
      Code = "MedicationOrder",
      Display = "MedicationOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationStatement_resource_types = new Coding
    {
      Code = "MedicationStatement",
      Display = "MedicationStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationStatement_resource_types_2 = new Coding
    {
      Code = "MedicationStatement",
      Display = "MedicationStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MessageHeader_resource_types = new Coding
    {
      Code = "MessageHeader",
      Display = "MessageHeader",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MessageHeader_resource_types_2 = new Coding
    {
      Code = "MessageHeader",
      Display = "MessageHeader",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Meta_data_types = new Coding
    {
      Code = "Meta",
      Display = "Meta",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Meta_data_types_2 = new Coding
    {
      Code = "Meta",
      Display = "Meta",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Money_data_types = new Coding
    {
      Code = "Money",
      Display = "Money",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Money_data_types_2 = new Coding
    {
      Code = "Money",
      Display = "Money",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding NamingSystem_resource_types = new Coding
    {
      Code = "NamingSystem",
      Display = "NamingSystem",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding NamingSystem_resource_types_2 = new Coding
    {
      Code = "NamingSystem",
      Display = "NamingSystem",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Narrative_data_types = new Coding
    {
      Code = "Narrative",
      Display = "Narrative",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Narrative_data_types_2 = new Coding
    {
      Code = "Narrative",
      Display = "Narrative",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding NutritionOrder_resource_types = new Coding
    {
      Code = "NutritionOrder",
      Display = "NutritionOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding NutritionOrder_resource_types_2 = new Coding
    {
      Code = "NutritionOrder",
      Display = "NutritionOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Observation_resource_types = new Coding
    {
      Code = "Observation",
      Display = "Observation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Observation_resource_types_2 = new Coding
    {
      Code = "Observation",
      Display = "Observation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Oid_data_types = new Coding
    {
      Code = "oid",
      Display = "oid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Oid_data_types_2 = new Coding
    {
      Code = "oid",
      Display = "oid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding OperationDefinition_resource_types = new Coding
    {
      Code = "OperationDefinition",
      Display = "OperationDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OperationDefinition_resource_types_2 = new Coding
    {
      Code = "OperationDefinition",
      Display = "OperationDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OperationOutcome_resource_types = new Coding
    {
      Code = "OperationOutcome",
      Display = "OperationOutcome",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OperationOutcome_resource_types_2 = new Coding
    {
      Code = "OperationOutcome",
      Display = "OperationOutcome",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Order_resource_types = new Coding
    {
      Code = "Order",
      Display = "Order",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Order_resource_types_2 = new Coding
    {
      Code = "Order",
      Display = "Order",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OrderResponse_resource_types = new Coding
    {
      Code = "OrderResponse",
      Display = "OrderResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OrderResponse_resource_types_2 = new Coding
    {
      Code = "OrderResponse",
      Display = "OrderResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Organization_resource_types = new Coding
    {
      Code = "Organization",
      Display = "Organization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Organization_resource_types_2 = new Coding
    {
      Code = "Organization",
      Display = "Organization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Parameters_resource_types = new Coding
    {
      Code = "Parameters",
      Display = "Parameters",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Parameters_resource_types_2 = new Coding
    {
      Code = "Parameters",
      Display = "Parameters",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Patient_resource_types = new Coding
    {
      Code = "Patient",
      Display = "Patient",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Patient_resource_types_2 = new Coding
    {
      Code = "Patient",
      Display = "Patient",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentNotice_resource_types = new Coding
    {
      Code = "PaymentNotice",
      Display = "PaymentNotice",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentNotice_resource_types_2 = new Coding
    {
      Code = "PaymentNotice",
      Display = "PaymentNotice",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentReconciliation_resource_types = new Coding
    {
      Code = "PaymentReconciliation",
      Display = "PaymentReconciliation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentReconciliation_resource_types_2 = new Coding
    {
      Code = "PaymentReconciliation",
      Display = "PaymentReconciliation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Period_data_types = new Coding
    {
      Code = "Period",
      Display = "Period",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Period_data_types_2 = new Coding
    {
      Code = "Period",
      Display = "Period",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Person_resource_types = new Coding
    {
      Code = "Person",
      Display = "Person",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Person_resource_types_2 = new Coding
    {
      Code = "Person",
      Display = "Person",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PositiveInt_data_types = new Coding
    {
      Code = "positiveInt",
      Display = "positiveInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding PositiveInt_data_types_2 = new Coding
    {
      Code = "positiveInt",
      Display = "positiveInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Practitioner_resource_types = new Coding
    {
      Code = "Practitioner",
      Display = "Practitioner",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Practitioner_resource_types_2 = new Coding
    {
      Code = "Practitioner",
      Display = "Practitioner",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Procedure_resource_types = new Coding
    {
      Code = "Procedure",
      Display = "Procedure",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Procedure_resource_types_2 = new Coding
    {
      Code = "Procedure",
      Display = "Procedure",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcedureRequest_resource_types = new Coding
    {
      Code = "ProcedureRequest",
      Display = "ProcedureRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcedureRequest_resource_types_2 = new Coding
    {
      Code = "ProcedureRequest",
      Display = "ProcedureRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessRequest_resource_types = new Coding
    {
      Code = "ProcessRequest",
      Display = "ProcessRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessRequest_resource_types_2 = new Coding
    {
      Code = "ProcessRequest",
      Display = "ProcessRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessResponse_resource_types = new Coding
    {
      Code = "ProcessResponse",
      Display = "ProcessResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessResponse_resource_types_2 = new Coding
    {
      Code = "ProcessResponse",
      Display = "ProcessResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Provenance_resource_types = new Coding
    {
      Code = "Provenance",
      Display = "Provenance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Provenance_resource_types_2 = new Coding
    {
      Code = "Provenance",
      Display = "Provenance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Quantity_data_types = new Coding
    {
      Code = "Quantity",
      Display = "Quantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Quantity_data_types_2 = new Coding
    {
      Code = "Quantity",
      Display = "Quantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Questionnaire_resource_types = new Coding
    {
      Code = "Questionnaire",
      Display = "Questionnaire",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Questionnaire_resource_types_2 = new Coding
    {
      Code = "Questionnaire",
      Display = "Questionnaire",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding QuestionnaireResponse_resource_types = new Coding
    {
      Code = "QuestionnaireResponse",
      Display = "QuestionnaireResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding QuestionnaireResponse_resource_types_2 = new Coding
    {
      Code = "QuestionnaireResponse",
      Display = "QuestionnaireResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Range_data_types = new Coding
    {
      Code = "Range",
      Display = "Range",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Range_data_types_2 = new Coding
    {
      Code = "Range",
      Display = "Range",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Ratio_data_types = new Coding
    {
      Code = "Ratio",
      Display = "Ratio",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Ratio_data_types_2 = new Coding
    {
      Code = "Ratio",
      Display = "Ratio",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Reference_data_types = new Coding
    {
      Code = "Reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Reference_data_types_2 = new Coding
    {
      Code = "Reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ReferralRequest_resource_types = new Coding
    {
      Code = "ReferralRequest",
      Display = "ReferralRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ReferralRequest_resource_types_2 = new Coding
    {
      Code = "ReferralRequest",
      Display = "ReferralRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RelatedPerson_resource_types = new Coding
    {
      Code = "RelatedPerson",
      Display = "RelatedPerson",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RelatedPerson_resource_types_2 = new Coding
    {
      Code = "RelatedPerson",
      Display = "RelatedPerson",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Resource_resource_types = new Coding
    {
      Code = "Resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Resource_resource_types_2 = new Coding
    {
      Code = "Resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RiskAssessment_resource_types = new Coding
    {
      Code = "RiskAssessment",
      Display = "RiskAssessment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RiskAssessment_resource_types_2 = new Coding
    {
      Code = "RiskAssessment",
      Display = "RiskAssessment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SampledData_data_types = new Coding
    {
      Code = "SampledData",
      Display = "SampledData",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding SampledData_data_types_2 = new Coding
    {
      Code = "SampledData",
      Display = "SampledData",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Schedule_resource_types = new Coding
    {
      Code = "Schedule",
      Display = "Schedule",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Schedule_resource_types_2 = new Coding
    {
      Code = "Schedule",
      Display = "Schedule",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SearchParameter_resource_types = new Coding
    {
      Code = "SearchParameter",
      Display = "SearchParameter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SearchParameter_resource_types_2 = new Coding
    {
      Code = "SearchParameter",
      Display = "SearchParameter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Signature_data_types = new Coding
    {
      Code = "Signature",
      Display = "Signature",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Signature_data_types_2 = new Coding
    {
      Code = "Signature",
      Display = "Signature",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding SimpleQuantity_data_types = new Coding
    {
      Code = "SimpleQuantity",
      Display = "SimpleQuantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding SimpleQuantity_data_types_2 = new Coding
    {
      Code = "SimpleQuantity",
      Display = "SimpleQuantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Slot_resource_types = new Coding
    {
      Code = "Slot",
      Display = "Slot",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Slot_resource_types_2 = new Coding
    {
      Code = "Slot",
      Display = "Slot",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Specimen_resource_types = new Coding
    {
      Code = "Specimen",
      Display = "Specimen",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Specimen_resource_types_2 = new Coding
    {
      Code = "Specimen",
      Display = "Specimen",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding VALString_data_types = new Coding
    {
      Code = "string",
      Display = "string",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding VALString_data_types_2 = new Coding
    {
      Code = "string",
      Display = "string",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding StructureDefinition_resource_types = new Coding
    {
      Code = "StructureDefinition",
      Display = "StructureDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding StructureDefinition_resource_types_2 = new Coding
    {
      Code = "StructureDefinition",
      Display = "StructureDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Subscription_resource_types = new Coding
    {
      Code = "Subscription",
      Display = "Subscription",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Subscription_resource_types_2 = new Coding
    {
      Code = "Subscription",
      Display = "Subscription",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Substance_resource_types = new Coding
    {
      Code = "Substance",
      Display = "Substance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Substance_resource_types_2 = new Coding
    {
      Code = "Substance",
      Display = "Substance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyDelivery_resource_types = new Coding
    {
      Code = "SupplyDelivery",
      Display = "SupplyDelivery",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyDelivery_resource_types_2 = new Coding
    {
      Code = "SupplyDelivery",
      Display = "SupplyDelivery",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyRequest_resource_types = new Coding
    {
      Code = "SupplyRequest",
      Display = "SupplyRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyRequest_resource_types_2 = new Coding
    {
      Code = "SupplyRequest",
      Display = "SupplyRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding TestScript_resource_types = new Coding
    {
      Code = "TestScript",
      Display = "TestScript",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding TestScript_resource_types_2 = new Coding
    {
      Code = "TestScript",
      Display = "TestScript",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Time_data_types = new Coding
    {
      Code = "time",
      Display = "time",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Time_data_types_2 = new Coding
    {
      Code = "time",
      Display = "time",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Timing_data_types = new Coding
    {
      Code = "Timing",
      Display = "Timing",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Timing_data_types_2 = new Coding
    {
      Code = "Timing",
      Display = "Timing",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding UnsignedInt_data_types = new Coding
    {
      Code = "unsignedInt",
      Display = "unsignedInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding UnsignedInt_data_types_2 = new Coding
    {
      Code = "unsignedInt",
      Display = "unsignedInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Uri_data_types = new Coding
    {
      Code = "uri",
      Display = "uri",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Uri_data_types_2 = new Coding
    {
      Code = "uri",
      Display = "uri",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Uuid_data_types = new Coding
    {
      Code = "uuid",
      Display = "uuid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Uuid_data_types_2 = new Coding
    {
      Code = "uuid",
      Display = "uuid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ValueSet_resource_types = new Coding
    {
      Code = "ValueSet",
      Display = "ValueSet",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ValueSet_resource_types_2 = new Coding
    {
      Code = "ValueSet",
      Display = "ValueSet",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding VisionPrescription_resource_types = new Coding
    {
      Code = "VisionPrescription",
      Display = "VisionPrescription",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding VisionPrescription_resource_types_2 = new Coding
    {
      Code = "VisionPrescription",
      Display = "VisionPrescription",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding XHTML_data_types = new Coding
    {
      Code = "xhtml",
      Display = "XHTML",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding XHTML_data_types_2 = new Coding
    {
      Code = "xhtml",
      Display = "XHTML",
      System = "http://hl7.org/fhir/data-types"
    };
  };
  /// <summary>
  /// Indicates the potential degree of impact of the identified issue on the patient.
  /// </summary>
  public static class DetectedissueSeverityValueSet
  {
    public static readonly Coding High = new Coding
    {
      Code = "high",
      Display = "High",
      System = "http://hl7.org/fhir/detectedissue-severity"
    };
    public static readonly Coding Low = new Coding
    {
      Code = "low",
      Display = "Low",
      System = "http://hl7.org/fhir/detectedissue-severity"
    };
    public static readonly Coding Moderate = new Coding
    {
      Code = "moderate",
      Display = "Moderate",
      System = "http://hl7.org/fhir/detectedissue-severity"
    };
  };
  /// <summary>
  /// The availability status of the device.
  /// </summary>
  public static class DevicestatusValueSet
  {
    public static readonly Coding Available = new Coding
    {
      Code = "available",
      Display = "Available",
      System = "http://hl7.org/fhir/devicestatus"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/devicestatus"
    };
    public static readonly Coding NotAvailable = new Coding
    {
      Code = "not-available",
      Display = "Not Available",
      System = "http://hl7.org/fhir/devicestatus"
    };
  };
  /// <summary>
  /// Codes representing the priority of the request.
  /// </summary>
  public static class DeviceUseRequestPriorityValueSet
  {
    public static readonly Coding ASAP = new Coding
    {
      Code = "asap",
      Display = "ASAP",
      System = "http://hl7.org/fhir/device-use-request-priority"
    };
    public static readonly Coding Routine = new Coding
    {
      Code = "routine",
      Display = "Routine",
      System = "http://hl7.org/fhir/device-use-request-priority"
    };
    public static readonly Coding Stat = new Coding
    {
      Code = "stat",
      Display = "Stat",
      System = "http://hl7.org/fhir/device-use-request-priority"
    };
    public static readonly Coding Urgent = new Coding
    {
      Code = "urgent",
      Display = "Urgent",
      System = "http://hl7.org/fhir/device-use-request-priority"
    };
  };
  /// <summary>
  /// Codes representing the status of the request.
  /// </summary>
  public static class DeviceUseRequestStatusValueSet
  {
    public static readonly Coding Aborted = new Coding
    {
      Code = "aborted",
      Display = "Aborted",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Received = new Coding
    {
      Code = "received",
      Display = "Received",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
    public static readonly Coding Suspended = new Coding
    {
      Code = "suspended",
      Display = "Suspended",
      System = "http://hl7.org/fhir/device-use-request-status"
    };
  };
  /// <summary>
  /// The clinical priority of a diagnostic order.
  /// </summary>
  public static class DiagnosticOrderPriorityValueSet
  {
    public static readonly Coding ASAP = new Coding
    {
      Code = "asap",
      Display = "ASAP",
      System = "http://hl7.org/fhir/diagnostic-order-priority"
    };
    public static readonly Coding Routine = new Coding
    {
      Code = "routine",
      Display = "Routine",
      System = "http://hl7.org/fhir/diagnostic-order-priority"
    };
    public static readonly Coding Stat = new Coding
    {
      Code = "stat",
      Display = "Stat",
      System = "http://hl7.org/fhir/diagnostic-order-priority"
    };
    public static readonly Coding Urgent = new Coding
    {
      Code = "urgent",
      Display = "Urgent",
      System = "http://hl7.org/fhir/diagnostic-order-priority"
    };
  };
  /// <summary>
  /// The status of a diagnostic order.
  /// </summary>
  public static class DiagnosticOrderStatusValueSet
  {
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Draft = new Coding
    {
      Code = "draft",
      Display = "Draft",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Failed = new Coding
    {
      Code = "failed",
      Display = "Failed",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In-Progress",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Received = new Coding
    {
      Code = "received",
      Display = "Received",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Review = new Coding
    {
      Code = "review",
      Display = "Review",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
    public static readonly Coding Suspended = new Coding
    {
      Code = "suspended",
      Display = "Suspended",
      System = "http://hl7.org/fhir/diagnostic-order-status"
    };
  };
  /// <summary>
  /// The status of the diagnostic report as a whole.
  /// </summary>
  public static class DiagnosticReportStatusValueSet
  {
    public static readonly Coding Appended = new Coding
    {
      Code = "appended",
      Display = "Appended",
      System = "http://hl7.org/fhir/diagnostic-report-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/diagnostic-report-status"
    };
    public static readonly Coding Corrected = new Coding
    {
      Code = "corrected",
      Display = "Corrected",
      System = "http://hl7.org/fhir/diagnostic-report-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/diagnostic-report-status"
    };
    public static readonly Coding Final = new Coding
    {
      Code = "final",
      Display = "Final",
      System = "http://hl7.org/fhir/diagnostic-report-status"
    };
    public static readonly Coding Partial = new Coding
    {
      Code = "partial",
      Display = "Partial",
      System = "http://hl7.org/fhir/diagnostic-report-status"
    };
    public static readonly Coding Registered = new Coding
    {
      Code = "registered",
      Display = "Registered",
      System = "http://hl7.org/fhir/diagnostic-report-status"
    };
  };
  /// <summary>
  /// Whether the Media is a photo, video, or audio
  /// </summary>
  public static class DigitalMediaTypeValueSet
  {
    public static readonly Coding Audio = new Coding
    {
      Code = "audio",
      Display = "Audio",
      System = "http://hl7.org/fhir/digital-media-type"
    };
    public static readonly Coding Photo = new Coding
    {
      Code = "photo",
      Display = "Photo",
      System = "http://hl7.org/fhir/digital-media-type"
    };
    public static readonly Coding Video = new Coding
    {
      Code = "video",
      Display = "Video",
      System = "http://hl7.org/fhir/digital-media-type"
    };
  };
  /// <summary>
  /// Whether the application produces or consumes documents.
  /// </summary>
  public static class DocumentModeValueSet
  {
    public static readonly Coding Consumer = new Coding
    {
      Code = "consumer",
      Display = "Consumer",
      System = "http://hl7.org/fhir/document-mode"
    };
    public static readonly Coding Producer = new Coding
    {
      Code = "producer",
      Display = "Producer",
      System = "http://hl7.org/fhir/document-mode"
    };
  };
  /// <summary>
  /// The status of the document reference.
  /// </summary>
  public static class DocumentReferenceStatusValueSet
  {
    public static readonly Coding Current = new Coding
    {
      Code = "current",
      Display = "Current",
      System = "http://hl7.org/fhir/document-reference-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/document-reference-status"
    };
    public static readonly Coding Superseded = new Coding
    {
      Code = "superseded",
      Display = "Superseded",
      System = "http://hl7.org/fhir/document-reference-status"
    };
  };
  /// <summary>
  /// The type of relationship between documents.
  /// </summary>
  public static class DocumentRelationshipTypeValueSet
  {
    public static readonly Coding Appends = new Coding
    {
      Code = "appends",
      Display = "Appends",
      System = "http://hl7.org/fhir/document-relationship-type"
    };
    public static readonly Coding Replaces = new Coding
    {
      Code = "replaces",
      Display = "Replaces",
      System = "http://hl7.org/fhir/document-relationship-type"
    };
    public static readonly Coding Signs = new Coding
    {
      Code = "signs",
      Display = "Signs",
      System = "http://hl7.org/fhir/document-relationship-type"
    };
    public static readonly Coding Transforms = new Coding
    {
      Code = "transforms",
      Display = "Transforms",
      System = "http://hl7.org/fhir/document-relationship-type"
    };
  };
  /// <summary>
  /// Classification of the encounter
  /// </summary>
  public static class EncounterClassValueSet
  {
    public static readonly Coding Ambulatory = new Coding
    {
      Code = "ambulatory",
      Display = "Ambulatory",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Daytime = new Coding
    {
      Code = "daytime",
      Display = "Daytime",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Emergency = new Coding
    {
      Code = "emergency",
      Display = "Emergency",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Field = new Coding
    {
      Code = "field",
      Display = "Field",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Home = new Coding
    {
      Code = "home",
      Display = "Home",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Inpatient = new Coding
    {
      Code = "inpatient",
      Display = "Inpatient",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Other = new Coding
    {
      Code = "other",
      Display = "Other",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Outpatient = new Coding
    {
      Code = "outpatient",
      Display = "Outpatient",
      System = "http://hl7.org/fhir/encounter-class"
    };
    public static readonly Coding Virtual = new Coding
    {
      Code = "virtual",
      Display = "Virtual",
      System = "http://hl7.org/fhir/encounter-class"
    };
  };
  /// <summary>
  /// The status of the location.
  /// </summary>
  public static class EncounterLocationStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/encounter-location-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/encounter-location-status"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/encounter-location-status"
    };
    public static readonly Coding Reserved = new Coding
    {
      Code = "reserved",
      Display = "Reserved",
      System = "http://hl7.org/fhir/encounter-location-status"
    };
  };
  /// <summary>
  /// Current state of the encounter
  /// </summary>
  public static class EncounterStateValueSet
  {
    public static readonly Coding Arrived = new Coding
    {
      Code = "arrived",
      Display = "Arrived",
      System = "http://hl7.org/fhir/encounter-state"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/encounter-state"
    };
    public static readonly Coding Finished = new Coding
    {
      Code = "finished",
      Display = "Finished",
      System = "http://hl7.org/fhir/encounter-state"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "in Progress",
      System = "http://hl7.org/fhir/encounter-state"
    };
    public static readonly Coding OnLeave = new Coding
    {
      Code = "onleave",
      Display = "On Leave",
      System = "http://hl7.org/fhir/encounter-state"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/encounter-state"
    };
  };
  /// <summary>
  /// The status of the encounter.
  /// </summary>
  public static class EpisodeOfCareStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/episode-of-care-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/episode-of-care-status"
    };
    public static readonly Coding Finished = new Coding
    {
      Code = "finished",
      Display = "Finished",
      System = "http://hl7.org/fhir/episode-of-care-status"
    };
    public static readonly Coding OnHold = new Coding
    {
      Code = "onhold",
      Display = "On Hold",
      System = "http://hl7.org/fhir/episode-of-care-status"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/episode-of-care-status"
    };
    public static readonly Coding Waitlist = new Coding
    {
      Code = "waitlist",
      Display = "Waitlist",
      System = "http://hl7.org/fhir/episode-of-care-status"
    };
  };
  /// <summary>
  /// Real world event that the relating to the schedule.
  /// </summary>
  public static class EventTimingValueSet
  {
    public static readonly Coding AC = new Coding
    {
      Code = "AC",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding ACD = new Coding
    {
      Code = "ACD",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding ACM = new Coding
    {
      Code = "ACM",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding ACV = new Coding
    {
      Code = "ACV",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding C = new Coding
    {
      Code = "C",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding CD = new Coding
    {
      Code = "CD",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding CM = new Coding
    {
      Code = "CM",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding CV = new Coding
    {
      Code = "CV",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding HS = new Coding
    {
      Code = "HS",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding PC = new Coding
    {
      Code = "PC",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding PCD = new Coding
    {
      Code = "PCD",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding PCM = new Coding
    {
      Code = "PCM",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding PCV = new Coding
    {
      Code = "PCV",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
    public static readonly Coding WAKE = new Coding
    {
      Code = "WAKE",
      System = "http://hl7.org/fhir/v3/TimingEvent"
    };
  };
  /// <summary>
  /// How an extension context is interpreted.
  /// </summary>
  public static class ExtensionContextValueSet
  {
    public static readonly Coding Datatype = new Coding
    {
      Code = "datatype",
      Display = "Datatype",
      System = "http://hl7.org/fhir/extension-context"
    };
    public static readonly Coding Extension = new Coding
    {
      Code = "extension",
      Display = "Extension",
      System = "http://hl7.org/fhir/extension-context"
    };
    public static readonly Coding Mapping = new Coding
    {
      Code = "mapping",
      Display = "Mapping",
      System = "http://hl7.org/fhir/extension-context"
    };
    public static readonly Coding Resource = new Coding
    {
      Code = "resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/extension-context"
    };
  };
  /// <summary>
  /// The kind of operation to perform as a part of a property based filter.
  /// </summary>
  public static class FilterOperatorValueSet
  {
    public static readonly new Coding Equals = new Coding
    {
      Code = "=",
      Display = "Equals",
      System = "http://hl7.org/fhir/filter-operator"
    };
    public static readonly Coding InSet = new Coding
    {
      Code = "in",
      Display = "In Set",
      System = "http://hl7.org/fhir/filter-operator"
    };
    public static readonly Coding IsABySubsumption = new Coding
    {
      Code = "is-a",
      Display = "Is A (by subsumption)",
      System = "http://hl7.org/fhir/filter-operator"
    };
    public static readonly Coding NotIsABySubsumption = new Coding
    {
      Code = "is-not-a",
      Display = "Not (Is A) (by subsumption)",
      System = "http://hl7.org/fhir/filter-operator"
    };
    public static readonly Coding NotInSet = new Coding
    {
      Code = "not-in",
      Display = "Not in Set",
      System = "http://hl7.org/fhir/filter-operator"
    };
    public static readonly Coding RegularExpression = new Coding
    {
      Code = "regex",
      Display = "Regular Expression",
      System = "http://hl7.org/fhir/filter-operator"
    };
  };
  /// <summary>
  /// Indicates whether this flag is active and needs to be displayed to a user, or whether it is no longer needed or entered in error.
  /// </summary>
  public static class FlagStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/flag-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/flag-status"
    };
    public static readonly Coding Inactive = new Coding
    {
      Code = "inactive",
      Display = "Inactive",
      System = "http://hl7.org/fhir/flag-status"
    };
  };
  /// <summary>
  /// Indicates whether the goal has been met and is still being targeted
  /// </summary>
  public static class GoalStatusValueSet
  {
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding Achieved = new Coding
    {
      Code = "achieved",
      Display = "Achieved",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding OnHold = new Coding
    {
      Code = "on-hold",
      Display = "On Hold",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/goal-status"
    };
    public static readonly Coding Sustaining = new Coding
    {
      Code = "sustaining",
      Display = "Sustaining",
      System = "http://hl7.org/fhir/goal-status"
    };
  };
  /// <summary>
  /// Types of resources that are part of group
  /// </summary>
  public static class GroupTypeValueSet
  {
    public static readonly Coding Animal = new Coding
    {
      Code = "animal",
      Display = "Animal",
      System = "http://hl7.org/fhir/group-type"
    };
    public static readonly Coding Device = new Coding
    {
      Code = "device",
      Display = "Device",
      System = "http://hl7.org/fhir/group-type"
    };
    public static readonly Coding Medication = new Coding
    {
      Code = "medication",
      Display = "Medication",
      System = "http://hl7.org/fhir/group-type"
    };
    public static readonly Coding Person = new Coding
    {
      Code = "person",
      Display = "Person",
      System = "http://hl7.org/fhir/group-type"
    };
    public static readonly Coding Practitioner = new Coding
    {
      Code = "practitioner",
      Display = "Practitioner",
      System = "http://hl7.org/fhir/group-type"
    };
    public static readonly Coding Substance = new Coding
    {
      Code = "substance",
      Display = "Substance",
      System = "http://hl7.org/fhir/group-type"
    };
  };
  /// <summary>
  /// How a dependency is represented when the guide is published.
  /// </summary>
  public static class GuideDependencyTypeValueSet
  {
    public static readonly Coding Inclusion = new Coding
    {
      Code = "inclusion",
      Display = "Inclusion",
      System = "http://hl7.org/fhir/guide-dependency-type"
    };
    public static readonly Coding Reference = new Coding
    {
      Code = "reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/guide-dependency-type"
    };
  };
  /// <summary>
  /// The kind of an included page.
  /// </summary>
  public static class GuidePageKindValueSet
  {
    public static readonly Coding Dictionary = new Coding
    {
      Code = "dictionary",
      Display = "Dictionary",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
    public static readonly Coding Directory = new Coding
    {
      Code = "directory",
      Display = "Directory",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
    public static readonly Coding Example = new Coding
    {
      Code = "example",
      Display = "Example",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
    public static readonly Coding Include = new Coding
    {
      Code = "include",
      Display = "Include",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
    public static readonly Coding List = new Coding
    {
      Code = "list",
      Display = "List",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
    public static readonly Coding Page = new Coding
    {
      Code = "page",
      Display = "Page",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
    public static readonly Coding Resource = new Coding
    {
      Code = "resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
    public static readonly Coding TableOfContents = new Coding
    {
      Code = "toc",
      Display = "Table Of Contents",
      System = "http://hl7.org/fhir/guide-page-kind"
    };
  };
  /// <summary>
  /// Why a resource is included in the guide.
  /// </summary>
  public static class GuideResourcePurposeValueSet
  {
    public static readonly Coding Dictionary = new Coding
    {
      Code = "dictionary",
      Display = "Dictionary",
      System = "http://hl7.org/fhir/guide-resource-purpose"
    };
    public static readonly Coding Example = new Coding
    {
      Code = "example",
      Display = "Example",
      System = "http://hl7.org/fhir/guide-resource-purpose"
    };
    public static readonly Coding Extension = new Coding
    {
      Code = "extension",
      Display = "Extension",
      System = "http://hl7.org/fhir/guide-resource-purpose"
    };
    public static readonly Coding LogicalModel = new Coding
    {
      Code = "logical",
      Display = "Logical Model",
      System = "http://hl7.org/fhir/guide-resource-purpose"
    };
    public static readonly Coding Profile = new Coding
    {
      Code = "profile",
      Display = "Profile",
      System = "http://hl7.org/fhir/guide-resource-purpose"
    };
    public static readonly Coding Terminology = new Coding
    {
      Code = "terminology",
      Display = "Terminology",
      System = "http://hl7.org/fhir/guide-resource-purpose"
    };
  };
  /// <summary>
  /// A code that identifies the status of the family history record.
  /// </summary>
  public static class HistoryStatusValueSet
  {
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/history-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in error",
      System = "http://hl7.org/fhir/history-status"
    };
    public static readonly Coding HealthUnknown = new Coding
    {
      Code = "health-unknown",
      Display = "Health unknown",
      System = "http://hl7.org/fhir/history-status"
    };
    public static readonly Coding Partial = new Coding
    {
      Code = "partial",
      Display = "Partial",
      System = "http://hl7.org/fhir/history-status"
    };
  };
  /// <summary>
  /// HTTP verbs (in the HTTP command line).
  /// </summary>
  public static class HttpVerbValueSet
  {
    public static readonly Coding DELETE = new Coding
    {
      Code = "DELETE",
      Display = "DELETE",
      System = "http://hl7.org/fhir/http-verb"
    };
    public static readonly Coding GET = new Coding
    {
      Code = "GET",
      Display = "GET",
      System = "http://hl7.org/fhir/http-verb"
    };
    public static readonly Coding POST = new Coding
    {
      Code = "POST",
      Display = "POST",
      System = "http://hl7.org/fhir/http-verb"
    };
    public static readonly Coding PUT = new Coding
    {
      Code = "PUT",
      Display = "PUT",
      System = "http://hl7.org/fhir/http-verb"
    };
  };
  /// <summary>
  /// Identifies the purpose for this identifier, if known .
  /// </summary>
  public static class IdentifierUseValueSet
  {
    public static readonly Coding Official = new Coding
    {
      Code = "official",
      Display = "Official",
      System = "http://hl7.org/fhir/identifier-use"
    };
    public static readonly Coding Secondary = new Coding
    {
      Code = "secondary",
      Display = "Secondary",
      System = "http://hl7.org/fhir/identifier-use"
    };
    public static readonly Coding Temp = new Coding
    {
      Code = "temp",
      Display = "Temp",
      System = "http://hl7.org/fhir/identifier-use"
    };
    public static readonly Coding Usual = new Coding
    {
      Code = "usual",
      Display = "Usual",
      System = "http://hl7.org/fhir/identifier-use"
    };
  };
  /// <summary>
  /// The level of confidence that this link represents the same actual person, based on NIST Authentication Levels.
  /// </summary>
  public static class IdentityAssuranceLevelValueSet
  {
    public static readonly Coding Level1 = new Coding
    {
      Code = "level1",
      Display = "Level 1",
      System = "http://hl7.org/fhir/identity-assuranceLevel"
    };
    public static readonly Coding Level2 = new Coding
    {
      Code = "level2",
      Display = "Level 2",
      System = "http://hl7.org/fhir/identity-assuranceLevel"
    };
    public static readonly Coding Level3 = new Coding
    {
      Code = "level3",
      Display = "Level 3",
      System = "http://hl7.org/fhir/identity-assuranceLevel"
    };
    public static readonly Coding Level4 = new Coding
    {
      Code = "level4",
      Display = "Level 4",
      System = "http://hl7.org/fhir/identity-assuranceLevel"
    };
  };
  /// <summary>
  /// Availability of the resource
  /// </summary>
  public static class InstanceAvailabilityValueSet
  {
    public static readonly Coding NEARLINE = new Coding
    {
      Code = "NEARLINE",
      System = "http://nema.org/dicom/dicm"
    };
    public static readonly Coding OFFLINE = new Coding
    {
      Code = "OFFLINE",
      System = "http://nema.org/dicom/dicm"
    };
    public static readonly Coding ONLINE = new Coding
    {
      Code = "ONLINE",
      System = "http://nema.org/dicom/dicm"
    };
    public static readonly Coding UNAVAILABLE = new Coding
    {
      Code = "UNAVAILABLE",
      System = "http://nema.org/dicom/dicm"
    };
  };
  /// <summary>
  /// How the issue affects the success of the action.
  /// </summary>
  public static class IssueSeverityValueSet
  {
    public static readonly Coding Error = new Coding
    {
      Code = "error",
      Display = "Error",
      System = "http://hl7.org/fhir/issue-severity"
    };
    public static readonly Coding Fatal = new Coding
    {
      Code = "fatal",
      Display = "Fatal",
      System = "http://hl7.org/fhir/issue-severity"
    };
    public static readonly Coding Information = new Coding
    {
      Code = "information",
      Display = "Information",
      System = "http://hl7.org/fhir/issue-severity"
    };
    public static readonly Coding Warning = new Coding
    {
      Code = "warning",
      Display = "Warning",
      System = "http://hl7.org/fhir/issue-severity"
    };
  };
  /// <summary>
  /// A code that describes the type of issue.
  /// </summary>
  public static class IssueTypeValueSet
  {
    public static readonly Coding BusinessRuleViolation = new Coding
    {
      Code = "business-rule",
      Display = "Business Rule Violation",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding InvalidCode = new Coding
    {
      Code = "code-invalid",
      Display = "Invalid Code",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding EditVersionConflict = new Coding
    {
      Code = "conflict",
      Display = "Edit Version Conflict",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding Duplicate = new Coding
    {
      Code = "duplicate",
      Display = "Duplicate",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding Exception = new Coding
    {
      Code = "exception",
      Display = "Exception",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding SessionExpired = new Coding
    {
      Code = "expired",
      Display = "Session Expired",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding UnacceptableExtension = new Coding
    {
      Code = "extension",
      Display = "Unacceptable Extension",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding Forbidden = new Coding
    {
      Code = "forbidden",
      Display = "Forbidden",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding IncompleteResults = new Coding
    {
      Code = "incomplete",
      Display = "Incomplete Results",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding InformationalNote = new Coding
    {
      Code = "informational",
      Display = "Informational Note",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding InvalidContent = new Coding
    {
      Code = "invalid",
      Display = "Invalid Content",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding ValidationRuleFailed = new Coding
    {
      Code = "invariant",
      Display = "Validation rule failed",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding LockError = new Coding
    {
      Code = "lock-error",
      Display = "Lock Error",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding LoginRequired = new Coding
    {
      Code = "login",
      Display = "Login Required",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding NoStoreAvailable = new Coding
    {
      Code = "no-store",
      Display = "No Store Available",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding NotFound = new Coding
    {
      Code = "not-found",
      Display = "Not Found",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding ContentNotSupported = new Coding
    {
      Code = "not-supported",
      Display = "Content not supported",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding ProcessingFailure = new Coding
    {
      Code = "processing",
      Display = "Processing Failure",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding RequiredElementMissing = new Coding
    {
      Code = "required",
      Display = "Required element missing",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding SecurityProblem = new Coding
    {
      Code = "security",
      Display = "Security Problem",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding StructuralIssue = new Coding
    {
      Code = "structure",
      Display = "Structural Issue",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding InformationSuppressed = new Coding
    {
      Code = "suppressed",
      Display = "Information  Suppressed",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding Throttled = new Coding
    {
      Code = "throttled",
      Display = "Throttled",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding Timeout = new Coding
    {
      Code = "timeout",
      Display = "Timeout",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding OperationTooCostly = new Coding
    {
      Code = "too-costly",
      Display = "Operation Too Costly",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding ContentTooLong = new Coding
    {
      Code = "too-long",
      Display = "Content Too Long",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding TransientIssue = new Coding
    {
      Code = "transient",
      Display = "Transient Issue",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding UnknownUser = new Coding
    {
      Code = "unknown",
      Display = "Unknown User",
      System = "http://hl7.org/fhir/issue-type"
    };
    public static readonly Coding ElementValueInvalid = new Coding
    {
      Code = "value",
      Display = "Element value invalid",
      System = "http://hl7.org/fhir/issue-type"
    };
  };
  /// <summary>
  /// The type of link between this patient resource and another patient resource.
  /// </summary>
  public static class LinkTypeValueSet
  {
    public static readonly Coding Refer = new Coding
    {
      Code = "refer",
      Display = "Refer",
      System = "http://hl7.org/fhir/link-type"
    };
    public static readonly Coding Replace = new Coding
    {
      Code = "replace",
      Display = "Replace",
      System = "http://hl7.org/fhir/link-type"
    };
    public static readonly Coding SeeAlso = new Coding
    {
      Code = "seealso",
      Display = "See also",
      System = "http://hl7.org/fhir/link-type"
    };
  };
  /// <summary>
  /// The processing mode that applies to this list
  /// </summary>
  public static class ListModeValueSet
  {
    public static readonly Coding ChangeList = new Coding
    {
      Code = "changes",
      Display = "Change List",
      System = "http://hl7.org/fhir/list-mode"
    };
    public static readonly Coding SnapshotList = new Coding
    {
      Code = "snapshot",
      Display = "Snapshot List",
      System = "http://hl7.org/fhir/list-mode"
    };
    public static readonly Coding WorkingList = new Coding
    {
      Code = "working",
      Display = "Working List",
      System = "http://hl7.org/fhir/list-mode"
    };
  };
  /// <summary>
  /// The current state of the list
  /// </summary>
  public static class ListStatusValueSet
  {
    public static readonly Coding Current = new Coding
    {
      Code = "current",
      Display = "Current",
      System = "http://hl7.org/fhir/list-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered In Error",
      System = "http://hl7.org/fhir/list-status"
    };
    public static readonly Coding Retired = new Coding
    {
      Code = "retired",
      Display = "Retired",
      System = "http://hl7.org/fhir/list-status"
    };
  };
  /// <summary>
  /// Indicates whether a resource instance represents a specific location or a class of locations.
  /// </summary>
  public static class LocationModeValueSet
  {
    public static readonly Coding Instance = new Coding
    {
      Code = "instance",
      Display = "Instance",
      System = "http://hl7.org/fhir/location-mode"
    };
    public static readonly Coding Kind = new Coding
    {
      Code = "kind",
      Display = "Kind",
      System = "http://hl7.org/fhir/location-mode"
    };
  };
  /// <summary>
  /// Indicates whether the location is still in use.
  /// </summary>
  public static class LocationStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/location-status"
    };
    public static readonly Coding Inactive = new Coding
    {
      Code = "inactive",
      Display = "Inactive",
      System = "http://hl7.org/fhir/location-status"
    };
    public static readonly Coding Suspended = new Coding
    {
      Code = "suspended",
      Display = "Suspended",
      System = "http://hl7.org/fhir/location-status"
    };
  };
  /// <summary>
  /// Different measurement principle supported by the device.
  /// </summary>
  public static class MeasurementPrincipleValueSet
  {
    public static readonly Coding MSPAcoustical = new Coding
    {
      Code = "acoustical",
      Display = "MSP Acoustical",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPBiological = new Coding
    {
      Code = "biological",
      Display = "MSP Biological",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPChemical = new Coding
    {
      Code = "chemical",
      Display = "MSP Chemical",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPElectrical = new Coding
    {
      Code = "electrical",
      Display = "MSP Electrical",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPImpedance = new Coding
    {
      Code = "impedance",
      Display = "MSP Impedance",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPManual = new Coding
    {
      Code = "manual",
      Display = "MSP Manual",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPMechanical = new Coding
    {
      Code = "mechanical",
      Display = "MSP Mechanical",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPNuclear = new Coding
    {
      Code = "nuclear",
      Display = "MSP Nuclear",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPOptical = new Coding
    {
      Code = "optical",
      Display = "MSP Optical",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPOther = new Coding
    {
      Code = "other",
      Display = "MSP Other",
      System = "http://hl7.org/fhir/measurement-principle"
    };
    public static readonly Coding MSPThermal = new Coding
    {
      Code = "thermal",
      Display = "MSP Thermal",
      System = "http://hl7.org/fhir/measurement-principle"
    };
  };
  /// <summary>
  /// A set of codes indicating the current status of a MedicationAdministration.
  /// </summary>
  public static class MedicationAdminStatusValueSet
  {
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/medication-admin-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/medication-admin-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/medication-admin-status"
    };
    public static readonly Coding OnHold = new Coding
    {
      Code = "on-hold",
      Display = "On Hold",
      System = "http://hl7.org/fhir/medication-admin-status"
    };
    public static readonly Coding Stopped = new Coding
    {
      Code = "stopped",
      Display = "Stopped",
      System = "http://hl7.org/fhir/medication-admin-status"
    };
  };
  /// <summary>
  /// A code specifying the state of the dispense event.
  /// 
  /// Describes the lifecycle of the dispense.
  /// </summary>
  public static class MedicationDispenseStatusValueSet
  {
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/medication-dispense-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in-Error",
      System = "http://hl7.org/fhir/medication-dispense-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/medication-dispense-status"
    };
    public static readonly Coding OnHold = new Coding
    {
      Code = "on-hold",
      Display = "On Hold",
      System = "http://hl7.org/fhir/medication-dispense-status"
    };
    public static readonly Coding Stopped = new Coding
    {
      Code = "stopped",
      Display = "Stopped",
      System = "http://hl7.org/fhir/medication-dispense-status"
    };
  };
  /// <summary>
  /// A code specifying the state of the prescribing event. Describes the lifecycle of the prescription.
  /// </summary>
  public static class MedicationOrderStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/medication-order-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/medication-order-status"
    };
    public static readonly Coding Draft = new Coding
    {
      Code = "draft",
      Display = "Draft",
      System = "http://hl7.org/fhir/medication-order-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered In Error",
      System = "http://hl7.org/fhir/medication-order-status"
    };
    public static readonly Coding OnHold = new Coding
    {
      Code = "on-hold",
      Display = "On Hold",
      System = "http://hl7.org/fhir/medication-order-status"
    };
    public static readonly Coding Stopped = new Coding
    {
      Code = "stopped",
      Display = "Stopped",
      System = "http://hl7.org/fhir/medication-order-status"
    };
  };
  /// <summary>
  /// A set of codes indicating the current status of a MedicationStatement.
  /// </summary>
  public static class MedicationStatementStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/medication-statement-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/medication-statement-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/medication-statement-status"
    };
    public static readonly Coding Intended = new Coding
    {
      Code = "intended",
      Display = "Intended",
      System = "http://hl7.org/fhir/medication-statement-status"
    };
  };
  /// <summary>
  /// The mode of a message conformance statement.
  /// </summary>
  public static class MessageConformanceEventModeValueSet
  {
    public static readonly Coding Receiver = new Coding
    {
      Code = "receiver",
      Display = "Receiver",
      System = "http://hl7.org/fhir/message-conformance-event-mode"
    };
    public static readonly Coding Sender = new Coding
    {
      Code = "sender",
      Display = "Sender",
      System = "http://hl7.org/fhir/message-conformance-event-mode"
    };
  };
  /// <summary>
  /// One of the message events defined as part of FHIR.
  /// </summary>
  public static class MessageEventsValueSet
  {
    public static readonly Coding AdminNotify = new Coding
    {
      Code = "admin-notify",
      Display = "admin-notify",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding DiagnosticreportProvide = new Coding
    {
      Code = "diagnosticreport-provide",
      Display = "diagnosticreport-provide",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding MedicationAdministrationComplete = new Coding
    {
      Code = "MedicationAdministration-Complete",
      Display = "MedicationAdministration-Complete",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding MedicationAdministrationNullification = new Coding
    {
      Code = "MedicationAdministration-Nullification",
      Display = "MedicationAdministration-Nullification",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding MedicationAdministrationRecording = new Coding
    {
      Code = "MedicationAdministration-Recording",
      Display = "MedicationAdministration-Recording",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding MedicationAdministrationUpdate = new Coding
    {
      Code = "MedicationAdministration-Update",
      Display = "MedicationAdministration-Update",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding ObservationProvide = new Coding
    {
      Code = "observation-provide",
      Display = "observation-provide",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding PatientLink = new Coding
    {
      Code = "patient-link",
      Display = "patient-link",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding PatientUnlink = new Coding
    {
      Code = "patient-unlink",
      Display = "patient-unlink",
      System = "http://hl7.org/fhir/message-events"
    };
    public static readonly Coding ValuesetExpand = new Coding
    {
      Code = "valueset-expand",
      Display = "valueset-expand",
      System = "http://hl7.org/fhir/message-events"
    };
  };
  /// <summary>
  /// The impact of the content of a message.
  /// </summary>
  public static class MessageSignificanceCategoryValueSet
  {
    public static readonly Coding Consequence = new Coding
    {
      Code = "Consequence",
      Display = "Consequence",
      System = "http://hl7.org/fhir/message-significance-category"
    };
    public static readonly Coding Currency = new Coding
    {
      Code = "Currency",
      Display = "Currency",
      System = "http://hl7.org/fhir/message-significance-category"
    };
    public static readonly Coding Notification = new Coding
    {
      Code = "Notification",
      Display = "Notification",
      System = "http://hl7.org/fhir/message-significance-category"
    };
  };
  /// <summary>
  /// Describes the state of a metric calibration.
  /// </summary>
  public static class MetricCalibrationStateValueSet
  {
    public static readonly Coding Calibrated = new Coding
    {
      Code = "calibrated",
      Display = "Calibrated",
      System = "http://hl7.org/fhir/metric-calibration-state"
    };
    public static readonly Coding CalibrationRequired = new Coding
    {
      Code = "calibration-required",
      Display = "Calibration Required",
      System = "http://hl7.org/fhir/metric-calibration-state"
    };
    public static readonly Coding NotCalibrated = new Coding
    {
      Code = "not-calibrated",
      Display = "Not Calibrated",
      System = "http://hl7.org/fhir/metric-calibration-state"
    };
    public static readonly Coding Unspecified = new Coding
    {
      Code = "unspecified",
      Display = "Unspecified",
      System = "http://hl7.org/fhir/metric-calibration-state"
    };
  };
  /// <summary>
  /// Describes the type of a metric calibration.
  /// </summary>
  public static class MetricCalibrationTypeValueSet
  {
    public static readonly Coding Gain = new Coding
    {
      Code = "gain",
      Display = "Gain",
      System = "http://hl7.org/fhir/metric-calibration-type"
    };
    public static readonly Coding Offset = new Coding
    {
      Code = "offset",
      Display = "Offset",
      System = "http://hl7.org/fhir/metric-calibration-type"
    };
    public static readonly Coding TwoPoint = new Coding
    {
      Code = "two-point",
      Display = "Two Point",
      System = "http://hl7.org/fhir/metric-calibration-type"
    };
    public static readonly Coding Unspecified = new Coding
    {
      Code = "unspecified",
      Display = "Unspecified",
      System = "http://hl7.org/fhir/metric-calibration-type"
    };
  };
  /// <summary>
  /// Describes the category of the metric.
  /// </summary>
  public static class MetricCategoryValueSet
  {
    public static readonly Coding Calculation = new Coding
    {
      Code = "calculation",
      Display = "Calculation",
      System = "http://hl7.org/fhir/metric-category"
    };
    public static readonly Coding Measurement = new Coding
    {
      Code = "measurement",
      Display = "Measurement",
      System = "http://hl7.org/fhir/metric-category"
    };
    public static readonly Coding Setting = new Coding
    {
      Code = "setting",
      Display = "Setting",
      System = "http://hl7.org/fhir/metric-category"
    };
    public static readonly Coding Unspecified = new Coding
    {
      Code = "unspecified",
      Display = "Unspecified",
      System = "http://hl7.org/fhir/metric-category"
    };
  };
  /// <summary>
  /// Describes the typical color of representation.
  /// </summary>
  public static class MetricColorValueSet
  {
    public static readonly Coding ColorBlack = new Coding
    {
      Code = "black",
      Display = "Color Black",
      System = "http://hl7.org/fhir/metric-color"
    };
    public static readonly Coding ColorBlue = new Coding
    {
      Code = "blue",
      Display = "Color Blue",
      System = "http://hl7.org/fhir/metric-color"
    };
    public static readonly Coding ColorCyan = new Coding
    {
      Code = "cyan",
      Display = "Color Cyan",
      System = "http://hl7.org/fhir/metric-color"
    };
    public static readonly Coding ColorGreen = new Coding
    {
      Code = "green",
      Display = "Color Green",
      System = "http://hl7.org/fhir/metric-color"
    };
    public static readonly Coding ColorMagenta = new Coding
    {
      Code = "magenta",
      Display = "Color Magenta",
      System = "http://hl7.org/fhir/metric-color"
    };
    public static readonly Coding ColorRed = new Coding
    {
      Code = "red",
      Display = "Color Red",
      System = "http://hl7.org/fhir/metric-color"
    };
    public static readonly Coding ColorWhite = new Coding
    {
      Code = "white",
      Display = "Color White",
      System = "http://hl7.org/fhir/metric-color"
    };
    public static readonly Coding ColorYellow = new Coding
    {
      Code = "yellow",
      Display = "Color Yellow",
      System = "http://hl7.org/fhir/metric-color"
    };
  };
  /// <summary>
  /// Describes the operational status of the DeviceMetric.
  /// </summary>
  public static class MetricOperationalStatusValueSet
  {
    public static readonly Coding Off = new Coding
    {
      Code = "off",
      Display = "Off",
      System = "http://hl7.org/fhir/metric-operational-status"
    };
    public static readonly Coding On = new Coding
    {
      Code = "on",
      Display = "On",
      System = "http://hl7.org/fhir/metric-operational-status"
    };
    public static readonly Coding Standby = new Coding
    {
      Code = "standby",
      Display = "Standby",
      System = "http://hl7.org/fhir/metric-operational-status"
    };
  };
  /// <summary>
  /// The use of a human name
  /// </summary>
  public static class NameUseValueSet
  {
    public static readonly Coding Anonymous = new Coding
    {
      Code = "anonymous",
      Display = "Anonymous",
      System = "http://hl7.org/fhir/name-use"
    };
    public static readonly Coding Maiden = new Coding
    {
      Code = "maiden",
      Display = "Maiden",
      System = "http://hl7.org/fhir/name-use"
    };
    public static readonly Coding Nickname = new Coding
    {
      Code = "nickname",
      Display = "Nickname",
      System = "http://hl7.org/fhir/name-use"
    };
    public static readonly Coding Official = new Coding
    {
      Code = "official",
      Display = "Official",
      System = "http://hl7.org/fhir/name-use"
    };
    public static readonly Coding Old = new Coding
    {
      Code = "old",
      Display = "Old",
      System = "http://hl7.org/fhir/name-use"
    };
    public static readonly Coding Temp = new Coding
    {
      Code = "temp",
      Display = "Temp",
      System = "http://hl7.org/fhir/name-use"
    };
    public static readonly Coding Usual = new Coding
    {
      Code = "usual",
      Display = "Usual",
      System = "http://hl7.org/fhir/name-use"
    };
  };
  /// <summary>
  /// Identifies the style of unique identifier used to identify a namespace.
  /// </summary>
  public static class NamingsystemIdentifierTypeValueSet
  {
    public static readonly Coding OID = new Coding
    {
      Code = "oid",
      Display = "OID",
      System = "http://hl7.org/fhir/namingsystem-identifier-type"
    };
    public static readonly Coding Other = new Coding
    {
      Code = "other",
      Display = "Other",
      System = "http://hl7.org/fhir/namingsystem-identifier-type"
    };
    public static readonly Coding URI = new Coding
    {
      Code = "uri",
      Display = "URI",
      System = "http://hl7.org/fhir/namingsystem-identifier-type"
    };
    public static readonly Coding UUID = new Coding
    {
      Code = "uuid",
      Display = "UUID",
      System = "http://hl7.org/fhir/namingsystem-identifier-type"
    };
  };
  /// <summary>
  /// Identifies the purpose of the naming system.
  /// </summary>
  public static class NamingsystemTypeValueSet
  {
    public static readonly Coding CodeSystem = new Coding
    {
      Code = "codesystem",
      Display = "Code System",
      System = "http://hl7.org/fhir/namingsystem-type"
    };
    public static readonly Coding Identifier = new Coding
    {
      Code = "identifier",
      Display = "Identifier",
      System = "http://hl7.org/fhir/namingsystem-type"
    };
    public static readonly Coding Root = new Coding
    {
      Code = "root",
      Display = "Root",
      System = "http://hl7.org/fhir/namingsystem-type"
    };
  };
  /// <summary>
  /// The status of a resource narrative
  /// </summary>
  public static class NarrativeStatusValueSet
  {
    public static readonly Coding Additional = new Coding
    {
      Code = "additional",
      Display = "Additional",
      System = "http://hl7.org/fhir/narrative-status"
    };
    public static readonly Coding Empty = new Coding
    {
      Code = "empty",
      Display = "Empty",
      System = "http://hl7.org/fhir/narrative-status"
    };
    public static readonly Coding Extensions = new Coding
    {
      Code = "extensions",
      Display = "Extensions",
      System = "http://hl7.org/fhir/narrative-status"
    };
    public static readonly Coding Generated = new Coding
    {
      Code = "generated",
      Display = "Generated",
      System = "http://hl7.org/fhir/narrative-status"
    };
  };
  /// <summary>
  /// The type of network access point of this participant in the audit event
  /// </summary>
  public static class NetworkTypeValueSet
  {
    public static readonly Coding MachineName = new Coding
    {
      Code = "1",
      Display = "Machine Name",
      System = "http://hl7.org/fhir/network-type"
    };
    public static readonly Coding IPAddress = new Coding
    {
      Code = "2",
      Display = "IP Address",
      System = "http://hl7.org/fhir/network-type"
    };
    public static readonly Coding TelephoneNumber = new Coding
    {
      Code = "3",
      Display = "Telephone Number",
      System = "http://hl7.org/fhir/network-type"
    };
    public static readonly Coding EmailAddress = new Coding
    {
      Code = "4",
      Display = "Email address",
      System = "http://hl7.org/fhir/network-type"
    };
    public static readonly Coding URI = new Coding
    {
      Code = "5",
      Display = "URI",
      System = "http://hl7.org/fhir/network-type"
    };
  };
  /// <summary>
  /// The presentation types of notes.
  /// </summary>
  public static class NoteTypeValueSet
  {
    public static readonly Coding Display = new Coding
    {
      Code = "display",
      Display = "Display",
      System = "http://hl7.org/fhir/note-type"
    };
    public static readonly Coding PrintForm = new Coding
    {
      Code = "print",
      Display = "Print (Form)",
      System = "http://hl7.org/fhir/note-type"
    };
    public static readonly Coding PrintOperator = new Coding
    {
      Code = "printoper",
      Display = "Print (Operator)",
      System = "http://hl7.org/fhir/note-type"
    };
  };
  /// <summary>
  /// Codes specifying the state of the request. Describes the lifecycle of the nutrition order.
  /// </summary>
  public static class NutritionOrderStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
    public static readonly Coding Draft = new Coding
    {
      Code = "draft",
      Display = "Draft",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
    public static readonly Coding OnHold = new Coding
    {
      Code = "on-hold",
      Display = "On-Hold",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
    public static readonly Coding Planned = new Coding
    {
      Code = "planned",
      Display = "Planned",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/nutrition-order-status"
    };
  };
  /// <summary>
  /// Codes specifying how two observations are related.
  /// </summary>
  public static class ObservationRelationshiptypesValueSet
  {
    public static readonly Coding DerivedFrom = new Coding
    {
      Code = "derived-from",
      Display = "Derived From",
      System = "http://hl7.org/fhir/observation-relationshiptypes"
    };
    public static readonly Coding HasMember = new Coding
    {
      Code = "has-member",
      Display = "Has Member",
      System = "http://hl7.org/fhir/observation-relationshiptypes"
    };
    public static readonly Coding InterferedBy = new Coding
    {
      Code = "interfered-by",
      Display = "Interfered By",
      System = "http://hl7.org/fhir/observation-relationshiptypes"
    };
    public static readonly Coding QualifiedBy = new Coding
    {
      Code = "qualified-by",
      Display = "Qualified By",
      System = "http://hl7.org/fhir/observation-relationshiptypes"
    };
    public static readonly Coding Replaces = new Coding
    {
      Code = "replaces",
      Display = "Replaces",
      System = "http://hl7.org/fhir/observation-relationshiptypes"
    };
    public static readonly Coding SequelTo = new Coding
    {
      Code = "sequel-to",
      Display = "Sequel To",
      System = "http://hl7.org/fhir/observation-relationshiptypes"
    };
  };
  /// <summary>
  /// Codes providing the status of an observation.
  /// </summary>
  public static class ObservationStatusValueSet
  {
    public static readonly Coding Amended = new Coding
    {
      Code = "amended",
      Display = "Amended",
      System = "http://hl7.org/fhir/observation-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "cancelled",
      System = "http://hl7.org/fhir/observation-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/observation-status"
    };
    public static readonly Coding Final = new Coding
    {
      Code = "final",
      Display = "Final",
      System = "http://hl7.org/fhir/observation-status"
    };
    public static readonly Coding Preliminary = new Coding
    {
      Code = "preliminary",
      Display = "Preliminary",
      System = "http://hl7.org/fhir/observation-status"
    };
    public static readonly Coding Registered = new Coding
    {
      Code = "registered",
      Display = "Registered",
      System = "http://hl7.org/fhir/observation-status"
    };
    public static readonly Coding UnknownStatus = new Coding
    {
      Code = "unknown",
      Display = "Unknown Status",
      System = "http://hl7.org/fhir/observation-status"
    };
  };
  /// <summary>
  /// Whether an operation is a normal operation or a query.
  /// </summary>
  public static class OperationKindValueSet
  {
    public static readonly Coding Operation = new Coding
    {
      Code = "operation",
      Display = "Operation",
      System = "http://hl7.org/fhir/operation-kind"
    };
    public static readonly Coding Query = new Coding
    {
      Code = "query",
      Display = "Query",
      System = "http://hl7.org/fhir/operation-kind"
    };
  };
  /// <summary>
  /// Parameter Types used in Operation Definitions
  /// </summary>
  public static class OperationParameterTypeValueSet
  {
    public static readonly Coding Account_resource_types = new Coding
    {
      Code = "Account",
      Display = "Account",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Address_data_types = new Coding
    {
      Code = "Address",
      Display = "Address",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Age_data_types = new Coding
    {
      Code = "Age",
      Display = "Age",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding AllergyIntolerance_resource_types = new Coding
    {
      Code = "AllergyIntolerance",
      Display = "AllergyIntolerance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Annotation_data_types = new Coding
    {
      Code = "Annotation",
      Display = "Annotation",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Appointment_resource_types = new Coding
    {
      Code = "Appointment",
      Display = "Appointment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AppointmentResponse_resource_types = new Coding
    {
      Code = "AppointmentResponse",
      Display = "AppointmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Attachment_data_types = new Coding
    {
      Code = "Attachment",
      Display = "Attachment",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding AuditEvent_resource_types = new Coding
    {
      Code = "AuditEvent",
      Display = "AuditEvent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding BackboneElement_data_types = new Coding
    {
      Code = "BackboneElement",
      Display = "BackboneElement",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Base64Binary_data_types = new Coding
    {
      Code = "base64Binary",
      Display = "base64Binary",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Basic_resource_types = new Coding
    {
      Code = "Basic",
      Display = "Basic",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Binary_resource_types = new Coding
    {
      Code = "Binary",
      Display = "Binary",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding BodySite_resource_types = new Coding
    {
      Code = "BodySite",
      Display = "BodySite",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Boolean_data_types = new Coding
    {
      Code = "boolean",
      Display = "boolean",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Bundle_resource_types = new Coding
    {
      Code = "Bundle",
      Display = "Bundle",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CarePlan_resource_types = new Coding
    {
      Code = "CarePlan",
      Display = "CarePlan",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Claim_resource_types = new Coding
    {
      Code = "Claim",
      Display = "Claim",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClaimResponse_resource_types = new Coding
    {
      Code = "ClaimResponse",
      Display = "ClaimResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClinicalImpression_resource_types = new Coding
    {
      Code = "ClinicalImpression",
      Display = "ClinicalImpression",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Code_data_types = new Coding
    {
      Code = "code",
      Display = "code",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding CodeableConcept_data_types = new Coding
    {
      Code = "CodeableConcept",
      Display = "CodeableConcept",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Coding_data_types = new Coding
    {
      Code = "Coding",
      Display = "Coding",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Communication_resource_types = new Coding
    {
      Code = "Communication",
      Display = "Communication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CommunicationRequest_resource_types = new Coding
    {
      Code = "CommunicationRequest",
      Display = "CommunicationRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Composite_search_param_type = new Coding
    {
      Code = "composite",
      Display = "Composite",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Composition_resource_types = new Coding
    {
      Code = "Composition",
      Display = "Composition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ConceptMap_resource_types = new Coding
    {
      Code = "ConceptMap",
      Display = "ConceptMap",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Condition_resource_types = new Coding
    {
      Code = "Condition",
      Display = "Condition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Conformance_resource_types = new Coding
    {
      Code = "Conformance",
      Display = "Conformance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ContactPoint_data_types = new Coding
    {
      Code = "ContactPoint",
      Display = "ContactPoint",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Contract_resource_types = new Coding
    {
      Code = "Contract",
      Display = "Contract",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Count_data_types = new Coding
    {
      Code = "Count",
      Display = "Count",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Coverage_resource_types = new Coding
    {
      Code = "Coverage",
      Display = "Coverage",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DataElement_resource_types = new Coding
    {
      Code = "DataElement",
      Display = "DataElement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Date_data_types = new Coding
    {
      Code = "date",
      Display = "date",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DateDateTime_search_param_type = new Coding
    {
      Code = "date",
      Display = "Date/DateTime",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding DateTime_data_types = new Coding
    {
      Code = "dateTime",
      Display = "dateTime",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding VALDecimal_data_types = new Coding
    {
      Code = "decimal",
      Display = "decimal",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DetectedIssue_resource_types = new Coding
    {
      Code = "DetectedIssue",
      Display = "DetectedIssue",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Device_resource_types = new Coding
    {
      Code = "Device",
      Display = "Device",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceComponent_resource_types = new Coding
    {
      Code = "DeviceComponent",
      Display = "DeviceComponent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceMetric_resource_types = new Coding
    {
      Code = "DeviceMetric",
      Display = "DeviceMetric",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseRequest_resource_types = new Coding
    {
      Code = "DeviceUseRequest",
      Display = "DeviceUseRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseStatement_resource_types = new Coding
    {
      Code = "DeviceUseStatement",
      Display = "DeviceUseStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticOrder_resource_types = new Coding
    {
      Code = "DiagnosticOrder",
      Display = "DiagnosticOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticReport_resource_types = new Coding
    {
      Code = "DiagnosticReport",
      Display = "DiagnosticReport",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Distance_data_types = new Coding
    {
      Code = "Distance",
      Display = "Distance",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding DocumentManifest_resource_types = new Coding
    {
      Code = "DocumentManifest",
      Display = "DocumentManifest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DocumentReference_resource_types = new Coding
    {
      Code = "DocumentReference",
      Display = "DocumentReference",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DomainResource_resource_types = new Coding
    {
      Code = "DomainResource",
      Display = "DomainResource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Duration_data_types = new Coding
    {
      Code = "Duration",
      Display = "Duration",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Element_data_types = new Coding
    {
      Code = "Element",
      Display = "Element",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ElementDefinition_data_types = new Coding
    {
      Code = "ElementDefinition",
      Display = "ElementDefinition",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding EligibilityRequest_resource_types = new Coding
    {
      Code = "EligibilityRequest",
      Display = "EligibilityRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EligibilityResponse_resource_types = new Coding
    {
      Code = "EligibilityResponse",
      Display = "EligibilityResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Encounter_resource_types = new Coding
    {
      Code = "Encounter",
      Display = "Encounter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentRequest_resource_types = new Coding
    {
      Code = "EnrollmentRequest",
      Display = "EnrollmentRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentResponse_resource_types = new Coding
    {
      Code = "EnrollmentResponse",
      Display = "EnrollmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EpisodeOfCare_resource_types = new Coding
    {
      Code = "EpisodeOfCare",
      Display = "EpisodeOfCare",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ExplanationOfBenefit_resource_types = new Coding
    {
      Code = "ExplanationOfBenefit",
      Display = "ExplanationOfBenefit",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Extension_data_types = new Coding
    {
      Code = "Extension",
      Display = "Extension",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding FamilyMemberHistory_resource_types = new Coding
    {
      Code = "FamilyMemberHistory",
      Display = "FamilyMemberHistory",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Flag_resource_types = new Coding
    {
      Code = "Flag",
      Display = "Flag",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Goal_resource_types = new Coding
    {
      Code = "Goal",
      Display = "Goal",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Group_resource_types = new Coding
    {
      Code = "Group",
      Display = "Group",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding HealthcareService_resource_types = new Coding
    {
      Code = "HealthcareService",
      Display = "HealthcareService",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding HumanName_data_types = new Coding
    {
      Code = "HumanName",
      Display = "HumanName",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Id_data_types = new Coding
    {
      Code = "id",
      Display = "id",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Identifier_data_types = new Coding
    {
      Code = "Identifier",
      Display = "Identifier",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ImagingObjectSelection_resource_types = new Coding
    {
      Code = "ImagingObjectSelection",
      Display = "ImagingObjectSelection",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImagingStudy_resource_types = new Coding
    {
      Code = "ImagingStudy",
      Display = "ImagingStudy",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Immunization_resource_types = new Coding
    {
      Code = "Immunization",
      Display = "Immunization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImmunizationRecommendation_resource_types = new Coding
    {
      Code = "ImmunizationRecommendation",
      Display = "ImmunizationRecommendation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImplementationGuide_resource_types = new Coding
    {
      Code = "ImplementationGuide",
      Display = "ImplementationGuide",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Instant_data_types = new Coding
    {
      Code = "instant",
      Display = "instant",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Integer_data_types = new Coding
    {
      Code = "integer",
      Display = "integer",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding List_resource_types = new Coding
    {
      Code = "List",
      Display = "List",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Location_resource_types = new Coding
    {
      Code = "Location",
      Display = "Location",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Markdown_data_types = new Coding
    {
      Code = "markdown",
      Display = "markdown",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Media_resource_types = new Coding
    {
      Code = "Media",
      Display = "Media",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Medication_resource_types = new Coding
    {
      Code = "Medication",
      Display = "Medication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationAdministration_resource_types = new Coding
    {
      Code = "MedicationAdministration",
      Display = "MedicationAdministration",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationDispense_resource_types = new Coding
    {
      Code = "MedicationDispense",
      Display = "MedicationDispense",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationOrder_resource_types = new Coding
    {
      Code = "MedicationOrder",
      Display = "MedicationOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationStatement_resource_types = new Coding
    {
      Code = "MedicationStatement",
      Display = "MedicationStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MessageHeader_resource_types = new Coding
    {
      Code = "MessageHeader",
      Display = "MessageHeader",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Meta_data_types = new Coding
    {
      Code = "Meta",
      Display = "Meta",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Money_data_types = new Coding
    {
      Code = "Money",
      Display = "Money",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding NamingSystem_resource_types = new Coding
    {
      Code = "NamingSystem",
      Display = "NamingSystem",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Narrative_data_types = new Coding
    {
      Code = "Narrative",
      Display = "Narrative",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Number_search_param_type = new Coding
    {
      Code = "number",
      Display = "Number",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding NutritionOrder_resource_types = new Coding
    {
      Code = "NutritionOrder",
      Display = "NutritionOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Observation_resource_types = new Coding
    {
      Code = "Observation",
      Display = "Observation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Oid_data_types = new Coding
    {
      Code = "oid",
      Display = "oid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding OperationDefinition_resource_types = new Coding
    {
      Code = "OperationDefinition",
      Display = "OperationDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OperationOutcome_resource_types = new Coding
    {
      Code = "OperationOutcome",
      Display = "OperationOutcome",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Order_resource_types = new Coding
    {
      Code = "Order",
      Display = "Order",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OrderResponse_resource_types = new Coding
    {
      Code = "OrderResponse",
      Display = "OrderResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Organization_resource_types = new Coding
    {
      Code = "Organization",
      Display = "Organization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Parameters_resource_types = new Coding
    {
      Code = "Parameters",
      Display = "Parameters",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Patient_resource_types = new Coding
    {
      Code = "Patient",
      Display = "Patient",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentNotice_resource_types = new Coding
    {
      Code = "PaymentNotice",
      Display = "PaymentNotice",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentReconciliation_resource_types = new Coding
    {
      Code = "PaymentReconciliation",
      Display = "PaymentReconciliation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Period_data_types = new Coding
    {
      Code = "Period",
      Display = "Period",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Person_resource_types = new Coding
    {
      Code = "Person",
      Display = "Person",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PositiveInt_data_types = new Coding
    {
      Code = "positiveInt",
      Display = "positiveInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Practitioner_resource_types = new Coding
    {
      Code = "Practitioner",
      Display = "Practitioner",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Procedure_resource_types = new Coding
    {
      Code = "Procedure",
      Display = "Procedure",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcedureRequest_resource_types = new Coding
    {
      Code = "ProcedureRequest",
      Display = "ProcedureRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessRequest_resource_types = new Coding
    {
      Code = "ProcessRequest",
      Display = "ProcessRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessResponse_resource_types = new Coding
    {
      Code = "ProcessResponse",
      Display = "ProcessResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Provenance_resource_types = new Coding
    {
      Code = "Provenance",
      Display = "Provenance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Quantity_search_param_type = new Coding
    {
      Code = "quantity",
      Display = "Quantity",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Quantity_data_types = new Coding
    {
      Code = "Quantity",
      Display = "Quantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Questionnaire_resource_types = new Coding
    {
      Code = "Questionnaire",
      Display = "Questionnaire",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding QuestionnaireResponse_resource_types = new Coding
    {
      Code = "QuestionnaireResponse",
      Display = "QuestionnaireResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Range_data_types = new Coding
    {
      Code = "Range",
      Display = "Range",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Ratio_data_types = new Coding
    {
      Code = "Ratio",
      Display = "Ratio",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Reference_search_param_type = new Coding
    {
      Code = "reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Reference_data_types = new Coding
    {
      Code = "Reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ReferralRequest_resource_types = new Coding
    {
      Code = "ReferralRequest",
      Display = "ReferralRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RelatedPerson_resource_types = new Coding
    {
      Code = "RelatedPerson",
      Display = "RelatedPerson",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Resource_resource_types = new Coding
    {
      Code = "Resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RiskAssessment_resource_types = new Coding
    {
      Code = "RiskAssessment",
      Display = "RiskAssessment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SampledData_data_types = new Coding
    {
      Code = "SampledData",
      Display = "SampledData",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Schedule_resource_types = new Coding
    {
      Code = "Schedule",
      Display = "Schedule",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SearchParameter_resource_types = new Coding
    {
      Code = "SearchParameter",
      Display = "SearchParameter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Signature_data_types = new Coding
    {
      Code = "Signature",
      Display = "Signature",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding SimpleQuantity_data_types = new Coding
    {
      Code = "SimpleQuantity",
      Display = "SimpleQuantity",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Slot_resource_types = new Coding
    {
      Code = "Slot",
      Display = "Slot",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Specimen_resource_types = new Coding
    {
      Code = "Specimen",
      Display = "Specimen",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding VALString_data_types = new Coding
    {
      Code = "string",
      Display = "string",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding String_search_param_type = new Coding
    {
      Code = "string",
      Display = "String",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding StructureDefinition_resource_types = new Coding
    {
      Code = "StructureDefinition",
      Display = "StructureDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Subscription_resource_types = new Coding
    {
      Code = "Subscription",
      Display = "Subscription",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Substance_resource_types = new Coding
    {
      Code = "Substance",
      Display = "Substance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyDelivery_resource_types = new Coding
    {
      Code = "SupplyDelivery",
      Display = "SupplyDelivery",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyRequest_resource_types = new Coding
    {
      Code = "SupplyRequest",
      Display = "SupplyRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding TestScript_resource_types = new Coding
    {
      Code = "TestScript",
      Display = "TestScript",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Time_data_types = new Coding
    {
      Code = "time",
      Display = "time",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Timing_data_types = new Coding
    {
      Code = "Timing",
      Display = "Timing",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Token_search_param_type = new Coding
    {
      Code = "token",
      Display = "Token",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding UnsignedInt_data_types = new Coding
    {
      Code = "unsignedInt",
      Display = "unsignedInt",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding Uri_data_types = new Coding
    {
      Code = "uri",
      Display = "uri",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding URI_search_param_type = new Coding
    {
      Code = "uri",
      Display = "URI",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Uuid_data_types = new Coding
    {
      Code = "uuid",
      Display = "uuid",
      System = "http://hl7.org/fhir/data-types"
    };
    public static readonly Coding ValueSet_resource_types = new Coding
    {
      Code = "ValueSet",
      Display = "ValueSet",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding VisionPrescription_resource_types = new Coding
    {
      Code = "VisionPrescription",
      Display = "VisionPrescription",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding XHTML_data_types = new Coding
    {
      Code = "xhtml",
      Display = "XHTML",
      System = "http://hl7.org/fhir/data-types"
    };
  };
  /// <summary>
  /// Whether an operation parameter is an input or an output parameter.
  /// </summary>
  public static class OperationParameterUseValueSet
  {
    public static readonly Coding In = new Coding
    {
      Code = "in",
      Display = "In",
      System = "http://hl7.org/fhir/operation-parameter-use"
    };
    public static readonly Coding Out = new Coding
    {
      Code = "out",
      Display = "Out",
      System = "http://hl7.org/fhir/operation-parameter-use"
    };
  };
  /// <summary>
  /// The status of the response to an order.
  /// </summary>
  public static class OrderStatusValueSet
  {
    public static readonly Coding Aborted = new Coding
    {
      Code = "aborted",
      Display = "Aborted",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Error = new Coding
    {
      Code = "error",
      Display = "Error",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Pending = new Coding
    {
      Code = "pending",
      Display = "Pending",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Replaced = new Coding
    {
      Code = "replaced",
      Display = "Replaced",
      System = "http://hl7.org/fhir/order-status"
    };
    public static readonly Coding Review = new Coding
    {
      Code = "review",
      Display = "Review",
      System = "http://hl7.org/fhir/order-status"
    };
  };
  /// <summary>
  /// Is the Participant required to attend the appointment.
  /// </summary>
  public static class ParticipantrequiredValueSet
  {
    public static readonly Coding InformationOnly = new Coding
    {
      Code = "information-only",
      Display = "Information Only",
      System = "http://hl7.org/fhir/participantrequired"
    };
    public static readonly Coding Optional = new Coding
    {
      Code = "optional",
      Display = "Optional",
      System = "http://hl7.org/fhir/participantrequired"
    };
    public static readonly Coding Required = new Coding
    {
      Code = "required",
      Display = "Required",
      System = "http://hl7.org/fhir/participantrequired"
    };
  };
  /// <summary>
  /// The Participation status of an appointment.
  /// </summary>
  public static class ParticipantstatusValueSet
  {
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/participantstatus"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/participantstatus"
    };
    public static readonly Coding Declined = new Coding
    {
      Code = "declined",
      Display = "Declined",
      System = "http://hl7.org/fhir/participantstatus"
    };
    public static readonly Coding InProcess = new Coding
    {
      Code = "in-process",
      Display = "In Process",
      System = "http://hl7.org/fhir/participantstatus"
    };
    public static readonly Coding NeedsAction = new Coding
    {
      Code = "needs-action",
      Display = "Needs Action",
      System = "http://hl7.org/fhir/participantstatus"
    };
    public static readonly Coding Tentative = new Coding
    {
      Code = "tentative",
      Display = "Tentative",
      System = "http://hl7.org/fhir/participantstatus"
    };
  };
  /// <summary>
  /// The Participation status of an appointment.
  /// </summary>
  public static class ParticipationstatusValueSet
  {
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/participationstatus"
    };
    public static readonly Coding Declined = new Coding
    {
      Code = "declined",
      Display = "Declined",
      System = "http://hl7.org/fhir/participationstatus"
    };
    public static readonly Coding NeedsAction = new Coding
    {
      Code = "needs-action",
      Display = "Needs Action",
      System = "http://hl7.org/fhir/participationstatus"
    };
    public static readonly Coding Tentative = new Coding
    {
      Code = "tentative",
      Display = "Tentative",
      System = "http://hl7.org/fhir/participationstatus"
    };
  };
  /// <summary>
  /// The priority of the request.
  /// </summary>
  public static class ProcedureRequestPriorityValueSet
  {
    public static readonly Coding ASAP = new Coding
    {
      Code = "asap",
      Display = "ASAP",
      System = "http://hl7.org/fhir/procedure-request-priority"
    };
    public static readonly Coding Routine = new Coding
    {
      Code = "routine",
      Display = "Routine",
      System = "http://hl7.org/fhir/procedure-request-priority"
    };
    public static readonly Coding Stat = new Coding
    {
      Code = "stat",
      Display = "Stat",
      System = "http://hl7.org/fhir/procedure-request-priority"
    };
    public static readonly Coding Urgent = new Coding
    {
      Code = "urgent",
      Display = "Urgent",
      System = "http://hl7.org/fhir/procedure-request-priority"
    };
  };
  /// <summary>
  /// The status of the request.
  /// </summary>
  public static class ProcedureRequestStatusValueSet
  {
    public static readonly Coding Aborted = new Coding
    {
      Code = "aborted",
      Display = "Aborted",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Draft = new Coding
    {
      Code = "draft",
      Display = "Draft",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Proposed = new Coding
    {
      Code = "proposed",
      Display = "Proposed",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Received = new Coding
    {
      Code = "received",
      Display = "Received",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
    public static readonly Coding Suspended = new Coding
    {
      Code = "suspended",
      Display = "Suspended",
      System = "http://hl7.org/fhir/procedure-request-status"
    };
  };
  /// <summary>
  /// A code specifying the state of the procedure.
  /// </summary>
  public static class ProcedureStatusValueSet
  {
    public static readonly Coding Aboted = new Coding
    {
      Code = "aborted",
      Display = "Aboted",
      System = "http://hl7.org/fhir/procedure-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/procedure-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered in Error",
      System = "http://hl7.org/fhir/procedure-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/procedure-status"
    };
  };
  /// <summary>
  /// How a property is represented on the wire.
  /// </summary>
  public static class PropertyRepresentationValueSet
  {
    public static readonly Coding XMLAttribute = new Coding
    {
      Code = "xmlAttr",
      Display = "XML Attribute",
      System = "http://hl7.org/fhir/property-representation"
    };
  };
  /// <summary>
  /// How an entity was used in an activity.
  /// </summary>
  public static class ProvenanceEntityRoleValueSet
  {
    public static readonly Coding Derivation = new Coding
    {
      Code = "derivation",
      Display = "Derivation",
      System = "http://hl7.org/fhir/provenance-entity-role"
    };
    public static readonly Coding Quotation = new Coding
    {
      Code = "quotation",
      Display = "Quotation",
      System = "http://hl7.org/fhir/provenance-entity-role"
    };
    public static readonly Coding Revision = new Coding
    {
      Code = "revision",
      Display = "Revision",
      System = "http://hl7.org/fhir/provenance-entity-role"
    };
    public static readonly Coding Source = new Coding
    {
      Code = "source",
      Display = "Source",
      System = "http://hl7.org/fhir/provenance-entity-role"
    };
  };
  /// <summary>
  /// How the Quantity should be understood and represented.
  /// </summary>
  public static class QuantityComparatorValueSet
  {
    public static readonly Coding LessThan = new Coding
    {
      Code = "<",
      Display = "Less than",
      System = "http://hl7.org/fhir/quantity-comparator"
    };
    public static readonly Coding LessOrEqualTo = new Coding
    {
      Code = "<=",
      Display = "Less or Equal to",
      System = "http://hl7.org/fhir/quantity-comparator"
    };
    public static readonly Coding GreaterThan = new Coding
    {
      Code = ">",
      Display = "Greater than",
      System = "http://hl7.org/fhir/quantity-comparator"
    };
    public static readonly Coding GreaterOrEqualTo = new Coding
    {
      Code = ">=",
      Display = "Greater or Equal to",
      System = "http://hl7.org/fhir/quantity-comparator"
    };
  };
  /// <summary>
  /// Lifecycle status of the questionnaire response.
  /// </summary>
  public static class QuestionnaireAnswersStatusValueSet
  {
    public static readonly Coding Amended = new Coding
    {
      Code = "amended",
      Display = "Amended",
      System = "http://hl7.org/fhir/questionnaire-answers-status"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/questionnaire-answers-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/questionnaire-answers-status"
    };
  };
  /// <summary>
  /// Lifecycle status of the questionnaire.
  /// </summary>
  public static class QuestionnaireStatusValueSet
  {
    public static readonly Coding Draft = new Coding
    {
      Code = "draft",
      Display = "Draft",
      System = "http://hl7.org/fhir/questionnaire-status"
    };
    public static readonly Coding Published = new Coding
    {
      Code = "published",
      Display = "Published",
      System = "http://hl7.org/fhir/questionnaire-status"
    };
    public static readonly Coding Retired = new Coding
    {
      Code = "retired",
      Display = "Retired",
      System = "http://hl7.org/fhir/questionnaire-status"
    };
  };
  /// <summary>
  /// Statement about the degree of clinical certainty that a Specific Substance was the cause of the Manifestation in an reaction event.
  /// </summary>
  public static class ReactionEventCertaintyValueSet
  {
    public static readonly Coding Confirmed = new Coding
    {
      Code = "confirmed",
      Display = "Confirmed",
      System = "http://hl7.org/fhir/reaction-event-certainty"
    };
    public static readonly Coding Likely = new Coding
    {
      Code = "likely",
      Display = "Likely",
      System = "http://hl7.org/fhir/reaction-event-certainty"
    };
    public static readonly Coding Unlikely = new Coding
    {
      Code = "unlikely",
      Display = "Unlikely",
      System = "http://hl7.org/fhir/reaction-event-certainty"
    };
  };
  /// <summary>
  /// Clinical assessment of the severity of a reaction event as a whole, potentially considering multiple different manifestations.
  /// </summary>
  public static class ReactionEventSeverityValueSet
  {
    public static readonly Coding Mild = new Coding
    {
      Code = "mild",
      Display = "Mild",
      System = "http://hl7.org/fhir/reaction-event-severity"
    };
    public static readonly Coding Moderate = new Coding
    {
      Code = "moderate",
      Display = "Moderate",
      System = "http://hl7.org/fhir/reaction-event-severity"
    };
    public static readonly Coding Severe = new Coding
    {
      Code = "severe",
      Display = "Severe",
      System = "http://hl7.org/fhir/reaction-event-severity"
    };
  };
  /// <summary>
  /// The status of the referral.
  /// </summary>
  public static class ReferralstatusValueSet
  {
    public static readonly Coding Accepted = new Coding
    {
      Code = "accepted",
      Display = "Accepted",
      System = "http://hl7.org/fhir/referralstatus"
    };
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/referralstatus"
    };
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/referralstatus"
    };
    public static readonly Coding Completed = new Coding
    {
      Code = "completed",
      Display = "Completed",
      System = "http://hl7.org/fhir/referralstatus"
    };
    public static readonly Coding Draft = new Coding
    {
      Code = "draft",
      Display = "Draft",
      System = "http://hl7.org/fhir/referralstatus"
    };
    public static readonly Coding Rejected = new Coding
    {
      Code = "rejected",
      Display = "Rejected",
      System = "http://hl7.org/fhir/referralstatus"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/referralstatus"
    };
  };
  /// <summary>
  /// The outcome of the processing.
  /// </summary>
  public static class RemittanceOutcomeValueSet
  {
    public static readonly Coding Complete = new Coding
    {
      Code = "complete",
      Display = "Complete",
      System = "http://hl7.org/fhir/remittance-outcome"
    };
    public static readonly Coding Error = new Coding
    {
      Code = "error",
      Display = "Error",
      System = "http://hl7.org/fhir/remittance-outcome"
    };
  };
  /// <summary>
  /// How resource references can be aggregated.
  /// </summary>
  public static class ResourceAggregationModeValueSet
  {
    public static readonly Coding Bundled = new Coding
    {
      Code = "bundled",
      Display = "Bundled",
      System = "http://hl7.org/fhir/resource-aggregation-mode"
    };
    public static readonly Coding Contained = new Coding
    {
      Code = "contained",
      Display = "Contained",
      System = "http://hl7.org/fhir/resource-aggregation-mode"
    };
    public static readonly Coding Referenced = new Coding
    {
      Code = "referenced",
      Display = "Referenced",
      System = "http://hl7.org/fhir/resource-aggregation-mode"
    };
  };
  /// <summary>
  /// How slices are interpreted when evaluating an instance.
  /// </summary>
  public static class ResourceSlicingRulesValueSet
  {
    public static readonly Coding Closed = new Coding
    {
      Code = "closed",
      Display = "Closed",
      System = "http://hl7.org/fhir/resource-slicing-rules"
    };
    public static readonly Coding Open = new Coding
    {
      Code = "open",
      Display = "Open",
      System = "http://hl7.org/fhir/resource-slicing-rules"
    };
    public static readonly Coding OpenAtEnd = new Coding
    {
      Code = "openAtEnd",
      Display = "Open at End",
      System = "http://hl7.org/fhir/resource-slicing-rules"
    };
  };
  /// <summary>
  /// One of the resource types defined as part of FHIR.
  /// </summary>
  public static class ResourceTypesValueSet
  {
    public static readonly Coding Account = new Coding
    {
      Code = "Account",
      Display = "Account",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AllergyIntolerance = new Coding
    {
      Code = "AllergyIntolerance",
      Display = "AllergyIntolerance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Appointment = new Coding
    {
      Code = "Appointment",
      Display = "Appointment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AppointmentResponse = new Coding
    {
      Code = "AppointmentResponse",
      Display = "AppointmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding AuditEvent = new Coding
    {
      Code = "AuditEvent",
      Display = "AuditEvent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Basic = new Coding
    {
      Code = "Basic",
      Display = "Basic",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Binary = new Coding
    {
      Code = "Binary",
      Display = "Binary",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding BodySite = new Coding
    {
      Code = "BodySite",
      Display = "BodySite",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Bundle = new Coding
    {
      Code = "Bundle",
      Display = "Bundle",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CarePlan = new Coding
    {
      Code = "CarePlan",
      Display = "CarePlan",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Claim = new Coding
    {
      Code = "Claim",
      Display = "Claim",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClaimResponse = new Coding
    {
      Code = "ClaimResponse",
      Display = "ClaimResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ClinicalImpression = new Coding
    {
      Code = "ClinicalImpression",
      Display = "ClinicalImpression",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Communication = new Coding
    {
      Code = "Communication",
      Display = "Communication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding CommunicationRequest = new Coding
    {
      Code = "CommunicationRequest",
      Display = "CommunicationRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Composition = new Coding
    {
      Code = "Composition",
      Display = "Composition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ConceptMap = new Coding
    {
      Code = "ConceptMap",
      Display = "ConceptMap",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Condition = new Coding
    {
      Code = "Condition",
      Display = "Condition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Conformance = new Coding
    {
      Code = "Conformance",
      Display = "Conformance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Contract = new Coding
    {
      Code = "Contract",
      Display = "Contract",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Coverage = new Coding
    {
      Code = "Coverage",
      Display = "Coverage",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DataElement = new Coding
    {
      Code = "DataElement",
      Display = "DataElement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DetectedIssue = new Coding
    {
      Code = "DetectedIssue",
      Display = "DetectedIssue",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Device = new Coding
    {
      Code = "Device",
      Display = "Device",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceComponent = new Coding
    {
      Code = "DeviceComponent",
      Display = "DeviceComponent",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceMetric = new Coding
    {
      Code = "DeviceMetric",
      Display = "DeviceMetric",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseRequest = new Coding
    {
      Code = "DeviceUseRequest",
      Display = "DeviceUseRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DeviceUseStatement = new Coding
    {
      Code = "DeviceUseStatement",
      Display = "DeviceUseStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticOrder = new Coding
    {
      Code = "DiagnosticOrder",
      Display = "DiagnosticOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DiagnosticReport = new Coding
    {
      Code = "DiagnosticReport",
      Display = "DiagnosticReport",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DocumentManifest = new Coding
    {
      Code = "DocumentManifest",
      Display = "DocumentManifest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DocumentReference = new Coding
    {
      Code = "DocumentReference",
      Display = "DocumentReference",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding DomainResource = new Coding
    {
      Code = "DomainResource",
      Display = "DomainResource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EligibilityRequest = new Coding
    {
      Code = "EligibilityRequest",
      Display = "EligibilityRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EligibilityResponse = new Coding
    {
      Code = "EligibilityResponse",
      Display = "EligibilityResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Encounter = new Coding
    {
      Code = "Encounter",
      Display = "Encounter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentRequest = new Coding
    {
      Code = "EnrollmentRequest",
      Display = "EnrollmentRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EnrollmentResponse = new Coding
    {
      Code = "EnrollmentResponse",
      Display = "EnrollmentResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding EpisodeOfCare = new Coding
    {
      Code = "EpisodeOfCare",
      Display = "EpisodeOfCare",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ExplanationOfBenefit = new Coding
    {
      Code = "ExplanationOfBenefit",
      Display = "ExplanationOfBenefit",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding FamilyMemberHistory = new Coding
    {
      Code = "FamilyMemberHistory",
      Display = "FamilyMemberHistory",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Flag = new Coding
    {
      Code = "Flag",
      Display = "Flag",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Goal = new Coding
    {
      Code = "Goal",
      Display = "Goal",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Group = new Coding
    {
      Code = "Group",
      Display = "Group",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding HealthcareService = new Coding
    {
      Code = "HealthcareService",
      Display = "HealthcareService",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImagingObjectSelection = new Coding
    {
      Code = "ImagingObjectSelection",
      Display = "ImagingObjectSelection",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImagingStudy = new Coding
    {
      Code = "ImagingStudy",
      Display = "ImagingStudy",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Immunization = new Coding
    {
      Code = "Immunization",
      Display = "Immunization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImmunizationRecommendation = new Coding
    {
      Code = "ImmunizationRecommendation",
      Display = "ImmunizationRecommendation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ImplementationGuide = new Coding
    {
      Code = "ImplementationGuide",
      Display = "ImplementationGuide",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding List = new Coding
    {
      Code = "List",
      Display = "List",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Location = new Coding
    {
      Code = "Location",
      Display = "Location",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Media = new Coding
    {
      Code = "Media",
      Display = "Media",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Medication = new Coding
    {
      Code = "Medication",
      Display = "Medication",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationAdministration = new Coding
    {
      Code = "MedicationAdministration",
      Display = "MedicationAdministration",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationDispense = new Coding
    {
      Code = "MedicationDispense",
      Display = "MedicationDispense",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationOrder = new Coding
    {
      Code = "MedicationOrder",
      Display = "MedicationOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MedicationStatement = new Coding
    {
      Code = "MedicationStatement",
      Display = "MedicationStatement",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding MessageHeader = new Coding
    {
      Code = "MessageHeader",
      Display = "MessageHeader",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding NamingSystem = new Coding
    {
      Code = "NamingSystem",
      Display = "NamingSystem",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding NutritionOrder = new Coding
    {
      Code = "NutritionOrder",
      Display = "NutritionOrder",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Observation = new Coding
    {
      Code = "Observation",
      Display = "Observation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OperationDefinition = new Coding
    {
      Code = "OperationDefinition",
      Display = "OperationDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OperationOutcome = new Coding
    {
      Code = "OperationOutcome",
      Display = "OperationOutcome",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Order = new Coding
    {
      Code = "Order",
      Display = "Order",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding OrderResponse = new Coding
    {
      Code = "OrderResponse",
      Display = "OrderResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Organization = new Coding
    {
      Code = "Organization",
      Display = "Organization",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Parameters = new Coding
    {
      Code = "Parameters",
      Display = "Parameters",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Patient = new Coding
    {
      Code = "Patient",
      Display = "Patient",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentNotice = new Coding
    {
      Code = "PaymentNotice",
      Display = "PaymentNotice",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding PaymentReconciliation = new Coding
    {
      Code = "PaymentReconciliation",
      Display = "PaymentReconciliation",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Person = new Coding
    {
      Code = "Person",
      Display = "Person",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Practitioner = new Coding
    {
      Code = "Practitioner",
      Display = "Practitioner",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Procedure = new Coding
    {
      Code = "Procedure",
      Display = "Procedure",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcedureRequest = new Coding
    {
      Code = "ProcedureRequest",
      Display = "ProcedureRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessRequest = new Coding
    {
      Code = "ProcessRequest",
      Display = "ProcessRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ProcessResponse = new Coding
    {
      Code = "ProcessResponse",
      Display = "ProcessResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Provenance = new Coding
    {
      Code = "Provenance",
      Display = "Provenance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Questionnaire = new Coding
    {
      Code = "Questionnaire",
      Display = "Questionnaire",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding QuestionnaireResponse = new Coding
    {
      Code = "QuestionnaireResponse",
      Display = "QuestionnaireResponse",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ReferralRequest = new Coding
    {
      Code = "ReferralRequest",
      Display = "ReferralRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RelatedPerson = new Coding
    {
      Code = "RelatedPerson",
      Display = "RelatedPerson",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Resource = new Coding
    {
      Code = "Resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding RiskAssessment = new Coding
    {
      Code = "RiskAssessment",
      Display = "RiskAssessment",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Schedule = new Coding
    {
      Code = "Schedule",
      Display = "Schedule",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SearchParameter = new Coding
    {
      Code = "SearchParameter",
      Display = "SearchParameter",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Slot = new Coding
    {
      Code = "Slot",
      Display = "Slot",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Specimen = new Coding
    {
      Code = "Specimen",
      Display = "Specimen",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding StructureDefinition = new Coding
    {
      Code = "StructureDefinition",
      Display = "StructureDefinition",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Subscription = new Coding
    {
      Code = "Subscription",
      Display = "Subscription",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding Substance = new Coding
    {
      Code = "Substance",
      Display = "Substance",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyDelivery = new Coding
    {
      Code = "SupplyDelivery",
      Display = "SupplyDelivery",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding SupplyRequest = new Coding
    {
      Code = "SupplyRequest",
      Display = "SupplyRequest",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding TestScript = new Coding
    {
      Code = "TestScript",
      Display = "TestScript",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding ValueSet = new Coding
    {
      Code = "ValueSet",
      Display = "ValueSet",
      System = "http://hl7.org/fhir/resource-types"
    };
    public static readonly Coding VisionPrescription = new Coding
    {
      Code = "VisionPrescription",
      Display = "VisionPrescription",
      System = "http://hl7.org/fhir/resource-types"
    };
  };
  /// <summary>
  /// The kind of response to a message
  /// </summary>
  public static class ResponseCodeValueSet
  {
    public static readonly Coding FatalError = new Coding
    {
      Code = "fatal-error",
      Display = "Fatal Error",
      System = "http://hl7.org/fhir/response-code"
    };
    public static readonly Coding OK = new Coding
    {
      Code = "ok",
      Display = "OK",
      System = "http://hl7.org/fhir/response-code"
    };
    public static readonly Coding TransientError = new Coding
    {
      Code = "transient-error",
      Display = "Transient Error",
      System = "http://hl7.org/fhir/response-code"
    };
  };
  /// <summary>
  /// The mode of a RESTful conformance statement.
  /// </summary>
  public static class RestfulConformanceModeValueSet
  {
    public static readonly Coding Client = new Coding
    {
      Code = "client",
      Display = "Client",
      System = "http://hl7.org/fhir/restful-conformance-mode"
    };
    public static readonly Coding Server = new Coding
    {
      Code = "server",
      Display = "Server",
      System = "http://hl7.org/fhir/restful-conformance-mode"
    };
  };
  /// <summary>
  /// Why an entry is in the result set - whether it's included as a match or because of an _include requirement.
  /// </summary>
  public static class SearchEntryModeValueSet
  {
    public static readonly Coding Include = new Coding
    {
      Code = "include",
      Display = "Include",
      System = "http://hl7.org/fhir/search-entry-mode"
    };
    public static readonly Coding Match = new Coding
    {
      Code = "match",
      Display = "Match",
      System = "http://hl7.org/fhir/search-entry-mode"
    };
    public static readonly Coding Outcome = new Coding
    {
      Code = "outcome",
      Display = "Outcome",
      System = "http://hl7.org/fhir/search-entry-mode"
    };
  };
  /// <summary>
  /// A supported modifier for a search parameter.
  /// </summary>
  public static class SearchModifierCodeValueSet
  {
    public static readonly Coding Above = new Coding
    {
      Code = "above",
      Display = "Above",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding Below = new Coding
    {
      Code = "below",
      Display = "Below",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding Contains = new Coding
    {
      Code = "contains",
      Display = "Contains",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding Exact = new Coding
    {
      Code = "exact",
      Display = "Exact",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding In = new Coding
    {
      Code = "in",
      Display = "In",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding Missing = new Coding
    {
      Code = "missing",
      Display = "Missing",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding Not = new Coding
    {
      Code = "not",
      Display = "Not",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding NotIn = new Coding
    {
      Code = "not-in",
      Display = "Not In",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding Text = new Coding
    {
      Code = "text",
      Display = "Text",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
    public static readonly Coding Type = new Coding
    {
      Code = "type",
      Display = "Type",
      System = "http://hl7.org/fhir/search-modifier-code"
    };
  };
  /// <summary>
  /// Data types allowed to be used for search parameters.
  /// </summary>
  public static class SearchParamTypeValueSet
  {
    public static readonly Coding Composite = new Coding
    {
      Code = "composite",
      Display = "Composite",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding DateDateTime = new Coding
    {
      Code = "date",
      Display = "Date/DateTime",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Number = new Coding
    {
      Code = "number",
      Display = "Number",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Quantity = new Coding
    {
      Code = "quantity",
      Display = "Quantity",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Reference = new Coding
    {
      Code = "reference",
      Display = "Reference",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding String = new Coding
    {
      Code = "string",
      Display = "String",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding Token = new Coding
    {
      Code = "token",
      Display = "Token",
      System = "http://hl7.org/fhir/search-param-type"
    };
    public static readonly Coding URI = new Coding
    {
      Code = "uri",
      Display = "URI",
      System = "http://hl7.org/fhir/search-param-type"
    };
  };
  /// <summary>
  /// How a search parameter relates to the set of elements returned by evaluating its xpath query.
  /// </summary>
  public static class SearchXpathUsageValueSet
  {
    public static readonly Coding Distance = new Coding
    {
      Code = "distance",
      Display = "Distance",
      System = "http://hl7.org/fhir/search-xpath-usage"
    };
    public static readonly Coding Nearby = new Coding
    {
      Code = "nearby",
      Display = "Nearby",
      System = "http://hl7.org/fhir/search-xpath-usage"
    };
    public static readonly Coding Normal = new Coding
    {
      Code = "normal",
      Display = "Normal",
      System = "http://hl7.org/fhir/search-xpath-usage"
    };
    public static readonly Coding Other = new Coding
    {
      Code = "other",
      Display = "Other",
      System = "http://hl7.org/fhir/search-xpath-usage"
    };
    public static readonly Coding Phonetic = new Coding
    {
      Code = "phonetic",
      Display = "Phonetic",
      System = "http://hl7.org/fhir/search-xpath-usage"
    };
  };
  /// <summary>
  /// The free/busy status of a slot.
  /// </summary>
  public static class SlotstatusValueSet
  {
    public static readonly Coding Busy = new Coding
    {
      Code = "busy",
      Display = "Busy",
      System = "http://hl7.org/fhir/slotstatus"
    };
    public static readonly Coding BusyTentative = new Coding
    {
      Code = "busy-tentative",
      Display = "Busy (Tentative)",
      System = "http://hl7.org/fhir/slotstatus"
    };
    public static readonly Coding BusyUnavailable = new Coding
    {
      Code = "busy-unavailable",
      Display = "Busy (Unavailable)",
      System = "http://hl7.org/fhir/slotstatus"
    };
    public static readonly Coding Free = new Coding
    {
      Code = "free",
      Display = "Free",
      System = "http://hl7.org/fhir/slotstatus"
    };
  };
  /// <summary>
  /// A set of generally useful codes defined so they can be included in value sets.
  /// </summary>
  public static class SpecialValuesValueSet
  {
    public static readonly Coding VALFalse = new Coding
    {
      Code = "false",
      Display = "false",
      System = "http://hl7.org/fhir/special-values"
    };
    public static readonly Coding NilKnown = new Coding
    {
      Code = "nil-known",
      Display = "Nil Known",
      System = "http://hl7.org/fhir/special-values"
    };
    public static readonly Coding SufficientQuantity = new Coding
    {
      Code = "sufficient",
      Display = "Sufficient Quantity",
      System = "http://hl7.org/fhir/special-values"
    };
    public static readonly Coding TraceAmountDetected = new Coding
    {
      Code = "trace",
      Display = "Trace Amount Detected",
      System = "http://hl7.org/fhir/special-values"
    };
    public static readonly Coding VALTrue = new Coding
    {
      Code = "true",
      Display = "true",
      System = "http://hl7.org/fhir/special-values"
    };
    public static readonly Coding ValueWithdrawn = new Coding
    {
      Code = "withdrawn",
      Display = "Value Withdrawn",
      System = "http://hl7.org/fhir/special-values"
    };
  };
  /// <summary>
  /// Codes providing the status/availability of a specimen.
  /// </summary>
  public static class SpecimenStatusValueSet
  {
    public static readonly Coding Available = new Coding
    {
      Code = "available",
      Display = "Available",
      System = "http://hl7.org/fhir/specimen-status"
    };
    public static readonly Coding EnteredInError = new Coding
    {
      Code = "entered-in-error",
      Display = "Entered-in-error",
      System = "http://hl7.org/fhir/specimen-status"
    };
    public static readonly Coding Unavailable = new Coding
    {
      Code = "unavailable",
      Display = "Unavailable",
      System = "http://hl7.org/fhir/specimen-status"
    };
    public static readonly Coding Unsatisfactory = new Coding
    {
      Code = "unsatisfactory",
      Display = "Unsatisfactory",
      System = "http://hl7.org/fhir/specimen-status"
    };
  };
  /// <summary>
  /// Defines the type of structure that a definition is describing.
  /// </summary>
  public static class StructureDefinitionKindValueSet
  {
    public static readonly Coding DataType = new Coding
    {
      Code = "datatype",
      Display = "Data Type",
      System = "http://hl7.org/fhir/structure-definition-kind"
    };
    public static readonly Coding LogicalModel = new Coding
    {
      Code = "logical",
      Display = "Logical Model",
      System = "http://hl7.org/fhir/structure-definition-kind"
    };
    public static readonly Coding Resource = new Coding
    {
      Code = "resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/structure-definition-kind"
    };
  };
  /// <summary>
  /// The type of method used to execute a subscription.
  /// </summary>
  public static class SubscriptionChannelTypeValueSet
  {
    public static readonly Coding Email = new Coding
    {
      Code = "email",
      Display = "Email",
      System = "http://hl7.org/fhir/subscription-channel-type"
    };
    public static readonly Coding Message = new Coding
    {
      Code = "message",
      Display = "Message",
      System = "http://hl7.org/fhir/subscription-channel-type"
    };
    public static readonly Coding RestHook = new Coding
    {
      Code = "rest-hook",
      Display = "Rest Hook",
      System = "http://hl7.org/fhir/subscription-channel-type"
    };
    public static readonly Coding SMS = new Coding
    {
      Code = "sms",
      Display = "SMS",
      System = "http://hl7.org/fhir/subscription-channel-type"
    };
    public static readonly Coding Websocket = new Coding
    {
      Code = "websocket",
      Display = "Websocket",
      System = "http://hl7.org/fhir/subscription-channel-type"
    };
  };
  /// <summary>
  /// The status of a subscription.
  /// </summary>
  public static class SubscriptionStatusValueSet
  {
    public static readonly Coding Active = new Coding
    {
      Code = "active",
      Display = "Active",
      System = "http://hl7.org/fhir/subscription-status"
    };
    public static readonly Coding Error = new Coding
    {
      Code = "error",
      Display = "Error",
      System = "http://hl7.org/fhir/subscription-status"
    };
    public static readonly Coding Off = new Coding
    {
      Code = "off",
      Display = "Off",
      System = "http://hl7.org/fhir/subscription-status"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/subscription-status"
    };
  };
  /// <summary>
  /// Status of the supply delivery.
  /// </summary>
  public static class SupplydeliveryStatusValueSet
  {
    public static readonly Coding Abandoned = new Coding
    {
      Code = "abandoned",
      Display = "Abandoned",
      System = "http://hl7.org/fhir/supplydelivery-status"
    };
    public static readonly Coding Delivered = new Coding
    {
      Code = "completed",
      Display = "Delivered",
      System = "http://hl7.org/fhir/supplydelivery-status"
    };
    public static readonly Coding InProgress = new Coding
    {
      Code = "in-progress",
      Display = "In Progress",
      System = "http://hl7.org/fhir/supplydelivery-status"
    };
  };
  /// <summary>
  /// Status of the supply request
  /// </summary>
  public static class SupplyrequestStatusValueSet
  {
    public static readonly Coding Cancelled = new Coding
    {
      Code = "cancelled",
      Display = "Cancelled",
      System = "http://hl7.org/fhir/supplyrequest-status"
    };
    public static readonly Coding Received = new Coding
    {
      Code = "completed",
      Display = "Received",
      System = "http://hl7.org/fhir/supplyrequest-status"
    };
    public static readonly Coding Failed = new Coding
    {
      Code = "failed",
      Display = "Failed",
      System = "http://hl7.org/fhir/supplyrequest-status"
    };
    public static readonly Coding Requested = new Coding
    {
      Code = "requested",
      Display = "Requested",
      System = "http://hl7.org/fhir/supplyrequest-status"
    };
  };
  /// <summary>
  /// Operations supported by REST at the system level.
  /// </summary>
  public static class SystemRestfulInteractionValueSet
  {
    public static readonly Coding HistorySystem = new Coding
    {
      Code = "history-system",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding SearchSystem = new Coding
    {
      Code = "search-system",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding Transaction = new Coding
    {
      Code = "transaction",
      System = "http://hl7.org/fhir/restful-interaction"
    };
  };
  /// <summary>
  /// A code that indicates how transactions are supported.
  /// </summary>
  public static class TransactionModeValueSet
  {
    public static readonly Coding BatchesSupported = new Coding
    {
      Code = "batch",
      Display = "Batches supported",
      System = "http://hl7.org/fhir/transaction-mode"
    };
    public static readonly Coding BatchesAndTransactions = new Coding
    {
      Code = "both",
      Display = "Batches & Transactions",
      System = "http://hl7.org/fhir/transaction-mode"
    };
    public static readonly Coding None = new Coding
    {
      Code = "not-supported",
      Display = "None",
      System = "http://hl7.org/fhir/transaction-mode"
    };
    public static readonly Coding TransactionsSupported = new Coding
    {
      Code = "transaction",
      Display = "Transactions Supported",
      System = "http://hl7.org/fhir/transaction-mode"
    };
  };
  /// <summary>
  /// Operations supported by REST at the type or instance level.
  /// </summary>
  public static class TypeRestfulInteractionValueSet
  {
    public static readonly Coding Create = new Coding
    {
      Code = "create",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding Delete = new Coding
    {
      Code = "delete",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding HistoryInstance = new Coding
    {
      Code = "history-instance",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding HistoryType = new Coding
    {
      Code = "history-type",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding Read = new Coding
    {
      Code = "read",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding SearchType = new Coding
    {
      Code = "search-type",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding Update = new Coding
    {
      Code = "update",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding Validate = new Coding
    {
      Code = "validate",
      System = "http://hl7.org/fhir/restful-interaction"
    };
    public static readonly Coding Vread = new Coding
    {
      Code = "vread",
      System = "http://hl7.org/fhir/restful-interaction"
    };
  };
  /// <summary>
  /// A unit of time (units from UCUM).
  /// </summary>
  public static class UnitsOfTimeValueSet
  {
    public static readonly Coding NONE = new Coding
    {
      Code = "a",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding NONE_2 = new Coding
    {
      Code = "d",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding NONE_3 = new Coding
    {
      Code = "h",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding NONE_4 = new Coding
    {
      Code = "min",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding NONE_5 = new Coding
    {
      Code = "mo",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding NONE_6 = new Coding
    {
      Code = "s",
      System = "http://unitsofmeasure.org"
    };
    public static readonly Coding NONE_7 = new Coding
    {
      Code = "wk",
      System = "http://unitsofmeasure.org"
    };
  };
  /// <summary>
  /// A code that indicates whether an application accepts unknown elements or extensions when reading resources.
  /// </summary>
  public static class UnknownContentCodeValueSet
  {
    public static readonly Coding UnknownElementsAndExtensions = new Coding
    {
      Code = "both",
      Display = "Unknown Elements and Extensions",
      System = "http://hl7.org/fhir/unknown-content-code"
    };
    public static readonly Coding UnknownElements = new Coding
    {
      Code = "elements",
      Display = "Unknown Elements",
      System = "http://hl7.org/fhir/unknown-content-code"
    };
    public static readonly Coding UnknownExtensions = new Coding
    {
      Code = "extensions",
      Display = "Unknown Extensions",
      System = "http://hl7.org/fhir/unknown-content-code"
    };
    public static readonly Coding NeitherElementsOrExtensions = new Coding
    {
      Code = "no",
      Display = "Neither Elements or Extensions",
      System = "http://hl7.org/fhir/unknown-content-code"
    };
  };
  /// <summary>
  ///  A set of codes specifying the security classification of acts and roles in accordance with the definition for concept domain "Confidentiality".
  /// </summary>
  public static class V3ConfidentialityValueSet
  {
    public static readonly Coding Confidentiality = new Coding
    {
      Code = "_Confidentiality",
      Display = "Confidentiality",
      System = "http://hl7.org/fhir/v3/Confidentiality"
    };
    public static readonly Coding Low = new Coding
    {
      Code = "L",
      Display = "low",
      System = "http://hl7.org/fhir/v3/Confidentiality"
    };
    public static readonly Coding Moderate = new Coding
    {
      Code = "M",
      Display = "moderate",
      System = "http://hl7.org/fhir/v3/Confidentiality"
    };
    public static readonly Coding Normal = new Coding
    {
      Code = "N",
      Display = "normal",
      System = "http://hl7.org/fhir/v3/Confidentiality"
    };
    public static readonly Coding Restricted = new Coding
    {
      Code = "R",
      Display = "restricted",
      System = "http://hl7.org/fhir/v3/Confidentiality"
    };
    public static readonly Coding Unrestricted = new Coding
    {
      Code = "U",
      Display = "unrestricted",
      System = "http://hl7.org/fhir/v3/Confidentiality"
    };
    public static readonly Coding VeryRestricted = new Coding
    {
      Code = "V",
      Display = "very restricted",
      System = "http://hl7.org/fhir/v3/Confidentiality"
    };
  };
  /// <summary>
  /// How the system supports versioning for a resource.
  /// </summary>
  public static class VersioningPolicyValueSet
  {
    public static readonly Coding NoVersionIdSupport = new Coding
    {
      Code = "no-version",
      Display = "No VersionId Support",
      System = "http://hl7.org/fhir/versioning-policy"
    };
    public static readonly Coding Versioned = new Coding
    {
      Code = "versioned",
      Display = "Versioned",
      System = "http://hl7.org/fhir/versioning-policy"
    };
    public static readonly Coding VersionIdTrackedFully = new Coding
    {
      Code = "versioned-update",
      Display = "VersionId tracked fully",
      System = "http://hl7.org/fhir/versioning-policy"
    };
  };
  /// <summary>
  /// A coded concept listing the base codes.
  /// </summary>
  public static class VisionBaseCodesValueSet
  {
    public static readonly Coding Down = new Coding
    {
      Code = "down",
      Display = "Down",
      System = "http://hl7.org/fhir/vision-base-codes"
    };
    public static readonly Coding In = new Coding
    {
      Code = "in",
      Display = "In",
      System = "http://hl7.org/fhir/vision-base-codes"
    };
    public static readonly Coding Out = new Coding
    {
      Code = "out",
      Display = "Out",
      System = "http://hl7.org/fhir/vision-base-codes"
    };
    public static readonly Coding Up = new Coding
    {
      Code = "up",
      Display = "Up",
      System = "http://hl7.org/fhir/vision-base-codes"
    };
  };
  /// <summary>
  /// A coded concept listing the eye codes.
  /// </summary>
  public static class VisionEyeCodesValueSet
  {
    public static readonly Coding LeftEye = new Coding
    {
      Code = "left",
      Display = "Left Eye",
      System = "http://hl7.org/fhir/vision-eye-codes"
    };
    public static readonly Coding RightEye = new Coding
    {
      Code = "right",
      Display = "Right Eye",
      System = "http://hl7.org/fhir/vision-eye-codes"
    };
  };
  public class ResourceConverter : JsonConverter
  {
    public override bool CanConvert(Type objectType)
    {
      return typeof(Resource).IsAssignableFrom(objectType);
    }
    public override bool CanWrite
    {
      get { return false; }
    }
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
      throw new NotImplementedException();
    }
    public override bool CanRead
    {
      get { return true; }
    }
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
      JObject jObject = JObject.Load(reader);
      string resourceType = jObject["resourceType"].Value<string>();
      object target = null;
      switch (resourceType)
      {
        case "Account":
          target = new Account();
          break;
        case "AllergyIntolerance":
          target = new AllergyIntolerance();
          break;
        case "Appointment":
          target = new Appointment();
          break;
        case "AppointmentResponse":
          target = new AppointmentResponse();
          break;
        case "AuditEvent":
          target = new AuditEvent();
          break;
        case "Basic":
          target = new Basic();
          break;
        case "Binary":
          target = new Binary();
          break;
        case "BodySite":
          target = new BodySite();
          break;
        case "Bundle":
          target = new Bundle();
          break;
        case "CarePlan":
          target = new CarePlan();
          break;
        case "Claim":
          target = new Claim();
          break;
        case "ClaimResponse":
          target = new ClaimResponse();
          break;
        case "ClinicalImpression":
          target = new ClinicalImpression();
          break;
        case "Communication":
          target = new Communication();
          break;
        case "CommunicationRequest":
          target = new CommunicationRequest();
          break;
        case "Composition":
          target = new Composition();
          break;
        case "ConceptMap":
          target = new ConceptMap();
          break;
        case "Condition":
          target = new Condition();
          break;
        case "Conformance":
          target = new Conformance();
          break;
        case "Contract":
          target = new Contract();
          break;
        case "Coverage":
          target = new Coverage();
          break;
        case "DataElement":
          target = new DataElement();
          break;
        case "DetectedIssue":
          target = new DetectedIssue();
          break;
        case "Device":
          target = new Device();
          break;
        case "DeviceComponent":
          target = new DeviceComponent();
          break;
        case "DeviceMetric":
          target = new DeviceMetric();
          break;
        case "DeviceUseRequest":
          target = new DeviceUseRequest();
          break;
        case "DeviceUseStatement":
          target = new DeviceUseStatement();
          break;
        case "DiagnosticOrder":
          target = new DiagnosticOrder();
          break;
        case "DiagnosticReport":
          target = new DiagnosticReport();
          break;
        case "DocumentManifest":
          target = new DocumentManifest();
          break;
        case "DocumentReference":
          target = new DocumentReference();
          break;
        case "EligibilityRequest":
          target = new EligibilityRequest();
          break;
        case "EligibilityResponse":
          target = new EligibilityResponse();
          break;
        case "Encounter":
          target = new Encounter();
          break;
        case "EnrollmentRequest":
          target = new EnrollmentRequest();
          break;
        case "EnrollmentResponse":
          target = new EnrollmentResponse();
          break;
        case "EpisodeOfCare":
          target = new EpisodeOfCare();
          break;
        case "ExplanationOfBenefit":
          target = new ExplanationOfBenefit();
          break;
        case "FamilyMemberHistory":
          target = new FamilyMemberHistory();
          break;
        case "Flag":
          target = new Flag();
          break;
        case "Goal":
          target = new Goal();
          break;
        case "Group":
          target = new Group();
          break;
        case "HealthcareService":
          target = new HealthcareService();
          break;
        case "ImagingObjectSelection":
          target = new ImagingObjectSelection();
          break;
        case "ImagingStudy":
          target = new ImagingStudy();
          break;
        case "Immunization":
          target = new Immunization();
          break;
        case "ImmunizationRecommendation":
          target = new ImmunizationRecommendation();
          break;
        case "ImplementationGuide":
          target = new ImplementationGuide();
          break;
        case "List":
          target = new List();
          break;
        case "Location":
          target = new Location();
          break;
        case "Media":
          target = new Media();
          break;
        case "Medication":
          target = new Medication();
          break;
        case "MedicationAdministration":
          target = new MedicationAdministration();
          break;
        case "MedicationDispense":
          target = new MedicationDispense();
          break;
        case "MedicationOrder":
          target = new MedicationOrder();
          break;
        case "MedicationStatement":
          target = new MedicationStatement();
          break;
        case "MessageHeader":
          target = new MessageHeader();
          break;
        case "NamingSystem":
          target = new NamingSystem();
          break;
        case "NutritionOrder":
          target = new NutritionOrder();
          break;
        case "Observation":
          target = new Observation();
          break;
        case "OperationDefinition":
          target = new OperationDefinition();
          break;
        case "OperationOutcome":
          target = new OperationOutcome();
          break;
        case "Order":
          target = new Order();
          break;
        case "OrderResponse":
          target = new OrderResponse();
          break;
        case "Organization":
          target = new Organization();
          break;
        case "Parameters":
          target = new Parameters();
          break;
        case "Patient":
          target = new Patient();
          break;
        case "PaymentNotice":
          target = new PaymentNotice();
          break;
        case "PaymentReconciliation":
          target = new PaymentReconciliation();
          break;
        case "Person":
          target = new Person();
          break;
        case "Practitioner":
          target = new Practitioner();
          break;
        case "Procedure":
          target = new Procedure();
          break;
        case "ProcedureRequest":
          target = new ProcedureRequest();
          break;
        case "ProcessRequest":
          target = new ProcessRequest();
          break;
        case "ProcessResponse":
          target = new ProcessResponse();
          break;
        case "Provenance":
          target = new Provenance();
          break;
        case "Questionnaire":
          target = new Questionnaire();
          break;
        case "QuestionnaireResponse":
          target = new QuestionnaireResponse();
          break;
        case "ReferralRequest":
          target = new ReferralRequest();
          break;
        case "RelatedPerson":
          target = new RelatedPerson();
          break;
        case "RiskAssessment":
          target = new RiskAssessment();
          break;
        case "Schedule":
          target = new Schedule();
          break;
        case "SearchParameter":
          target = new SearchParameter();
          break;
        case "Slot":
          target = new Slot();
          break;
        case "Specimen":
          target = new Specimen();
          break;
        case "StructureDefinition":
          target = new StructureDefinition();
          break;
        case "Subscription":
          target = new Subscription();
          break;
        case "Substance":
          target = new Substance();
          break;
        case "SupplyDelivery":
          target = new SupplyDelivery();
          break;
        case "SupplyRequest":
          target = new SupplyRequest();
          break;
        case "TestScript":
          target = new TestScript();
          break;
        case "ValueSet":
          target = new ValueSet();
          break;
        case "VisionPrescription":
          target = new VisionPrescription();
          break;
        default:
          target = new Resource();
          break;
      }
      serializer.Populate(jObject.CreateReader(), target);
      return target;
    }
  }
}
/// end of file
