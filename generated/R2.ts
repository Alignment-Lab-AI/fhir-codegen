// <auto-generated/>
// Contents of: hl7.fhir.r2.core version: 1.0.2
  // Using Model Inheritance: True
  // Hiding Removed Parent Fields: False
  // Nesting Type Definitions: False
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Extension Support: NonPrimitives
/**
 * There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
 */
export interface Address extends Element {
  /**
   * The name of the city, town, village or other community or delivery center.
   */
  city?: string;
  _city?: Element;
  /**
   * Country - a nation as commonly understood or generally accepted.
   */
  country?: string;
  _country?: Element;
  /**
   * The name of the administrative area (county).
   */
  district?: string;
  _district?: Element;
  /**
   * home | work | temp | old - purpose of this address.
   */
  line?: string[];
  _line?: Element;
  /**
   * Allows addresses to be placed in historical context.
   */
  period?: Period;
  /**
   * A postal code designating a region defined by the postal service.
   */
  postalCode?: string;
  _postalCode?: Element;
  /**
   * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
   */
  state?: string;
  _state?: Element;
  /**
   * A renderable, unencoded form.
   */
  text?: string;
  _text?: Element;
  /**
   * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
   */
  type?: string;
  _type?: Element;
  /**
   * Allows an appropriate address to be chosen from a list of many.
   */
  use?: string;
  _use?: Element;
}
/**
 * Code Values for the Address.type field
 */
export enum AddressTypeCodes {
  POSTAL = "postal",
  PHYSICAL = "physical",
  BOTH = "both",
}
/**
 * Code Values for the Address.use field
 */
export enum AddressUseCodes {
  HOME = "home",
  WORK = "work",
  TEMP = "temp",
  OLD = "old",
}
/**
 * There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.  If value is present, it SHALL be positive.
 */
export interface Age extends Quantity {
}
/**
 * A  text note which also  contains information about who made the statement and when.
 */
export interface Annotation extends Element {
  /**
   * The individual responsible for making the annotation.
   */
  authorReference?: Reference;
  /**
   * The individual responsible for making the annotation.
   */
  authorString?: string;
  _authorString?: Element;
  /**
   * The text of the annotation.
   */
  text: string;
  _text?: Element;
  /**
   * Indicates when this particular annotation was made.
   */
  time?: string;
  _time?: Element;
}
/**
 * For referring to data content defined in other formats.
 */
export interface Attachment extends Element {
  /**
   * Processors of the data need to be able to know how to interpret the data.
   */
  contentType?: string;
  _contentType?: Element;
  /**
   * This is often tracked as an integrity issue for use of the attachment.
   */
  creation?: string;
  _creation?: Element;
  /**
   * The data needs to able to be transmitted inline.
   */
  data?: string;
  _data?: Element;
  /**
   * Included so that applications can verify that the contents of a location have not changed and so that a signature of the content can implicitly sign the content of an image without having to include the data in the instance or reference the url in the signature.
   */
  hash?: string;
  _hash?: Element;
  /**
   * Users need to be able to choose between the languages in a set of attachments.
   */
  language?: string;
  _language?: Element;
  /**
   * Representing the size allows applications to determine whether they should fetch the content automatically in advance, or refuse to fetch it at all.
   */
  size?: number;
  /**
   * Applications need a label to display to a human user in place of the actual data if the data cannot be rendered or perceived by the viewer.
   */
  title?: string;
  _title?: Element;
  /**
   * The data needs to be transmitted by reference.
   */
  url?: string;
  _url?: Element;
}
/**
 * Base definition for all elements that are defined inside a resource - but not those in a data type.
 */
export interface BackboneElement extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[];
}
/**
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 */
export interface CodeableConcept extends Element {
  /**
   * Allows for translations and alternate encodings within a code system.  Also supports communication of the same instance to systems requiring different encodings.
   */
  coding?: Coding[];
  /**
   * The codes from the terminologies do not always capture the correct meaning with all the nuances of the human using them, or sometimes there is no appropriate code at all. In these cases, the text is used to capture the full meaning of the source.
   */
  text?: string;
  _text?: Element;
}
/**
 * A reference to a code defined by a terminology system.
 */
export interface Coding extends Element {
  /**
   * Need to refer to a particular code in the system.
   */
  code?: string;
  _code?: Element;
  /**
   * Need to be able to carry a human-readable meaning of the code for readers that do not know  the system.
   */
  display?: string;
  _display?: Element;
  /**
   * Need to be unambiguous about the source of the definition of the symbol.
   */
  system?: string;
  _system?: Element;
  /**
   * This has been identified as a clinical safety criterium - that this exact system/code pair was chosen explicitly, rather than inferred by the system based on some rules or language processing.
   */
  userSelected?: boolean;
  _userSelected?: Element;
  /**
   * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
   */
  version?: string;
  _version?: Element;
}
/**
 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
 */
export interface ContactPoint extends Element {
  /**
   * Time period when the contact point was/is in use.
   */
  period?: Period;
  /**
   * Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.
   */
  rank?: number;
  /**
   * Telecommunications form for contact point - what communications system is required to make use of the contact.
   */
  system?: string;
  _system?: Element;
  /**
   * Need to track the way a person uses this contact, so a user can choose which is appropriate for their purpose.
   */
  use?: string;
  _use?: Element;
  /**
   * Need to support legacy numbers that are not in a tightly controlled format.
   */
  value?: string;
  _value?: Element;
}
/**
 * Code Values for the ContactPoint.system field
 */
export enum ContactPointSystemCodes {
  PHONE = "phone",
  FAX = "fax",
  EMAIL = "email",
  PAGER = "pager",
  OTHER = "other",
}
/**
 * Code Values for the ContactPoint.use field
 */
export enum ContactPointUseCodes {
  HOME = "home",
  WORK = "work",
  TEMP = "temp",
  OLD = "old",
  MOBILE = "mobile",
}
/**
 * There SHALL be a code with a value of "1" if there is a value and it SHALL be an expression of length.  If system is present, it SHALL be UCUM.  If present, the value SHALL a whole number.
 */
export interface Count extends Quantity {
}
/**
 * There SHALL be a code if there is a value and it SHALL be an expression of length.  If system is present, it SHALL be UCUM.
 */
export interface Distance extends Quantity {
}
/**
 * There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.
 */
export interface Duration extends Quantity {
}
/**
 * Base definition for all elements in a resource.
 */
export interface Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[];
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string;
  _id?: Element;
}
/**
 * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
 */
export interface ElementDefinitionSlicing extends Element {
  /**
   * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
   */
  description?: string;
  _description?: Element;
  /**
   * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
   */
  discriminator?: string[];
  _discriminator?: Element;
  /**
   * If the matching elements have to occur in the same order as defined in the profile.
   */
  ordered?: boolean;
  _ordered?: Element;
  /**
   * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
   */
  rules: string;
  _rules?: Element;
}
/**
 * Code Values for the ElementDefinition.slicing.rules field
 */
export enum ElementDefinitionSlicingRulesCodes {
  CLOSED = "closed",
  OPEN = "open",
  OPENATEND = "openAtEnd",
}
/**
 * Information about the base definition of the element, provided to make it unncessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.
 */
export interface ElementDefinitionBase extends Element {
  /**
   * Maximum cardinality of the base element identified by the path.
   */
  max: string;
  _max?: Element;
  /**
   * Minimum cardinality of the base element identified by the path.
   */
  min: number;
  /**
   * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.
   */
  path: string;
  _path?: Element;
}
/**
 * The data type or resource that the value of this element is permitted to be.
 */
export interface ElementDefinitionType extends Element {
  /**
   * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
   */
  aggregation?: string[];
  _aggregation?: Element;
  /**
   * Name of Data type or Resource that is a(or the) type used for this element.
   */
  code: string;
  _code?: Element;
  /**
   * Identifies a profile structure or implementation Guide that SHALL hold for resources or datatypes referenced as the type of this element. Can be a local reference - to another structure in this profile, or a reference to a structure in another profile. When more than one profile is specified, the content must conform to all of them. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.
   */
  profile?: string[];
  _profile?: Element;
}
/**
 * Code Values for the ElementDefinition.type.aggregation field
 */
export enum ElementDefinitionTypeAggregationCodes {
  CONTAINED = "contained",
  REFERENCED = "referenced",
  BUNDLED = "bundled",
}
/**
 * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
 */
export interface ElementDefinitionConstraint extends Element {
  /**
   * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
   */
  human: string;
  _human?: Element;
  /**
   * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
   */
  key: string;
  _key?: Element;
  /**
   * Description of why this constraint is necessary or appropriate.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * Identifies the impact constraint violation has on the conformance of the instance.
   */
  severity: string;
  _severity?: Element;
  /**
   * Used in Schematron tests of the validity of the resource.
   */
  xpath: string;
  _xpath?: Element;
}
/**
 * Code Values for the ElementDefinition.constraint.severity field
 */
export enum ElementDefinitionConstraintSeverityCodes {
  ERROR = "error",
  WARNING = "warning",
}
/**
 * Binds to a value set if this element is coded (code, Coding, CodeableConcept).
 */
export interface ElementDefinitionBinding extends Element {
  /**
   * Describes the intended use of this particular set of codes.
   */
  description?: string;
  _description?: Element;
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   */
  strength: string;
  _strength?: Element;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetUri?: string;
  _valueSetUri?: Element;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetReference?: Reference;
}
/**
 * Code Values for the ElementDefinition.binding.strength field
 */
export enum ElementDefinitionBindingStrengthCodes {
  REQUIRED = "required",
  EXTENSIBLE = "extensible",
  PREFERRED = "preferred",
  EXAMPLE = "example",
}
/**
 * Provides guidance to implementers familiar with or converting content from other specifications.
 */
export interface ElementDefinitionMapping extends Element {
  /**
   * An internal reference to the definition of a mapping.
   */
  identity: string;
  _identity?: Element;
  /**
   * Identifies the computable language in which mapping.map is expressed.
   */
  language?: string;
  _language?: Element;
  /**
   * Expresses what part of the target specification corresponds to this element.
   */
  map: string;
  _map?: Element;
}
/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
export interface ElementDefinition extends Element {
  /**
   * Allows for better easier recognition of the element by multiple communities, including international communities.
   */
  alias?: string[];
  _alias?: Element;
  /**
   * Information about the base definition of the element, provided to make it unncessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.
   */
  base?: ElementDefinitionBase;
  /**
   * Binds to a value set if this element is coded (code, Coding, CodeableConcept).
   */
  binding?: ElementDefinitionBinding;
  /**
   * Links the meaning of an element to an external terminology.
   */
  code?: Coding[];
  /**
   * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
   */
  comments?: string;
  _comments?: Element;
  /**
   * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
   */
  condition?: string[];
  _condition?: Element;
  /**
   * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
   */
  constraint?: ElementDefinitionConstraint[];
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueBoolean?: boolean;
  _defaultValueBoolean?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueInteger?: number;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueDecimal?: number;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueBase64Binary?: string;
  _defaultValueBase64Binary?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueInstant?: string;
  _defaultValueInstant?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueString?: string;
  _defaultValueString?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueUri?: string;
  _defaultValueUri?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueDate?: string;
  _defaultValueDate?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueDateTime?: string;
  _defaultValueDateTime?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueTime?: string;
  _defaultValueTime?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueCode?: string;
  _defaultValueCode?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueOid?: string;
  _defaultValueOid?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueId?: string;
  _defaultValueId?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueUnsignedInt?: number;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValuePositiveInt?: number;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueMarkdown?: string;
  _defaultValueMarkdown?: Element;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueAnnotation?: Annotation;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueAttachment?: Attachment;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueIdentifier?: Identifier;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueCodeableConcept?: CodeableConcept;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueCoding?: Coding;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueQuantity?: Quantity;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueRange?: Range;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValuePeriod?: Period;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueRatio?: Ratio;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueSampledData?: SampledData;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueSignature?: Signature;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueHumanName?: HumanName;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueAddress?: Address;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueContactPoint?: ContactPoint;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueTiming?: Timing;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueReference?: Reference;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueMeta?: Meta;
  /**
   * To allow a user to state the usage of an element in a particular context.
   */
  definition?: string;
  _definition?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleBoolean?: boolean;
  _exampleBoolean?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleInteger?: number;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleDecimal?: number;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleBase64Binary?: string;
  _exampleBase64Binary?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleInstant?: string;
  _exampleInstant?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleString?: string;
  _exampleString?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleUri?: string;
  _exampleUri?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleDate?: string;
  _exampleDate?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleDateTime?: string;
  _exampleDateTime?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleTime?: string;
  _exampleTime?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleCode?: string;
  _exampleCode?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleOid?: string;
  _exampleOid?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleId?: string;
  _exampleId?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleUnsignedInt?: number;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  examplePositiveInt?: number;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleMarkdown?: string;
  _exampleMarkdown?: Element;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleAnnotation?: Annotation;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleAttachment?: Attachment;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleIdentifier?: Identifier;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleCodeableConcept?: CodeableConcept;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleCoding?: Coding;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleQuantity?: Quantity;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleRange?: Range;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  examplePeriod?: Period;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleRatio?: Ratio;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleSampledData?: SampledData;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleSignature?: Signature;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleHumanName?: HumanName;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleAddress?: Address;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleContactPoint?: ContactPoint;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleTiming?: Timing;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleReference?: Reference;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleMeta?: Meta;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedBoolean?: boolean;
  _fixedBoolean?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedInteger?: number;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedDecimal?: number;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedBase64Binary?: string;
  _fixedBase64Binary?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedInstant?: string;
  _fixedInstant?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedString?: string;
  _fixedString?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedUri?: string;
  _fixedUri?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedDate?: string;
  _fixedDate?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedDateTime?: string;
  _fixedDateTime?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedTime?: string;
  _fixedTime?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedCode?: string;
  _fixedCode?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedOid?: string;
  _fixedOid?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedId?: string;
  _fixedId?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedUnsignedInt?: number;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedPositiveInt?: number;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedMarkdown?: string;
  _fixedMarkdown?: Element;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedAnnotation?: Annotation;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedAttachment?: Attachment;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedIdentifier?: Identifier;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedCodeableConcept?: CodeableConcept;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedCoding?: Coding;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedQuantity?: Quantity;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedRange?: Range;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedPeriod?: Period;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedRatio?: Ratio;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedSampledData?: SampledData;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedSignature?: Signature;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedHumanName?: HumanName;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedAddress?: Address;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedContactPoint?: ContactPoint;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedTiming?: Timing;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedReference?: Reference;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedMeta?: Meta;
  /**
   * Allows elements to be introduced into a specification that can't safely be ignored by applications that don't recognize them.
   */
  isModifier?: boolean;
  _isModifier?: Element;
  /**
   * Allow clients to search through large resources quickly.
   */
  isSummary?: boolean;
  _isSummary?: Element;
  /**
   * The text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
   */
  label?: string;
  _label?: Element;
  /**
   * Provides guidance to implementers familiar with or converting content from other specifications.
   */
  mapping?: ElementDefinitionMapping[];
  /**
   * The maximum number of times this element is permitted to appear in the instance.
   */
  max?: string;
  _max?: Element;
  /**
   * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
   */
  maxLength?: number;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueBoolean?: boolean;
  _maxValueBoolean?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueInteger?: number;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueDecimal?: number;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueBase64Binary?: string;
  _maxValueBase64Binary?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueInstant?: string;
  _maxValueInstant?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueString?: string;
  _maxValueString?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueUri?: string;
  _maxValueUri?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueDate?: string;
  _maxValueDate?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueDateTime?: string;
  _maxValueDateTime?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueTime?: string;
  _maxValueTime?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueCode?: string;
  _maxValueCode?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueOid?: string;
  _maxValueOid?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueId?: string;
  _maxValueId?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueUnsignedInt?: number;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValuePositiveInt?: number;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueMarkdown?: string;
  _maxValueMarkdown?: Element;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueAnnotation?: Annotation;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueAttachment?: Attachment;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueIdentifier?: Identifier;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueCodeableConcept?: CodeableConcept;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueCoding?: Coding;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueQuantity?: Quantity;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueRange?: Range;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValuePeriod?: Period;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueRatio?: Ratio;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueSampledData?: SampledData;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueSignature?: Signature;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueHumanName?: HumanName;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueAddress?: Address;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueContactPoint?: ContactPoint;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueTiming?: Timing;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueReference?: Reference;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueMeta?: Meta;
  /**
   * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
   */
  meaningWhenMissing?: string;
  _meaningWhenMissing?: Element;
  /**
   * The minimum number of times this element SHALL appear in the instance.
   */
  min?: number;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueBoolean?: boolean;
  _minValueBoolean?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueInteger?: number;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueDecimal?: number;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueBase64Binary?: string;
  _minValueBase64Binary?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueInstant?: string;
  _minValueInstant?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueString?: string;
  _minValueString?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueUri?: string;
  _minValueUri?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueDate?: string;
  _minValueDate?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueDateTime?: string;
  _minValueDateTime?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueTime?: string;
  _minValueTime?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueCode?: string;
  _minValueCode?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueOid?: string;
  _minValueOid?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueId?: string;
  _minValueId?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueUnsignedInt?: number;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValuePositiveInt?: number;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueMarkdown?: string;
  _minValueMarkdown?: Element;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueAnnotation?: Annotation;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueAttachment?: Attachment;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueIdentifier?: Identifier;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueCodeableConcept?: CodeableConcept;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueCoding?: Coding;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueQuantity?: Quantity;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueRange?: Range;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValuePeriod?: Period;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueRatio?: Ratio;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueSampledData?: SampledData;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueSignature?: Signature;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueHumanName?: HumanName;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueAddress?: Address;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueContactPoint?: ContactPoint;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueTiming?: Timing;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueReference?: Reference;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueMeta?: Meta;
  /**
   * Allows a profile to set expectations for system capabilities beyond merely respecting cardinality constraints.
   */
  mustSupport?: boolean;
  _mustSupport?: Element;
  /**
   * Allows referencing a defined element.  May also be used for code generation purposes.
   */
  name?: string;
  _name?: Element;
  /**
   * Identifies the name of a slice defined elsewhere in the profile whose constraints should be applied to the current element.
   */
  nameReference?: string;
  _nameReference?: Element;
  /**
   * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
   */
  path: string;
  _path?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternBoolean?: boolean;
  _patternBoolean?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternInteger?: number;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternDecimal?: number;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternBase64Binary?: string;
  _patternBase64Binary?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternInstant?: string;
  _patternInstant?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternString?: string;
  _patternString?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternUri?: string;
  _patternUri?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternDate?: string;
  _patternDate?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternDateTime?: string;
  _patternDateTime?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternTime?: string;
  _patternTime?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternCode?: string;
  _patternCode?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternOid?: string;
  _patternOid?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternId?: string;
  _patternId?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternUnsignedInt?: number;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternPositiveInt?: number;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternMarkdown?: string;
  _patternMarkdown?: Element;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternAnnotation?: Annotation;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternAttachment?: Attachment;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternIdentifier?: Identifier;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternCodeableConcept?: CodeableConcept;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternCoding?: Coding;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternQuantity?: Quantity;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternRange?: Range;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternPeriod?: Period;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternRatio?: Ratio;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternSampledData?: SampledData;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternSignature?: Signature;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternHumanName?: HumanName;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternAddress?: Address;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternContactPoint?: ContactPoint;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternTiming?: Timing;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternReference?: Reference;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternMeta?: Meta;
  /**
   * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
   */
  representation?: string[];
  _representation?: Element;
  /**
   * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * A concise description of what this element means (e.g. for use in autogenerated summaries).
   */
  short?: string;
  _short?: Element;
  /**
   * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
   */
  slicing?: ElementDefinitionSlicing;
  /**
   * The data type or resource that the value of this element is permitted to be.
   */
  type?: ElementDefinitionType[];
}
/**
 * Optional Extensions Element - found in all resources.
 */
export interface Extension extends Element {
  /**
   * Source of the definition for the extension code - a logical name or a URL.
   */
  url: string;
  _url?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueBoolean?: boolean;
  _valueBoolean?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueInteger?: number;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueDecimal?: number;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueBase64Binary?: string;
  _valueBase64Binary?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueInstant?: string;
  _valueInstant?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueString?: string;
  _valueString?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueUri?: string;
  _valueUri?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueDate?: string;
  _valueDate?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueDateTime?: string;
  _valueDateTime?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueTime?: string;
  _valueTime?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCode?: string;
  _valueCode?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueOid?: string;
  _valueOid?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueId?: string;
  _valueId?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueUnsignedInt?: number;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valuePositiveInt?: number;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueMarkdown?: string;
  _valueMarkdown?: Element;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAnnotation?: Annotation;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAttachment?: Attachment;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueIdentifier?: Identifier;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCodeableConcept?: CodeableConcept;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCoding?: Coding;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueQuantity?: Quantity;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueRange?: Range;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valuePeriod?: Period;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueRatio?: Ratio;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueSampledData?: SampledData;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueSignature?: Signature;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueHumanName?: HumanName;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAddress?: Address;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueContactPoint?: ContactPoint;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueTiming?: Timing;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueReference?: Reference;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueMeta?: Meta;
}
/**
 * A human's name with the ability to identify parts and usage.
 */
export interface HumanName extends Element {
  /**
   * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
   */
  family?: string[];
  _family?: Element;
  /**
   * Given name.
   */
  given?: string[];
  _given?: Element;
  /**
   * Allows names to be placed in historical context.
   */
  period?: Period;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
   */
  prefix?: string[];
  _prefix?: Element;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
   */
  suffix?: string[];
  _suffix?: Element;
  /**
   * A renderable, unencoded form.
   */
  text?: string;
  _text?: Element;
  /**
   * Allows the appropriate name for a particular context of use to be selected from among a set of names.
   */
  use?: string;
  _use?: Element;
}
/**
 * Code Values for the HumanName.use field
 */
export enum HumanNameUseCodes {
  USUAL = "usual",
  OFFICIAL = "official",
  TEMP = "temp",
  NICKNAME = "nickname",
  ANONYMOUS = "anonymous",
  OLD = "old",
  MAIDEN = "maiden",
}
/**
 * A technical identifier - identifies some entity uniquely and unambiguously.
 */
export interface Identifier extends Element {
  /**
   * Organization that issued/manages the identifier.
   */
  assigner?: Reference;
  /**
   * Time period during which identifier is/was valid for use.
   */
  period?: Period;
  /**
   * There are many sequences of identifiers.  To perform matching, we need to know what sequence we're dealing with. The system identifies a particular sequence or set of unique identifiers.
   */
  system?: string;
  _system?: Element;
  /**
   * Allows users to make use of identifiers when the identifier system is not known.
   */
  type?: CodeableConcept;
  /**
   * Allows the appropriate identifier for a particular context of use to be selected from among a set of identifiers.
   */
  use?: string;
  _use?: Element;
  /**
   * The portion of the identifier typically displayed to the user and which is unique within the context of the system.
   */
  value?: string;
  _value?: Element;
}
/**
 * Code Values for the Identifier.use field
 */
export enum IdentifierUseCodes {
  USUAL = "usual",
  OFFICIAL = "official",
  TEMP = "temp",
  SECONDARY = "secondary",
}
/**
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
 */
export interface Meta extends Element {
  /**
   * When the resource last changed - e.g. when the version changed.
   */
  lastUpdated?: string;
  _lastUpdated?: Element;
  /**
   * A list of profiles [[[StructureDefinition]]]s that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].
   */
  profile?: string[];
  _profile?: Element;
  /**
   * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
   */
  security?: Coding[];
  /**
   * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
   */
  tag?: Coding[];
  /**
   * The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.
   */
  versionId?: string;
  _versionId?: Element;
}
/**
 * There SHALL be a code if there is a value and it SHALL be an expression of currency.  If system is present, it SHALL be ISO 4217 (system = "urn:iso:std:iso:4217" - currency).
 */
export interface Money extends Quantity {
}
/**
 * A human-readable formatted text, including images.
 */
export interface Narrative extends Element {
  /**
   * The actual narrative content, a stripped down version of XHTML.
   */
  div: string;
  _div?: Element;
  /**
   * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
   */
  status: string;
  _status?: Element;
}
/**
 * Code Values for the Narrative.status field
 */
export enum NarrativeStatusCodes {
  GENERATED = "generated",
  EXTENSIONS = "extensions",
  ADDITIONAL = "additional",
  EMPTY = "empty",
}
/**
 * A time period defined by a start and end date and optionally time.
 */
export interface Period extends Element {
  /**
   * The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
   */
  end?: string;
  _end?: Element;
  /**
   * The start of the period. The boundary is inclusive.
   */
  start?: string;
  _start?: Element;
}
/**
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 */
export interface Quantity extends Element {
  /**
   * Need a computable form of the unit that is fixed across all forms. UCUM provides this for quantities, but SNOMED CT provides many units of interest.
   */
  code?: string;
  _code?: Element;
  /**
   * Need a framework for handling measures where the value is <5ug/L or >400mg/L due to the limitations of measuring methodology.
   */
  comparator?: string;
  _comparator?: Element;
  /**
   * Need to know the system that defines the coded form of the unit.
   */
  system?: string;
  _system?: Element;
  /**
   * There are many representations for units of measure and in many contexts, particular representations are fixed and required. I.e. mcg for micrograms.
   */
  unit?: string;
  _unit?: Element;
  /**
   * Precision is handled implicitly in almost all cases of measurement.
   */
  value?: number;
}
/**
 * Code Values for the Quantity.comparator field
 */
export enum QuantityComparatorCodes {
  LESS_THAN = "<",
  LESS_THAN_OR_EQUALS = "<=",
  GREATER_THAN_OR_EQUALS = ">=",
  GREATER_THAN = ">",
}
/**
 * A set of ordered Quantities defined by a low and high limit.
 */
export interface Range extends Element {
  /**
   * The high limit. The boundary is inclusive.
   */
  high?: Quantity;
  /**
   * The low limit. The boundary is inclusive.
   */
  low?: Quantity;
}
/**
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 */
export interface Ratio extends Element {
  /**
   * The value of the denominator.
   */
  denominator?: Quantity;
  /**
   * The value of the numerator.
   */
  numerator?: Quantity;
}
/**
 * A reference from one resource to another.
 */
export interface Reference extends Element {
  /**
   * Plain text narrative that identifies the resource in addition to the resource reference.
   */
  display?: string;
  _display?: Element;
  /**
   * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
   */
  reference?: string;
  _reference?: Element;
}
/**
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 */
export interface SampledData extends Element {
  /**
   * A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
   */
  data: string;
  _data?: Element;
  /**
   * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
   */
  dimensions: number;
  /**
   * A correction factor that is applied to the sampled data points before they are added to the origin.
   */
  factor?: number;
  /**
   * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
   */
  lowerLimit?: number;
  /**
   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
   */
  origin: Quantity;
  /**
   * The length of time between sampling times, measured in milliseconds.
   */
  period: number;
  /**
   * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
   */
  upperLimit?: number;
}
/**
 * A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
 */
export interface Signature extends Element {
  /**
   * The base64 encoding of the Signature content.
   */
  blob: string;
  _blob?: Element;
  /**
   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature.
   */
  contentType: string;
  _contentType?: Element;
  /**
   * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
   */
  type: Coding[];
  /**
   * When the digital signature was signed.
   */
  when: string;
  _when?: Element;
  /**
   * A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
   */
  whoUri: string;
  _whoUri?: Element;
  /**
   * A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
   */
  whoReference: Reference;
}
/**
 * The comparator is not used on a SimpleQuantity
 */
export interface SimpleQuantity extends Quantity {
}
/**
 * Many timing schedules are determined by regular repetitions.
 */
export interface TimingRepeat extends Element {
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsQuantity?: Quantity;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsRange?: Range;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsPeriod?: Period;
  /**
   * Repetitions may be limited by end time or total occurrences.
   */
  count?: number;
  /**
   * Some activities are not instantaneous and need to be maintained for a period of time.
   */
  duration?: number;
  /**
   * Some activities are not instantaneous and need to be maintained for a period of time.
   */
  durationMax?: number;
  /**
   * The units of time for the duration, in UCUM units.
   */
  durationUnits?: string;
  _durationUnits?: Element;
  /**
   * The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided).
   */
  frequency?: number;
  /**
   * If present, indicates that the frequency is a range - so repeat between [frequency] and [frequencyMax] times within the period or period range.
   */
  frequencyMax?: number;
  /**
   * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period.
   */
  period?: number;
  /**
   * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
   */
  periodMax?: number;
  /**
   * The units of time for the period in UCUM units.
   */
  periodUnits?: string;
  _periodUnits?: Element;
  /**
   * Timings are frequently determined by occurrences such as waking, eating and sleep.
   */
  when?: string;
  _when?: Element;
}
/**
 * Code Values for the Timing.repeat.durationUnits field
 */
export enum TimingRepeatDurationUnitsCodes {
  S = "s",
  MIN = "min",
  H = "h",
  D = "d",
  WK = "wk",
  MO = "mo",
  A = "a",
}
/**
 * Code Values for the Timing.repeat.periodUnits field
 */
export enum TimingRepeatPeriodUnitsCodes {
  S = "s",
  MIN = "min",
  H = "h",
  D = "d",
  WK = "wk",
  MO = "mo",
  A = "a",
}
/**
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
 */
export interface Timing extends Element {
  /**
   * A code for the timing pattern. Some codes such as BID are ubiquitous, but many institutions define their own additional codes.
   */
  code?: CodeableConcept;
  /**
   * In an MAR, for instance, you need to take a general specification, and turn it into a precise specification.
   */
  event?: string[];
  _event?: Element;
  /**
   * Many timing schedules are determined by regular repetitions.
   */
  repeat?: TimingRepeat;
}
/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
 */
export interface Account extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Account'
  /**
   * Indicates the period of time over which the account is allowed.
   */
  activePeriod?: Period;
  /**
   * Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
   */
  balance?: Quantity;
  /**
   * Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
   */
  coveragePeriod?: Period;
  /**
   * Identifies the currency to which transactions must be converted when crediting or debiting the account.
   */
  currency?: Coding;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  description?: string;
  _description?: Element;
  /**
   * Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
   */
  identifier?: Identifier[];
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  name?: string;
  _name?: Element;
  /**
   * Indicates the organization, department, etc. with responsibility for the account.
   */
  owner?: Reference;
  /**
   * Indicates whether the account is presently used/useable or not.
   */
  status?: string;
  _status?: Element;
  /**
   * Identifies the patient, device, practitioner, location or other object the account is associated with.
   */
  subject?: Reference;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  type?: CodeableConcept;
}
/**
 * Code Values for the Account.status field
 */
export enum AccountStatusCodes {
  ACTIVE = "active",
  INACTIVE = "inactive",
}
/**
 * Details about each adverse reaction event linked to exposure to the identified Substance.
 */
export interface AllergyIntoleranceReaction extends BackboneElement {
  /**
   * Statement about the degree of clinical certainty that the specific substance was the cause of the manifestation in this reaction event.
   */
  certainty?: string;
  _certainty?: Element;
  /**
   * Text description about the reaction as a whole, including details of the manifestation if required.
   */
  description?: string;
  _description?: Element;
  /**
   * Identification of the route by which the subject was exposed to the substance.
   */
  exposureRoute?: CodeableConcept;
  /**
   * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
   */
  manifestation: CodeableConcept[];
  /**
   * Additional text about the adverse reaction event not captured in other fields.
   */
  note?: Annotation;
  /**
   * Record of the date and/or time of the onset of the Reaction.
   */
  onset?: string;
  _onset?: Element;
  /**
   * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
   */
  severity?: string;
  _severity?: Element;
  /**
   * Identification of the specific substance considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different to the substance identified as the cause of the risk, but must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite substance that includes the identified substance. It must be clinically safe to only process the AllergyIntolerance.substance and ignore the AllergyIntolerance.event.substance.
   */
  substance?: CodeableConcept;
}
/**
 * Code Values for the AllergyIntolerance.reaction.certainty field
 */
export enum AllergyIntoleranceReactionCertaintyCodes {
  UNLIKELY = "unlikely",
  LIKELY = "likely",
  CONFIRMED = "confirmed",
}
/**
 * Code Values for the AllergyIntolerance.reaction.severity field
 */
export enum AllergyIntoleranceReactionSeverityCodes {
  MILD = "mild",
  MODERATE = "moderate",
  SEVERE = "severe",
}
/**
 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
 */
export interface AllergyIntolerance extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'AllergyIntolerance'
  /**
   * Category of the identified Substance.
   */
  category?: string;
  _category?: Element;
  /**
   * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified Substance.
   */
  criticality?: string;
  _criticality?: Element;
  /**
   * This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[];
  /**
   * Represents the date and/or time of the last known occurrence of a reaction event.
   */
  lastOccurence?: string;
  _lastOccurence?: Element;
  /**
   * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
   */
  note?: Annotation;
  /**
   * Record of the date and/or time of the onset of the Allergy or Intolerance.
   */
  onset?: string;
  _onset?: Element;
  /**
   * The patient who has the allergy or intolerance.
   */
  patient: Reference;
  /**
   * Details about each adverse reaction event linked to exposure to the identified Substance.
   */
  reaction?: AllergyIntoleranceReaction[];
  /**
   * Date when the sensitivity was recorded.
   */
  recordedDate?: string;
  _recordedDate?: Element;
  /**
   * Individual who recorded the record and takes responsibility for its conten.
   */
  recorder?: Reference;
  /**
   * The source of the information about the allergy that is recorded.
   */
  reporter?: Reference;
  /**
   * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified Substance.
   */
  status?: string;
  _status?: Element;
  /**
   * Identification of a substance, or a class of substances, that is considered to be responsible for the adverse reaction risk.
   */
  substance: CodeableConcept;
  /**
   * Identification of the underlying physiological mechanism for the reaction risk.
   */
  type?: string;
  _type?: Element;
}
/**
 * Code Values for the AllergyIntolerance.category field
 */
export enum AllergyIntoleranceCategoryCodes {
  FOOD = "food",
  MEDICATION = "medication",
  ENVIRONMENT = "environment",
  OTHER = "other",
}
/**
 * Code Values for the AllergyIntolerance.criticality field
 */
export enum AllergyIntoleranceCriticalityCodes {
  CRITL = "CRITL",
  CRITH = "CRITH",
  CRITU = "CRITU",
}
/**
 * Code Values for the AllergyIntolerance.status field
 */
export enum AllergyIntoleranceStatusCodes {
  ACTIVE = "active",
  UNCONFIRMED = "unconfirmed",
  CONFIRMED = "confirmed",
  INACTIVE = "inactive",
  RESOLVED = "resolved",
  REFUTED = "refuted",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Code Values for the AllergyIntolerance.type field
 */
export enum AllergyIntoleranceTypeCodes {
  ALLERGY = "allergy",
  INTOLERANCE = "intolerance",
}
/**
 * List of participants involved in the appointment.
 */
export interface AppointmentParticipant extends BackboneElement {
  /**
   * A Person, Location/HealthcareService or Device that is participating in the appointment.
   */
  actor?: Reference;
  /**
   * Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
   */
  required?: string;
  _required?: Element;
  /**
   * Participation status of the Patient.
   */
  status: string;
  _status?: Element;
  /**
   * Role of participant in the appointment.
   */
  type?: CodeableConcept[];
}
/**
 * Code Values for the Appointment.participant.required field
 */
export enum AppointmentParticipantRequiredCodes {
  REQUIRED = "required",
  OPTIONAL = "optional",
  INFORMATION_ONLY = "information-only",
}
/**
 * Code Values for the Appointment.participant.status field
 */
export enum AppointmentParticipantStatusCodes {
  ACCEPTED = "accepted",
  DECLINED = "declined",
  TENTATIVE = "tentative",
  NEEDS_ACTION = "needs-action",
}
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export interface Appointment extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Appointment'
  /**
   * Additional comments about the appointment.
   */
  comment?: string;
  _comment?: Element;
  /**
   * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
   */
  description?: string;
  _description?: Element;
  /**
   * Date/Time that the appointment is to conclude.
   */
  end?: string;
  _end?: Element;
  /**
   * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[];
  /**
   * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).
   */
  minutesDuration?: number;
  /**
   * List of participants involved in the appointment.
   */
  participant: AppointmentParticipant[];
  /**
   * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
   */
  priority?: number;
  /**
   * The reason that this appointment is being scheduled. This is more clinical than administrative.
   */
  reason?: CodeableConcept;
  /**
   * The slot that this appointment is filling. If provided then the schedule will not be provided as slots are not recursive, and the start/end values MUST be the same as from the slot.
   */
  slot?: Reference[];
  /**
   * Date/Time that the appointment is to take place.
   */
  start?: string;
  _start?: Element;
  /**
   * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
   */
  status: string;
  _status?: Element;
  /**
   * The type of appointment that is being booked (This may also be associated with participants for location, and/or a HealthcareService).
   */
  type?: CodeableConcept;
}
/**
 * Code Values for the Appointment.status field
 */
export enum AppointmentStatusCodes {
  PROPOSED = "proposed",
  PENDING = "pending",
  BOOKED = "booked",
  ARRIVED = "arrived",
  FULFILLED = "fulfilled",
  CANCELLED = "cancelled",
  NOSHOW = "noshow",
}
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export interface AppointmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'AppointmentResponse'
  /**
   * A Person, Location/HealthcareService or Device that is participating in the appointment.
   */
  actor?: Reference;
  /**
   * Appointment that this response is replying to.
   */
  appointment: Reference;
  /**
   * Additional comments about the appointment.
   */
  comment?: string;
  _comment?: Element;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: string;
  _end?: Element;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: Identifier[];
  /**
   * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
   */
  participantStatus: string;
  _participantStatus?: Element;
  /**
   * Role of participant in the appointment.
   */
  participantType?: CodeableConcept[];
  /**
   * Date/Time that the appointment is to take place, or requested new start time.
   */
  start?: string;
  _start?: Element;
}
/**
 * Code Values for the AppointmentResponse.participantStatus field
 */
export enum AppointmentResponseParticipantStatusCodes {
  ACCEPTED = "accepted",
  DECLINED = "declined",
  TENTATIVE = "tentative",
  IN_PROCESS = "in-process",
  COMPLETED = "completed",
  NEEDS_ACTION = "needs-action",
}
/**
 * The event must be identified.
 */
export interface AuditEventEvent extends BackboneElement {
  /**
   * This broadly indicates what kind of action was done on the Participant Object.
   */
  action?: string;
  _action?: Element;
  /**
   * This ties an event to a specific date and time. Security audits typically require a consistent time base (e.g. UTC), to eliminate time-zone issues arising from geographical distribution.
   */
  dateTime: string;
  _dateTime?: Element;
  /**
   * Indicates whether the event succeeded or failed.
   */
  outcome?: string;
  _outcome?: Element;
  /**
   * A free text description of the outcome of the event.
   */
  outcomeDesc?: string;
  _outcomeDesc?: Element;
  /**
   * The purposeOfUse (reason) that was used during the event being recorded.
   */
  purposeOfEvent?: Coding[];
  /**
   * This field enables queries of messages by implementation-defined event categories.
   */
  subtype?: Coding[];
  /**
   * This identifies the performed function. For "Execute" Event Action Code audit records, this identifies the application function performed.
   */
  type: Coding;
}
/**
 * Logical network location for application activity, if the activity has a network location.
 */
export interface AuditEventParticipantNetwork extends BackboneElement {
  /**
   * This datum identifies the user's network access point, which may be distinct from the server that performed the action. It is an optional value that may be used to group events recorded on separate servers for analysis of a specific network access point's data access across all servers.
   */
  address?: string;
  _address?: Element;
  /**
   * This datum identifies the type of network access point identifier of the user device for the audit event. It is an optional value that may be used to group events recorded on separate servers for analysis of access according to a network access point's type.
   */
  type?: string;
  _type?: Element;
}
/**
 * The event has one or more active participants.
 */
export interface AuditEventParticipant extends BackboneElement {
  /**
   * In some situations a human user may authenticate with one identity but, to access a specific application system, may use a synonymous identify. For example, some "single sign on" implementations will do this. The alternative identifier would then be the original identify  used for authentication, and the User ID is the one known to and used by the application.
   */
  altId?: string;
  _altId?: Element;
  /**
   * Where the event occurred.
   */
  location?: Reference;
  /**
   * Usually, this is used instead of specifying a network address. This field is not used for Media Id (i.e. the serial number of a CD).
   */
  media?: Coding;
  /**
   * The User ID and Authorization User ID may be internal or otherwise obscure values. This field assists the auditor in identifying the actual user.
   */
  name?: string;
  _name?: Element;
  /**
   * Logical network location for application activity, if the activity has a network location.
   */
  network?: AuditEventParticipantNetwork;
  /**
   * This value is used retrospectively to determine the authorization policies.
   */
  policy?: string[];
  _policy?: Element;
  /**
   * The reason (purpose of use), specific to this participant, that was used during the event being recorded.
   */
  purposeOfUse?: Coding[];
  /**
   * This field ties an audit event to a specific resource.
   */
  reference?: Reference;
  /**
   * This value is used to distinguish between requestor-users and recipient-users. For example, one person may initiate a report-output to be sent to another user.
   */
  requestor: boolean;
  _requestor?: Element;
  /**
   * This value ties an audited event to a user's role(s). It is an optional value that might be used to group events for analysis by user functional role categories.
   */
  role?: CodeableConcept[];
  /**
   * This field ties an audit event to a specific user.
   */
  userId?: Identifier;
}
/**
 * The event is reported by one source.
 */
export interface AuditEventSource extends BackboneElement {
  /**
   * This field ties the event to a specific source system. It may be used to group events for analysis according to where the event was detected.
   */
  identifier: Identifier;
  /**
   * This value differentiates among the sites in a multi-site enterprise health information system.
   */
  site?: string;
  _site?: Element;
  /**
   * This field indicates which type of source is identified by the Audit Source ID. It is an optional value that may be used to group events for analysis according to the type of source where the event occurred.
   */
  type?: Coding[];
}
/**
 * Additional Information about the Object.
 */
export interface AuditEventObjectDetail extends BackboneElement {
  /**
   * Name of the property.
   */
  type: string;
  _type?: Element;
  /**
   * Property value.
   */
  value: string;
  _value?: Element;
}
/**
 * The event may have other objects involved.
 */
export interface AuditEventObject extends BackboneElement {
  /**
   * Text that describes the object in more detail.
   */
  description?: string;
  _description?: Element;
  /**
   * Additional Information about the Object.
   */
  detail?: AuditEventObjectDetail[];
  /**
   * Identifies a specific instance of the participant object. The reference should always be version specific.
   */
  identifier?: Identifier;
  /**
   * Institutional policies for privacy and security may optionally fall under different accountability rules based on data life cycle. This provides a differentiating value for those cases.
   */
  lifecycle?: Coding;
  /**
   * An instance-specific descriptor of the Participant Object ID audited, such as a person's name.
   */
  name?: string;
  _name?: Element;
  /**
   * For query events it may be necessary to capture the actual query input to the query process in order to identify the specific event. Because of differences among query implementations and data encoding for them, this is a base 64 encoded data blob. It may be subsequently decoded or interpreted by downstream audit analysis processing.
   */
  query?: string;
  _query?: Element;
  /**
   * Identifies a specific instance of the participant object. The reference should always be version specific.
   */
  reference?: Reference;
  /**
   * For some detailed audit analysis it may be necessary to indicate a more granular type of participant, based on the application role it serves.
   */
  role?: Coding;
  /**
   * This field identifies the security labels for a specific instance of an object, such as a patient, to detect/track privacy and security issues.
   */
  securityLabel?: Coding[];
  /**
   * To describe the object being acted upon. In addition to queries on the subject of the action in an auditable event, it is also important to be able to query on the object type for the action.
   */
  type?: Coding;
}
/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 */
export interface AuditEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'AuditEvent'
  /**
   * The event must be identified.
   */
  event: AuditEventEvent;
  /**
   * The event may have other objects involved.
   */
  object?: AuditEventObject[];
  /**
   * The event has one or more active participants.
   */
  participant: AuditEventParticipant[];
  /**
   * The event is reported by one source.
   */
  source: AuditEventSource;
}
/**
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export interface Basic extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Basic'
  /**
   * Needed for partitioning the resource.
   */
  author?: Reference;
  /**
   * Must be able to distinguish different types of "basic" resources.
   */
  code: CodeableConcept;
  /**
   * Allows ordering resource instances by time.
   */
  created?: string;
  _created?: Element;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: Identifier[];
  /**
   * Needed for partitioning the resource by Patient.
   */
  subject?: Reference;
}
/**
 * A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 */
export interface Binary extends Resource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Binary'
  /**
   * The actual content, base64 encoded.
   */
  content: string;
  _content?: Element;
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  contentType: string;
  _contentType?: Element;
}
/**
 * Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export interface BodySite extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'BodySite'
  /**
   * Named anatomical location - ideally coded where possible.
   */
  code?: CodeableConcept;
  /**
   * Description of anatomical location.
   */
  description?: string;
  _description?: Element;
  /**
   * Identifier for this instance of the anatomical location.
   */
  identifier?: Identifier[];
  /**
   * Image or images used to identify a location.
   */
  image?: Attachment[];
  /**
   * Modifier to refine the anatomical location.  These include modifiers for laterality, relative location, directionality, number, and plane.
   */
  modifier?: CodeableConcept[];
  /**
   * The person to which the body site belongs.
   */
  patient: Reference;
}
/**
 * A series of links that provide context to this bundle.
 */
export interface BundleLink extends BackboneElement {
  /**
   * A name which details the functional use for this link - see [[http://www.iana.org/assignments/link-relations/link-relations.xhtml]].
   */
  relation: string;
  _relation?: Element;
  /**
   * The reference details for the link.
   */
  url: string;
  _url?: Element;
}
/**
 * Information about the search process that lead to the creation of this entry.
 */
export interface BundleEntrySearch extends BackboneElement {
  /**
   * Why this entry is in the result set - whether it's included as a match or because of an _include requirement.
   */
  mode?: string;
  _mode?: Element;
  /**
   * When searching, the server's search ranking score for the entry.
   */
  score?: number;
}
/**
 * Code Values for the Bundle.entry.search.mode field
 */
export enum BundleEntrySearchModeCodes {
  MATCH = "match",
  INCLUDE = "include",
  OUTCOME = "outcome",
}
/**
 * Additional information about how this entry should be processed as part of a transaction.
 */
export interface BundleEntryRequest extends BackboneElement {
  /**
   * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
   */
  ifMatch?: string;
  _ifMatch?: Element;
  /**
   * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifModifiedSince?: string;
  _ifModifiedSince?: Element;
  /**
   * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
   */
  ifNoneExist?: string;
  _ifNoneExist?: Element;
  /**
   * If the ETag values match, return a 304 Not modified status. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifNoneMatch?: string;
  _ifNoneMatch?: Element;
  /**
   * The HTTP verb for this entry in either a update history, or a transaction/ transaction response.
   */
  method: string;
  _method?: Element;
  /**
   * The URL for this entry, relative to the root (the address to which the request is posted).
   */
  url: string;
  _url?: Element;
}
/**
 * Code Values for the Bundle.entry.request.method field
 */
export enum BundleEntryRequestMethodCodes {
  GET = "GET",
  POST = "POST",
  PUT = "PUT",
  DELETE = "DELETE",
}
/**
 * Additional information about how this entry should be processed as part of a transaction.
 */
export interface BundleEntryResponse extends BackboneElement {
  /**
   * The etag for the resource, it the operation for the entry produced a versioned resource.
   */
  etag?: string;
  _etag?: Element;
  /**
   * The date/time that the resource was modified on the server.
   */
  lastModified?: string;
  _lastModified?: Element;
  /**
   * The location header created by processing this operation.
   */
  location?: string;
  _location?: Element;
  /**
   * The status code returned by processing this entry.
   */
  status: string;
  _status?: Element;
}
/**
 * An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
 */
export interface BundleEntry extends BackboneElement {
  /**
   * The Absolute URL for the resource. This must be provided for all resources. The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource.
   */
  fullUrl?: string;
  _fullUrl?: Element;
  /**
   * A series of links that provide context to this entry.
   */
  Link?: BundleLink[];
  /**
   * Additional information about how this entry should be processed as part of a transaction.
   */
  request?: BundleEntryRequest;
  /**
   * The Resources for the entry.
   */
  resource?: Resource;
  /**
   * Additional information about how this entry should be processed as part of a transaction.
   */
  response?: BundleEntryResponse;
  /**
   * Information about the search process that lead to the creation of this entry.
   */
  search?: BundleEntrySearch;
}
/**
 * A container for a collection of resources.
 */
export interface Bundle extends Resource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Bundle'
  /**
   * An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
   */
  entry?: BundleEntry[];
  /**
   * A series of links that provide context to this bundle.
   */
  link?: BundleLink[];
  /**
   * This element allows capturing signatures on documents. It also allows signatures on messages, transactions or even query responses. It may support content-authentication, non-repudiation or other business cases. This is primarily relevant where the bundle may travel through multiple hops or via other mechanisms where HTTPS non-repudiation is insufficient.
   */
  signature?: Signature;
  /**
   * If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).
   */
  total?: number;
  /**
   * Indicates the purpose of this bundle- how it was intended to be used.
   */
  type: string;
  _type?: Element;
}
/**
 * Code Values for the Bundle.type field
 */
export enum BundleTypeCodes {
  DOCUMENT = "document",
  MESSAGE = "message",
  TRANSACTION = "transaction",
  TRANSACTION_RESPONSE = "transaction-response",
  BATCH = "batch",
  BATCH_RESPONSE = "batch-response",
  HISTORY = "history",
  SEARCHSET = "searchset",
  COLLECTION = "collection",
}
/**
 * Identifies CarePlans with some sort of formal relationship to the current plan.
 */
export interface CarePlanRelatedPlan extends BackboneElement {
  /**
   * Identifies the type of relationship this plan has to the target plan.
   */
  code?: string;
  _code?: Element;
  /**
   * A reference to the plan to which a relationship is asserted.
   */
  plan: Reference;
}
/**
 * Code Values for the CarePlan.relatedPlan.code field
 */
export enum CarePlanRelatedPlanCodeCodes {
  INCLUDES = "includes",
  REPLACES = "replaces",
  FULFILLS = "fulfills",
}
/**
 * Allows representation of care teams, helps scope care plan.  In some cases may be a determiner of access permissions.
 */
export interface CarePlanParticipant extends BackboneElement {
  /**
   * The specific person or organization who is participating/expected to participate in the care plan.
   */
  member?: Reference;
  /**
   * Indicates specific responsibility of an individual within the care plan; e.g. "Primary physician", "Team coordinator", "Caregiver", etc.
   */
  role?: CodeableConcept;
}
/**
 * Details in a simple form for generic care plan systems.
 */
export interface CarePlanActivityDetail extends BackboneElement {
  /**
   * May determine what types of extensions are permitted.
   */
  category?: CodeableConcept;
  /**
   * Allows matching performed to planned as well as validation against protocols.
   */
  code?: CodeableConcept;
  /**
   * Allows rough dose checking.
   */
  dailyAmount?: Quantity;
  /**
   * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
   */
  description?: string;
  _description?: Element;
  /**
   * So that participants know the link explicitly.
   */
  goal?: Reference[];
  /**
   * Helps in planning of activity.
   */
  location?: Reference;
  /**
   * Helps in planning of activity.
   */
  performer?: Reference[];
  /**
   * Identifies the food, drug or other product to be consumed or supplied in the activity.
   */
  productCodeableConcept?: CodeableConcept;
  /**
   * Identifies the food, drug or other product to be consumed or supplied in the activity.
   */
  productReference?: Reference;
  /**
   * Captures intention to not do something that may have been previously typical.
   */
  prohibited: boolean;
  _prohibited?: Element;
  /**
   * Identifies the quantity expected to be supplied, administered or consumed by the subject.
   */
  quantity?: Quantity;
  /**
   * Provides the rationale that drove the inclusion of this particular activity as part of the plan.
   */
  reasonCode?: CodeableConcept[];
  /**
   * Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan.
   */
  reasonReference?: Reference[];
  /**
   * Allows prompting for activities and detection of missed planned activities.
   */
  scheduledTiming?: Timing;
  /**
   * Allows prompting for activities and detection of missed planned activities.
   */
  scheduledPeriod?: Period;
  /**
   * Allows prompting for activities and detection of missed planned activities.
   */
  scheduledString?: string;
  _scheduledString?: Element;
  /**
   * Indicates progress against the plan, whether the activity is still relevant for the plan.
   */
  status?: string;
  _status?: Element;
  /**
   * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
   */
  statusReason?: CodeableConcept;
}
/**
 * Code Values for the CarePlan.activity.detail.status field
 */
export enum CarePlanActivityDetailStatusCodes {
  NOT_STARTED = "not-started",
  SCHEDULED = "scheduled",
  IN_PROGRESS = "in-progress",
  ON_HOLD = "on-hold",
  COMPLETED = "completed",
  CANCELLED = "cancelled",
}
/**
 * Allows systems to prompt for performance of planned activities, and validate plans against best practice.
 */
export interface CarePlanActivity extends BackboneElement {
  /**
   * Links plan to resulting actions.
   */
  actionResulting?: Reference[];
  /**
   * Details in a simple form for generic care plan systems.
   */
  detail?: CarePlanActivityDetail;
  /**
   * Can be used to capture information about adherence, progress, concerns, etc.
   */
  progress?: Annotation[];
  /**
   * Details in a form consistent with other applications and contexts of use.
   */
  reference?: Reference;
}
/**
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
export interface CarePlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'CarePlan'
  /**
   * Allows systems to prompt for performance of planned activities, and validate plans against best practice.
   */
  activity?: CarePlanActivity[];
  /**
   * Links plan to the conditions it manages.  Also scopes plans - multiple plans may exist addressing different concerns.
   */
  addresses?: Reference[];
  /**
   * Identifies the individual(s) or ogranization who is responsible for the content of the care plan.
   */
  author?: Reference[];
  /**
   * Used for filtering what plan(s) are retrieved and displayed to different types of users.
   */
  category?: CodeableConcept[];
  /**
   * Identifies the context in which this particular CarePlan is defined.
   */
  context?: Reference;
  /**
   * Provides more detail than conveyed by category.
   */
  description?: string;
  _description?: Element;
  /**
   * Provides context for plan.  Allows plan effectiveness to be evaluated by clinicians.
   */
  goal?: Reference[];
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: Identifier[];
  /**
   * Indicates how current the plan is.
   */
  modified?: string;
  _modified?: Element;
  /**
   * Used to capture information that applies to the plan as a whole that doesn't fit into discrete elements.
   */
  note?: Annotation;
  /**
   * Allows representation of care teams, helps scope care plan.  In some cases may be a determiner of access permissions.
   */
  participant?: CarePlanParticipant[];
  /**
   * Allows tracking what plan(s) are in effect at a particular time.
   */
  period?: Period;
  /**
   * Identifies CarePlans with some sort of formal relationship to the current plan.
   */
  relatedPlan?: CarePlanRelatedPlan[];
  /**
   * Allows clinicians to determine whether the plan is actionable or not.
   */
  status: string;
  _status?: Element;
  /**
   * Identifies the patient or group whose intended care is described by the plan.
   */
  subject?: Reference;
  /**
   * Identifies barriers and other considerations associated with the care plan.
   */
  support?: Reference[];
}
/**
 * Code Values for the CarePlan.status field
 */
export enum CarePlanStatusCodes {
  PROPOSED = "proposed",
  DRAFT = "draft",
  ACTIVE = "active",
  COMPLETED = "completed",
  CANCELLED = "cancelled",
}
/**
 * The party to be reimbursed for the services.
 */
export interface ClaimPayee extends BackboneElement {
  /**
   * The organization who is to be reimbursed for the claim (the party to whom any benefit is assigned).
   */
  organization?: Reference;
  /**
   * The person other than the subscriber who is to be reimbursed for the claim (the party to whom any benefit is assigned).
   */
  person?: Reference;
  /**
   * The provider who is to be reimbursed for the claim (the party to whom any benefit is assigned).
   */
  provider?: Reference;
  /**
   * Party to be reimbursed: Subscriber, provider, other.
   */
  type?: Coding;
}
/**
 * Ordered list of patient diagnosis for which care is sought.
 */
export interface ClaimDiagnosis extends BackboneElement {
  /**
   * Required to adjudicate services rendered to condition presented.
   */
  diagnosis: Coding;
  /**
   * Required to maintain order of the diagnoses.
   */
  sequence: number;
}
/**
 * Health care programs and insurers are significant payors of health service costs.
 */
export interface ClaimCoverage extends BackboneElement {
  /**
   * The contract number of a business agreement which describes the terms and conditions.
   */
  businessArrangement?: string;
  _businessArrangement?: Element;
  /**
   * Used by downstream payers to determine what balance remains and the net payable.
   */
  claimResponse?: Reference;
  /**
   * Need to identify the issuer to target for processing and for coordination of benefit processing.
   */
  coverage: Reference;
  /**
   * To identify which coverage is being adjudicated.
   */
  focal: boolean;
  _focal?: Element;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * To provide any pre=determination or prior authorization reference.
   */
  preAuthRef?: string[];
  _preAuthRef?: Element;
  /**
   * To determine the relationship between the patient and the subscriber.
   */
  relationship: Coding;
  /**
   * To maintain order of the coverages.
   */
  sequence: number;
}
/**
 * Third tier of goods and services.
 */
export interface ClaimItemDetailSubDetail extends BackboneElement {
  /**
   * If a fee is present the associated product/service code must be present.
   */
  factor?: number;
  /**
   * If a fee is present the associated product/service code must be present.
   */
  net?: Quantity;
  /**
   * If a fee is present the associated product/service code must be present.
   */
  points?: number;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * The fee for an additional  service or product or charge.
   */
  service: Coding;
  /**
   * The type of product or service.
   */
  type: Coding;
  /**
   * The UDI code and issuer if applicable for the supplied product.
   */
  udi?: Coding;
  /**
   * If a fee is present the associated product/service code must be present.
   */
  unitPrice?: Quantity;
}
/**
 * Second tier of goods and services.
 */
export interface ClaimItemDetail extends BackboneElement {
  /**
   * If a fee is present the associated product/service code must be present.
   */
  factor?: number;
  /**
   * If a fee is present the associated product/service code must be present.
   */
  net?: Quantity;
  /**
   * If a fee is present the associated product/service code must be present.
   */
  points?: number;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
  /**
   * Third tier of goods and services.
   */
  subDetail?: ClaimItemDetailSubDetail[];
  /**
   * The type of product or service.
   */
  type: Coding;
  /**
   * The UDI code and issuer if applicable for the supplied product.
   */
  udi?: Coding;
  /**
   * If a fee is present the associated product/service code must be present.
   */
  unitPrice?: Quantity;
}
/**
 * The materials and placement date of prior fixed prosthesis.
 */
export interface ClaimItemProsthesis extends BackboneElement {
  /**
   * May impact on adjudication.
   */
  initial?: boolean;
  _initial?: Element;
  /**
   * May impact on adjudication.
   */
  priorDate?: string;
  _priorDate?: Element;
  /**
   * May impact on adjudication.
   */
  priorMaterial?: Coding;
}
/**
 * First tier of goods and services.
 */
export interface ClaimItem extends BackboneElement {
  /**
   * Physical service site on the patient (limb, tooth, etc.).
   */
  bodySite?: Coding;
  /**
   * Second tier of goods and services.
   */
  detail?: ClaimItemDetail[];
  /**
   * Diagnosis applicable for this service or product line.
   */
  diagnosisLinkId?: number[];
  /**
   * If a fee is present the associated product/service code must be present.
   */
  factor?: number;
  /**
   * May impact on adjudication.
   */
  modifier?: Coding[];
  /**
   * If a fee is present the associated product/service code must be present.
   */
  net?: Quantity;
  /**
   * If a fee is present the associated product/service code must be present.
   */
  points?: number;
  /**
   * The materials and placement date of prior fixed prosthesis.
   */
  prosthesis?: ClaimItemProsthesis;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  serviceDate?: string;
  _serviceDate?: Element;
  /**
   * A region or surface of the site, e.g. limb region or tooth surface(s).
   */
  subSite?: Coding[];
  /**
   * The type of product or service.
   */
  type: Coding;
  /**
   * The UDI code and issuer if applicable for the supplied product.
   */
  udi?: Coding;
  /**
   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
   */
  unitPrice?: Quantity;
}
/**
 * The list of missing teeth may influence the adjudication of services for example with Bridges.
 */
export interface ClaimMissingTeeth extends BackboneElement {
  /**
   * Some services and adjudications require this information.
   */
  extractionDate?: string;
  _extractionDate?: Element;
  /**
   * Provides the reason for the missing tooth.
   */
  reason?: Coding;
  /**
   * Provides the tooth number of the missing tooth.
   */
  tooth: Coding;
}
/**
 * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
 */
export interface Claim extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Claim'
  /**
   * Coverage may be dependent on accidents.
   */
  accident?: string;
  _accident?: Element;
  /**
   * Coverage may be dependent on the type of accident.
   */
  accidentType?: Coding;
  /**
   * Code to indicate that Xrays, images, emails, documents, models or attachments are being sent in support of this submission.
   */
  additionalMaterials?: Coding[];
  /**
   * List of patient conditions for which care is sought.
   */
  condition?: Coding[];
  /**
   * Health care programs and insurers are significant payors of health service costs.
   */
  coverage?: ClaimCoverage[];
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: Element;
  /**
   * Ordered list of patient diagnosis for which care is sought.
   */
  diagnosis?: ClaimDiagnosis[];
  /**
   * Person who created the invoice/claim/pre-determination or pre-authorization.
   */
  enterer?: Reference;
  /**
   * To determine extenuating circumstances for coverage.
   */
  exception?: Coding[];
  /**
   * Facility where the services were provided.
   */
  facility?: Reference;
  /**
   * In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.
   */
  fundsReserve?: Coding;
  /**
   * The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
   */
  identifier?: Identifier[];
  /**
   * Coverage may be modified based on exception information provided.
   */
  interventionException?: Coding[];
  /**
   * First tier of goods and services.
   */
  item?: ClaimItem[];
  /**
   * The list of missing teeth may influence the adjudication of services for example with Bridges.
   */
  missingTeeth?: ClaimMissingTeeth[];
  /**
   * The organization which is responsible for the bill, claim pre-determination, pre-authorization.
   */
  organization?: Reference;
  /**
   * Original prescription to support the dispensing of pharmacy services, medications or products.
   */
  originalPrescription?: Reference;
  /**
   * The version of the specification from which the original instance was created.
   */
  originalRuleset?: Coding;
  /**
   * Patient Resource.
   */
  patient: Reference;
  /**
   * The party to be reimbursed for the services.
   */
  payee?: ClaimPayee;
  /**
   * For type=Pharmacy and Vision only.
   */
  prescription?: Reference;
  /**
   * Immediate (stat), best effort (normal), deferred (deferred).
   */
  priority?: Coding;
  /**
   * The provider which is responsible for the bill, claim pre-determination, pre-authorization.
   */
  provider?: Reference;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: Reference;
  /**
   * The version of the specification on which this instance relies.
   */
  ruleset?: Coding;
  /**
   * Often required for over-age dependents.
   */
  school?: string;
  _school?: Element;
  /**
   * Insurer Identifier, typical BIN number (6 digit).
   */
  target?: Reference;
  /**
   * The category of claim this is.
   */
  type: string;
  _type?: Element;
  /**
   * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).
   */
  use?: string;
  _use?: Element;
}
/**
 * Code Values for the Claim.type field
 */
export enum ClaimTypeCodes {
  INSTITUTIONAL = "institutional",
  ORAL = "oral",
  PHARMACY = "pharmacy",
  PROFESSIONAL = "professional",
  VISION = "vision",
}
/**
 * Code Values for the Claim.use field
 */
export enum ClaimUseCodes {
  COMPLETE = "complete",
  PROPOSED = "proposed",
  EXPLORATORY = "exploratory",
  OTHER = "other",
}
/**
 * The adjudications results.
 */
export interface ClaimResponseItemAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number;
}
/**
 * The adjudications results.
 */
export interface ClaimResponseItemDetailAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number;
}
/**
 * The adjudications results.
 */
export interface ClaimResponseItemDetailSubDetailAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number;
}
/**
 * The third tier service adjudications for submitted services.
 */
export interface ClaimResponseItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemDetailSubDetailAdjudication[];
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
/**
 * The second tier service adjudications for submitted services.
 */
export interface ClaimResponseItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemDetailAdjudication[];
  /**
   * A service line number.
   */
  sequenceLinkId: number;
  /**
   * The third tier service adjudications for submitted services.
   */
  subDetail?: ClaimResponseItemDetailSubDetail[];
}
/**
 * The first tier service adjudications for submitted services.
 */
export interface ClaimResponseItem extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemAdjudication[];
  /**
   * The second tier service adjudications for submitted services.
   */
  detail?: ClaimResponseItemDetail[];
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[];
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
/**
 * The adjudications results.
 */
export interface ClaimResponseAddItemAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number;
}
/**
 * The adjudications results.
 */
export interface ClaimResponseAddItemDetailAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number;
}
/**
 * The second tier service adjudications for payor added services.
 */
export interface ClaimResponseAddItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseAddItemDetailAdjudication[];
  /**
   * The fee charged for the professional service or product..
   */
  fee?: Quantity;
  /**
   * A code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
}
/**
 * The first tier service adjudications for payor added services.
 */
export interface ClaimResponseAddItem extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseAddItemAdjudication[];
  /**
   * The second tier service adjudications for payor added services.
   */
  detail?: ClaimResponseAddItemDetail[];
  /**
   * The fee charged for the professional service or product..
   */
  fee?: Quantity;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumberLinkId?: number[];
  /**
   * List of input service items which this service line is intended to replace.
   */
  sequenceLinkId?: number[];
  /**
   * A code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
}
/**
 * Mutually exclusive with Services Provided (Item).
 */
export interface ClaimResponseError extends BackboneElement {
  /**
   * An error code,froma specified code system, which details why the claim could not be adjudicated.
   */
  code: Coding;
  /**
   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
   */
  detailSequenceLinkId?: number;
  /**
   * The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.
   */
  sequenceLinkId?: number;
  /**
   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
   */
  subdetailSequenceLinkId?: number;
}
/**
 * Note text.
 */
export interface ClaimResponseNote extends BackboneElement {
  /**
   * An integer associated with each note which may be referred to from each service line item.
   */
  number?: number;
  /**
   * The note text.
   */
  text?: string;
  _text?: Element;
  /**
   * The note purpose: Print/Display.
   */
  type?: Coding;
}
/**
 * Health care programs and insurers are significant payors of health service costs.
 */
export interface ClaimResponseCoverage extends BackboneElement {
  /**
   * The contract number of a business agreement which describes the terms and conditions.
   */
  businessArrangement?: string;
  _businessArrangement?: Element;
  /**
   * Used by downstream payers to determine what balance remains and the net payable.
   */
  claimResponse?: Reference;
  /**
   * Need to identify the issuer to target for processing and for coordination of benefit processing.
   */
  coverage: Reference;
  /**
   * To identify which coverage is being adjudicated.
   */
  focal: boolean;
  _focal?: Element;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * To provide any pre-determination or prior authorization reference.
   */
  preAuthRef?: string[];
  _preAuthRef?: Element;
  /**
   * To determine the relationship between the patient and the subscriber.
   */
  relationship: Coding;
  /**
   * To maintain order of the coverages.
   */
  sequence: number;
}
/**
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
export interface ClaimResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ClaimResponse'
  /**
   * The first tier service adjudications for payor added services.
   */
  addItem?: ClaimResponseAddItem[];
  /**
   * Health care programs and insurers are significant payors of health service costs.
   */
  coverage?: ClaimResponseCoverage[];
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: Element;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string;
  _disposition?: Element;
  /**
   * Mutually exclusive with Services Provided (Item).
   */
  error?: ClaimResponseError[];
  /**
   * The form to be used for printing the content.
   */
  form?: Coding;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * The first tier service adjudications for submitted services.
   */
  item?: ClaimResponseItem[];
  /**
   * Note text.
   */
  note?: ClaimResponseNote[];
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * Transaction status: error, complete.
   */
  outcome?: string;
  _outcome?: Element;
  /**
   * Party to be reimbursed: Subscriber, provider, other.
   */
  payeeType?: Coding;
  /**
   * Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
   */
  paymentAdjustment?: Quantity;
  /**
   * Reason for the payment adjustment.
   */
  paymentAdjustmentReason?: Coding;
  /**
   * Payable less any payment adjustment.
   */
  paymentAmount?: Quantity;
  /**
   * Estimated payment data.
   */
  paymentDate?: string;
  _paymentDate?: Element;
  /**
   * Payment identifier.
   */
  paymentRef?: Identifier;
  /**
   * Original request resource referrence.
   */
  request?: Reference;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference;
  /**
   * Status of funds reservation (For provider, for Patient, None).
   */
  reserved?: Coding;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
  /**
   * Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
   */
  totalBenefit?: Quantity;
  /**
   * This is a check value that the receiver calculates and returns.
   */
  totalCost?: Quantity;
  /**
   * The amount of deductible applied which was not allocated to any particular service line.
   */
  unallocDeductable?: Quantity;
}
/**
 * Code Values for the ClaimResponse.outcome field
 */
export enum ClaimResponseOutcomeCodes {
  COMPLETE = "complete",
  ERROR = "error",
}
/**
 * One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
 */
export interface ClinicalImpressionInvestigations extends BackboneElement {
  /**
   * A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutitirional) history may be used.
   */
  code: CodeableConcept;
  /**
   * A record of a specific investigation that was undertaken.
   */
  item?: Reference[];
}
/**
 * Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
 */
export interface ClinicalImpressionFinding extends BackboneElement {
  /**
   * Which investigations support finding or diagnosis.
   */
  cause?: string;
  _cause?: Element;
  /**
   * Specific text of code for finding or diagnosis.
   */
  item: CodeableConcept;
}
/**
 * Diagnosis considered not possible.
 */
export interface ClinicalImpressionRuledOut extends BackboneElement {
  /**
   * Specific text of code for diagnosis.
   */
  item: CodeableConcept;
  /**
   * Grounds for elimination.
   */
  reason?: string;
  _reason?: Element;
}
/**
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
export interface ClinicalImpression extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ClinicalImpression'
  /**
   * Actions taken during assessment.
   */
  action?: Reference[];
  /**
   * The clinician performing the assessment.
   */
  assessor?: Reference;
  /**
   * The point in time at which the assessment was concluded (not when it was recorded).
   */
  date?: string;
  _date?: Element;
  /**
   * A summary of the context and/or cause of the assessment - why / where was it peformed, and what patient events/sstatus prompted it.
   */
  description?: string;
  _description?: Element;
  /**
   * Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
   */
  finding?: ClinicalImpressionFinding[];
  /**
   * One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
   */
  investigations?: ClinicalImpressionInvestigations[];
  /**
   * The patient being assessed.
   */
  patient: Reference;
  /**
   * Plan of action after assessment.
   */
  plan?: Reference[];
  /**
   * A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
   */
  previous?: Reference;
  /**
   * This a list of the general problems/conditions for a patient.
   */
  problem?: Reference[];
  /**
   * Estimate of likely outcome.
   */
  prognosis?: string;
  _prognosis?: Element;
  /**
   * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
   */
  protocol?: string;
  _protocol?: Element;
  /**
   * Diagnoses/conditions resolved since the last assessment.
   */
  resolved?: CodeableConcept[];
  /**
   * Diagnosis considered not possible.
   */
  ruledOut?: ClinicalImpressionRuledOut[];
  /**
   * Identifies the workflow status of the assessment.
   */
  status: string;
  _status?: Element;
  /**
   * A text summary of the investigations and the diagnosis.
   */
  summary?: string;
  _summary?: Element;
  /**
   * The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.
   */
  triggerCodeableConcept?: CodeableConcept;
  /**
   * The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.
   */
  triggerReference?: Reference;
}
/**
 * Code Values for the ClinicalImpression.status field
 */
export enum ClinicalImpressionStatusCodes {
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Text, attachment(s), or resource(s) that was communicated to the recipient.
 */
export interface CommunicationPayload extends BackboneElement {
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentString: string;
  _contentString?: Element;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentAttachment: Attachment;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentReference: Reference;
}
/**
 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
 */
export interface Communication extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Communication'
  /**
   * The type of message conveyed such as alert, notification, reminder, instruction, etc.
   */
  category?: CodeableConcept;
  /**
   * The encounter within which the communication was sent.
   */
  encounter?: Reference;
  /**
   * Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[];
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[];
  /**
   * Text, attachment(s), or resource(s) that was communicated to the recipient.
   */
  payload?: CommunicationPayload[];
  /**
   * The reason or justification for the communication.
   */
  reason?: CodeableConcept[];
  /**
   * The time when this communication arrived at the destination.
   */
  received?: string;
  _received?: Element;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time).
   */
  recipient?: Reference[];
  /**
   * The communication request that was responsible for producing this communication.
   */
  requestDetail?: Reference;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
   */
  sender?: Reference;
  /**
   * The time when this communication was sent.
   */
  sent?: string;
  _sent?: Element;
  /**
   * The status of the transmission.
   */
  status?: string;
  _status?: Element;
  /**
   * The patient who was the focus of this communication.
   */
  subject?: Reference;
}
/**
 * Code Values for the Communication.status field
 */
export enum CommunicationStatusCodes {
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  SUSPENDED = "suspended",
  REJECTED = "rejected",
  FAILED = "failed",
}
/**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
export interface CommunicationRequestPayload extends BackboneElement {
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentString: string;
  _contentString?: Element;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentAttachment: Attachment;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentReference: Reference;
}
/**
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
export interface CommunicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'CommunicationRequest'
  /**
   * The type of message to be sent such as alert, notification, reminder, instruction, etc.
   */
  category?: CodeableConcept;
  /**
   * The encounter within which the communication request was created.
   */
  encounter?: Reference;
  /**
   * A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.
   */
  identifier?: Identifier[];
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[];
  /**
   * Text, attachment(s), or resource(s) to be communicated to the recipient.
   */
  payload?: CommunicationRequestPayload[];
  /**
   * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
   */
  priority?: CodeableConcept;
  /**
   * The reason or justification for the communication request.
   */
  reason?: CodeableConcept[];
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which is the intended target of the communication.
   */
  recipient?: Reference[];
  /**
   * The time when the request was made.
   */
  requestedOn?: string;
  _requestedOn?: Element;
  /**
   * The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.
   */
  requester?: Reference;
  /**
   * The time when this communication is to occur.
   */
  scheduledDateTime?: string;
  _scheduledDateTime?: Element;
  /**
   * The time when this communication is to occur.
   */
  scheduledPeriod?: Period;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
   */
  sender?: Reference;
  /**
   * The status of the proposal or order.
   */
  status?: string;
  _status?: Element;
  /**
   * The patient who is the focus of this communication request.
   */
  subject?: Reference;
}
/**
 * Code Values for the CommunicationRequest.status field
 */
export enum CommunicationRequestStatusCodes {
  PROPOSED = "proposed",
  PLANNED = "planned",
  REQUESTED = "requested",
  RECEIVED = "received",
  ACCEPTED = "accepted",
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  SUSPENDED = "suspended",
  REJECTED = "rejected",
  FAILED = "failed",
}
/**
 * Identifies responsibility for the accuracy of the composition content.
 */
export interface CompositionAttester extends BackboneElement {
  /**
   * Indicates the level of authority of the attestation.
   */
  mode: string[];
  _mode?: Element;
  /**
   * Identifies who has taken on the responsibility for accuracy of the composition content.
   */
  party?: Reference;
  /**
   * Identifies when the information in the composition was deemed accurate.  (Things may have changed since then.).
   */
  time?: string;
  _time?: Element;
}
/**
 * Code Values for the Composition.attester.mode field
 */
export enum CompositionAttesterModeCodes {
  PERSONAL = "personal",
  PROFESSIONAL = "professional",
  LEGAL = "legal",
  OFFICIAL = "official",
}
/**
 * Provides context for the composition and creates a linkage between a resource describing an event and the composition created describing the event.
 */
export interface CompositionEvent extends BackboneElement {
  /**
   * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
   */
  code?: CodeableConcept[];
  /**
   * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
   */
  detail?: Reference[];
  /**
   * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
   */
  period?: Period;
}
/**
 * The root of the sections that make up the composition.
 */
export interface CompositionSection extends BackboneElement {
  /**
   * Provides computable standardized labels to topics within the document.
   */
  code?: CodeableConcept;
  /**
   * Allows capturing things like "none exist" or "not asked" which can be important for most lists.
   */
  emptyReason?: CodeableConcept;
  /**
   * A reference to the actual resource from which the narrative in the section is derived.
   */
  entry?: Reference[];
  /**
   * Sections are used in various ways, and it must be known in what way it is safe to use the entries in them.
   */
  mode?: string;
  _mode?: Element;
  /**
   * Important for presentation and rendering.  Lists may be sorted to place more important information first or to group related entries.
   */
  orderedBy?: CodeableConcept;
  /**
   * A nested sub-section within this section.
   */
  Section?: CompositionSection[];
  /**
   * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
   */
  text?: Narrative;
  /**
   * Section headings are often standardized for different types of documents.  They give guidance to humans on how the document is organized.
   */
  title?: string;
  _title?: Element;
}
/**
 * Code Values for the Composition.section.mode field
 */
export enum CompositionSectionModeCodes {
  WORKING = "working",
  SNAPSHOT = "snapshot",
  CHANGES = "changes",
}
/**
 * A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
 */
export interface Composition extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Composition'
  /**
   * Identifies responsibility for the accuracy of the composition content.
   */
  attester?: CompositionAttester[];
  /**
   * Identifies who is responsible for the content.
   */
  author: Reference[];
  /**
   * Helps humans to assess whether the composition is of interest when viewing an index of compositions or documents.
   */
  class?: CodeableConcept;
  /**
   * The code specifying the level of confidentiality of the Composition.
   */
  confidentiality?: string;
  _confidentiality?: Element;
  /**
   * Identifies where to go to find the current version, where to report issues, etc.
   */
  custodian?: Reference;
  /**
   * dateTime is used for tracking, organizing versions and searching.
   */
  date: string;
  _date?: Element;
  /**
   * Provides context for the composition and supports searching.
   */
  encounter?: Reference;
  /**
   * Provides context for the composition and creates a linkage between a resource describing an event and the composition created describing the event.
   */
  event?: CompositionEvent[];
  /**
   * Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
   */
  identifier?: Identifier;
  /**
   * The root of the sections that make up the composition.
   */
  section?: CompositionSection[];
  /**
   * Need to be able to mark interim, amended, or withdrawn compositions or documents.
   */
  status: string;
  _status?: Element;
  /**
   * Essential metadata for searching for the composition. Identifies who and/or what the composition/document is about.
   */
  subject: Reference;
  /**
   * Official human-readable label for the composition.
   */
  title: string;
  _title?: Element;
  /**
   * Key metadata element describing the composition, used in searching/filtering.
   */
  type: CodeableConcept;
}
/**
 * Code Values for the Composition.status field
 */
export enum CompositionStatusCodes {
  PRELIMINARY = "preliminary",
  FINAL = "final",
  AMENDED = "amended",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface ConceptMapContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the concept map.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
 */
export interface ConceptMapElementTargetDependsOn extends BackboneElement {
  /**
   * Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.
   */
  code: string;
  _code?: Element;
  /**
   * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
   */
  codeSystem: string;
  _codeSystem?: Element;
  /**
   * A reference to a specific concept that holds a coded value. This can be an element in a FHIR resource, or a specific reference to a data element in a different specification (e.g. HL7 v2) or a general reference to a kind of data field, or a reference to a value set with an appropriately narrow definition.
   */
  element: string;
  _element?: Element;
}
/**
 * A concept from the target value set that this concept maps to.
 */
export interface ConceptMapElementTarget extends BackboneElement {
  /**
   * Identity (code or path) or the element/item that the map refers to.
   */
  code?: string;
  _code?: Element;
  /**
   * An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems).
   */
  codeSystem?: string;
  _codeSystem?: Element;
  /**
   * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
   */
  comments?: string;
  _comments?: Element;
  /**
   * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
   */
  dependsOn?: ConceptMapElementTargetDependsOn[];
  /**
   * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
   */
  equivalence: string;
  _equivalence?: Element;
  /**
   * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
   */
  Product?: ConceptMapElementTargetDependsOn[];
}
/**
 * Code Values for the ConceptMap.element.target.equivalence field
 */
export enum ConceptMapElementTargetEquivalenceCodes {
  EQUIVALENT = "equivalent",
  EQUAL = "equal",
  WIDER = "wider",
  SUBSUMES = "subsumes",
  NARROWER = "narrower",
  SPECIALIZES = "specializes",
  INEXACT = "inexact",
  UNMATCHED = "unmatched",
  DISJOINT = "disjoint",
}
/**
 * Mappings for an individual concept in the source to one or more concepts in the target.
 */
export interface ConceptMapElement extends BackboneElement {
  /**
   * Identity (code or path) or the element/item being mapped.
   */
  code?: string;
  _code?: Element;
  /**
   * An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).
   */
  codeSystem?: string;
  _codeSystem?: Element;
  /**
   * A concept from the target value set that this concept maps to.
   */
  target?: ConceptMapElementTarget[];
}
/**
 * A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
 */
export interface ConceptMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ConceptMap'
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ConceptMapContact[];
  /**
   * A copyright statement relating to the concept map and/or its contents.
   */
  copyright?: string;
  _copyright?: Element;
  /**
   * Need to know when a concept map was first legal for use or became withdrawn or replaced.
   */
  date?: string;
  _date?: Element;
  /**
   * Human understandability.
   */
  description?: string;
  _description?: Element;
  /**
   * Mappings for an individual concept in the source to one or more concepts in the target.
   */
  element?: ConceptMapElement[];
  /**
   * This ConceptMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * Formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier;
  /**
   * Support human navigation.
   */
  name?: string;
  _name?: Element;
  /**
   * Helps establish the "authority/credibility" of the concept map.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Explains why this concept map is needed and why it has been constrained as it has.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * The source value set that specifies the concepts that are being mapped.
   */
  sourceUri: string;
  _sourceUri?: Element;
  /**
   * The source value set that specifies the concepts that are being mapped.
   */
  sourceReference: Reference;
  /**
   * Identify when/if the concept map should be used.
   */
  status: string;
  _status?: Element;
  /**
   * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
   */
  targetUri: string;
  _targetUri?: Element;
  /**
   * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
   */
  targetReference: Reference;
  /**
   * An absolute URL that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published.
   */
  url?: string;
  _url?: Element;
  /**
   * Assist in searching for appropriate concept map instances.
   */
  useContext?: CodeableConcept[];
  /**
   * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the ConceptMap.status field
 */
export enum ConceptMapStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
export interface ConditionStage extends BackboneElement {
  /**
   * Reference to a formal record of the evidence on which the staging assessment is based.
   */
  assessment?: Reference[];
  /**
   * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
   */
  summary?: CodeableConcept;
}
/**
 * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
 */
export interface ConditionEvidence extends BackboneElement {
  /**
   * A manifestation or symptom that led to the recording of this condition.
   */
  code?: CodeableConcept;
  /**
   * Links to other relevant information, including pathology reports.
   */
  detail?: Reference[];
}
/**
 * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
 */
export interface Condition extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Condition'
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementDateTime?: string;
  _abatementDateTime?: Element;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementQuantity?: Quantity;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementBoolean?: boolean;
  _abatementBoolean?: Element;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementPeriod?: Period;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementRange?: Range;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementString?: string;
  _abatementString?: Element;
  /**
   * Individual who is making the condition statement.
   */
  asserter?: Reference;
  /**
   * The anatomical location where this condition manifests itself.
   */
  bodySite?: CodeableConcept[];
  /**
   * A category assigned to the condition.
   */
  category?: CodeableConcept;
  /**
   * The clinical status of the condition.
   */
  clinicalStatus?: string;
  _clinicalStatus?: Element;
  /**
   * Identification of the condition, problem or diagnosis.
   */
  code: CodeableConcept;
  /**
   * A date, when  the Condition statement was documented.
   */
  dateRecorded?: string;
  _dateRecorded?: Element;
  /**
   * Encounter during which the condition was first asserted.
   */
  encounter?: Reference;
  /**
   * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
   */
  evidence?: ConditionEvidence[];
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: Identifier[];
  /**
   * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
   */
  notes?: string;
  _notes?: Element;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetDateTime?: string;
  _onsetDateTime?: Element;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetQuantity?: Quantity;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetPeriod?: Period;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetRange?: Range;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetString?: string;
  _onsetString?: Element;
  /**
   * Indicates the patient who the condition record is associated with.
   */
  patient: Reference;
  /**
   * A subjective assessment of the severity of the condition as evaluated by the clinician.
   */
  severity?: CodeableConcept;
  /**
   * Clinical stage or grade of a condition. May include formal severity assessments.
   */
  stage?: ConditionStage;
  /**
   * The verification status to support the clinical status of the condition.
   */
  verificationStatus: string;
  _verificationStatus?: Element;
}
/**
 * Code Values for the Condition.clinicalStatus field
 */
export enum ConditionClinicalStatusCodes {
  ACTIVE = "active",
  RELAPSE = "relapse",
  REMISSION = "remission",
  RESOLVED = "resolved",
}
/**
 * Code Values for the Condition.verificationStatus field
 */
export enum ConditionVerificationStatusCodes {
  PROVISIONAL = "provisional",
  DIFFERENTIAL = "differential",
  CONFIRMED = "confirmed",
  REFUTED = "refuted",
  ENTERED_IN_ERROR = "entered-in-error",
  UNKNOWN = "unknown",
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface ConformanceContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the conformance.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
 */
export interface ConformanceSoftware extends BackboneElement {
  /**
   * Name software is known by.
   */
  name: string;
  _name?: Element;
  /**
   * Date this version of the software released.
   */
  releaseDate?: string;
  _releaseDate?: Element;
  /**
   * The version identifier for the software covered by this statement.
   */
  version?: string;
  _version?: Element;
}
/**
 * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export interface ConformanceImplementation extends BackboneElement {
  /**
   * Information about the specific installation that this conformance statement relates to.
   */
  description: string;
  _description?: Element;
  /**
   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
   */
  url?: string;
  _url?: Element;
}
/**
 * Certificates associated with security profiles.
 */
export interface ConformanceRestSecurityCertificate extends BackboneElement {
  /**
   * Actual certificate.
   */
  blob?: string;
  _blob?: Element;
  /**
   * Mime type for certificate.
   */
  type?: string;
  _type?: Element;
}
/**
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export interface ConformanceRestSecurity extends BackboneElement {
  /**
   * Certificates associated with security profiles.
   */
  certificate?: ConformanceRestSecurityCertificate[];
  /**
   * Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
   */
  cors?: boolean;
  _cors?: Element;
  /**
   * General description of how security works.
   */
  description?: string;
  _description?: Element;
  /**
   * Types of security services are supported/required by the system.
   */
  service?: CodeableConcept[];
}
/**
 * Identifies a restful operation supported by the solution.
 */
export interface ConformanceRestResourceInteraction extends BackboneElement {
  /**
   * Coded identifier of the operation, supported by the system resource.
   */
  code: string;
  _code?: Element;
  /**
   * REST allows a degree of variability in the implementation of RESTful solutions that is useful for exchange partners to be aware of.
   */
  documentation?: string;
  _documentation?: Element;
}
/**
 * Code Values for the Conformance.rest.resource.interaction.code field
 */
export enum ConformanceRestResourceInteractionCodeCodes {
  READ = "read",
  VREAD = "vread",
  UPDATE = "update",
  DELETE = "delete",
  HISTORY_INSTANCE = "history-instance",
  VALIDATE = "validate",
  HISTORY_TYPE = "history-type",
  CREATE = "create",
  SEARCH_TYPE = "search-type",
}
/**
 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
 */
export interface ConformanceRestResourceSearchParam extends BackboneElement {
  /**
   * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.
   */
  chain?: string[];
  _chain?: Element;
  /**
   * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).
   */
  definition?: string;
  _definition?: Element;
  /**
   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
   */
  documentation?: string;
  _documentation?: Element;
  /**
   * A modifier supported for the search parameter.
   */
  modifier?: string[];
  _modifier?: Element;
  /**
   * The name of the search parameter used in the interface.
   */
  name: string;
  _name?: Element;
  /**
   * Types of resource (if a resource is referenced).
   */
  target?: string[];
  _target?: Element;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   */
  type: string;
  _type?: Element;
}
/**
 * Code Values for the Conformance.rest.resource.searchParam.modifier field
 */
export enum ConformanceRestResourceSearchParamModifierCodes {
  MISSING = "missing",
  EXACT = "exact",
  CONTAINS = "contains",
  NOT = "not",
  TEXT = "text",
  IN = "in",
  NOT_IN = "not-in",
  BELOW = "below",
  ABOVE = "above",
  TYPE = "type",
}
/**
 * Code Values for the Conformance.rest.resource.searchParam.type field
 */
export enum ConformanceRestResourceSearchParamTypeCodes {
  NUMBER = "number",
  DATE = "date",
  STRING = "string",
  TOKEN = "token",
  REFERENCE = "reference",
  COMPOSITE = "composite",
  QUANTITY = "quantity",
  URI = "uri",
}
/**
 * A specification of the restful capabilities of the solution for a specific resource type.
 */
export interface ConformanceRestResource extends BackboneElement {
  /**
   * A flag that indicates that the server supports conditional create.
   */
  conditionalCreate?: boolean;
  _conditionalCreate?: Element;
  /**
   * A code that indicates how the server supports conditional delete.
   */
  conditionalDelete?: string;
  _conditionalDelete?: Element;
  /**
   * A flag that indicates that the server supports conditional update.
   */
  conditionalUpdate?: boolean;
  _conditionalUpdate?: Element;
  /**
   * Identifies a restful operation supported by the solution.
   */
  interaction: ConformanceRestResourceInteraction[];
  /**
   * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  profile?: Reference;
  /**
   * A flag for whether the server is able to return past versions as part of the vRead operation.
   */
  readHistory?: boolean;
  _readHistory?: Element;
  /**
   * A list of _include values supported by the server.
   */
  searchInclude?: string[];
  _searchInclude?: Element;
  /**
   * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  searchParam?: ConformanceRestResourceSearchParam[];
  /**
   * A list of _revinclude (reverse include) values supported by the server.
   */
  searchRevInclude?: string[];
  _searchRevInclude?: Element;
  /**
   * A type of resource exposed via the restful interface.
   */
  type: string;
  _type?: Element;
  /**
   * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
   */
  updateCreate?: boolean;
  _updateCreate?: Element;
  /**
   * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
   */
  versioning?: string;
  _versioning?: Element;
}
/**
 * Code Values for the Conformance.rest.resource.conditionalDelete field
 */
export enum ConformanceRestResourceConditionalDeleteCodes {
  NOT_SUPPORTED = "not-supported",
  SINGLE = "single",
  MULTIPLE = "multiple",
}
/**
 * Code Values for the Conformance.rest.resource.versioning field
 */
export enum ConformanceRestResourceVersioningCodes {
  NO_VERSION = "no-version",
  VERSIONED = "versioned",
  VERSIONED_UPDATE = "versioned-update",
}
/**
 * A specification of restful operations supported by the system.
 */
export interface ConformanceRestInteraction extends BackboneElement {
  /**
   * A coded identifier of the operation, supported by the system.
   */
  code: string;
  _code?: Element;
  /**
   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
   */
  documentation?: string;
  _documentation?: Element;
}
/**
 * Code Values for the Conformance.rest.interaction.code field
 */
export enum ConformanceRestInteractionCodeCodes {
  TRANSACTION = "transaction",
  SEARCH_SYSTEM = "search-system",
  HISTORY_SYSTEM = "history-system",
}
/**
 * Definition of an operation or a named query and with its parameters and their meaning and type.
 */
export interface ConformanceRestOperation extends BackboneElement {
  /**
   * Where the formal definition can be found.
   */
  definition: Reference;
  /**
   * The name of a query, which is used in the _query parameter when the query is called.
   */
  name: string;
  _name?: Element;
}
/**
 * A definition of the restful capabilities of the solution, if any.
 */
export interface ConformanceRest extends BackboneElement {
  /**
   * An absolute URI which is a reference to the definition of a compartment hosted by the system.
   */
  compartment?: string[];
  _compartment?: Element;
  /**
   * Information about the system's restful capabilities that apply across all applications, such as security.
   */
  documentation?: string;
  _documentation?: Element;
  /**
   * A specification of restful operations supported by the system.
   */
  interaction?: ConformanceRestInteraction[];
  /**
   * Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.
   */
  mode: string;
  _mode?: Element;
  /**
   * Definition of an operation or a named query and with its parameters and their meaning and type.
   */
  operation?: ConformanceRestOperation[];
  /**
   * A specification of the restful capabilities of the solution for a specific resource type.
   */
  resource: ConformanceRestResource[];
  /**
   * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  SearchParam?: ConformanceRestResourceSearchParam[];
  /**
   * Information about security implementation from an interface perspective - what a client needs to know.
   */
  security?: ConformanceRestSecurity;
  /**
   * A code that indicates how transactions are supported.
   */
  transactionMode?: string;
  _transactionMode?: Element;
}
/**
 * Code Values for the Conformance.rest.mode field
 */
export enum ConformanceRestModeCodes {
  CLIENT = "client",
  SERVER = "server",
}
/**
 * Code Values for the Conformance.rest.transactionMode field
 */
export enum ConformanceRestTransactionModeCodes {
  NOT_SUPPORTED = "not-supported",
  BATCH = "batch",
  TRANSACTION = "transaction",
  BOTH = "both",
}
/**
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export interface ConformanceMessagingEndpoint extends BackboneElement {
  /**
   * The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
   */
  address: string;
  _address?: Element;
  /**
   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
   */
  protocol: Coding;
}
/**
 * A description of the solution's support for an event at this end-point.
 */
export interface ConformanceMessagingEvent extends BackboneElement {
  /**
   * The impact of the content of the message.
   */
  category?: string;
  _category?: Element;
  /**
   * A coded identifier of a supported messaging event.
   */
  code: Coding;
  /**
   * Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
   */
  documentation?: string;
  _documentation?: Element;
  /**
   * A resource associated with the event.  This is the resource that defines the event.
   */
  focus: string;
  _focus?: Element;
  /**
   * The mode of this event declaration - whether application is sender or receiver.
   */
  mode: string;
  _mode?: Element;
  /**
   * Information about the request for this event.
   */
  request: Reference;
  /**
   * Information about the response for this event.
   */
  response: Reference;
}
/**
 * Code Values for the Conformance.messaging.event.category field
 */
export enum ConformanceMessagingEventCategoryCodes {
  CONSEQUENCE = "Consequence",
  CURRENCY = "Currency",
  NOTIFICATION = "Notification",
}
/**
 * Code Values for the Conformance.messaging.event.mode field
 */
export enum ConformanceMessagingEventModeCodes {
  SENDER = "sender",
  RECEIVER = "receiver",
}
/**
 * A description of the messaging capabilities of the solution.
 */
export interface ConformanceMessaging extends BackboneElement {
  /**
   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.
   */
  documentation?: string;
  _documentation?: Element;
  /**
   * An endpoint (network accessible address) to which messages and/or replies are to be sent.
   */
  endpoint?: ConformanceMessagingEndpoint[];
  /**
   * A description of the solution's support for an event at this end-point.
   */
  event: ConformanceMessagingEvent[];
  /**
   * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
   */
  reliableCache?: number;
}
/**
 * A document definition.
 */
export interface ConformanceDocument extends BackboneElement {
  /**
   * A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.
   */
  documentation?: string;
  _documentation?: Element;
  /**
   * Mode of this document declaration - whether application is producer or consumer.
   */
  mode: string;
  _mode?: Element;
  /**
   * A constraint on a resource used in the document.
   */
  profile: Reference;
}
/**
 * Code Values for the Conformance.document.mode field
 */
export enum ConformanceDocumentModeCodes {
  PRODUCER = "producer",
  CONSUMER = "consumer",
}
/**
 * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export interface Conformance extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Conformance'
  /**
   * A code that indicates whether the application accepts unknown elements or extensions when reading resources.
   */
  acceptUnknown: string;
  _acceptUnknown?: Element;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ConformanceContact[];
  /**
   * A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.
   */
  copyright?: string;
  _copyright?: Element;
  /**
   * The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.
   */
  date: string;
  _date?: Element;
  /**
   * A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
   */
  description?: string;
  _description?: Element;
  /**
   * A document definition.
   */
  document?: ConformanceDocument[];
  /**
   * A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * The version of the FHIR specification on which this conformance statement is based.
   */
  fhirVersion: string;
  _fhirVersion?: Element;
  /**
   * A list of the formats supported by this implementation using their content types.
   */
  format: string[];
  _format?: Element;
  /**
   * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
   */
  implementation?: ConformanceImplementation;
  /**
   * Allow searching the 3 modes.
   */
  kind: string;
  _kind?: Element;
  /**
   * A description of the messaging capabilities of the solution.
   */
  messaging?: ConformanceMessaging[];
  /**
   * A free text natural language name identifying the conformance statement.
   */
  name?: string;
  _name?: Element;
  /**
   * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  profile?: Reference[];
  /**
   * Helps establish the "authority/credibility" of the conformance.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Explains why this conformance statement is needed and why it's been constrained as it has.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * A definition of the restful capabilities of the solution, if any.
   */
  rest?: ConformanceRest[];
  /**
   * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
   */
  software?: ConformanceSoftware;
  /**
   * The status of this conformance statement.
   */
  status?: string;
  _status?: Element;
  /**
   * An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.
   */
  url?: string;
  _url?: Element;
  /**
   * The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the Conformance.acceptUnknown field
 */
export enum ConformanceAcceptUnknownCodes {
  NO = "no",
  EXTENSIONS = "extensions",
  ELEMENTS = "elements",
  BOTH = "both",
}
/**
 * Code Values for the Conformance.format field
 */
export enum ConformanceFormatCodes {
  FORMATS = "formats",
  JSON = "json",
  MIME = "mime",
}
/**
 * Code Values for the Conformance.kind field
 */
export enum ConformanceKindCodes {
  INSTANCE = "instance",
  CAPABILITY = "capability",
  REQUIREMENTS = "requirements",
}
/**
 * Code Values for the Conformance.status field
 */
export enum ConformanceStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * List of Contract actors.
 */
export interface ContractActor extends BackboneElement {
  /**
   * Who or what actors are assigned roles in this Contract.
   */
  entity: Reference;
  /**
   * Role type of actors assigned roles in this Contract.
   */
  role?: CodeableConcept[];
}
/**
 * Contract Valued Item List.
 */
export interface ContractValuedItem extends BackboneElement {
  /**
   * Indicates the time during which this Contract ValuedItem information is effective.
   */
  effectiveTime?: string;
  _effectiveTime?: Element;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityCodeableConcept?: CodeableConcept;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityReference?: Reference;
  /**
   * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number;
  /**
   * Identifies a Contract Valued Item instance.
   */
  identifier?: Identifier;
  /**
   * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Quantity;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
   */
  points?: number;
  /**
   * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
   */
  quantity?: Quantity;
  /**
   * A Contract Valued Item unit valuation measure.
   */
  unitPrice?: Quantity;
}
/**
 * Party signing this Contract.
 */
export interface ContractSigner extends BackboneElement {
  /**
   * Party which is a signator to this Contract.
   */
  party: Reference;
  /**
   * Legally binding Contract DSIG signature contents in Base64.
   */
  signature: string;
  _signature?: Element;
  /**
   * Role of this Contract signer, e.g. notary, grantee.
   */
  type: Coding;
}
/**
 * List of actors participating in this Contract Provision.
 */
export interface ContractTermActor extends BackboneElement {
  /**
   * The actor assigned a role in this Contract Provision.
   */
  entity: Reference;
  /**
   * Role played by the actor assigned this role in this Contract Provision.
   */
  role?: CodeableConcept[];
}
/**
 * Contract Provision Valued Item List.
 */
export interface ContractTermValuedItem extends BackboneElement {
  /**
   * Indicates the time during which this Contract Term ValuedItem information is effective.
   */
  effectiveTime?: string;
  _effectiveTime?: Element;
  /**
   * Specific type of Contract Provision Valued Item that may be priced.
   */
  entityCodeableConcept?: CodeableConcept;
  /**
   * Specific type of Contract Provision Valued Item that may be priced.
   */
  entityReference?: Reference;
  /**
   * A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number;
  /**
   * Identifies a Contract Provision Valued Item instance.
   */
  identifier?: Identifier;
  /**
   * Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Quantity;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.
   */
  points?: number;
  /**
   * Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.
   */
  quantity?: Quantity;
  /**
   * A Contract Provision Valued Item unit valuation measure.
   */
  unitPrice?: Quantity;
}
/**
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
export interface ContractTerm extends BackboneElement {
  /**
   * Action stipulated by this Contract Provision.
   */
  action?: CodeableConcept[];
  /**
   * Reason or purpose for the action stipulated by this Contract Provision.
   */
  actionReason?: CodeableConcept[];
  /**
   * List of actors participating in this Contract Provision.
   */
  actor?: ContractTermActor[];
  /**
   * Relevant time or time-period when this Contract Provision is applicable.
   */
  applies?: Period;
  /**
   * Nested group of Contract Provisions.
   */
  Group?: ContractTerm[];
  /**
   * Unique identifier for this particular Contract Provision.
   */
  identifier?: Identifier;
  /**
   * When this Contract Provision was issued.
   */
  issued?: string;
  _issued?: Element;
  /**
   * Who or what this Contract Provision is about.
   */
  subject?: Reference;
  /**
   * Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.
   */
  subType?: CodeableConcept;
  /**
   * Human readable form of this Contract Provision.
   */
  text?: string;
  _text?: Element;
  /**
   * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
   */
  type?: CodeableConcept;
  /**
   * Contract Provision Valued Item List.
   */
  valuedItem?: ContractTermValuedItem[];
}
/**
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
export interface ContractFriendly extends BackboneElement {
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentAttachment: Attachment;
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentReference: Reference;
}
/**
 * List of Legal expressions or representations of this Contract.
 */
export interface ContractLegal extends BackboneElement {
  /**
   * Contract legal text in human renderable form.
   */
  contentAttachment: Attachment;
  /**
   * Contract legal text in human renderable form.
   */
  contentReference: Reference;
}
/**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
export interface ContractRule extends BackboneElement {
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentAttachment: Attachment;
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentReference: Reference;
}
/**
 * A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
 */
export interface Contract extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Contract'
  /**
   * Action stipulated by this Contract.
   */
  action?: CodeableConcept[];
  /**
   * Reason for action stipulated by this Contract.
   */
  actionReason?: CodeableConcept[];
  /**
   * List of Contract actors.
   */
  actor?: ContractActor[];
  /**
   * Relevant time or time-period when this Contract is applicable.
   */
  applies?: Period;
  /**
   * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
   */
  authority?: Reference[];
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  bindingAttachment?: Attachment;
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  bindingReference?: Reference;
  /**
   * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
   */
  domain?: Reference[];
  /**
   * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
   */
  friendly?: ContractFriendly[];
  /**
   * Unique identifier for this Contract.
   */
  identifier?: Identifier;
  /**
   * When this  Contract was issued.
   */
  issued?: string;
  _issued?: Element;
  /**
   * List of Legal expressions or representations of this Contract.
   */
  legal?: ContractLegal[];
  /**
   * List of Computable Policy Rule Language Representations of this Contract.
   */
  rule?: ContractRule[];
  /**
   * Party signing this Contract.
   */
  signer?: ContractSigner[];
  /**
   * Who and/or what this Contract is about: typically a Patient, Organization, or valued items such as goods and services.
   */
  subject?: Reference[];
  /**
   * More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
   */
  subType?: CodeableConcept[];
  /**
   * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
   */
  term?: ContractTerm[];
  /**
   * Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
   */
  type?: CodeableConcept;
  /**
   * Contract Valued Item List.
   */
  valuedItem?: ContractValuedItem[];
}
/**
 * Financial instrument which may be used to pay for or reimburse health care products and services.
 */
export interface Coverage extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Coverage'
  /**
   * Business Identification Number (BIN number) used to identify the routing  of eclaims if the insurer themselves don't have a BIN number for all of their business.
   */
  bin?: Identifier;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  contract?: Reference[];
  /**
   * For some coverage a single identifier is issued to the PolicyHolder and dependent number issues to each to each of their dependents to track and manage the plan.
   */
  dependent?: number;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  group?: string;
  _group?: Element;
  /**
   * This value may uniquely identify the coverage or it may be used in conjunction with the additional identifiers below.
   */
  identifier?: Identifier[];
  /**
   * Need to identify the issuer to target for processing and for coordination of benefit processing.
   */
  issuer?: Reference;
  /**
   * The identifier for a community of providers.
   */
  network?: Identifier;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  period?: Period;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  plan?: string;
  _plan?: Element;
  /**
   * Some coverage, for example social plans, may be offered in short time increments, for example for a week or a month at a time, so while the rest of the plan details and identifiers may remain constant over time, the instance is incremented with each renewal and provided to the covered party on their 'card'.
   */
  sequence?: number;
  /**
   * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a specific employer group within a class of employers. May be referred to as a Section or Division ID.
   */
  subPlan?: string;
  _subPlan?: Element;
  /**
   * The party who 'owns' the insurance contractual relationship to the policy or to whom the benefit of the policy is due.
   */
  subscriber?: Reference;
  /**
   * The id issued to the subscriber.
   */
  subscriberId?: Identifier;
  /**
   * The order of application of coverages is dependent on the types of coverage.
   */
  type?: Coding;
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface DataElementContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the data element.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
 */
export interface DataElementMapping extends BackboneElement {
  /**
   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
   */
  comments?: string;
  _comments?: Element;
  /**
   * An internal id that is used to identify this mapping set when specific mappings are made on a per-element basis.
   */
  identity: string;
  _identity?: Element;
  /**
   * A name for the specification that is being mapped to.
   */
  name?: string;
  _name?: Element;
  /**
   * An absolute URI that identifies the specification that this mapping is expressed to.
   */
  uri?: string;
  _uri?: Element;
}
/**
 * The formal description of a single piece of information that can be gathered and reported.
 */
export interface DataElement extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DataElement'
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: DataElementContact[];
  /**
   * A copyright statement relating to the definition of the data element. Copyright statements are generally legal restrictions on the use and publishing of the details of the definition of the data element.
   */
  copyright?: string;
  _copyright?: Element;
  /**
   * The date this version of the data element was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the data element  changes.
   */
  date?: string;
  _date?: Element;
  /**
   * 1.
   */
  element: ElementDefinition[];
  /**
   * A flag to indicate that this search data element definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * Formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[];
  /**
   * Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
   */
  mapping?: DataElementMapping[];
  /**
   * The term used by humans to refer to the data element.  Should ideally be unique within the context in which the data element is expected to be used.
   */
  name?: string;
  _name?: Element;
  /**
   * Helps establish the "authority/credibility" of the data element.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Allows filtering of data elements that are appropriate for use.
   */
  status: string;
  _status?: Element;
  /**
   * Allows determining the degree of comparability of data element instances. Less granular data elements result in data that is less comparable (or at least requires more work to compare).
   */
  stringency?: string;
  _stringency?: Element;
  /**
   * An absolute URL that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published.
   */
  url?: string;
  _url?: Element;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of data element definitions.
   */
  useContext?: CodeableConcept[];
  /**
   * There may be multiple resource versions of the data element that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the DataElement.status field
 */
export enum DataElementStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Code Values for the DataElement.stringency field
 */
export enum DataElementStringencyCodes {
  COMPARABLE = "comparable",
  FULLY_SPECIFIED = "fully-specified",
  EQUIVALENT = "equivalent",
  CONVERTABLE = "convertable",
  SCALEABLE = "scaleable",
  FLEXIBLE = "flexible",
}
/**
 * Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export interface DetectedIssueMitigation extends BackboneElement {
  /**
   * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
   */
  action: CodeableConcept;
  /**
   * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
   */
  author?: Reference;
  /**
   * Indicates when the mitigating action was documented.
   */
  date?: string;
  _date?: Element;
}
/**
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
 */
export interface DetectedIssue extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DetectedIssue'
  /**
   * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
   */
  author?: Reference;
  /**
   * Identifies the general type of issue identified.
   */
  category?: CodeableConcept;
  /**
   * No-one can be responsible for mitigation prior to the issue being identified.
   */
  date?: string;
  _date?: Element;
  /**
   * A textual explanation of the detected issue.
   */
  detail?: string;
  _detail?: Element;
  /**
   * Allows linking instances of the same detected issue found on different servers.
   */
  identifier?: Identifier;
  /**
   * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
   */
  implicated?: Reference[];
  /**
   * Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
   */
  mitigation?: DetectedIssueMitigation[];
  /**
   * While the subject could be inferred by tracing the subject of the implicated resources, it's useful to have a direct link for query purposes.
   */
  patient?: Reference;
  /**
   * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
   */
  reference?: string;
  _reference?: Element;
  /**
   * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
   */
  severity?: string;
  _severity?: Element;
}
/**
 * Code Values for the DetectedIssue.severity field
 */
export enum DetectedIssueSeverityCodes {
  HIGH = "high",
  MODERATE = "moderate",
  LOW = "low",
}
/**
 * This resource identifies an instance of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
 */
export interface Device extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Device'
  /**
   * Contact details for an organization or a particular human that is responsible for the device.
   */
  contact?: ContactPoint[];
  /**
   * The date and time beyond which this device is no longer valid or should not be used (if applicable).
   */
  expiry?: string;
  _expiry?: Element;
  /**
   * Unique instance identifiers assigned to a device by organizations like manufacturers or owners. If the identifier identifies the type of device, Device.type should be used.
   */
  identifier?: Identifier[];
  /**
   * The place where the device can be found.
   */
  location?: Reference;
  /**
   * Lot number assigned by the manufacturer.
   */
  lotNumber?: string;
  _lotNumber?: Element;
  /**
   * The date and time when the device was manufactured.
   */
  manufactureDate?: string;
  _manufactureDate?: Element;
  /**
   * A name of the manufacturer.
   */
  manufacturer?: string;
  _manufacturer?: Element;
  /**
   * The "model" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.
   */
  model?: string;
  _model?: Element;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: Annotation[];
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: Reference;
  /**
   * Patient information, if the resource is affixed to a person.
   */
  patient?: Reference;
  /**
   * Status of the Device availability.
   */
  status?: string;
  _status?: Element;
  /**
   * Code or identifier to identify a kind of device.
   */
  type: CodeableConcept;
  /**
   * United States Food and Drug Administration mandated Unique Device Identifier (UDI). Use the human readable information (the content that the user sees, which is sometimes different to the exact syntax represented in the barcode)  - see http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/UniqueDeviceIdentification/default.htm.
   */
  udi?: string;
  _udi?: Element;
  /**
   * A network address on which the device may be contacted directly.
   */
  url?: string;
  _url?: Element;
  /**
   * The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the Device.status field
 */
export enum DeviceStatusCodes {
  AVAILABLE = "available",
  NOT_AVAILABLE = "not-available",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Describes the production specification such as component revision, serial number, etc.
 */
export interface DeviceComponentProductionSpecification extends BackboneElement {
  /**
   * Describes the internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacture can make use of.
   */
  componentId?: Identifier;
  /**
   * Describes the printable string defining the component.
   */
  productionSpec?: string;
  _productionSpec?: Element;
  /**
   * Describes the specification type, such as, serial number, part number, hardware revision, software revision, etc.
   */
  specType?: CodeableConcept;
}
/**
 * Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export interface DeviceComponent extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DeviceComponent'
  /**
   * Describes the local assigned unique identification by the software. For example: handle ID.
   */
  identifier: Identifier;
  /**
   * Describes the language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.
   */
  languageCode?: CodeableConcept;
  /**
   * Describes the timestamp for the most recent system change which includes device configuration or setting change.
   */
  lastSystemChange: string;
  _lastSystemChange?: Element;
  /**
   * Describes the physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
   */
  measurementPrinciple?: string;
  _measurementPrinciple?: Element;
  /**
   * Indicates current operational status of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: CodeableConcept[];
  /**
   * Describes the parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
   */
  parameterGroup?: CodeableConcept;
  /**
   * Describes the link to the parent resource. For example: Channel is linked to its VMD parent.
   */
  parent?: Reference;
  /**
   * Describes the production specification such as component revision, serial number, etc.
   */
  productionSpecification?: DeviceComponentProductionSpecification[];
  /**
   * Describes the link to the source Device that contains administrative device information such as manufacture, serial number, etc.
   */
  source?: Reference;
  /**
   * Describes the specific component type as defined in the object-oriented or metric nomenclature partition.
   */
  type: CodeableConcept;
}
/**
 * Code Values for the DeviceComponent.measurementPrinciple field
 */
export enum DeviceComponentMeasurementPrincipleCodes {
  OTHER = "other",
  CHEMICAL = "chemical",
  ELECTRICAL = "electrical",
  IMPEDANCE = "impedance",
  NUCLEAR = "nuclear",
  OPTICAL = "optical",
  THERMAL = "thermal",
  BIOLOGICAL = "biological",
  MECHANICAL = "mechanical",
  ACOUSTICAL = "acoustical",
  MANUAL_PLUS = "manual+",
}
/**
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export interface DeviceMetricCalibration extends BackboneElement {
  /**
   * Describes the state of the calibration.
   */
  state?: string;
  _state?: Element;
  /**
   * Describes the time last calibration has been performed.
   */
  time?: string;
  _time?: Element;
  /**
   * Describes the type of the calibration method.
   */
  type?: string;
  _type?: Element;
}
/**
 * Code Values for the DeviceMetric.calibration.state field
 */
export enum DeviceMetricCalibrationStateCodes {
  NOT_CALIBRATED = "not-calibrated",
  CALIBRATION_REQUIRED = "calibration-required",
  CALIBRATED = "calibrated",
  UNSPECIFIED = "unspecified",
}
/**
 * Code Values for the DeviceMetric.calibration.type field
 */
export enum DeviceMetricCalibrationTypeCodes {
  UNSPECIFIED = "unspecified",
  OFFSET = "offset",
  GAIN = "gain",
  TWO_POINT = "two-point",
}
/**
 * Describes a measurement, calculation or setting capability of a medical device.
 */
export interface DeviceMetric extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DeviceMetric'
  /**
   * Describes the calibrations that have been performed or that are required to be performed.
   */
  calibration?: DeviceMetricCalibration[];
  /**
   * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
   */
  category: string;
  _category?: Element;
  /**
   * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
   */
  color?: string;
  _color?: Element;
  /**
   * Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device.
   */
  identifier: Identifier;
  /**
   * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
   */
  measurementPeriod?: Timing;
  /**
   * Indicates current operational state of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: string;
  _operationalStatus?: Element;
  /**
   * Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
   */
  parent?: Reference;
  /**
   * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacture, serial number, etc.
   */
  source?: Reference;
  /**
   * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
   */
  type: CodeableConcept;
  /**
   * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
   */
  unit?: CodeableConcept;
}
/**
 * Code Values for the DeviceMetric.category field
 */
export enum DeviceMetricCategoryCodes {
  MEASUREMENT = "measurement",
  SETTING = "setting",
  CALCULATION = "calculation",
  UNSPECIFIED = "unspecified",
}
/**
 * Code Values for the DeviceMetric.color field
 */
export enum DeviceMetricColorCodes {
  BLACK = "black",
  RED = "red",
  GREEN = "green",
  YELLOW = "yellow",
  BLUE = "blue",
  MAGENTA = "magenta",
  CYAN = "cyan",
  WHITE = "white",
}
/**
 * Code Values for the DeviceMetric.operationalStatus field
 */
export enum DeviceMetricOperationalStatusCodes {
  ON = "on",
  OFF = "off",
  STANDBY = "standby",
}
/**
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
export interface DeviceUseRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DeviceUseRequest'
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  bodySiteCodeableConcept?: CodeableConcept;
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  bodySiteReference?: Reference;
  /**
   * The details of the device  to be used.
   */
  device: Reference;
  /**
   * An encounter that provides additional context in which this request is made.
   */
  encounter?: Reference;
  /**
   * Identifiers assigned to this order by the orderer or by the receiver.
   */
  identifier?: Identifier[];
  /**
   * Reason or justification for the use of this device.
   */
  indication?: CodeableConcept[];
  /**
   * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  notes?: string[];
  _notes?: Element;
  /**
   * The time when the request was made.
   */
  orderedOn?: string;
  _orderedOn?: Element;
  /**
   * Characterizes how quickly the  use of device must be initiated. Includes concepts such as stat, urgent, routine.
   */
  priority?: string;
  _priority?: Element;
  /**
   * The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.
   */
  prnReason?: CodeableConcept[];
  /**
   * The time at which the request was made/recorded.
   */
  recordedOn?: string;
  _recordedOn?: Element;
  /**
   * The status of the request.
   */
  status?: string;
  _status?: Element;
  /**
   * The patient who will use the device.
   */
  subject: Reference;
  /**
   * The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timingTiming?: Timing;
  /**
   * The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timingPeriod?: Period;
  /**
   * The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timingDateTime?: string;
  _timingDateTime?: Element;
}
/**
 * Code Values for the DeviceUseRequest.priority field
 */
export enum DeviceUseRequestPriorityCodes {
  ROUTINE = "routine",
  URGENT = "urgent",
  STAT = "stat",
  ASAP = "asap",
}
/**
 * Code Values for the DeviceUseRequest.status field
 */
export enum DeviceUseRequestStatusCodes {
  PROPOSED = "proposed",
  PLANNED = "planned",
  REQUESTED = "requested",
  RECEIVED = "received",
  ACCEPTED = "accepted",
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  SUSPENDED = "suspended",
  REJECTED = "rejected",
  ABORTED = "aborted",
}
/**
 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
 */
export interface DeviceUseStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DeviceUseStatement'
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  bodySiteCodeableConcept?: CodeableConcept;
  /**
   * Knowing where the device is targeted is important for tracking if multiple sites are possible.
   */
  bodySiteReference?: Reference;
  /**
   * The details of the device used.
   */
  device: Reference;
  /**
   * An external identifier for this statement such as an IRI.
   */
  identifier?: Identifier[];
  /**
   * Reason or justification for the use of the device.
   */
  indication?: CodeableConcept[];
  /**
   * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  notes?: string[];
  _notes?: Element;
  /**
   * The time at which the statement was made/recorded.
   */
  recordedOn?: string;
  _recordedOn?: Element;
  /**
   * The patient who used the device.
   */
  subject: Reference;
  /**
   * How often the device was used.
   */
  timingTiming?: Timing;
  /**
   * How often the device was used.
   */
  timingPeriod?: Period;
  /**
   * How often the device was used.
   */
  timingDateTime?: string;
  _timingDateTime?: Element;
  /**
   * The time period over which the device was used.
   */
  whenUsed?: Period;
}
/**
 * A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.
 */
export interface DiagnosticOrderEvent extends BackboneElement {
  /**
   * The person responsible for performing or recording the action.
   */
  actor?: Reference;
  /**
   * The date/time at which the event occurred.
   */
  dateTime: string;
  _dateTime?: Element;
  /**
   * Additional information about the event that occurred - e.g. if the status remained unchanged.
   */
  description?: CodeableConcept;
  /**
   * The status for the event.
   */
  status: string;
  _status?: Element;
}
/**
 * Code Values for the DiagnosticOrder.event.status field
 */
export enum DiagnosticOrderEventStatusCodes {
  PROPOSED = "proposed",
  DRAFT = "draft",
  PLANNED = "planned",
  REQUESTED = "requested",
  RECEIVED = "received",
  ACCEPTED = "accepted",
  IN_PROGRESS = "in-progress",
  REVIEW = "review",
  COMPLETED = "completed",
  CANCELLED = "cancelled",
  SUSPENDED = "suspended",
  REJECTED = "rejected",
  FAILED = "failed",
}
/**
 * The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
 */
export interface DiagnosticOrderItem extends BackboneElement {
  /**
   * Anatomical location where the request test should be performed.  This is the target site.
   */
  bodySite?: CodeableConcept;
  /**
   * A code that identifies a particular diagnostic investigation, or panel of investigations, that have been requested.
   */
  code: CodeableConcept;
  /**
   * A summary of the events of interest that have occurred as this item of the request is processed.
   */
  Event?: DiagnosticOrderEvent[];
  /**
   * If the item is related to a specific specimen.
   */
  specimen?: Reference[];
  /**
   * The status of this individual item within the order.
   */
  status?: string;
  _status?: Element;
}
/**
 * Code Values for the DiagnosticOrder.item.status field
 */
export enum DiagnosticOrderItemStatusCodes {
  PROPOSED = "proposed",
  DRAFT = "draft",
  PLANNED = "planned",
  REQUESTED = "requested",
  RECEIVED = "received",
  ACCEPTED = "accepted",
  IN_PROGRESS = "in-progress",
  REVIEW = "review",
  COMPLETED = "completed",
  CANCELLED = "cancelled",
  SUSPENDED = "suspended",
  REJECTED = "rejected",
  FAILED = "failed",
}
/**
 * A record of a request for a diagnostic investigation service to be performed.
 */
export interface DiagnosticOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DiagnosticOrder'
  /**
   * An encounter that provides additional information about the healthcare context in which this request is made.
   */
  encounter?: Reference;
  /**
   * A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.
   */
  event?: DiagnosticOrderEvent[];
  /**
   * Identifiers assigned to this order instance by the orderer and/or  the receiver and/or order fulfiller.
   */
  identifier?: Identifier[];
  /**
   * The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
   */
  item?: DiagnosticOrderItem[];
  /**
   * Any other notes associated with this patient, specimen or order (e.g. "patient hates needles").
   */
  note?: Annotation[];
  /**
   * The practitioner that holds legal responsibility for ordering the investigation.
   */
  orderer?: Reference;
  /**
   * The clinical priority associated with this order.
   */
  priority?: string;
  _priority?: Element;
  /**
   * An explanation or justification for why this diagnostic investigation is being requested.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation.
   */
  reason?: CodeableConcept[];
  /**
   * One or more specimens that the diagnostic investigation is about.
   */
  specimen?: Reference[];
  /**
   * The status of the order.
   */
  status?: string;
  _status?: Element;
  /**
   * Who or what the investigation is to be performed on. This is usually a human patient, but diagnostic tests can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
   */
  subject: Reference;
  /**
   * Additional clinical information about the patient or specimen that may influence test interpretations.  This includes observations explicitly requested by the producer(filler) to provide context or supporting information needed to complete the order.
   */
  supportingInformation?: Reference[];
}
/**
 * Code Values for the DiagnosticOrder.priority field
 */
export enum DiagnosticOrderPriorityCodes {
  ROUTINE = "routine",
  URGENT = "urgent",
  STAT = "stat",
  ASAP = "asap",
}
/**
 * Code Values for the DiagnosticOrder.status field
 */
export enum DiagnosticOrderStatusCodes {
  PROPOSED = "proposed",
  DRAFT = "draft",
  PLANNED = "planned",
  REQUESTED = "requested",
  RECEIVED = "received",
  ACCEPTED = "accepted",
  IN_PROGRESS = "in-progress",
  REVIEW = "review",
  COMPLETED = "completed",
  CANCELLED = "cancelled",
  SUSPENDED = "suspended",
  REJECTED = "rejected",
  FAILED = "failed",
}
/**
 * Many diagnostic services include images in the report as part of their service.
 */
export interface DiagnosticReportImage extends BackboneElement {
  /**
   * The provider of the report should make a comment about each image included in the report.
   */
  comment?: string;
  _comment?: Element;
  /**
   * Reference to the image source.
   */
  link: Reference;
}
/**
 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
 */
export interface DiagnosticReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DiagnosticReport'
  /**
   * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
   */
  category?: CodeableConcept;
  /**
   * A code or name that describes this diagnostic report.
   */
  code: CodeableConcept;
  /**
   * Codes for the conclusion.
   */
  codedDiagnosis?: CodeableConcept[];
  /**
   * Need to be able to provide a conclusion that is not lost among the basic result data.
   */
  conclusion?: string;
  _conclusion?: Element;
  /**
   * Need to know where in the patient history to file/present this report.
   */
  effectiveDateTime: string;
  _effectiveDateTime?: Element;
  /**
   * Need to know where in the patient history to file/present this report.
   */
  effectivePeriod: Period;
  /**
   * The link to the health care event (encounter) when the order was made.
   */
  encounter?: Reference;
  /**
   * Need to know what identifier to use when making queries about this report from the source laboratory, and for linking to the report outside FHIR context.
   */
  identifier?: Identifier[];
  /**
   * Many diagnostic services include images in the report as part of their service.
   */
  image?: DiagnosticReportImage[];
  /**
   * One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
   */
  imagingStudy?: Reference[];
  /**
   * Clinicians need to be able to check the date that the report was released.
   */
  issued: string;
  _issued?: Element;
  /**
   * Need to know whom to contact if there are queries about the results. Also may need to track the source of reports for secondary data analysis.
   */
  performer: Reference;
  /**
   * Gives Laboratory the ability to provide its own fully formatted report for clinical fidelity.
   */
  presentedForm?: Attachment[];
  /**
   * Need to be able to track completion of requests based on reports issued and also to report what diagnostic tests were requested (not always the same as what is delivered).
   */
  request?: Reference[];
  /**
   * Need to support individual results, or report groups of results, where the result grouping is arbitrary, but meaningful. This structure is recursive - observations can contain observations.
   */
  result?: Reference[];
  /**
   * Need to be able to report information about the collected specimens on which the report is based.
   */
  specimen?: Reference[];
  /**
   * Diagnostic services routinely issue provisional/incomplete reports, and sometimes withdraw previously released reports.
   */
  status: string;
  _status?: Element;
  /**
   * SHALL know the subject context.
   */
  subject: Reference;
}
/**
 * Code Values for the DiagnosticReport.status field
 */
export enum DiagnosticReportStatusCodes {
  REGISTERED = "registered",
  PARTIAL = "partial",
  FINAL = "final",
  CORRECTED = "corrected",
  APPENDED = "appended",
  CANCELLED = "cancelled",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * The list of Documents included in the manifest.
 */
export interface DocumentManifestContent extends BackboneElement {
  /**
   * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
   */
  pAttachment: Attachment;
  /**
   * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
   */
  pReference: Reference;
}
/**
 * Related identifiers or resources associated with the DocumentManifest.
 */
export interface DocumentManifestRelated extends BackboneElement {
  /**
   * Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
   */
  identifier?: Identifier;
  /**
   * Related Resource to this DocumentManifest. For example, Order, DiagnosticOrder,  Procedure, EligibilityRequest, etc.
   */
  ref?: Reference;
}
/**
 * A manifest that defines a set of documents.
 */
export interface DocumentManifest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DocumentManifest'
  /**
   * Identifies who is responsible for creating the manifest, and adding  documents to it.
   */
  author?: Reference[];
  /**
   * The list of Documents included in the manifest.
   */
  content: DocumentManifestContent[];
  /**
   * When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
   */
  created?: string;
  _created?: Element;
  /**
   * Helps humans to assess whether the document is of interest.
   */
  description?: string;
  _description?: Element;
  /**
   * Other identifiers associated with the document manifest, including version independent  identifiers.
   */
  identifier?: Identifier[];
  /**
   * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
   */
  masterIdentifier?: Identifier;
  /**
   * A patient, practitioner, or organization for which this set of documents is intended.
   */
  recipient?: Reference[];
  /**
   * Related identifiers or resources associated with the DocumentManifest.
   */
  related?: DocumentManifestRelated[];
  /**
   * Identifies the source system, application, or software that produced the document manifest.
   */
  source?: string;
  _source?: Element;
  /**
   * The status of this document manifest.
   */
  status: string;
  _status?: Element;
  /**
   * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
   */
  subject?: Reference;
  /**
   * Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
   */
  type?: CodeableConcept;
}
/**
 * Code Values for the DocumentManifest.status field
 */
export enum DocumentManifestStatusCodes {
  CURRENT = "current",
  SUPERSEDED = "superseded",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Relationships that this document has with other document references that already exist.
 */
export interface DocumentReferenceRelatesTo extends BackboneElement {
  /**
   * The type of relationship that this document has with anther document.
   */
  code: string;
  _code?: Element;
  /**
   * The target document of this relationship.
   */
  target: Reference;
}
/**
 * Code Values for the DocumentReference.relatesTo.code field
 */
export enum DocumentReferenceRelatesToCodeCodes {
  REPLACES = "replaces",
  TRANSFORMS = "transforms",
  SIGNS = "signs",
  APPENDS = "appends",
}
/**
 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
 */
export interface DocumentReferenceContent extends BackboneElement {
  /**
   * The document or url of the document along with critical metadata to prove content has integrity.
   */
  attachment: Attachment;
  /**
   * An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
   */
  format?: Coding[];
}
/**
 * Related identifiers or resources associated with the DocumentReference.
 */
export interface DocumentReferenceContextRelated extends BackboneElement {
  /**
   * Related identifier to this DocumentReference. If both id and ref are present they shall refer to the same thing.
   */
  identifier?: Identifier;
  /**
   * Related Resource to this DocumentReference. If both id and ref are present they shall refer to the same thing.
   */
  ref?: Reference;
}
/**
 * The clinical context in which the document was prepared.
 */
export interface DocumentReferenceContext extends BackboneElement {
  /**
   * Describes the clinical encounter or type of care that the document content is associated with.
   */
  encounter?: Reference;
  /**
   * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
   */
  event?: CodeableConcept[];
  /**
   * The kind of facility where the patient was seen.
   */
  facilityType?: CodeableConcept;
  /**
   * The time period over which the service that is described by the document was provided.
   */
  period?: Period;
  /**
   * This is an important piece of metadata that providers often rely upon to quickly sort and/or filter out to find specific content.
   */
  practiceSetting?: CodeableConcept;
  /**
   * Related identifiers or resources associated with the DocumentReference.
   */
  related?: DocumentReferenceContextRelated[];
  /**
   * The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
   */
  sourcePatientInfo?: Reference;
}
/**
 * A reference to a document .
 */
export interface DocumentReference extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'DocumentReference'
  /**
   * Which person or organization authenticates that this document is valid.
   */
  authenticator?: Reference;
  /**
   * Identifies who is responsible for adding the information to the document.
   */
  author?: Reference[];
  /**
   * Helps humans to assess whether the document is of interest when viewing a list of documents.
   */
  class?: CodeableConcept;
  /**
   * The document and format referenced. There may be multiple content element repetitions, each with a different format.
   */
  content: DocumentReferenceContent[];
  /**
   * The clinical context in which the document was prepared.
   */
  context?: DocumentReferenceContext;
  /**
   * When the document was created.
   */
  created?: string;
  _created?: Element;
  /**
   * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
   */
  custodian?: Reference;
  /**
   * Helps humans to assess whether the document is of interest.
   */
  description?: string;
  _description?: Element;
  /**
   * The status of the underlying document.
   */
  docStatus?: CodeableConcept;
  /**
   * Other identifiers associated with the document, including version independent identifiers.
   */
  identifier?: Identifier[];
  /**
   * When the document reference was created.
   */
  indexed: string;
  _indexed?: Element;
  /**
   * The structure and format of this Id shall be consistent with the specification corresponding to the formatCode attribute. (e.g. for a DICOM standard document a 64 character numeric UID, for an HL7 CDA format a serialization of the CDA Document Id extension and root in the form "oid^extension", where OID is a 64 digits max, and the Id is a 16 UTF-8 char max. If the OID is coded without the extension then the '^' character shall not be included.).
   */
  masterIdentifier?: Identifier;
  /**
   * Relationships that this document has with other document references that already exist.
   */
  relatesTo?: DocumentReferenceRelatesTo[];
  /**
   * Use of the Health Care Privacy/Security Classification (HCS) system of security-tag use is recommended.
   */
  securityLabel?: CodeableConcept[];
  /**
   * The status of this document reference.
   */
  status: string;
  _status?: Element;
  /**
   * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
   */
  subject?: Reference;
  /**
   * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
   */
  type: CodeableConcept;
}
/**
 * Code Values for the DocumentReference.status field
 */
export enum DocumentReferenceStatusCodes {
  CURRENT = "current",
  SUPERSEDED = "superseded",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * A resource that includes narrative, extensions, and contained resources.
 */
export interface DomainResource extends Resource {
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: Resource[];
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[];
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[];
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative;
}
/**
 * This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.
 */
export interface EligibilityRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'EligibilityRequest'
  /**
   * The date when this resource was created.
   */
  created?: string;
  _created?: Element;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
  /**
   * The Insurer who is target  of the request.
   */
  target?: Reference;
}
/**
 * This resource provides eligibility and plan details from the processing of an Eligibility resource.
 */
export interface EligibilityResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'EligibilityResponse'
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: Element;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string;
  _disposition?: Element;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * Transaction status: error, complete.
   */
  outcome?: string;
  _outcome?: Element;
  /**
   * Original request resource reference.
   */
  request?: Reference;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
}
/**
 * Code Values for the EligibilityResponse.outcome field
 */
export enum EligibilityResponseOutcomeCodes {
  COMPLETE = "complete",
  ERROR = "error",
}
/**
 * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
 */
export interface EncounterStatusHistory extends BackboneElement {
  /**
   * The time that the episode was in the specified status.
   */
  period: Period;
  /**
   * planned | arrived | in-progress | onleave | finished | cancelled.
   */
  status: string;
  _status?: Element;
}
/**
 * Code Values for the Encounter.statusHistory.status field
 */
export enum EncounterStatusHistoryStatusCodes {
  PLANNED = "planned",
  ARRIVED = "arrived",
  IN_PROGRESS = "in-progress",
  ONLEAVE = "onleave",
  FINISHED = "finished",
  CANCELLED = "cancelled",
}
/**
 * The list of people responsible for providing the service.
 */
export interface EncounterParticipant extends BackboneElement {
  /**
   * Persons involved in the encounter other than the patient.
   */
  individual?: Reference;
  /**
   * The period of time that the specified participant was present during the encounter. These can overlap or be sub-sets of the overall encounters period.
   */
  period?: Period;
  /**
   * Role of participant in encounter.
   */
  type?: CodeableConcept[];
}
/**
 * Details about the admission to a healthcare service.
 */
export interface EncounterHospitalization extends BackboneElement {
  /**
   * From where patient was admitted (physician referral, transfer).
   */
  admitSource?: CodeableConcept;
  /**
   * The admitting diagnosis field is used to record the diagnosis codes as reported by admitting practitioner. This could be different or in addition to the conditions reported as reason-condition(s) for the encounter.
   */
  admittingDiagnosis?: Reference[];
  /**
   * Location to which the patient is discharged.
   */
  destination?: Reference;
  /**
   * Used to track patient's diet restrictions and/or preference. For a complete description of the nutrition needs of a patient during their stay, one should use the nutritionOrder resource which links to Encounter.
   */
  dietPreference?: CodeableConcept[];
  /**
   * The final diagnosis given a patient before release from the hospital after all testing, surgery, and workup are complete.
   */
  dischargeDiagnosis?: Reference[];
  /**
   * Category or kind of location after discharge.
   */
  dischargeDisposition?: CodeableConcept;
  /**
   * The location from which the patient came before admission.
   */
  origin?: Reference;
  /**
   * Pre-admission identifier.
   */
  preAdmissionIdentifier?: Identifier;
  /**
   * Whether this hospitalization is a readmission and why if known.
   */
  reAdmission?: CodeableConcept;
  /**
   * Wheelchair, translator, stretcher, etc.
   */
  specialArrangement?: CodeableConcept[];
  /**
   * Special courtesies (VIP, board member).
   */
  specialCourtesy?: CodeableConcept[];
}
/**
 * List of locations where  the patient has been during this encounter.
 */
export interface EncounterLocation extends BackboneElement {
  /**
   * The location where the encounter takes place.
   */
  location: Reference;
  /**
   * Time period during which the patient was present at the location.
   */
  period?: Period;
  /**
   * The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.
   */
  status?: string;
  _status?: Element;
}
/**
 * Code Values for the Encounter.location.status field
 */
export enum EncounterLocationStatusCodes {
  PLANNED = "planned",
  ACTIVE = "active",
  RESERVED = "reserved",
  COMPLETED = "completed",
}
/**
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
 */
export interface Encounter extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Encounter'
  /**
   * The appointment that scheduled this encounter.
   */
  appointment?: Reference;
  /**
   * inpatient | outpatient | ambulatory | emergency +.
   */
  class?: string;
  _class?: Element;
  /**
   * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
   */
  episodeOfCare?: Reference[];
  /**
   * Details about the admission to a healthcare service.
   */
  hospitalization?: EncounterHospitalization;
  /**
   * Identifier(s) by which this encounter is known.
   */
  identifier?: Identifier[];
  /**
   * The referral request this encounter satisfies (incoming referral).
   */
  incomingReferral?: Reference[];
  /**
   * Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
   */
  indication?: Reference[];
  /**
   * Quantity of time the encounter lasted. This excludes the time during leaves of absence.
   */
  length?: Quantity;
  /**
   * List of locations where  the patient has been during this encounter.
   */
  location?: EncounterLocation[];
  /**
   * The list of people responsible for providing the service.
   */
  participant?: EncounterParticipant[];
  /**
   * Another Encounter of which this encounter is a part of (administratively or in time).
   */
  partOf?: Reference;
  /**
   * The patient present at the encounter.
   */
  patient?: Reference;
  /**
   * The start and end time of the encounter.
   */
  period?: Period;
  /**
   * Indicates the urgency of the encounter.
   */
  priority?: CodeableConcept;
  /**
   * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
   */
  reason?: CodeableConcept[];
  /**
   * An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization.
   */
  serviceProvider?: Reference;
  /**
   * planned | arrived | in-progress | onleave | finished | cancelled.
   */
  status: string;
  _status?: Element;
  /**
   * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
   */
  statusHistory?: EncounterStatusHistory[];
  /**
   * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
   */
  type?: CodeableConcept[];
}
/**
 * Code Values for the Encounter.class field
 */
export enum EncounterClassCodes {
  INPATIENT = "inpatient",
  OUTPATIENT = "outpatient",
  AMBULATORY = "ambulatory",
  EMERGENCY = "emergency",
}
/**
 * Code Values for the Encounter.status field
 */
export enum EncounterStatusCodes {
  PLANNED = "planned",
  ARRIVED = "arrived",
  IN_PROGRESS = "in-progress",
  ONLEAVE = "onleave",
  FINISHED = "finished",
  CANCELLED = "cancelled",
}
/**
 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
 */
export interface EnrollmentRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'EnrollmentRequest'
  /**
   * Need to identify the issuer to target for processing and for coordination of benefit processing.
   */
  coverage: Reference;
  /**
   * The date when this resource was created.
   */
  created?: string;
  _created?: Element;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference;
  /**
   * To determine the relationship between the patient and the subscriber.
   */
  relationship: Coding;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
  /**
   * Patient Resource.
   */
  subject: Reference;
  /**
   * The Insurer who is target  of the request.
   */
  target?: Reference;
}
/**
 * This resource provides enrollment and plan details from the processing of an Enrollment resource.
 */
export interface EnrollmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'EnrollmentResponse'
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: Element;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string;
  _disposition?: Element;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * Transaction status: error, complete.
   */
  outcome?: string;
  _outcome?: Element;
  /**
   * Original request resource reference.
   */
  request?: Reference;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
}
/**
 * Code Values for the EnrollmentResponse.outcome field
 */
export enum EnrollmentResponseOutcomeCodes {
  COMPLETE = "complete",
  ERROR = "error",
}
/**
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export interface EpisodeOfCareStatusHistory extends BackboneElement {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: Period;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: string;
  _status?: Element;
}
/**
 * Code Values for the EpisodeOfCare.statusHistory.status field
 */
export enum EpisodeOfCareStatusHistoryStatusCodes {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
}
/**
 * The list of practitioners that may be facilitating this episode of care for specific purposes.
 */
export interface EpisodeOfCareCareTeam extends BackboneElement {
  /**
   * The practitioner (or Organization) within the team.
   */
  member?: Reference;
  /**
   * The period of time this practitioner is performing some role within the episode of care.
   */
  period?: Period;
  /**
   * The role this team member is taking within this episode of care.
   */
  role?: CodeableConcept[];
}
/**
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export interface EpisodeOfCare extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'EpisodeOfCare'
  /**
   * The practitioner that is the care manager/care co-ordinator for this patient.
   */
  careManager?: Reference;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  careTeam?: EpisodeOfCareCareTeam[];
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  condition?: Reference[];
  /**
   * Identifier(s) by which this EpisodeOfCare is known.
   */
  identifier?: Identifier[];
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  managingOrganization?: Reference;
  /**
   * The patient that this EpisodeOfCare applies to.
   */
  patient: Reference;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: Period;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: Reference[];
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: string;
  _status?: Element;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: EpisodeOfCareStatusHistory[];
  /**
   * A classification of the type of encounter; e.g. specialist referral, disease management, type of funded care.
   */
  type?: CodeableConcept[];
}
/**
 * Code Values for the EpisodeOfCare.status field
 */
export enum EpisodeOfCareStatusCodes {
  PLANNED = "planned",
  WAITLIST = "waitlist",
  ACTIVE = "active",
  ONHOLD = "onhold",
  FINISHED = "finished",
  CANCELLED = "cancelled",
}
/**
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export interface ExplanationOfBenefit extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ExplanationOfBenefit'
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: Element;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string;
  _disposition?: Element;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * Transaction status: error, complete.
   */
  outcome?: string;
  _outcome?: Element;
  /**
   * Original request resource reference.
   */
  request?: Reference;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
}
/**
 * Code Values for the ExplanationOfBenefit.outcome field
 */
export enum ExplanationOfBenefitOutcomeCodes {
  COMPLETE = "complete",
  ERROR = "error",
}
/**
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export interface FamilyMemberHistoryCondition extends BackboneElement {
  /**
   * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
   */
  code: CodeableConcept;
  /**
   * An area where general notes can be placed about this specific condition.
   */
  note?: Annotation;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetQuantity?: Quantity;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetRange?: Range;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetPeriod?: Period;
  /**
   * Age of onset of a condition in relatives is predictive of risk for the patient.
   */
  onsetString?: string;
  _onsetString?: Element;
  /**
   * Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
   */
  outcome?: CodeableConcept;
}
/**
 * Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
 */
export interface FamilyMemberHistory extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'FamilyMemberHistory'
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  ageQuantity?: Quantity;
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  ageRange?: Range;
  /**
   * While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
   */
  ageString?: string;
  _ageString?: Element;
  /**
   * Allows calculation of the relative's age.
   */
  bornPeriod?: Period;
  /**
   * Allows calculation of the relative's age.
   */
  bornDate?: string;
  _bornDate?: Element;
  /**
   * Allows calculation of the relative's age.
   */
  bornString?: string;
  _bornString?: Element;
  /**
   * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
   */
  condition?: FamilyMemberHistoryCondition[];
  /**
   * Allows determination of how current the summary is.
   */
  date?: string;
  _date?: Element;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedBoolean?: boolean;
  _deceasedBoolean?: Element;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedQuantity?: Quantity;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedRange?: Range;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedDate?: string;
  _deceasedDate?: Element;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedString?: string;
  _deceasedString?: Element;
  /**
   * Not all relationship codes imply gender and the relative's gender can be relevant for risk assessments.
   */
  gender?: string;
  _gender?: Element;
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: Identifier[];
  /**
   * Allows greater ease in ensuring the same person is being talked about.
   */
  name?: string;
  _name?: Element;
  /**
   * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
   */
  note?: Annotation;
  /**
   * The person who this history concerns.
   */
  patient: Reference;
  /**
   * The type of relationship this person has to the patient (father, mother, brother etc.).
   */
  relationship: CodeableConcept;
  /**
   * A code specifying a state of a Family Member History record.
   */
  status: string;
  _status?: Element;
}
/**
 * Code Values for the FamilyMemberHistory.gender field
 */
export enum FamilyMemberHistoryGenderCodes {
  MALE = "male",
  FEMALE = "female",
  OTHER = "other",
  UNKNOWN = "unknown",
}
/**
 * Code Values for the FamilyMemberHistory.status field
 */
export enum FamilyMemberHistoryStatusCodes {
  PARTIAL = "partial",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  HEALTH_UNKNOWN = "health-unknown",
}
/**
 * Prospective warnings of potential issues when providing care to the patient.
 */
export interface Flag extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Flag'
  /**
   * The person, organization or device that created the flag.
   */
  author?: Reference;
  /**
   * Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
   */
  category?: CodeableConcept;
  /**
   * The coded value or textual component of the flag to display to the user.
   */
  code: CodeableConcept;
  /**
   * This alert is only relevant during the encounter.
   */
  encounter?: Reference;
  /**
   * Identifier assigned to the flag for external use (outside the FHIR environment).
   */
  identifier?: Identifier[];
  /**
   * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
   */
  period?: Period;
  /**
   * Supports basic workflow.
   */
  status: string;
  _status?: Element;
  /**
   * The patient, location, group , organization , or practitioner this is about record this flag is associated with.
   */
  subject: Reference;
}
/**
 * Code Values for the Flag.status field
 */
export enum FlagStatusCodes {
  ACTIVE = "active",
  INACTIVE = "inactive",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Outcome tracking is a key aspect of care planning.
 */
export interface GoalOutcome extends BackboneElement {
  /**
   * Details of what's changed (or not changed).
   */
  resultCodeableConcept?: CodeableConcept;
  /**
   * Details of what's changed (or not changed).
   */
  resultReference?: Reference;
}
/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export interface Goal extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Goal'
  /**
   * Allows specific goals to explicitly linked to the concerns they're dealing with - makes the goal more understandable.
   */
  addresses?: Reference[];
  /**
   * Indicates whose goal this is - patient goal, practitioner goal, etc.
   */
  author?: Reference;
  /**
   * Allows goals to be filtered and sorted.
   */
  category?: CodeableConcept[];
  /**
   * Without a description of what's trying to be achieved, element has no purpose.
   */
  description: string;
  _description?: Element;
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: Identifier[];
  /**
   * There's a need to capture information about the goal that doesn't actually describe the goal.
   */
  note?: Annotation[];
  /**
   * Outcome tracking is a key aspect of care planning.
   */
  outcome?: GoalOutcome[];
  /**
   * Used for sorting and presenting goals.
   */
  priority?: CodeableConcept;
  /**
   * Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
   */
  startDate?: string;
  _startDate?: Element;
  /**
   * Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
   */
  startCodeableConcept?: CodeableConcept;
  /**
   * Allows measuring outcome and whether goal needs to be further tracked.
   */
  status: string;
  _status?: Element;
  /**
   * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
   */
  statusDate?: string;
  _statusDate?: Element;
  /**
   * Captures the reason for the current status.
   */
  statusReason?: CodeableConcept;
  /**
   * Subject is optional to support annonymized reporting.
   */
  subject?: Reference;
  /**
   * Identifies when the goal should be evaluated.
   */
  targetDate?: string;
  _targetDate?: Element;
  /**
   * Identifies when the goal should be evaluated.
   */
  targetQuantity?: Quantity;
}
/**
 * Code Values for the Goal.status field
 */
export enum GoalStatusCodes {
  PROPOSED = "proposed",
  PLANNED = "planned",
  ACCEPTED = "accepted",
  REJECTED = "rejected",
  IN_PROGRESS = "in-progress",
  ACHIEVED = "achieved",
  SUSTAINING = "sustaining",
  ON_HOLD = "on-hold",
  CANCELLED = "cancelled",
}
/**
 * Needs to be a generic mechanism for identifying what individuals can be part of a group.
 */
export interface GroupCharacteristic extends BackboneElement {
  /**
   * Need a formal way of identifying the characteristic being described.
   */
  code: CodeableConcept;
  /**
   * Sometimes group membership is determined by characteristics not possessed.
   */
  exclude: boolean;
  _exclude?: Element;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: Period;
  /**
   * The value of the characteristic is what determines group membership.
   */
  valueCodeableConcept: CodeableConcept;
  /**
   * The value of the characteristic is what determines group membership.
   */
  valueBoolean: boolean;
  _valueBoolean?: Element;
  /**
   * The value of the characteristic is what determines group membership.
   */
  valueQuantity: Quantity;
  /**
   * The value of the characteristic is what determines group membership.
   */
  valueRange: Range;
}
/**
 * Often the only thing of interest about a group is "who's in it".
 */
export interface GroupMember extends BackboneElement {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type.
   */
  entity: Reference;
  /**
   * Sometimes you don't know when someone stopped being in a group, but not when.
   */
  inactive?: boolean;
  _inactive?: Element;
  /**
   * Need to track who was in a group at a  particular time.
   */
  period?: Period;
}
/**
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 */
export interface Group extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Group'
  /**
   * There are use-cases for groups that define specific collections of individuals, and other groups that define "types" of intended individuals.  The requirements for both kinds of groups are similar, so we use a single resource, distinguished by this flag.
   */
  actual: boolean;
  _actual?: Element;
  /**
   * Needs to be a generic mechanism for identifying what individuals can be part of a group.
   */
  characteristic?: GroupCharacteristic[];
  /**
   * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
   */
  code?: CodeableConcept;
  /**
   * Allows the group to be referenced from external specifications.
   */
  identifier?: Identifier[];
  /**
   * Often the only thing of interest about a group is "who's in it".
   */
  member?: GroupMember[];
  /**
   * Used to identify the group in human communication.
   */
  name?: string;
  _name?: Element;
  /**
   * Group size is a common defining characteristic.
   */
  quantity?: number;
  /**
   * Identifies what type of resources the group is made up of.
   */
  type: string;
  _type?: Element;
}
/**
 * Code Values for the Group.type field
 */
export enum GroupTypeCodes {
  PERSON = "person",
  ANIMAL = "animal",
  PRACTITIONER = "practitioner",
  DEVICE = "device",
  MEDICATION = "medication",
  SUBSTANCE = "substance",
}
/**
 * A specific type of service that may be delivered or performed.
 */
export interface HealthcareServiceServiceType extends BackboneElement {
  /**
   * Collection of specialties handled by the service site. This is more of a medical term.
   */
  specialty?: CodeableConcept[];
  /**
   * The specific type of service being delivered or performed.
   */
  type: CodeableConcept;
}
/**
 * A collection of times that the Service Site is available.
 */
export interface HealthcareServiceAvailableTime extends BackboneElement {
  /**
   * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
   */
  allDay?: boolean;
  _allDay?: Element;
  /**
   * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
   */
  availableEndTime?: string;
  _availableEndTime?: Element;
  /**
   * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
   */
  availableStartTime?: string;
  _availableStartTime?: Element;
  /**
   * Indicates which days of the week are available between the start and end Times.
   */
  daysOfWeek?: string[];
  _daysOfWeek?: Element;
}
/**
 * Code Values for the HealthcareService.availableTime.daysOfWeek field
 */
export enum HealthcareServiceAvailableTimeDaysOfWeekCodes {
  MON = "mon",
  TUE = "tue",
  WED = "wed",
  THU = "thu",
  FRI = "fri",
  SAT = "sat",
  SUN = "sun",
}
/**
 * The HealthcareService is not available during this period of time due to the provided reason.
 */
export interface HealthcareServiceNotAvailable extends BackboneElement {
  /**
   * The reason that can be presented to the user as to why this time is not available.
   */
  description: string;
  _description?: Element;
  /**
   * Service is not available (seasonally or for a public holiday) from this date.
   */
  during?: Period;
}
/**
 * The details of a healthcare service available at a location.
 */
export interface HealthcareService extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'HealthcareService'
  /**
   * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
   */
  appointmentRequired?: boolean;
  _appointmentRequired?: Element;
  /**
   * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
   */
  availabilityExceptions?: string;
  _availabilityExceptions?: Element;
  /**
   * A collection of times that the Service Site is available.
   */
  availableTime?: HealthcareServiceAvailableTime[];
  /**
   * Collection of characteristics (attributes).
   */
  characteristic?: CodeableConcept[];
  /**
   * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
   */
  comment?: string;
  _comment?: Element;
  /**
   * The location(s) that this service is available to (not where the service is provided).
   */
  coverageArea?: Reference[];
  /**
   * Does this service have specific eligibility requirements that need to be met in order to use the service?
   */
  eligibility?: CodeableConcept;
  /**
   * Describes the eligibility conditions for the service.
   */
  eligibilityNote?: string;
  _eligibilityNote?: Element;
  /**
   * Extra details about the service that can't be placed in the other fields.
   */
  extraDetails?: string;
  _extraDetails?: Element;
  /**
   * External identifiers for this item.
   */
  identifier?: Identifier[];
  /**
   * The location where this healthcare service may be provided.
   */
  location: Reference;
  /**
   * The HealthcareService is not available during this period of time due to the provided reason.
   */
  notAvailable?: HealthcareServiceNotAvailable[];
  /**
   * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
   */
  photo?: Attachment;
  /**
   * Program Names that can be used to categorize the service.
   */
  programName?: string[];
  _programName?: Element;
  /**
   * The organization that provides this healthcare service.
   */
  providedBy?: Reference;
  /**
   * The public part of the 'keys' allocated to an Organization by an accredited body to support secure exchange of data over the internet. To be provided by the Organization, where available.
   */
  publicKey?: string;
  _publicKey?: Element;
  /**
   * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
   */
  referralMethod?: CodeableConcept[];
  /**
   * Identifies the broad category of service being performed or delivered.
   */
  serviceCategory?: CodeableConcept;
  /**
   * Further description of the service as it would be presented to a consumer while searching.
   */
  serviceName?: string;
  _serviceName?: Element;
  /**
   * The code(s) that detail the conditions under which the healthcare service is available/offered.
   */
  serviceProvisionCode?: CodeableConcept[];
  /**
   * A specific type of service that may be delivered or performed.
   */
  serviceType?: HealthcareServiceServiceType[];
  /**
   * List of contacts related to this specific healthcare service.
   */
  telecom?: ContactPoint[];
}
/**
 * The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
 */
export interface ImagingObjectSelectionStudySeriesInstanceFrames extends BackboneElement {
  /**
   * One or more non-duplicate frame numbers in the selected instance.
   */
  frameNumbers: number[];
  /**
   * WADO-RS URL enables retrieval of the frames using DICOM WADO-RS API.
   */
  url: string;
  _url?: Element;
}
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
 */
export interface ImagingObjectSelectionStudySeriesInstance extends BackboneElement {
  /**
   * The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
   */
  frames?: ImagingObjectSelectionStudySeriesInstanceFrames[];
  /**
   * DICOM SOP instances can be an image or other data object. The SOP class UID provide the accurate information about what type the instance is.
   */
  sopClass: string;
  _sopClass?: Element;
  /**
   * SOP instance UID is required to fully identify the DICOM SOP instance in the selection.
   */
  uid: string;
  _uid?: Element;
  /**
   * WADO-RS URL enables retrieval of the SOP instance using DICOM WADO-RS API.
   */
  url: string;
  _url?: Element;
}
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
 */
export interface ImagingObjectSelectionStudySeries extends BackboneElement {
  /**
   * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
   */
  instance: ImagingObjectSelectionStudySeriesInstance[];
  /**
   * Series instance UID is required to fully identify the DICOM SOP instances in the selection.
   */
  uid?: string;
  _uid?: Element;
  /**
   * WADO-RS URL enables retrieval of the entire series using DICOM WADO-RS API.
   */
  url?: string;
  _url?: Element;
}
/**
 * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
 */
export interface ImagingObjectSelectionStudy extends BackboneElement {
  /**
   * Used to retrieve the ImagingStudy that contain the images referenced in the Imaging ObjectSelection.study.
   */
  imagingStudy?: Reference;
  /**
   * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
   */
  series: ImagingObjectSelectionStudySeries[];
  /**
   * Study instance UID is required to fully identify the DICOM SOP instances in the selection.
   */
  uid: string;
  _uid?: Element;
  /**
   * WADO-RS URL enables retrieval of the entire study using DICOM WADO-RS API.
   */
  url?: string;
  _url?: Element;
}
/**
 * A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
 */
export interface ImagingObjectSelection extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ImagingObjectSelection'
  /**
   * Track the selection decision maker.
   */
  author?: Reference;
  /**
   * Date and time when the selection was made can be important to understand the content of selection.
   */
  authoringTime?: string;
  _authoringTime?: Element;
  /**
   * Need to provide a narrative description of the SOP instances in the selection.
   */
  description?: string;
  _description?: Element;
  /**
   * SOP Instances in ImagingObjectSelection must be from the same patient.
   */
  patient: Reference;
  /**
   * DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
   */
  study: ImagingObjectSelectionStudy[];
  /**
   * Need to represent the application purpose that the SOP instances in ImagingObjectSelection are selected for.
   */
  title: CodeableConcept;
  /**
   * DICOM SOP Instance is always assigned with a unique identifier (UID).
   */
  uid: string;
  _uid?: Element;
}
/**
 * A single SOP Instance within the series, e.g. an image, or presentation state.
 */
export interface ImagingStudySeriesInstance extends BackboneElement {
  /**
   * Content of the instance or a rendering thereof (e.g. a JPEG of an image, or an XML of a structured report). May be represented for example by inline encoding; by a URL reference to a WADO-RS service that makes the instance available; or to a FHIR Resource (e.g. Media, Document, etc.). Multiple content attachments may be used for alternate representations of the instance.
   */
  content?: Attachment[];
  /**
   * The number of instance in the series.
   */
  number?: number;
  /**
   * DICOM instance  type.
   */
  sopClass: string;
  _sopClass?: Element;
  /**
   * The description of the instance.
   */
  title?: string;
  _title?: Element;
  /**
   * A human-friendly SOP Class name.
   */
  type?: string;
  _type?: Element;
  /**
   * Formal identifier for this image or other content.
   */
  uid: string;
  _uid?: Element;
}
/**
 * Each study has one or more series of images or other content.
 */
export interface ImagingStudySeries extends BackboneElement {
  /**
   * Availability of series (online, offline or nearline).
   */
  availability?: string;
  _availability?: Element;
  /**
   * Body part examined. See  DICOM Part 16 Annex L for the mapping from DICOM to Snomed CT.
   */
  bodySite?: Coding;
  /**
   * A description of the series.
   */
  description?: string;
  _description?: Element;
  /**
   * A single SOP Instance within the series, e.g. an image, or presentation state.
   */
  instance?: ImagingStudySeriesInstance[];
  /**
   * Laterality if body site is paired anatomic structure and laterality is not pre-coordinated in body site code.
   */
  laterality?: Coding;
  /**
   * The modality of this series sequence.
   */
  modality: Coding;
  /**
   * The Numeric identifier of this series in the study.
   */
  number?: number;
  /**
   * Number of SOP Instances in Series.
   */
  numberOfInstances: number;
  /**
   * The date and time the series was started.
   */
  started?: string;
  _started?: Element;
  /**
   * Formal identifier for this series.
   */
  uid: string;
  _uid?: Element;
  /**
   * URI/URL specifying the location of the referenced series using WADO-RS.
   */
  url?: string;
  _url?: Element;
}
/**
 * Code Values for the ImagingStudy.series.availability field
 */
export enum ImagingStudySeriesAvailabilityCodes {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  NEARLINE = "NEARLINE",
  UNAVAILABLE = "UNAVAILABLE",
}
/**
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export interface ImagingStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ImagingStudy'
  /**
   * Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
   */
  accession?: Identifier;
  /**
   * Availability of study (online, offline or nearline).
   */
  availability?: string;
  _availability?: Element;
  /**
   * Institution-generated description or classification of the Study performed.
   */
  description?: string;
  _description?: Element;
  /**
   * Other identifiers for the study.
   */
  identifier?: Identifier[];
  /**
   * Who read the study and interpreted the images or other content.
   */
  interpreter?: Reference;
  /**
   * A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
   */
  modalityList?: Coding[];
  /**
   * Number of SOP Instances in Study.
   */
  numberOfInstances: number;
  /**
   * Number of Series in Study.
   */
  numberOfSeries: number;
  /**
   * To support grouped procedures (one imaging study supporting multiple ordered procedures, e.g. chest/abdomen/pelvis CT).
   */
  order?: Reference[];
  /**
   * The patient imaged in the study.
   */
  patient: Reference;
  /**
   * Type of procedure performed.
   */
  procedure?: Reference[];
  /**
   * The requesting/referring physician.
   */
  referrer?: Reference;
  /**
   * Each study has one or more series of images or other content.
   */
  series?: ImagingStudySeries[];
  /**
   * Date and Time the study started.
   */
  started?: string;
  _started?: Element;
  /**
   * Formal identifier for the study.
   */
  uid: string;
  _uid?: Element;
  /**
   * WADO-RS resource where Study is available.
   */
  url?: string;
  _url?: Element;
}
/**
 * Code Values for the ImagingStudy.availability field
 */
export enum ImagingStudyAvailabilityCodes {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  NEARLINE = "NEARLINE",
  UNAVAILABLE = "UNAVAILABLE",
}
/**
 * Reasons why a vaccine was or was not administered.
 */
export interface ImmunizationExplanation extends BackboneElement {
  /**
   * Reasons why a vaccine was administered.
   */
  reason?: CodeableConcept[];
  /**
   * Reason why a vaccine was not administered.
   */
  reasonNotGiven?: CodeableConcept[];
}
/**
 * Categorical data indicating that an adverse event is associated in time to an immunization.
 */
export interface ImmunizationReaction extends BackboneElement {
  /**
   * Date of reaction to the immunization.
   */
  date?: string;
  _date?: Element;
  /**
   * Details of the reaction.
   */
  detail?: Reference;
  /**
   * Self-reported indicator.
   */
  reported?: boolean;
  _reported?: Element;
}
/**
 * Contains information about the protocol(s) under which the vaccine was administered.
 */
export interface ImmunizationVaccinationProtocol extends BackboneElement {
  /**
   * Indicates the authority who published the protocol.  E.g. ACIP.
   */
  authority?: Reference;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string;
  _description?: Element;
  /**
   * Nominal position in a series.
   */
  doseSequence: number;
  /**
   * Indicates if the immunization event should "count" against  the protocol.
   */
  doseStatus: CodeableConcept;
  /**
   * Provides an explanation as to why an immunization event should or should not count against the protocol.
   */
  doseStatusReason?: CodeableConcept;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string;
  _series?: Element;
  /**
   * The recommended number of doses to achieve immunity.
   */
  seriesDoses?: number;
  /**
   * The targeted disease.
   */
  targetDisease: CodeableConcept[];
}
/**
 * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
 */
export interface Immunization extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Immunization'
  /**
   * Date vaccine administered or was to be administered.
   */
  date?: string;
  _date?: Element;
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: Quantity;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: Reference;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string;
  _expirationDate?: Element;
  /**
   * Reasons why a vaccine was or was not administered.
   */
  explanation?: ImmunizationExplanation;
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: Identifier[];
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: Reference;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string;
  _lotNumber?: Element;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: Reference;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: Annotation[];
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient: Reference;
  /**
   * Clinician who administered the vaccine.
   */
  performer?: Reference;
  /**
   * Categorical data indicating that an adverse event is associated in time to an immunization.
   */
  reaction?: ImmunizationReaction[];
  /**
   * True if this administration was reported rather than directly administered.
   */
  reported: boolean;
  _reported?: Element;
  /**
   * Clinician who ordered the vaccination.
   */
  requester?: Reference;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: CodeableConcept;
  /**
   * Body site where vaccine was administered.
   */
  site?: CodeableConcept;
  /**
   * Indicates the current status of the vaccination event.
   */
  status: string;
  _status?: Element;
  /**
   * Contains information about the protocol(s) under which the vaccine was administered.
   */
  vaccinationProtocol?: ImmunizationVaccinationProtocol[];
  /**
   * Vaccine that was administered or was to be administered.
   */
  vaccineCode: CodeableConcept;
  /**
   * Indicates if the vaccination was or was not given.
   */
  wasNotGiven: boolean;
  _wasNotGiven?: Element;
}
/**
 * Code Values for the Immunization.status field
 */
export enum ImmunizationStatusCodes {
  IN_PROGRESS = "in-progress",
  ON_HOLD = "on-hold",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  STOPPED = "stopped",
}
/**
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: CodeableConcept;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: string;
  _value?: Element;
}
/**
 * Contains information about the protocol under which the vaccine was administered.
 */
export interface ImmunizationRecommendationRecommendationProtocol extends BackboneElement {
  /**
   * Indicates the authority who published the protocol.  For example, ACIP.
   */
  authority?: Reference;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string;
  _description?: Element;
  /**
   * Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
   */
  doseSequence?: number;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string;
  _series?: Element;
}
/**
 * Vaccine administration recommendations.
 */
export interface ImmunizationRecommendationRecommendation extends BackboneElement {
  /**
   * The date the immunization recommendation was created.
   */
  date: string;
  _date?: Element;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: ImmunizationRecommendationRecommendationDateCriterion[];
  /**
   * This indicates the next recommended dose number (e.g. dose 2 is the next recommended dose).
   */
  doseNumber?: number;
  /**
   * Vaccine administration status.
   */
  forecastStatus: CodeableConcept;
  /**
   * Contains information about the protocol under which the vaccine was administered.
   */
  protocol?: ImmunizationRecommendationRecommendationProtocol;
  /**
   * Immunization event history that supports the status and recommendation.
   */
  supportingImmunization?: Reference[];
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: Reference[];
  /**
   * Vaccine that pertains to the recommendation.
   */
  vaccineCode: CodeableConcept;
}
/**
 * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
 */
export interface ImmunizationRecommendation extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ImmunizationRecommendation'
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: Identifier[];
  /**
   * The patient for whom the recommendations are for.
   */
  patient: Reference;
  /**
   * Vaccine administration recommendations.
   */
  recommendation: ImmunizationRecommendationRecommendation[];
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface ImplementationGuideContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the implementation guide.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export interface ImplementationGuideDependency extends BackboneElement {
  /**
   * How the dependency is represented when the guide is published.
   */
  type: string;
  _type?: Element;
  /**
   * Where the dependency is located.
   */
  uri: string;
  _uri?: Element;
}
/**
 * Code Values for the ImplementationGuide.dependency.type field
 */
export enum ImplementationGuideDependencyTypeCodes {
  REFERENCE = "reference",
  INCLUSION = "inclusion",
}
/**
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export interface ImplementationGuidePackageResource extends BackboneElement {
  /**
   * A short code that may be used to identify the resource throughout the implementation guide.
   */
  acronym?: string;
  _acronym?: Element;
  /**
   * A description of the reason that a resource has been included in the implementation guide.
   */
  description?: string;
  _description?: Element;
  /**
   * Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.
   */
  exampleFor?: Reference;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  name?: string;
  _name?: Element;
  /**
   * This element is provided so that implementation guide tooling does not have to guess the purpose of including a resource in the implementation guide based on the type or context.
   */
  purpose: string;
  _purpose?: Element;
  /**
   * Where this resource is found.
   */
  sourceUri: string;
  _sourceUri?: Element;
  /**
   * Where this resource is found.
   */
  sourceReference: Reference;
}
/**
 * Code Values for the ImplementationGuide.package.resource.purpose field
 */
export enum ImplementationGuidePackageResourcePurposeCodes {
  EXAMPLE = "example",
  TERMINOLOGY = "terminology",
  PROFILE = "profile",
  EXTENSION = "extension",
  DICTIONARY = "dictionary",
  LOGICAL = "logical",
}
/**
 * A logical group of resources. Logical groups can be used when building pages.
 */
export interface ImplementationGuidePackage extends BackboneElement {
  /**
   * Human readable text describing the package.
   */
  description?: string;
  _description?: Element;
  /**
   * The name for the group, as used in page.package.
   */
  name: string;
  _name?: Element;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  resource: ImplementationGuidePackageResource[];
}
/**
 * A set of profiles that all resources covered by this implementation guide must conform to.
 */
export interface ImplementationGuideGlobal extends BackboneElement {
  /**
   * A reference to the profile that all instances must conform to.
   */
  profile: Reference;
  /**
   * The type of resource that all instances must conform to.
   */
  type: string;
  _type?: Element;
}
/**
 * A page / section in the implementation guide. The root page is the implementation guide home page.
 */
export interface ImplementationGuidePage extends BackboneElement {
  /**
   * The format of the page.
   */
  format?: string;
  _format?: Element;
  /**
   * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
   */
  kind: string;
  _kind?: Element;
  /**
   * A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  name: string;
  _name?: Element;
  /**
   * For constructed pages, a list of packages to include in the page (or else empty for everything).
   */
  package?: string[];
  _package?: Element;
  /**
   * Nested Pages/Sections under this page.
   */
  Page?: ImplementationGuidePage[];
  /**
   * The source address for the page.
   */
  source: string;
  _source?: Element;
  /**
   * For constructed pages, what kind of resources to include in the list.
   */
  type?: string[];
  _type?: Element;
}
/**
 * Code Values for the ImplementationGuide.page.kind field
 */
export enum ImplementationGuidePageKindCodes {
  PAGE = "page",
  EXAMPLE = "example",
  LIST = "list",
  INCLUDE = "include",
  DIRECTORY = "directory",
  DICTIONARY = "dictionary",
  TOC = "toc",
  RESOURCE = "resource",
}
/**
 * A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
 */
export interface ImplementationGuide extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ImplementationGuide'
  /**
   * A binary file that is included in the  implementation guide when it is published.
   */
  binary?: string[];
  _binary?: Element;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ImplementationGuideContact[];
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
   */
  copyright?: string;
  _copyright?: Element;
  /**
   * The date this version of the implementation guide was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
   */
  date?: string;
  _date?: Element;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  dependency?: ImplementationGuideDependency[];
  /**
   * A free text natural language description of the Implementation Guide and its use.
   */
  description?: string;
  _description?: Element;
  /**
   * Allows filtering of Implementation Guides that are appropriate for use vs. not.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
   */
  fhirVersion?: string;
  _fhirVersion?: Element;
  /**
   * A set of profiles that all resources covered by this implementation guide must conform to.
   */
  global?: ImplementationGuideGlobal[];
  /**
   * A free text natural language name identifying the Implementation Guide.
   */
  name: string;
  _name?: Element;
  /**
   * A logical group of resources. Logical groups can be used when building pages.
   */
  package: ImplementationGuidePackage[];
  /**
   * A page / section in the implementation guide. The root page is the implementation guide home page.
   */
  page: ImplementationGuidePage;
  /**
   * Helps establish the "authority/credibility" of the implementation guide.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Allows filtering of Implementation Guides that are appropriate for use vs. not.
   */
  status: string;
  _status?: Element;
  /**
   * This is required to allow hosting Implementation Guides on multiple different servers, and to allow for the editorial process.
   */
  url: string;
  _url?: Element;
  /**
   * Assist in searching for appropriate implementation guide.
   */
  useContext?: CodeableConcept[];
  /**
   * There may be multiple resource versions of the Implementation Guide that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the ImplementationGuide.status field
 */
export enum ImplementationGuideStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Entries in this list.
 */
export interface ListEntry extends BackboneElement {
  /**
   * The date may be significant for understanding the meaning of items in a working list.
   */
  date?: string;
  _date?: Element;
  /**
   * The flag element may contain codes that an application processing the list does not understand. However there can be no ambiguity if a list item is actually marked as "deleted".
   */
  deleted?: boolean;
  _deleted?: Element;
  /**
   * This field is present to support various clinical uses of lists, such as a discharge summary medication list, where flags specify whether the medication was added, modified, or deleted from the list.
   */
  flag?: CodeableConcept;
  /**
   * A reference to the actual resource from which data was derived.
   */
  item: Reference;
}
/**
 * A set of information summarized from a list of other resources.
 */
export interface List extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'List'
  /**
   * Lists often contain subsets of resources rather than an exhaustive list.  The code identifies what type of subset is included.
   */
  code?: CodeableConcept;
  /**
   * Identifies how current the list is which affects relevance.
   */
  date?: string;
  _date?: Element;
  /**
   * Allows capturing things like "none exist" or "not asked" which can be important for most lists.
   */
  emptyReason?: CodeableConcept;
  /**
   * The encounter that is the context in which this list was created.
   */
  encounter?: Reference;
  /**
   * Entries in this list.
   */
  entry?: ListEntry[];
  /**
   * Identifier for the List assigned for business purposes outside the context of FHIR.
   */
  identifier?: Identifier[];
  /**
   * Lists are used in various ways, and it must be known in what way it is safe to use them.
   */
  mode: string;
  _mode?: Element;
  /**
   * Comments that apply to the overall list.
   */
  note?: string;
  _note?: Element;
  /**
   * Important for presentation and rendering.  Lists may be sorted to place more important information first or to group related entries.
   */
  orderedBy?: CodeableConcept;
  /**
   * Allows follow-up as well as context.
   */
  source?: Reference;
  /**
   * Indicates the current state of this list.
   */
  status: string;
  _status?: Element;
  /**
   * The primary purpose of listing the subject explicitly is to help with finding the right list.
   */
  subject?: Reference;
  /**
   * Allows customization beyond just the code identifying the kind of list.
   */
  title?: string;
  _title?: Element;
}
/**
 * Code Values for the List.mode field
 */
export enum ListModeCodes {
  WORKING = "working",
  SNAPSHOT = "snapshot",
  CHANGES = "changes",
}
/**
 * Code Values for the List.status field
 */
export enum ListStatusCodes {
  CURRENT = "current",
  RETIRED = "retired",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * For mobile applications and automated route-finding knowing the exact location of the Location is required.
 */
export interface LocationPosition extends BackboneElement {
  /**
   * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
   */
  altitude?: number;
  /**
   * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
   */
  latitude: number;
  /**
   * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
   */
  longitude: number;
}
/**
 * Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
 */
export interface Location extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Location'
  /**
   * If locations can be visited, we need to keep track of their address.
   */
  address?: Address;
  /**
   * Humans need additional information to verify a correct location has been identified.
   */
  description?: string;
  _description?: Element;
  /**
   * Organization label locations in registries, need to keep track of those.
   */
  identifier?: Identifier[];
  /**
   * Need to know who manages the location.
   */
  managingOrganization?: Reference;
  /**
   * When using a Location resource for scheduling or orders, we need to be able to refer to a class of Locations instead of a specific Location.
   */
  mode?: string;
  _mode?: Element;
  /**
   * Name of the location as used by humans. Does not need to be unique.
   */
  name?: string;
  _name?: Element;
  /**
   * For purposes of location, display and identification, knowing which locations are located within other locations is important.
   */
  partOf?: Reference;
  /**
   * For purposes of showing relevant locations in queries, we need to categorize locations.
   */
  physicalType?: CodeableConcept;
  /**
   * For mobile applications and automated route-finding knowing the exact location of the Location is required.
   */
  position?: LocationPosition;
  /**
   * active | suspended | inactive.
   */
  status?: string;
  _status?: Element;
  /**
   * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   */
  telecom?: ContactPoint[];
  /**
   * Indicates the type of function performed at the location.
   */
  type?: CodeableConcept;
}
/**
 * Code Values for the Location.mode field
 */
export enum LocationModeCodes {
  INSTANCE = "instance",
  KIND = "kind",
}
/**
 * Code Values for the Location.status field
 */
export enum LocationStatusCodes {
  ACTIVE = "active",
  SUSPENDED = "suspended",
  INACTIVE = "inactive",
}
/**
 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
 */
export interface Media extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Media'
  /**
   * The actual content of the media - inline or by direct reference to the media source file.
   */
  content: Attachment;
  /**
   * The name of the device / manufacturer of the device  that was used to make the recording.
   */
  deviceName?: string;
  _deviceName?: Element;
  /**
   * The duration of the recording in seconds - for audio and video.
   */
  duration?: number;
  /**
   * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
   */
  frames?: number;
  /**
   * Height of the image in pixels (photo/video).
   */
  height?: number;
  /**
   * Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
   */
  identifier?: Identifier[];
  /**
   * The person who administered the collection of the image.
   */
  operator?: Reference;
  /**
   * Who/What this Media is a record of.
   */
  subject?: Reference;
  /**
   * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
   */
  subtype?: CodeableConcept;
  /**
   * Whether the media is a photo (still image), an audio recording, or a video recording.
   */
  type: string;
  _type?: Element;
  /**
   * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
   */
  view?: CodeableConcept;
  /**
   * Width of the image in pixels (photo/video).
   */
  width?: number;
}
/**
 * Code Values for the Media.type field
 */
export enum MediaTypeCodes {
  PHOTO = "photo",
  VIDEO = "video",
  AUDIO = "audio",
}
/**
 * Identifies a particular constituent of interest in the product.
 */
export interface MedicationProductIngredient extends BackboneElement {
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.
   */
  amount?: Ratio;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  item: Reference;
}
/**
 * Information about a group of medication produced or packaged from one production run.
 */
export interface MedicationProductBatch extends BackboneElement {
  /**
   * When this specific batch of product will expire.
   */
  expirationDate?: string;
  _expirationDate?: Element;
  /**
   * The assigned lot number of a batch of the specified product.
   */
  lotNumber?: string;
  _lotNumber?: Element;
}
/**
 * Information that only applies to products (not packages).
 */
export interface MedicationProduct extends BackboneElement {
  /**
   * Information about a group of medication produced or packaged from one production run.
   */
  batch?: MedicationProductBatch[];
  /**
   * Describes the form of the item.  Powder; tablets; carton.
   */
  form?: CodeableConcept;
  /**
   * Identifies a particular constituent of interest in the product.
   */
  ingredient?: MedicationProductIngredient[];
}
/**
 * A set of components that go to make up the described item.
 */
export interface MedicationPackageContent extends BackboneElement {
  /**
   * The amount of the product that is in the package.
   */
  amount?: Quantity;
  /**
   * Identifies one of the items in the package.
   */
  item: Reference;
}
/**
 * Information that only applies to packages (not products).
 */
export interface MedicationPackage extends BackboneElement {
  /**
   * The kind of container that this package comes as.
   */
  container?: CodeableConcept;
  /**
   * A set of components that go to make up the described item.
   */
  content?: MedicationPackageContent[];
}
/**
 * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
 */
export interface Medication extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Medication'
  /**
   * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
   */
  code?: CodeableConcept;
  /**
   * Set to true if the item is attributable to a specific manufacturer.
   */
  isBrand?: boolean;
  _isBrand?: Element;
  /**
   * Describes the details of the manufacturer.
   */
  manufacturer?: Reference;
  /**
   * Information that only applies to packages (not products).
   */
  package?: MedicationPackage;
  /**
   * Information that only applies to products (not packages).
   */
  product?: MedicationProduct;
}
/**
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
export interface MedicationAdministrationDosage extends BackboneElement {
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
   */
  method?: CodeableConcept;
  /**
   * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
   */
  quantity?: Quantity;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Currently we do not specify a default of '1' in the denominator, but this is being discussed.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Currently we do not specify a default of '1' in the denominator, but this is being discussed.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
   */
  route?: CodeableConcept;
  /**
   * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
   */
  siteCodeableConcept?: CodeableConcept;
  /**
   * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
   */
  siteReference?: Reference;
  /**
   * Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.
   */
  text?: string;
  _text?: Element;
}
/**
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
export interface MedicationAdministration extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'MedicationAdministration'
  /**
   * The device used in administering the medication to the patient.  For example, a particular infusion pump.
   */
  device?: Reference[];
  /**
   * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
   */
  dosage?: MedicationAdministrationDosage;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  effectiveTimeDateTime: string;
  _effectiveTimeDateTime?: Element;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  effectiveTimePeriod: Period;
  /**
   * The visit, admission or other contact between patient and health care provider the medication administration was performed as part of.
   */
  encounter?: Reference;
  /**
   * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
   */
  identifier?: Identifier[];
  /**
   * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept: CodeableConcept;
  /**
   * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference: Reference;
  /**
   * Extra information about the medication administration that is not conveyed by the other attributes.
   */
  note?: string;
  _note?: Element;
  /**
   * The person or animal receiving the medication.
   */
  patient: Reference;
  /**
   * The individual who was responsible for giving the medication to the patient.
   */
  practitioner?: Reference;
  /**
   * The original request, instruction or authority to perform the administration.
   */
  prescription?: Reference;
  /**
   * A code indicating why the medication was given.
   */
  reasonGiven?: CodeableConcept[];
  /**
   * A code indicating why the administration was not performed.
   */
  reasonNotGiven?: CodeableConcept[];
  /**
   * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
   */
  status: string;
  _status?: Element;
  /**
   * Set this to true if the record is saying that the medication was NOT administered.
   */
  wasNotGiven?: boolean;
  _wasNotGiven?: Element;
}
/**
 * Code Values for the MedicationAdministration.status field
 */
export enum MedicationAdministrationStatusCodes {
  IN_PROGRESS = "in-progress",
  ON_HOLD = "on-hold",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  STOPPED = "stopped",
}
/**
 * Indicates how the medication is to be used by the patient.
 */
export interface MedicationDispenseDosageInstruction extends BackboneElement {
  /**
   * Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
   */
  additionalInstructions?: CodeableConcept;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededBoolean?: boolean;
  _asNeededBoolean?: Element;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededCodeableConcept?: CodeableConcept;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseRange?: Range;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseQuantity?: Quantity;
  /**
   * The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time,  e.g. 1000mg in 24 hours.
   */
  maxDosePerPeriod?: Ratio;
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.
   */
  method?: CodeableConcept;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
   */
  route?: CodeableConcept;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteCodeableConcept?: CodeableConcept;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteReference?: Reference;
  /**
   * Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.
   */
  text?: string;
  _text?: Element;
  /**
   * The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions.  For example, "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timing?: Timing;
}
/**
 * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
 */
export interface MedicationDispenseSubstitution extends BackboneElement {
  /**
   * Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
   */
  reason?: CodeableConcept[];
  /**
   * The person or organization that has primary responsibility for the substitution.
   */
  responsibleParty?: Reference[];
  /**
   * A code signifying whether a different drug was dispensed from what was prescribed.
   */
  type: CodeableConcept;
}
/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export interface MedicationDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'MedicationDispense'
  /**
   * Indicates the medication order that is being dispensed against.
   */
  authorizingPrescription?: Reference[];
  /**
   * The amount of medication expressed as a timing amount.
   */
  daysSupply?: Quantity;
  /**
   * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
   */
  destination?: Reference;
  /**
   * The individual responsible for dispensing the medication.
   */
  dispenser?: Reference;
  /**
   * Indicates how the medication is to be used by the patient.
   */
  dosageInstruction?: MedicationDispenseDosageInstruction[];
  /**
   * Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
   */
  identifier?: Identifier;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept: CodeableConcept;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference: Reference;
  /**
   * Extra information about the dispense that could not be conveyed in the other attributes.
   */
  note?: string;
  _note?: Element;
  /**
   * A link to a resource representing the person to whom the medication will be given.
   */
  patient?: Reference;
  /**
   * The amount of medication that has been dispensed. Includes unit of measure.
   */
  quantity?: Quantity;
  /**
   * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
   */
  receiver?: Reference[];
  /**
   * A code specifying the state of the set of dispense events.
   */
  status?: string;
  _status?: Element;
  /**
   * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
   */
  substitution?: MedicationDispenseSubstitution;
  /**
   * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: CodeableConcept;
  /**
   * The time the dispensed product was provided to the patient or their representative.
   */
  whenHandedOver?: string;
  _whenHandedOver?: Element;
  /**
   * The time when the dispensed product was packaged and reviewed.
   */
  whenPrepared?: string;
  _whenPrepared?: Element;
}
/**
 * Code Values for the MedicationDispense.status field
 */
export enum MedicationDispenseStatusCodes {
  IN_PROGRESS = "in-progress",
  ON_HOLD = "on-hold",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  STOPPED = "stopped",
}
/**
 * Indicates how the medication is to be used by the patient.
 */
export interface MedicationOrderDosageInstruction extends BackboneElement {
  /**
   * Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
   */
  additionalInstructions?: CodeableConcept;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
   */
  asNeededBoolean?: boolean;
  _asNeededBoolean?: Element;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
   */
  asNeededCodeableConcept?: CodeableConcept;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseRange?: Range;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseQuantity?: Quantity;
  /**
   * The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
   */
  maxDosePerPeriod?: Ratio;
  /**
   * A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  For examples, Slow Push; Deep IV.
   */
  method?: CodeableConcept;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto a patient's body.
   */
  route?: CodeableConcept;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteCodeableConcept?: CodeableConcept;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteReference?: Reference;
  /**
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.  The content of this attribute does not include the name or description of the medication. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication. It is expected that the text instructions will always be populated.  If the dosage.timing attribute is also populated, then the dosage.text should reflect the same information as the timing.
   */
  text?: string;
  _text?: Element;
  /**
   * The timing schedule for giving the medication to the patient. The Schedule data type allows many different expressions. For example: "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timing?: Timing;
}
/**
 * Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export interface MedicationOrderDispenseRequest extends BackboneElement {
  /**
   * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
   */
  expectedSupplyDuration?: Quantity;
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept?: CodeableConcept;
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference?: Reference;
  /**
   * An integer indicating the number of additional times (aka refills or repeats) the patient can receive the prescribed medication.   Usage Notes: This integer does NOT include the original order dispense.   This means that if an order indicates dispense 30 tablets plus  "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.
   */
  numberOfRepeatsAllowed?: number;
  /**
   * The amount that is to be dispensed for one fill.
   */
  quantity?: Quantity;
  /**
   * Indicates when the Prescription becomes valid, and when it ceases to be a dispensable Prescription.
   */
  validityPeriod?: Period;
}
/**
 * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export interface MedicationOrderSubstitution extends BackboneElement {
  /**
   * Indicates the reason for the substitution, or why substitution must or must not be performed.
   */
  reason?: CodeableConcept;
  /**
   * A code signifying whether a different drug should be dispensed from what was prescribed.
   */
  type: CodeableConcept;
}
/**
 * An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
 */
export interface MedicationOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'MedicationOrder'
  /**
   * The date (and perhaps time) when the prescription was stopped.
   */
  dateEnded?: string;
  _dateEnded?: Element;
  /**
   * The date (and perhaps time) when the prescription was written.
   */
  dateWritten?: string;
  _dateWritten?: Element;
  /**
   * Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
   */
  dispenseRequest?: MedicationOrderDispenseRequest;
  /**
   * Indicates how the medication is to be used by the patient.
   */
  dosageInstruction?: MedicationOrderDosageInstruction[];
  /**
   * A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
   */
  encounter?: Reference;
  /**
   * External identifier - one that would be used by another non-FHIR system - for example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records have to be tracked through an entire system.
   */
  identifier?: Identifier[];
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept: CodeableConcept;
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference: Reference;
  /**
   * Extra information about the prescription that could not be conveyed by the other attributes.
   */
  note?: string;
  _note?: Element;
  /**
   * A link to a resource representing the person to whom the medication will be given.
   */
  patient?: Reference;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber?: Reference;
  /**
   * A link to a resource representing an earlier order or prescription that this order supersedes.
   */
  priorPrescription?: Reference;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonCodeableConcept?: CodeableConcept;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonReference?: Reference;
  /**
   * The reason why the prescription was stopped, if it was.
   */
  reasonEnded?: CodeableConcept;
  /**
   * A code specifying the state of the order.  Generally this will be active or completed state.
   */
  status?: string;
  _status?: Element;
  /**
   * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
   */
  substitution?: MedicationOrderSubstitution;
}
/**
 * Code Values for the MedicationOrder.status field
 */
export enum MedicationOrderStatusCodes {
  ACTIVE = "active",
  ON_HOLD = "on-hold",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  STOPPED = "stopped",
  DRAFT = "draft",
}
/**
 * Indicates how the medication is/was used by the patient.
 */
export interface MedicationStatementDosage extends BackboneElement {
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededBoolean?: boolean;
  _asNeededBoolean?: Element;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededCodeableConcept?: CodeableConcept;
  /**
   * The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
   */
  maxDosePerPeriod?: Ratio;
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
   */
  method?: CodeableConcept;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  quantityQuantity?: Quantity;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  quantityRange?: Range;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
   */
  route?: CodeableConcept;
  /**
   * A coded specification of or a reference to the anatomic site where the medication first enters the body.
   */
  siteCodeableConcept?: CodeableConcept;
  /**
   * A coded specification of or a reference to the anatomic site where the medication first enters the body.
   */
  siteReference?: Reference;
  /**
   * Free text dosage information as reported about a patient's medication use. When coded dosage information is present, the free text may still be present for display to humans.
   */
  text?: string;
  _text?: Element;
  /**
   * The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timing?: Timing;
}
/**
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains   The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
 */
export interface MedicationStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'MedicationStatement'
  /**
   * The date when the medication statement was asserted by the information source.
   */
  dateAsserted?: string;
  _dateAsserted?: Element;
  /**
   * Indicates how the medication is/was used by the patient.
   */
  dosage?: MedicationStatementDosage[];
  /**
   * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
   */
  effectiveDateTime?: string;
  _effectiveDateTime?: Element;
  /**
   * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
   */
  effectivePeriod?: Period;
  /**
   * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
   */
  identifier?: Identifier[];
  /**
   * The person who provided the information about the taking of this medication.
   */
  informationSource?: Reference;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept: CodeableConcept;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference: Reference;
  /**
   * Provides extra information about the medication statement that is not conveyed by the other attributes.
   */
  note?: string;
  _note?: Element;
  /**
   * The person or animal who is/was taking the medication.
   */
  patient: Reference;
  /**
   * A reason for why the medication is being/was taken.
   */
  reasonForUseCodeableConcept?: CodeableConcept;
  /**
   * A reason for why the medication is being/was taken.
   */
  reasonForUseReference?: Reference;
  /**
   * A code indicating why the medication was not taken.
   */
  reasonNotTaken?: CodeableConcept[];
  /**
   * A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.
   */
  status: string;
  _status?: Element;
  /**
   * Allows linking the MedicationStatement to the underlying MedicationOrder, or to other information that supports the MedicationStatement.
   */
  supportingInformation?: Reference[];
  /**
   * Set this to true if the record is saying that the medication was NOT taken.
   */
  wasNotTaken?: boolean;
  _wasNotTaken?: Element;
}
/**
 * Code Values for the MedicationStatement.status field
 */
export enum MedicationStatementStatusCodes {
  ACTIVE = "active",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
  INTENDED = "intended",
}
/**
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export interface MessageHeaderResponse extends BackboneElement {
  /**
   * Allows the sender of the acknowledge message to know if the request was successful or if action is needed.
   */
  code: string;
  _code?: Element;
  /**
   * Allows the sender of the message to determine what the specific issues are.
   */
  details?: Reference;
  /**
   * Allows receiver to know what message is being responded to.
   */
  identifier: string;
  _identifier?: Element;
}
/**
 * Code Values for the MessageHeader.response.code field
 */
export enum MessageHeaderResponseCodeCodes {
  OK = "ok",
  TRANSIENT_ERROR = "transient-error",
  FATAL_ERROR = "fatal-error",
}
/**
 * Allows replies, supports audit.
 */
export interface MessageHeaderSource extends BackboneElement {
  /**
   * Allows escalation of technical issues.
   */
  contact?: ContactPoint;
  /**
   * Identifies where to send responses, may influence security permissions.
   */
  endpoint: string;
  _endpoint?: Element;
  /**
   * May be used to support audit.
   */
  name?: string;
  _name?: Element;
  /**
   * Supports audit and possibly interface engine behavior.
   */
  software?: string;
  _software?: Element;
  /**
   * Supports audit and possibly interface engine behavior.
   */
  version?: string;
  _version?: Element;
}
/**
 * Indicates where message is to be sent for routing purposes.  Allows verification of "am I the intended recipient".
 */
export interface MessageHeaderDestination extends BackboneElement {
  /**
   * Identifies where to route the message.
   */
  endpoint: string;
  _endpoint?: Element;
  /**
   * May be used for routing of response and/or to support audit.
   */
  name?: string;
  _name?: Element;
  /**
   * Supports multi-hop routing.
   */
  target?: Reference;
}
/**
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export interface MessageHeader extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'MessageHeader'
  /**
   * Need to know for audit/traceback requirements and possibly for authorization.
   */
  author?: Reference;
  /**
   * Every message event is about actual data, a single resource, that is identified in the definition of the event, and perhaps some or all linked resources.
   */
  data?: Reference[];
  /**
   * Indicates where message is to be sent for routing purposes.  Allows verification of "am I the intended recipient".
   */
  destination?: MessageHeaderDestination[];
  /**
   * Need to know for audit/traceback requirements and possibly for authorization.
   */
  enterer?: Reference;
  /**
   * Drives the behavior associated with this message.
   */
  event: Coding;
  /**
   * Need to be able to track why resources are being changed and report in the audit log/history of the resource.  May affect authorization.
   */
  reason?: CodeableConcept;
  /**
   * Allows routing beyond just the application level.
   */
  receiver?: Reference;
  /**
   * Information about the message that this message is a response to.  Only present if this message is a response.
   */
  response?: MessageHeaderResponse;
  /**
   * Need to know for audit/traceback requirements and possibly for authorization.
   */
  responsible?: Reference;
  /**
   * Allows replies, supports audit.
   */
  source: MessageHeaderSource;
  /**
   * Allows limited detection of out-of-order and delayed transmission.  Also supports audit.
   */
  timestamp: string;
  _timestamp?: Element;
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface NamingSystemContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the naming system.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * Indicates how the system may be identified when referenced in electronic exchange.
 */
export interface NamingSystemUniqueId extends BackboneElement {
  /**
   * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
   */
  period?: Period;
  /**
   * Indicates whether this identifier is the "preferred" identifier of this type.
   */
  preferred?: boolean;
  _preferred?: Element;
  /**
   * Identifies the unique identifier scheme used for this particular identifier.
   */
  type: string;
  _type?: Element;
  /**
   * The string that should be sent over the wire to identify the code system or identifier system.
   */
  value: string;
  _value?: Element;
}
/**
 * Code Values for the NamingSystem.uniqueId.type field
 */
export enum NamingSystemUniqueIdTypeCodes {
  OID = "oid",
  UUID = "uuid",
  URI = "uri",
  OTHER = "other",
}
/**
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export interface NamingSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'NamingSystem'
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: NamingSystemContact[];
  /**
   * The date  (and optionally time) when the system was registered or published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the registration changes.
   */
  date: string;
  _date?: Element;
  /**
   * Details about what the namespace identifies including scope, granularity, version labeling, etc.
   */
  description?: string;
  _description?: Element;
  /**
   * Indicates the purpose for the naming system - what kinds of things does it make unique?
   */
  kind: string;
  _kind?: Element;
  /**
   * The descriptive name of this particular identifier type or code system.
   */
  name: string;
  _name?: Element;
  /**
   * Helps establish the "authority/credibility" of the naming system.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * For naming systems that are retired, indicates the naming system that should be used in their place (if any).
   */
  replacedBy?: Reference;
  /**
   * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
   */
  responsible?: string;
  _responsible?: Element;
  /**
   * Indicates whether the naming system is "ready for use" or not.
   */
  status: string;
  _status?: Element;
  /**
   * Categorizes a naming system for easier search by grouping related naming systems.
   */
  type?: CodeableConcept;
  /**
   * Indicates how the system may be identified when referenced in electronic exchange.
   */
  uniqueId: NamingSystemUniqueId[];
  /**
   * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
   */
  usage?: string;
  _usage?: Element;
  /**
   * Assist in searching for appropriate content.
   */
  useContext?: CodeableConcept[];
}
/**
 * Code Values for the NamingSystem.kind field
 */
export enum NamingSystemKindCodes {
  CODESYSTEM = "codesystem",
  IDENTIFIER = "identifier",
  ROOT = "root",
}
/**
 * Code Values for the NamingSystem.status field
 */
export enum NamingSystemStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Class that defines the quantity and type of nutrient modifications required for the oral diet.
 */
export interface NutritionOrderOralDietNutrient extends BackboneElement {
  /**
   * The quantity of the specified nutrient to include in diet.
   */
  amount?: Quantity;
  /**
   * The nutrient that is being modified such as carbohydrate or sodium.
   */
  modifier?: CodeableConcept;
}
/**
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export interface NutritionOrderOralDietTexture extends BackboneElement {
  /**
   * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
   */
  foodType?: CodeableConcept;
  /**
   * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
   */
  modifier?: CodeableConcept;
}
/**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export interface NutritionOrderOralDiet extends BackboneElement {
  /**
   * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
   */
  fluidConsistencyType?: CodeableConcept[];
  /**
   * Free text or additional instructions or information pertaining to the oral diet.
   */
  instruction?: string;
  _instruction?: Element;
  /**
   * Class that defines the quantity and type of nutrient modifications required for the oral diet.
   */
  nutrient?: NutritionOrderOralDietNutrient[];
  /**
   * The time period and frequency at which the diet should be given.
   */
  schedule?: Timing[];
  /**
   * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
   */
  texture?: NutritionOrderOralDietTexture[];
  /**
   * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
   */
  type?: CodeableConcept[];
}
/**
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export interface NutritionOrderSupplement extends BackboneElement {
  /**
   * Free text or additional instructions or information pertaining to the oral supplement.
   */
  instruction?: string;
  _instruction?: Element;
  /**
   * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
   */
  productName?: string;
  _productName?: Element;
  /**
   * The amount of the nutritional supplement to be given.
   */
  quantity?: Quantity;
  /**
   * The time period and frequency at which the supplement(s) should be given.
   */
  schedule?: Timing[];
  /**
   * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
   */
  type?: CodeableConcept;
}
/**
 * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
 */
export interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {
  /**
   * The volume of formula to provide to the patient per the specified administration schedule.
   */
  quantity?: Quantity;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   */
  rateQuantity?: Quantity;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   */
  rateRatio?: Ratio;
  /**
   * The time period and frequency at which the enteral formula should be delivered to the patient.
   */
  schedule?: Timing;
}
/**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export interface NutritionOrderEnteralFormula extends BackboneElement {
  /**
   * The product or brand name of the type of modular component to be added to the formula.
   */
  additiveProductName?: string;
  _additiveProductName?: Element;
  /**
   * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
   */
  additiveType?: CodeableConcept;
  /**
   * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
   */
  administration?: NutritionOrderEnteralFormulaAdministration[];
  /**
   * Free text formula administration, feeding instructions or additional instructions or information.
   */
  administrationInstruction?: string;
  _administrationInstruction?: Element;
  /**
   * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
   */
  baseFormulaProductName?: string;
  _baseFormulaProductName?: Element;
  /**
   * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
   */
  baseFormulaType?: CodeableConcept;
  /**
   * The amount of energy (Calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 Calories per fluid ounce or an adult may require an enteral formula that provides 1.5 Calorie/mL.
   */
  caloricDensity?: Quantity;
  /**
   * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
   */
  maxVolumeToDeliver?: Quantity;
  /**
   * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
   */
  routeofAdministration?: CodeableConcept;
}
/**
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 */
export interface NutritionOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'NutritionOrder'
  /**
   * A link to a record of allergies or intolerances  which should be included in the nutrition order.
   */
  allergyIntolerance?: Reference[];
  /**
   * The date and time that this nutrition order was requested.
   */
  dateTime: string;
  _dateTime?: Element;
  /**
   * An encounter that provides additional information about the healthcare context in which this request is made.
   */
  encounter?: Reference;
  /**
   * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
   */
  enteralFormula?: NutritionOrderEnteralFormula;
  /**
   * This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced allergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   */
  excludeFoodModifier?: CodeableConcept[];
  /**
   * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   */
  foodPreferenceModifier?: CodeableConcept[];
  /**
   * Identifiers assigned to this order by the order sender or by the order receiver.
   */
  identifier?: Identifier[];
  /**
   * Diet given orally in contrast to enteral (tube) feeding.
   */
  oralDiet?: NutritionOrderOralDiet;
  /**
   * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
   */
  orderer?: Reference;
  /**
   * The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
   */
  patient: Reference;
  /**
   * The workflow status of the nutrition order/request.
   */
  status?: string;
  _status?: Element;
  /**
   * Oral nutritional products given in order to add further nutritional value to the patient's diet.
   */
  supplement?: NutritionOrderSupplement[];
}
/**
 * Code Values for the NutritionOrder.status field
 */
export enum NutritionOrderStatusCodes {
  PROPOSED = "proposed",
  DRAFT = "draft",
  PLANNED = "planned",
  REQUESTED = "requested",
  ACTIVE = "active",
  ON_HOLD = "on-hold",
  COMPLETED = "completed",
  CANCELLED = "cancelled",
}
/**
 * Knowing what values are considered "normal" can help evaluate the significance of a particular result. Need to be able to provide multiple reference ranges for different contexts.
 */
export interface ObservationReferenceRange extends BackboneElement {
  /**
   * Some analytes vary greatly over age.
   */
  age?: Range;
  /**
   * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
   */
  high?: Quantity;
  /**
   * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
   */
  low?: Quantity;
  /**
   * Need to be able to say what kind of reference range this is - normal, recommended, therapeutic, or perhaps what state this reference range applies to (i.e. age, hormonal cycles, etc.).
   */
  meaning?: CodeableConcept;
  /**
   * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of 'normals'.
   */
  text?: string;
  _text?: Element;
}
/**
 * Normally, an observation will have either a value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and a set of related observations or sometimes QuestionnaireResponse  from which the measure is derived.
 */
export interface ObservationRelated extends BackboneElement {
  /**
   * A reference to the observation or [[[QuestionnaireResponse]]] resource that is related to this observation.
   */
  target: Reference;
  /**
   * A relationship type SHOULD be provided.
   */
  type?: string;
  _type?: Element;
}
/**
 * Code Values for the Observation.related.type field
 */
export enum ObservationRelatedTypeCodes {
  HAS_MEMBER = "has-member",
  DERIVED_FROM = "derived-from",
  SEQUEL_TO = "sequel-to",
  REPLACES = "replaces",
  QUALIFIED_BY = "qualified-by",
  INTERFERED_BY = "interfered-by",
}
/**
 * Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.
 */
export interface ObservationComponent extends BackboneElement {
  /**
   * Knowing what kind of observation is being made is essential to understanding the observation.
   */
  code: CodeableConcept;
  /**
   * For many results it is necessary to handle exceptional values in measurements.
   */
  dataAbsentReason?: CodeableConcept;
  /**
   * Knowing what values are considered "normal" can help evaluate the significance of a particular result. Need to be able to provide multiple reference ranges for different contexts.
   */
  ReferenceRange?: ObservationReferenceRange[];
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueQuantity?: Quantity;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueCodeableConcept?: CodeableConcept;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueString?: string;
  _valueString?: Element;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueRange?: Range;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueRatio?: Ratio;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueSampledData?: SampledData;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueAttachment?: Attachment;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueTime?: string;
  _valueTime?: Element;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueDateTime?: string;
  _valueDateTime?: Element;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valuePeriod?: Period;
}
/**
 * Measurements and simple assertions made about a patient, device or other subject.
 */
export interface Observation extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Observation'
  /**
   * Knowing where the observation is made is important for tracking if multiple sites are possible.
   */
  bodySite?: CodeableConcept;
  /**
   * A code that classifies the general type of observation being made.  This is used  for searching, sorting and display purposes.
   */
  category?: CodeableConcept;
  /**
   * Knowing what kind of observation is being made is essential to understanding the observation.
   */
  code: CodeableConcept;
  /**
   * Need to be able to provide free text additional information.
   */
  comments?: string;
  _comments?: Element;
  /**
   * Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.
   */
  component?: ObservationComponent[];
  /**
   * For many results it is necessary to handle exceptional values in measurements.
   */
  dataAbsentReason?: CodeableConcept;
  /**
   * The device used to generate the observation data.
   */
  device?: Reference;
  /**
   * Knowing when an observation was deemed true is important to its relevance as well as determining trends.
   */
  effectiveDateTime?: string;
  _effectiveDateTime?: Element;
  /**
   * Knowing when an observation was deemed true is important to its relevance as well as determining trends.
   */
  effectivePeriod?: Period;
  /**
   * For some observations it may be important to know the link between an observation and a particular encounter.
   */
  encounter?: Reference;
  /**
   * Allows observations to be distinguished and referenced.
   */
  identifier?: Identifier[];
  /**
   * For some results, particularly numeric results, an interpretation is necessary to fully understand the significance of a result.
   */
  interpretation?: CodeableConcept;
  /**
   * The date and time this observation was made available to providers, typically after the results have been reviewed and verified.
   */
  issued?: string;
  _issued?: Element;
  /**
   * In some cases, method can impact results and is thus used for determining whether results can be compared or determining significance of results.
   */
  method?: CodeableConcept;
  /**
   * May give a degree of confidence in the observation and also indicates where follow-up questions should be directed.
   */
  performer?: Reference[];
  /**
   * Knowing what values are considered "normal" can help evaluate the significance of a particular result. Need to be able to provide multiple reference ranges for different contexts.
   */
  referenceRange?: ObservationReferenceRange[];
  /**
   * Normally, an observation will have either a value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and a set of related observations or sometimes QuestionnaireResponse  from which the measure is derived.
   */
  related?: ObservationRelated[];
  /**
   * The specimen that was used when this observation was made.
   */
  specimen?: Reference;
  /**
   * Need to track the status of individual results. Some results are finalized before the whole report is finalized.
   */
  status: string;
  _status?: Element;
  /**
   * Observations have no value if you don't know who or what they're about.
   */
  subject?: Reference;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueQuantity?: Quantity;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueCodeableConcept?: CodeableConcept;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueString?: string;
  _valueString?: Element;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueRange?: Range;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueRatio?: Ratio;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueSampledData?: SampledData;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueAttachment?: Attachment;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueTime?: string;
  _valueTime?: Element;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valueDateTime?: string;
  _valueDateTime?: Element;
  /**
   * An observation exists to have a value, though it may not if it is in error, or it represents a group of observations.
   */
  valuePeriod?: Period;
}
/**
 * Code Values for the Observation.status field
 */
export enum ObservationStatusCodes {
  REGISTERED = "registered",
  PRELIMINARY = "preliminary",
  FINAL = "final",
  AMENDED = "amended",
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface OperationDefinitionContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the operation definition.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
export interface OperationDefinitionParameterBinding extends BackboneElement {
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   */
  strength: string;
  _strength?: Element;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetUri: string;
  _valueSetUri?: Element;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetReference: Reference;
}
/**
 * Code Values for the OperationDefinition.parameter.binding.strength field
 */
export enum OperationDefinitionParameterBindingStrengthCodes {
  REQUIRED = "required",
  EXTENSIBLE = "extensible",
  PREFERRED = "preferred",
  EXAMPLE = "example",
}
/**
 * The parameters for the operation/query.
 */
export interface OperationDefinitionParameter extends BackboneElement {
  /**
   * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
   */
  binding?: OperationDefinitionParameterBinding;
  /**
   * Describes the meaning or use of this parameter.
   */
  documentation?: string;
  _documentation?: Element;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max: string;
  _max?: Element;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min: number;
  /**
   * The name of used to identify the parameter.
   */
  name: string;
  _name?: Element;
  /**
   * The parts of a Tuple Parameter.
   */
  Part?: OperationDefinitionParameter[];
  /**
   * A profile the specifies the rules that this parameter must conform to.
   */
  profile?: Reference;
  /**
   * The type for this parameter.
   */
  type?: string;
  _type?: Element;
  /**
   * Whether this is an input or an output parameter.
   */
  use: string;
  _use?: Element;
}
/**
 * Code Values for the OperationDefinition.parameter.use field
 */
export enum OperationDefinitionParameterUseCodes {
  IN = "in",
  OUT = "out",
}
/**
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
export interface OperationDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'OperationDefinition'
  /**
   * Indicates that this operation definition is a constraining profile on the base.
   */
  base?: Reference;
  /**
   * The name used to invoke the operation.
   */
  code: string;
  _code?: Element;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: OperationDefinitionContact[];
  /**
   * The date this version of the operation definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the Operation Definition changes.
   */
  date?: string;
  _date?: Element;
  /**
   * A free text natural language description of the profile and its use.
   */
  description?: string;
  _description?: Element;
  /**
   * Allows filtering of profiles that are appropriate for use vs. not.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST.
   */
  idempotent?: boolean;
  _idempotent?: Element;
  /**
   * Indicates whether this operation can be invoked on a particular instance of one of the given types.
   */
  instance: boolean;
  _instance?: Element;
  /**
   * Whether this is an operation or a named query.
   */
  kind: string;
  _kind?: Element;
  /**
   * A free text natural language name identifying the operation.
   */
  name: string;
  _name?: Element;
  /**
   * Additional information about how to use this operation or named query.
   */
  notes?: string;
  _notes?: Element;
  /**
   * The parameters for the operation/query.
   */
  parameter?: OperationDefinitionParameter[];
  /**
   * Helps establish the "authority/credibility" of the operation definition.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Explains why this operation definition is needed and why it's been constrained as it has.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * Allows filtering of profiles that are appropriate for use vs. not.
   */
  status: string;
  _status?: Element;
  /**
   * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
   */
  system: boolean;
  _system?: Element;
  /**
   * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a resource type for the context).
   */
  type?: string[];
  _type?: Element;
  /**
   * An absolute URL that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published.
   */
  url?: string;
  _url?: Element;
  /**
   * There may be multiple resource versions of the profile that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the OperationDefinition.kind field
 */
export enum OperationDefinitionKindCodes {
  OPERATION = "operation",
  QUERY = "query",
}
/**
 * Code Values for the OperationDefinition.status field
 */
export enum OperationDefinitionStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * An error, warning or information message that results from a system action.
 */
export interface OperationOutcomeIssue extends BackboneElement {
  /**
   * Expresses the issue in a human and computer-friendly way, allowing the requesting system to behave differently based on the type of issue.
   */
  code: string;
  _code?: Element;
  /**
   * Additional details about the error. This may be a text description of the error, or a system code that identifies the error.
   */
  details?: CodeableConcept;
  /**
   * Additional diagnostic information about the issue.  Typically, this may be a description of how a value is erroneous, or a stack dump to help trace the issue.
   */
  diagnostics?: string;
  _diagnostics?: Element;
  /**
   * Allows systems to highlight or otherwise guide users to elements implicated in issues to allow them to be fixed more easily.
   */
  location?: string[];
  _location?: Element;
  /**
   * Indicates how relevant the issue is to the overall success of the action.
   */
  severity: string;
  _severity?: Element;
}
/**
 * Code Values for the OperationOutcome.issue.severity field
 */
export enum OperationOutcomeIssueSeverityCodes {
  FATAL = "fatal",
  ERROR = "error",
  WARNING = "warning",
  INFORMATION = "information",
}
/**
 * A collection of error, warning or information messages that result from a system action.
 */
export interface OperationOutcome extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'OperationOutcome'
  /**
   * An error, warning or information message that results from a system action.
   */
  issue: OperationOutcomeIssue[];
}
/**
 * When order should be fulfilled.
 */
export interface OrderWhen extends BackboneElement {
  /**
   * Code specifies when request should be done. The code may simply be a priority code.
   */
  code?: CodeableConcept;
  /**
   * A formal schedule.
   */
  schedule?: Timing;
}
/**
 * A request to perform an action.
 */
export interface Order extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Order'
  /**
   * When the order was made.
   */
  date?: string;
  _date?: Element;
  /**
   * What action is being ordered.
   */
  detail: Reference[];
  /**
   * Identifiers assigned to this order by the orderer or by the receiver.
   */
  identifier?: Identifier[];
  /**
   * Text - why the order was made.
   */
  reasonCodeableConcept?: CodeableConcept;
  /**
   * Text - why the order was made.
   */
  reasonReference?: Reference;
  /**
   * Who initiated the order.
   */
  source?: Reference;
  /**
   * Patient this order is about.
   */
  subject?: Reference;
  /**
   * Who is intended to fulfill the order.
   */
  target?: Reference;
  /**
   * When order should be fulfilled.
   */
  when?: OrderWhen;
}
/**
 * A response to an order.
 */
export interface OrderResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'OrderResponse'
  /**
   * The date and time at which this order response was made (created/posted).
   */
  date?: string;
  _date?: Element;
  /**
   * Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
   */
  description?: string;
  _description?: Element;
  /**
   * Links to resources that provide details of the outcome of performing the order; e.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.
   */
  fulfillment?: Reference[];
  /**
   * Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
   */
  identifier?: Identifier[];
  /**
   * What this response says about the status of the original order.
   */
  orderStatus: string;
  _orderStatus?: Element;
  /**
   * A reference to the order that this is in response to.
   */
  request: Reference;
  /**
   * The person, organization, or device credited with making the response.
   */
  who?: Reference;
}
/**
 * Code Values for the OrderResponse.orderStatus field
 */
export enum OrderResponseOrderStatusCodes {
  PENDING = "pending",
  REVIEW = "review",
  REJECTED = "rejected",
  ERROR = "error",
  ACCEPTED = "accepted",
  CANCELLED = "cancelled",
  REPLACED = "replaced",
  ABORTED = "aborted",
  COMPLETED = "completed",
}
/**
 * Need to keep track of assigned contact points within bigger organization.
 */
export interface OrganizationContact extends BackboneElement {
  /**
   * May need to keep track of a contact party's address for contacting, billing or reporting requirements.
   */
  address?: Address;
  /**
   * Need to be able to track the person by name.
   */
  name?: HumanName;
  /**
   * Need to distinguish between multiple contact persons.
   */
  purpose?: CodeableConcept;
  /**
   * People have (primary) ways to contact them in some way such as phone, email.
   */
  telecom?: ContactPoint[];
}
/**
 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
 */
export interface Organization extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Organization'
  /**
   * Need a flag to indicate a record is no longer to be used and should generally be hidden for the user in the UI.
   */
  active?: boolean;
  _active?: Element;
  /**
   * May need to keep track of the organization's addresses for contacting, billing or reporting requirements.
   */
  address?: Address[];
  /**
   * Need to keep track of assigned contact points within bigger organization.
   */
  contact?: OrganizationContact[];
  /**
   * Organizations are known by a variety of ids. Some institutions maintain several, and most collect identifiers for exchange with other organizations concerning the organization.
   */
  identifier?: Identifier[];
  /**
   * Need to use the name as the label of the organization.
   */
  name?: string;
  _name?: Element;
  /**
   * Need to be able to track the hierarchy of organizations within an organization.
   */
  partOf?: Reference;
  /**
   * Human contact for the organization.
   */
  telecom?: ContactPoint[];
  /**
   * Need to be able to track the kind of organization that this is - different organization types have different uses.
   */
  type?: CodeableConcept;
}
/**
 * A parameter passed to or received from the operation.
 */
export interface ParametersParameter extends BackboneElement {
  /**
   * The name of the parameter (reference to the operation definition).
   */
  name: string;
  _name?: Element;
  /**
   * A named part of a parameter. In many implementation context, a set of named parts is known as a "Tuple".
   */
  Part?: OperationDefinitionParameter[];
  /**
   * If the parameter is a whole resource.
   */
  resource?: Resource;
  /**
   * If the parameter is a data type.
   */
  valueBoolean?: boolean;
  _valueBoolean?: Element;
  /**
   * If the parameter is a data type.
   */
  valueInteger?: number;
  /**
   * If the parameter is a data type.
   */
  valueDecimal?: number;
  /**
   * If the parameter is a data type.
   */
  valueBase64Binary?: string;
  _valueBase64Binary?: Element;
  /**
   * If the parameter is a data type.
   */
  valueInstant?: string;
  _valueInstant?: Element;
  /**
   * If the parameter is a data type.
   */
  valueString?: string;
  _valueString?: Element;
  /**
   * If the parameter is a data type.
   */
  valueUri?: string;
  _valueUri?: Element;
  /**
   * If the parameter is a data type.
   */
  valueDate?: string;
  _valueDate?: Element;
  /**
   * If the parameter is a data type.
   */
  valueDateTime?: string;
  _valueDateTime?: Element;
  /**
   * If the parameter is a data type.
   */
  valueTime?: string;
  _valueTime?: Element;
  /**
   * If the parameter is a data type.
   */
  valueCode?: string;
  _valueCode?: Element;
  /**
   * If the parameter is a data type.
   */
  valueOid?: string;
  _valueOid?: Element;
  /**
   * If the parameter is a data type.
   */
  valueId?: string;
  _valueId?: Element;
  /**
   * If the parameter is a data type.
   */
  valueUnsignedInt?: number;
  /**
   * If the parameter is a data type.
   */
  valuePositiveInt?: number;
  /**
   * If the parameter is a data type.
   */
  valueMarkdown?: string;
  _valueMarkdown?: Element;
  /**
   * If the parameter is a data type.
   */
  valueAnnotation?: Annotation;
  /**
   * If the parameter is a data type.
   */
  valueAttachment?: Attachment;
  /**
   * If the parameter is a data type.
   */
  valueIdentifier?: Identifier;
  /**
   * If the parameter is a data type.
   */
  valueCodeableConcept?: CodeableConcept;
  /**
   * If the parameter is a data type.
   */
  valueCoding?: Coding;
  /**
   * If the parameter is a data type.
   */
  valueQuantity?: Quantity;
  /**
   * If the parameter is a data type.
   */
  valueRange?: Range;
  /**
   * If the parameter is a data type.
   */
  valuePeriod?: Period;
  /**
   * If the parameter is a data type.
   */
  valueRatio?: Ratio;
  /**
   * If the parameter is a data type.
   */
  valueSampledData?: SampledData;
  /**
   * If the parameter is a data type.
   */
  valueSignature?: Signature;
  /**
   * If the parameter is a data type.
   */
  valueHumanName?: HumanName;
  /**
   * If the parameter is a data type.
   */
  valueAddress?: Address;
  /**
   * If the parameter is a data type.
   */
  valueContactPoint?: ContactPoint;
  /**
   * If the parameter is a data type.
   */
  valueTiming?: Timing;
  /**
   * If the parameter is a data type.
   */
  valueReference?: Reference;
  /**
   * If the parameter is a data type.
   */
  valueMeta?: Meta;
}
/**
 * This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
 */
export interface Parameters extends Resource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Parameters'
  /**
   * A parameter passed to or received from the operation.
   */
  parameter?: ParametersParameter[];
}
/**
 * Need to track people you can contact about the patient.
 */
export interface PatientContact extends BackboneElement {
  /**
   * Need to keep track where the contact person can be contacted per postal mail or visited.
   */
  address?: Address;
  /**
   * Needed to address the person correctly.
   */
  gender?: string;
  _gender?: Element;
  /**
   * Contact persons need to be identified by name, but it is uncommon to need details about multiple other names for that contact person.
   */
  name?: HumanName;
  /**
   * For guardians or business related contacts, the organization is relevant.
   */
  organization?: Reference;
  /**
   * The period during which this contact person or organization is valid to be contacted relating to this patient.
   */
  period?: Period;
  /**
   * Used to determine which contact person is the most relevant to approach, depending on circumstances.
   */
  relationship?: CodeableConcept[];
  /**
   * People have (primary) ways to contact them in some way such as phone, email.
   */
  telecom?: ContactPoint[];
}
/**
 * Code Values for the Patient.contact.gender field
 */
export enum PatientContactGenderCodes {
  MALE = "male",
  FEMALE = "female",
  OTHER = "other",
  UNKNOWN = "unknown",
}
/**
 * Many clinical systems are extended to care for animal patients as well as human.
 */
export interface PatientAnimal extends BackboneElement {
  /**
   * May need to know the specific kind within the species.
   */
  breed?: CodeableConcept;
  /**
   * Gender status can affect housing and animal behavior.
   */
  genderStatus?: CodeableConcept;
  /**
   * Need to know what kind of animal.
   */
  species: CodeableConcept;
}
/**
 * If a patient does not speak the local language, interpreters may be required, so languages spoken and proficiency is an important things to keep track of both for patient and other persons of interest.
 */
export interface PatientCommunication extends BackboneElement {
  /**
   * Most systems in multilingual countries will want to convey language. Not all systems actually need the regional dialect.
   */
  language: CodeableConcept;
  /**
   * People that master multiple languages up to certain level may prefer one or more, i.e. feel more confident in communicating in a particular language making other languages sort of a fall back method.
   */
  preferred?: boolean;
  _preferred?: Element;
}
/**
 * There are multiple usecases:   * Duplicate patient records due to the clerical errors associated with the difficulties of identifying humans consistently, and * Distribution of patient information across multiple servers.
 */
export interface PatientLink extends BackboneElement {
  /**
   * The other patient resource that the link refers to.
   */
  other: Reference;
  /**
   * The type of link between this patient resource and another patient resource.
   */
  type: string;
  _type?: Element;
}
/**
 * Code Values for the Patient.link.type field
 */
export enum PatientLinkTypeCodes {
  REPLACE = "replace",
  REFER = "refer",
  SEEALSO = "seealso",
}
/**
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
export interface Patient extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Patient'
  /**
   * Need to be able to mark a patient record as not to be used because it was created in error.
   */
  active?: boolean;
  _active?: Element;
  /**
   * May need to keep track of patient addresses for contacting, billing or reporting requirements and also to help with identification.
   */
  address?: Address[];
  /**
   * Many clinical systems are extended to care for animal patients as well as human.
   */
  animal?: PatientAnimal;
  /**
   * Age of the individual drives many clinical processes.
   */
  birthDate?: string;
  _birthDate?: Element;
  /**
   * Patient's nominated care provider.
   */
  careProvider?: Reference[];
  /**
   * If a patient does not speak the local language, interpreters may be required, so languages spoken and proficiency is an important things to keep track of both for patient and other persons of interest.
   */
  communication?: PatientCommunication[];
  /**
   * Need to track people you can contact about the patient.
   */
  contact?: PatientContact[];
  /**
   * The fact that a patient is deceased influences the clinical process. Also, in human communication and relation management it is necessary to know whether the person is alive.
   */
  deceasedBoolean?: boolean;
  _deceasedBoolean?: Element;
  /**
   * The fact that a patient is deceased influences the clinical process. Also, in human communication and relation management it is necessary to know whether the person is alive.
   */
  deceasedDateTime?: string;
  _deceasedDateTime?: Element;
  /**
   * Needed for identification of the individual, in combination with (at least) name and birth date. Gender of individual drives many clinical processes.
   */
  gender?: string;
  _gender?: Element;
  /**
   * Patients are almost always assigned specific numerical identifiers.
   */
  identifier?: Identifier[];
  /**
   * There are multiple usecases:   * Duplicate patient records due to the clerical errors associated with the difficulties of identifying humans consistently, and * Distribution of patient information across multiple servers.
   */
  link?: PatientLink[];
  /**
   * Need to know who recognizes this patient record, manages and updates it.
   */
  managingOrganization?: Reference;
  /**
   * Most, if not all systems capture it.
   */
  maritalStatus?: CodeableConcept;
  /**
   * For disambiguation of multiple-birth children, especially relevant where the care provider doesn't meet the patient, such as labs.
   */
  multipleBirthBoolean?: boolean;
  _multipleBirthBoolean?: Element;
  /**
   * For disambiguation of multiple-birth children, especially relevant where the care provider doesn't meet the patient, such as labs.
   */
  multipleBirthInteger?: number;
  /**
   * Need to be able to track the patient by multiple names. Examples are your official name and a partner name.
   */
  name?: HumanName[];
  /**
   * Many EHR systems have the capability to capture an image of the patient. Fits with newer social media usage too.
   */
  photo?: Attachment[];
  /**
   * People have (primary) ways to contact them in some way such as phone, email.
   */
  telecom?: ContactPoint[];
}
/**
 * Code Values for the Patient.gender field
 */
export enum PatientGenderCodes {
  MALE = "male",
  FEMALE = "female",
  OTHER = "other",
  UNKNOWN = "unknown",
}
/**
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export interface PaymentNotice extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'PaymentNotice'
  /**
   * The date when this resource was created.
   */
  created?: string;
  _created?: Element;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * The payment status, typically paid: payment sent, cleared: payment received.
   */
  paymentStatus: Coding;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference;
  /**
   * Reference of resource to reverse.
   */
  request?: Reference;
  /**
   * Reference of response to resource to reverse.
   */
  response?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
  /**
   * The Insurer who is target  of the request.
   */
  target?: Reference;
}
/**
 * List of individual settlement amounts and the corresponding transaction.
 */
export interface PaymentReconciliationDetail extends BackboneElement {
  /**
   * Amount paid for this detail.
   */
  amount?: Quantity;
  /**
   * The date of the invoice or financial resource.
   */
  date?: string;
  _date?: Element;
  /**
   * The organization which is receiving the payment.
   */
  payee?: Reference;
  /**
   * The claim or financial resource.
   */
  request?: Reference;
  /**
   * The claim response resource.
   */
  responce?: Reference;
  /**
   * The Organization which submitted the invoice or financial transaction.
   */
  submitter?: Reference;
  /**
   * Code to indicate the nature of the payment, adjustment, funds advance, etc.
   */
  type: Coding;
}
/**
 * Suite of notes.
 */
export interface PaymentReconciliationNote extends BackboneElement {
  /**
   * The note text.
   */
  text?: string;
  _text?: Element;
  /**
   * The note purpose: Print/Display.
   */
  type?: Coding;
}
/**
 * This resource provides payment details and claim references supporting a bulk payment.
 */
export interface PaymentReconciliation extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'PaymentReconciliation'
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: Element;
  /**
   * List of individual settlement amounts and the corresponding transaction.
   */
  detail?: PaymentReconciliationDetail[];
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string;
  _disposition?: Element;
  /**
   * The form to be used for printing the content.
   */
  form?: Coding;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * Suite of notes.
   */
  note?: PaymentReconciliationNote[];
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * Transaction status: error, complete.
   */
  outcome?: string;
  _outcome?: Element;
  /**
   * The period of time for which payments have been gathered into this bulk payment for settlement.
   */
  period?: Period;
  /**
   * Original request resource reference.
   */
  request?: Reference;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
  /**
   * Total payment amount.
   */
  total: Quantity;
}
/**
 * Code Values for the PaymentReconciliation.outcome field
 */
export enum PaymentReconciliationOutcomeCodes {
  COMPLETE = "complete",
  ERROR = "error",
}
/**
 * Link to a resource that concerns the same actual person.
 */
export interface PersonLink extends BackboneElement {
  /**
   * Level of assurance that this link is actually associated with the target resource.
   */
  assurance?: string;
  _assurance?: Element;
  /**
   * The resource to which this actual person is associated.
   */
  target: Reference;
}
/**
 * Code Values for the Person.link.assurance field
 */
export enum PersonLinkAssuranceCodes {
  LEVEL1 = "level1",
  LEVEL2 = "level2",
  LEVEL3 = "level3",
  LEVEL4 = "level4",
}
/**
 * Demographics and administrative information about a person independent of a specific health-related context.
 */
export interface Person extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Person'
  /**
   * Need to be able to mark a person record as not to be used because it was created in error.
   */
  active?: boolean;
  _active?: Element;
  /**
   * May need to keep track of person's addresses for contacting, billing or reporting requirements and also to help with identification.
   */
  address?: Address[];
  /**
   * Age of person drives many clinical processes, and is often used in performing identification of the person. Times are not included so as to not confuse things with potential timezone issues.
   */
  birthDate?: string;
  _birthDate?: Element;
  /**
   * Needed for identification of the person, in combination with (at least) name and birth date. Gender of person drives many clinical processes.
   */
  gender?: string;
  _gender?: Element;
  /**
   * People are known by a variety of ids. Some institutions maintain several, and most collect identifiers for exchange with other organizations concerning the person. Examples are national person identifier and local identifier.
   */
  identifier?: Identifier[];
  /**
   * Link to a resource that concerns the same actual person.
   */
  link?: PersonLink[];
  /**
   * Need to know who recognizes this person record, manages and updates it.
   */
  managingOrganization?: Reference;
  /**
   * Need to be able to track the person by multiple names. Examples are your official name and a partner name.
   */
  name?: HumanName[];
  /**
   * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
   */
  photo?: Attachment;
  /**
   * People have (primary) ways to contact them in some way such as phone, email.
   */
  telecom?: ContactPoint[];
}
/**
 * Code Values for the Person.gender field
 */
export enum PersonGenderCodes {
  MALE = "male",
  FEMALE = "female",
  OTHER = "other",
  UNKNOWN = "unknown",
}
/**
 * The list of roles/organizations that the practitioner is associated with.
 */
export interface PractitionerPractitionerRole extends BackboneElement {
  /**
   * The list of healthcare services that this worker provides for this role's Organization/Location(s).
   */
  healthcareService?: Reference[];
  /**
   * The location(s) at which this practitioner provides care.
   */
  location?: Reference[];
  /**
   * The organization where the Practitioner performs the roles associated.
   */
  managingOrganization?: Reference;
  /**
   * Even after the agencies is revoked, the fact that it existed must still be recorded.
   */
  period?: Period;
  /**
   * Need to know what authority the practitioner has - what can they do?
   */
  role?: CodeableConcept;
  /**
   * Specific specialty of the practitioner.
   */
  specialty?: CodeableConcept[];
}
/**
 * Qualifications obtained by training and certification.
 */
export interface PractitionerQualification extends BackboneElement {
  /**
   * Coded representation of the qualification.
   */
  code: CodeableConcept;
  /**
   * Often, specific identities are assigned for the qualification.
   */
  identifier?: Identifier[];
  /**
   * Organization that regulates and issues the qualification.
   */
  issuer?: Reference;
  /**
   * Qualifications are often for a limited period of time, and can be revoked.
   */
  period?: Period;
}
/**
 * A person who is directly or indirectly involved in the provisioning of healthcare.
 */
export interface Practitioner extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Practitioner'
  /**
   * Need to be able to mark a practitioner record as not to be used because it was created in error.
   */
  active?: boolean;
  _active?: Element;
  /**
   * Need to keep track where the practitioner can found during work or for directing mail.
   */
  address?: Address[];
  /**
   * Needed for identification.
   */
  birthDate?: string;
  _birthDate?: Element;
  /**
   * Knowing which language a practitioner speaks can help in facilitating communication with patients.
   */
  communication?: CodeableConcept[];
  /**
   * Needed to address the person correctly.
   */
  gender?: string;
  _gender?: Element;
  /**
   * Often, specific identities are assigned for the agent.
   */
  identifier?: Identifier[];
  /**
   * Contact persons need to be identified by name, but it is uncommon to need details about multiple other names for that person.
   */
  name?: HumanName;
  /**
   * Many EHR systems have the capability to capture an image of patients and personnel. Fits with newer social media usage too.
   */
  photo?: Attachment[];
  /**
   * The list of roles/organizations that the practitioner is associated with.
   */
  practitionerRole?: PractitionerPractitionerRole[];
  /**
   * Qualifications obtained by training and certification.
   */
  qualification?: PractitionerQualification[];
  /**
   * Need to know how to reach a practitioner.
   */
  telecom?: ContactPoint[];
}
/**
 * Code Values for the Practitioner.gender field
 */
export enum PractitionerGenderCodes {
  MALE = "male",
  FEMALE = "female",
  OTHER = "other",
  UNKNOWN = "unknown",
}
/**
 * Limited to 'real' people rather than equipment.
 */
export interface ProcedurePerformer extends BackboneElement {
  /**
   * The practitioner who was involved in the procedure.
   */
  actor?: Reference;
  /**
   * For example: surgeon, anaethetist, endoscopist.
   */
  role?: CodeableConcept;
}
/**
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export interface ProcedureFocalDevice extends BackboneElement {
  /**
   * The kind of change that happened to the device during the procedure.
   */
  action?: CodeableConcept;
  /**
   * The device that was manipulated (changed) during the procedure.
   */
  manipulated: Reference;
}
/**
 * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
 */
export interface Procedure extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Procedure'
  /**
   * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
   */
  bodySite?: CodeableConcept[];
  /**
   * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
   */
  category?: CodeableConcept;
  /**
   * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
   */
  code: CodeableConcept;
  /**
   * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
   */
  complication?: CodeableConcept[];
  /**
   * The encounter during which the procedure was performed.
   */
  encounter?: Reference;
  /**
   * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
   */
  focalDevice?: ProcedureFocalDevice[];
  /**
   * If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used.
   */
  followUp?: CodeableConcept[];
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: Identifier[];
  /**
   * Ties a procedure to where the records are likely kept.
   */
  location?: Reference;
  /**
   * Any other notes about the procedure.  E.g. the operative notes.
   */
  notes?: Annotation[];
  /**
   * Set this to true if the record is saying that the procedure was NOT performed.
   */
  notPerformed?: boolean;
  _notPerformed?: Element;
  /**
   * The outcome of the procedure - did it resolve reasons for the procedure being performed?
   */
  outcome?: CodeableConcept;
  /**
   * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedDateTime?: string;
  _performedDateTime?: Element;
  /**
   * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedPeriod?: Period;
  /**
   * Limited to 'real' people rather than equipment.
   */
  performer?: ProcedurePerformer[];
  /**
   * The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
   */
  reasonCodeableConcept?: CodeableConcept;
  /**
   * The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
   */
  reasonReference?: Reference;
  /**
   * A code indicating why the procedure was not performed.
   */
  reasonNotPerformed?: CodeableConcept[];
  /**
   * This could be a histology result, pathology report, surgical report, etc..
   */
  report?: Reference[];
  /**
   * A reference to a resource that contains details of the request for this procedure.
   */
  request?: Reference;
  /**
   * A code specifying the state of the procedure. Generally this will be in-progress or completed state.
   */
  status: string;
  _status?: Element;
  /**
   * The person, animal or group on which the procedure was performed.
   */
  subject: Reference;
  /**
   * Used for tracking contamination, etc.
   */
  used?: Reference[];
}
/**
 * Code Values for the Procedure.status field
 */
export enum ProcedureStatusCodes {
  IN_PROGRESS = "in-progress",
  ABORTED = "aborted",
  COMPLETED = "completed",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * A request for a procedure to be performed. May be a proposal or an order.
 */
export interface ProcedureRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ProcedureRequest'
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
   */
  asNeededBoolean?: boolean;
  _asNeededBoolean?: Element;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
   */
  asNeededCodeableConcept?: CodeableConcept;
  /**
   * Knowing where the procedure is made is important for tracking if multiple sites are possible.
   */
  bodySite?: CodeableConcept[];
  /**
   * The specific procedure that is ordered. Use text if the exact nature of the procedure cannot be coded.
   */
  code: CodeableConcept;
  /**
   * The encounter within which the procedure proposal or request was created.
   */
  encounter?: Reference;
  /**
   * Identifiers assigned to this order by the order or by the receiver.
   */
  identifier?: Identifier[];
  /**
   * Any other notes associated with this proposal or order - e.g. provider instructions.
   */
  notes?: Annotation[];
  /**
   * The time when the request was made.
   */
  orderedOn?: string;
  _orderedOn?: Element;
  /**
   * The healthcare professional responsible for proposing or ordering the procedure.
   */
  orderer?: Reference;
  /**
   * For example, the surgeon, anaethetist, endoscopist, etc.
   */
  performer?: Reference;
  /**
   * The clinical priority associated with this order.
   */
  priority?: string;
  _priority?: Element;
  /**
   * The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
   */
  reasonCodeableConcept?: CodeableConcept;
  /**
   * The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
   */
  reasonReference?: Reference;
  /**
   * The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  scheduledDateTime?: string;
  _scheduledDateTime?: Element;
  /**
   * The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  scheduledPeriod?: Period;
  /**
   * The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  scheduledTiming?: Timing;
  /**
   * The status of the order.
   */
  status?: string;
  _status?: Element;
  /**
   * The person, animal or group that should receive the procedure.
   */
  subject: Reference;
}
/**
 * Code Values for the ProcedureRequest.priority field
 */
export enum ProcedureRequestPriorityCodes {
  ROUTINE = "routine",
  URGENT = "urgent",
  STAT = "stat",
  ASAP = "asap",
}
/**
 * Code Values for the ProcedureRequest.status field
 */
export enum ProcedureRequestStatusCodes {
  PROPOSED = "proposed",
  DRAFT = "draft",
  REQUESTED = "requested",
  RECEIVED = "received",
  ACCEPTED = "accepted",
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  SUSPENDED = "suspended",
  REJECTED = "rejected",
  ABORTED = "aborted",
}
/**
 * List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
 */
export interface ProcessRequestItem extends BackboneElement {
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
/**
 * This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
 */
export interface ProcessRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ProcessRequest'
  /**
   * The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest.
   */
  action: string;
  _action?: Element;
  /**
   * The date when this resource was created.
   */
  created?: string;
  _created?: Element;
  /**
   * Names of resource types to exclude.
   */
  exclude?: string[];
  _exclude?: Element;
  /**
   * The ProcessRequest business identifier.
   */
  identifier?: Identifier[];
  /**
   * Names of resource types to include.
   */
  include?: string[];
  _include?: Element;
  /**
   * List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
   */
  item?: ProcessRequestItem[];
  /**
   * Some resources must not simply be reversed in a processing or accounting sense but rather must have all history removed, such as the accidental submission of sensitive and/or wrong information. If the receiver cannot comply with a Nullify request then they must reject the request.
   */
  nullify?: boolean;
  _nullify?: Element;
  /**
   * The organization which is responsible for the action speccified in thise request.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * A period of time during which the fulfilling resources would have been created.
   */
  period?: Period;
  /**
   * The practitioner who is responsible for the action specified in thise request.
   */
  provider?: Reference;
  /**
   * A reference to supply which authenticates the process.
   */
  reference?: string;
  _reference?: Element;
  /**
   * Reference of resource which is the target or subject of this action.
   */
  request?: Reference;
  /**
   * Reference of a prior response to resource which is the target or subject of this action.
   */
  response?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
  /**
   * The organization which is the target of the request.
   */
  target?: Reference;
}
/**
 * Code Values for the ProcessRequest.action field
 */
export enum ProcessRequestActionCodes {
  CANCEL = "cancel",
  POLL = "poll",
  REPROCESS = "reprocess",
  STATUS = "status",
}
/**
 * Suite of processing note or additional requirements is the processing has been held.
 */
export interface ProcessResponseNotes extends BackboneElement {
  /**
   * The note text.
   */
  text?: string;
  _text?: Element;
  /**
   * The note purpose: Print/Display.
   */
  type?: Coding;
}
/**
 * This resource provides processing status, errors and notes from the processing of a resource.
 */
export interface ProcessResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ProcessResponse'
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string;
  _created?: Element;
  /**
   * A description of the status of the adjudication or processing.
   */
  disposition?: string;
  _disposition?: Element;
  /**
   * Processing errors.
   */
  error?: Coding[];
  /**
   * The form to be used for printing the content.
   */
  form?: Coding;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[];
  /**
   * Suite of processing note or additional requirements is the processing has been held.
   */
  notes?: ProcessResponseNotes[];
  /**
   * The organization who produced this adjudicated response.
   */
  organization?: Reference;
  /**
   * Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
   */
  originalRuleset?: Coding;
  /**
   * Transaction status: error, complete, held.
   */
  outcome?: Coding;
  /**
   * Original request resource reference.
   */
  request?: Reference;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding;
}
/**
 * A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
 */
export interface ProvenanceAgentRelatedAgent extends BackboneElement {
  /**
   * An internal reference to another agent listed in this provenance by its identifier.
   */
  target: string;
  _target?: Element;
  /**
   * The type of relationship between agents.
   */
  type: CodeableConcept;
}
/**
 * An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
 */
export interface ProvenanceAgent extends BackboneElement {
  /**
   * The individual, device or organization that participated in the event.
   */
  actor?: Reference;
  /**
   * A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
   */
  relatedAgent?: ProvenanceAgentRelatedAgent[];
  /**
   * The function of the agent with respect to the activity.
   */
  role: Coding;
  /**
   * The identity of the agent as known by the authorization system.
   */
  userId?: Identifier;
}
/**
 * An entity used in this activity.
 */
export interface ProvenanceEntity extends BackboneElement {
  /**
   * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
   */
  Agent?: ProvenanceAgent;
  /**
   * Human-readable description of the entity.
   */
  display?: string;
  _display?: Element;
  /**
   * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
   */
  reference: string;
  _reference?: Element;
  /**
   * How the entity was used during the activity.
   */
  role: string;
  _role?: Element;
  /**
   * If the type is "resource" then the resource itself was the participant. If the type is a type of resource, then the entity identified by the resource is the participant.
   */
  type: Coding;
}
/**
 * Code Values for the Provenance.entity.role field
 */
export enum ProvenanceEntityRoleCodes {
  DERIVATION = "derivation",
  REVISION = "revision",
  QUOTATION = "quotation",
  SOURCE = "source",
}
/**
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 */
export interface Provenance extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Provenance'
  /**
   * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
   */
  activity?: CodeableConcept;
  /**
   * An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
   */
  agent?: ProvenanceAgent[];
  /**
   * An entity used in this activity.
   */
  entity?: ProvenanceEntity[];
  /**
   * Where the activity occurred, if relevant.
   */
  location?: Reference;
  /**
   * The period during which the activity occurred.
   */
  period?: Period;
  /**
   * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
   */
  policy?: string[];
  _policy?: Element;
  /**
   * The reason that the activity was taking place.
   */
  reason?: CodeableConcept[];
  /**
   * The instant of time at which the activity was recorded.
   */
  recorded: string;
  _recorded?: Element;
  /**
   * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
   */
  signature?: Signature[];
  /**
   * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
   */
  target: Reference[];
}
/**
 * Must register answers to questions.
 */
export interface QuestionnaireGroupQuestion extends BackboneElement {
  /**
   * Allows linking of questions (and their answers) to formal terminologies.
   */
  concept?: Coding[];
  /**
   * It is useful to have "sub-questions", questions which normally appear when certain answers are given and which collect additional details.
   */
  Group?: QuestionnaireGroup[];
  /**
   * [[[QuestionnaireResponse]]] does not require omitted groups to be included and may have some groups that repeat, so linkage based on position alone is not sufficient.
   */
  linkId?: string;
  _linkId?: Element;
  /**
   * For a "choice" question, identifies one of the permitted answers for the question.
   */
  option?: Coding[];
  /**
   * Reference to a value set containing a list of codes representing permitted answers for the question.
   */
  options?: Reference;
  /**
   * Used for "check all that apply" types of questions or "list your top 3", etc.
   */
  repeats?: boolean;
  _repeats?: Element;
  /**
   * If true, indicates that the question must be answered and have required groups within it also present.  If false, the question and any contained groups may be skipped when answering the questionnaire.
   */
  required?: boolean;
  _required?: Element;
  /**
   * When including text for the questionnaire, each question may contain its actual question display text.
   */
  text?: string;
  _text?: Element;
  /**
   * Defines the format in which the user is to be prompted for the answer.
   */
  type?: string;
  _type?: Element;
}
/**
 * Code Values for the Questionnaire.group.question.type field
 */
export enum QuestionnaireGroupQuestionTypeCodes {
  BOOLEAN = "boolean",
  DECIMAL = "decimal",
  INTEGER = "integer",
  DATE = "date",
  DATETIME = "dateTime",
}
/**
 * Need to be able to logically group answers to grouped questions.
 */
export interface QuestionnaireGroup extends BackboneElement {
  /**
   * Allows linking of groups of questions (and complete Questionnaire resources) to formal terminologies.
   */
  concept?: Coding[];
  /**
   * Reports can consist of complex nested groups.
   */
  Group?: QuestionnaireGroup[];
  /**
   * [[[QuestionnaireResponse]]] does not require omitted groups to be included and may have some groups that repeat, so linkage based on position alone is not sufficient.
   */
  linkId?: string;
  _linkId?: Element;
  /**
   * Must register answers to questions.
   */
  question?: QuestionnaireGroupQuestion[];
  /**
   * Groups may be used to create set of (related) questions that can be repeated to give multiple answers to such a set.
   */
  repeats?: boolean;
  _repeats?: Element;
  /**
   * If true, indicates that the group must be present and have required questions within it answered.  If false, the group may be skipped when answering the questionnaire.
   */
  required?: boolean;
  _required?: Element;
  /**
   * When including text for the questionnaire, each section may contain additional explanations are background text.
   */
  text?: string;
  _text?: Element;
  /**
   * When including text for the questionnaire with the answers, sections may have a section header.
   */
  title?: string;
  _title?: Element;
}
/**
 * A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
 */
export interface Questionnaire extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Questionnaire'
  /**
   * The date that this questionnaire was last changed.
   */
  date?: string;
  _date?: Element;
  /**
   * Need to be able to logically group answers to grouped questions.
   */
  group: QuestionnaireGroup;
  /**
   * Need to allow connection to a wider workflow.
   */
  identifier?: Identifier[];
  /**
   * Conveys responsibility for the questions and their organization and also helps evaluate the questionnaire's "authority".
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * The lifecycle status of the questionnaire as a whole.
   */
  status: string;
  _status?: Element;
  /**
   * Identifies the types of subjects that can be the subject of the questionnaire.
   */
  subjectType?: string[];
  _subjectType?: Element;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   */
  telecom?: ContactPoint[];
  /**
   * In some cases, separate resource instances might be created for each version (if an older version can be maintained once a new version exists).
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the Questionnaire.status field
 */
export enum QuestionnaireStatusCodes {
  DRAFT = "draft",
  PUBLISHED = "published",
  RETIRED = "retired",
}
/**
 * The respondent's answer(s) to the question.
 */
export interface QuestionnaireResponseGroupQuestionAnswer extends BackboneElement {
  /**
   * It is useful to have "sub-questions", questions which normally appear when certain answers are given and which collect additional details.
   */
  Group?: QuestionnaireGroup[];
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueBoolean?: boolean;
  _valueBoolean?: Element;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueDecimal?: number;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueInteger?: number;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueDate?: string;
  _valueDate?: Element;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueDateTime?: string;
  _valueDateTime?: Element;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueInstant?: string;
  _valueInstant?: Element;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueTime?: string;
  _valueTime?: Element;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueString?: string;
  _valueString?: Element;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueUri?: string;
  _valueUri?: Element;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueAttachment?: Attachment;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueCoding?: Coding;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueQuantity?: Quantity;
  /**
   * Ability to retain a single-valued answer to a question.
   */
  valueReference?: Reference;
}
/**
 * Must register answers to questions.
 */
export interface QuestionnaireResponseGroupQuestion extends BackboneElement {
  /**
   * The respondent's answer(s) to the question.
   */
  answer?: QuestionnaireResponseGroupQuestionAnswer[];
  /**
   * Groups can repeat in the answers, so a direct 1..1 correspondence may not exist - requiring correspondence by id.
   */
  linkId?: string;
  _linkId?: Element;
  /**
   * When including text for the questionnaire, each question may contain its actual question display text.
   */
  text?: string;
  _text?: Element;
}
/**
 * Need to be able to logically group answers to grouped questions.
 */
export interface QuestionnaireResponseGroup extends BackboneElement {
  /**
   * Reports can consist of complex nested groups.
   */
  Group?: QuestionnaireGroup[];
  /**
   * Groups can repeat in the answers, so a direct 1..1 correspondence may not exist - requiring correspondence by identifier.
   */
  linkId?: string;
  _linkId?: Element;
  /**
   * Must register answers to questions.
   */
  question?: QuestionnaireResponseGroupQuestion[];
  /**
   * Sometimes a group of answers is about a specific participant, artifact or piece of information in the patient's care or record, e.g. a specific Problem, RelatedPerson, Allergy etc.
   */
  subject?: Reference;
  /**
   * When including text for the questionnaire, each section may contain additional explanations are background text.
   */
  text?: string;
  _text?: Element;
  /**
   * When including text for the questionnaire with the answers, sections may have a section header.
   */
  title?: string;
  _title?: Element;
}
/**
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
 */
export interface QuestionnaireResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'QuestionnaireResponse'
  /**
   * Need to know who interpreted the subject's answers to the questions in the questionnaire, and selected the appropriate options for answers.
   */
  author?: Reference;
  /**
   * Clinicians need to be able to check the date that the information in the questionnaire was collected, to derive the context of the answers.
   */
  authored?: string;
  _authored?: Element;
  /**
   * Some institutions track questionnaires under a specific encounter.
   */
  encounter?: Reference;
  /**
   * Need to be able to logically group answers to grouped questions.
   */
  group?: QuestionnaireResponseGroup;
  /**
   * Used for tracking, registration and other business purposes.
   */
  identifier?: Identifier;
  /**
   * Needed to allow editing of the questionnaire in a manner that enforces the constraints of the original form.
   */
  questionnaire?: Reference;
  /**
   * When answering questions about a subject that is minor, incapable of answering or an animal, another human source is used to answer the questions.
   */
  source?: Reference;
  /**
   * The information on Questionnaire resources  may possibly be gathered during multiple sessions and altered after considered being finished. Questionnaire resources with just questions may serve as template forms, with the applicable publication statuses.
   */
  status: string;
  _status?: Element;
  /**
   * The subject context must be known.
   */
  subject?: Reference;
}
/**
 * Code Values for the QuestionnaireResponse.status field
 */
export enum QuestionnaireResponseStatusCodes {
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  AMENDED = "amended",
}
/**
 * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
 */
export interface ReferralRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ReferralRequest'
  /**
   * Date/DateTime of creation for draft requests and date of activation for active requests.
   */
  date?: string;
  _date?: Element;
  /**
   * Date/DateTime the request for referral or transfer of care is sent by the author.
   */
  dateSent?: string;
  _dateSent?: Element;
  /**
   * The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
   */
  description?: string;
  _description?: Element;
  /**
   * The encounter at which the request for referral or transfer of care is initiated.
   */
  encounter?: Reference;
  /**
   * Use cases: (1) to indicate that the requested service is not to happen before a specified date, and saving the start date in Period.start; (2) to indicate that the requested service must happen before a specified date, and saving the end date in Period.end; (3) to indicate that the requested service must happen during the specified dates ("start" and "end" values).
   */
  fulfillmentTime?: Period;
  /**
   * Business identifier that uniquely identifies the referral/care transfer request instance.
   */
  identifier?: Identifier[];
  /**
   * The patient who is the subject of a referral or transfer of care request.
   */
  patient?: Reference;
  /**
   * An indication of the urgency of referral (or where applicable the type of transfer of care) request.
   */
  priority?: CodeableConcept;
  /**
   * Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
   */
  reason?: CodeableConcept;
  /**
   * The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
   */
  recipient?: Reference[];
  /**
   * The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).
   */
  requester?: Reference;
  /**
   * The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
   */
  serviceRequested?: CodeableConcept[];
  /**
   * Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
   */
  specialty?: CodeableConcept;
  /**
   * The workflow status of the referral or transfer of care request.
   */
  status: string;
  _status?: Element;
  /**
   * Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
   */
  supportingInformation?: Reference[];
  /**
   * An indication of the type of referral (or where applicable the type of transfer of care) request.
   */
  type?: CodeableConcept;
}
/**
 * Code Values for the ReferralRequest.status field
 */
export enum ReferralRequestStatusCodes {
  DRAFT = "draft",
  REQUESTED = "requested",
  ACTIVE = "active",
  CANCELLED = "cancelled",
  ACCEPTED = "accepted",
  REJECTED = "rejected",
  COMPLETED = "completed",
}
/**
 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
export interface RelatedPerson extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'RelatedPerson'
  /**
   * Need to keep track where the related person can be contacted per postal mail or visited.
   */
  address?: Address[];
  /**
   * The date on which the related person was born.
   */
  birthDate?: string;
  _birthDate?: Element;
  /**
   * Needed for identification of the person, in combination with (at least) name and birth date.
   */
  gender?: string;
  _gender?: Element;
  /**
   * People are known by a variety of ids. Some institutions maintain several, and most collect identifiers for exchange with other organizations concerning the patient. Examples are national person identifier and local identifier.
   */
  identifier?: Identifier[];
  /**
   * Related persons need to be identified by name, but it is uncommon to need details about multiple other names for that person.
   */
  name?: HumanName;
  /**
   * We need to know which patient this RelatedPerson is related to.
   */
  patient: Reference;
  /**
   * The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown.
   */
  period?: Period;
  /**
   * Many EHR systems have the capability to capture an image of persons. Fits with newer social media usage too.
   */
  photo?: Attachment[];
  /**
   * We need to know the relationship with the patient since it influences the interpretation of the information attributed to this person.
   */
  relationship?: CodeableConcept;
  /**
   * People have (primary) ways to contact them in some way such as phone, email.
   */
  telecom?: ContactPoint[];
}
/**
 * Code Values for the RelatedPerson.gender field
 */
export enum RelatedPersonGenderCodes {
  MALE = "male",
  FEMALE = "female",
  OTHER = "other",
  UNKNOWN = "unknown",
}
/**
 * This is the base resource type for everything.
 */
export interface Resource {
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string;
  _id?: Element;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string;
  _implicitRules?: Element;
  /**
   * The base language in which the resource is written.
   */
  language?: string;
  _language?: Element;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta;
}
/**
 * Describes the expected outcome for the subject.
 */
export interface RiskAssessmentPrediction extends BackboneElement {
  /**
   * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
   */
  outcome: CodeableConcept;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityDecimal?: number;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityRange?: Range;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityCodeableConcept?: CodeableConcept;
  /**
   * Additional information explaining the basis for the prediction.
   */
  rationale?: string;
  _rationale?: Element;
  /**
   * Absolute risk is less meaningful than relative risk.
   */
  relativeRisk?: number;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  whenPeriod?: Period;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  whenRange?: Range;
}
/**
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
export interface RiskAssessment extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'RiskAssessment'
  /**
   * Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
   */
  basis?: Reference[];
  /**
   * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
   */
  condition?: Reference;
  /**
   * The assessment results lose validity the more time elapses from when they are first made.
   */
  date?: string;
  _date?: Element;
  /**
   * The encounter where the assessment was performed.
   */
  encounter?: Reference;
  /**
   * Business identifier assigned to the risk assessment.
   */
  identifier?: Identifier;
  /**
   * The method can influence the results of the assessment.
   */
  method?: CodeableConcept;
  /**
   * One of the main reasons for assessing risks is to identify whether interventional steps are needed to reduce risk.
   */
  mitigation?: string;
  _mitigation?: Element;
  /**
   * The provider or software application that performed the assessment.
   */
  performer?: Reference;
  /**
   * Describes the expected outcome for the subject.
   */
  prediction?: RiskAssessmentPrediction[];
  /**
   * The patient or group the risk assessment applies to.
   */
  subject?: Reference;
}
/**
 * A container for slot(s) of time that may be available for booking appointments.
 */
export interface Schedule extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Schedule'
  /**
   * The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, Device, Patient or RelatedPerson.
   */
  actor: Reference;
  /**
   * Comments on the availability to describe any extended information. Such as custom constraints on the slot(s) that may be associated.
   */
  comment?: string;
  _comment?: Element;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[];
  /**
   * The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
   */
  planningHorizon?: Period;
  /**
   * The schedule type can be used for the categorization of healthcare services or other appointment types.
   */
  type?: CodeableConcept[];
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface SearchParameterContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the search parameter.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 */
export interface SearchParameter extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'SearchParameter'
  /**
   * The base resource type that this search parameter refers to.
   */
  base: string;
  _base?: Element;
  /**
   * The code used in the URL or the parameter name in a parameters resource for this search parameter.
   */
  code: string;
  _code?: Element;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: SearchParameterContact[];
  /**
   * The date  (and optionally time) when the search parameter definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
   */
  date?: string;
  _date?: Element;
  /**
   * A description of the search parameters and how it used.
   */
  description: string;
  _description?: Element;
  /**
   * A flag to indicate that this search parameter definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * A free text natural language name identifying the search parameter.
   */
  name: string;
  _name?: Element;
  /**
   * Helps establish the "authority/credibility" of the search parameter.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * The Scope and Usage that this search parameter was created to meet.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * The status of this search parameter definition.
   */
  status?: string;
  _status?: Element;
  /**
   * Types of resource (if a resource is referenced).
   */
  target?: string[];
  _target?: Element;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   */
  type: string;
  _type?: Element;
  /**
   * To allow referencing and reusing search parameter definitions under other names on operational systems (in case of name clash).
   */
  url: string;
  _url?: Element;
  /**
   * An XPath expression that returns a set of elements for the search parameter.
   */
  xpath?: string;
  _xpath?: Element;
  /**
   * How the search parameter relates to the set of elements returned by evaluating the xpath query.
   */
  xpathUsage?: string;
  _xpathUsage?: Element;
}
/**
 * Code Values for the SearchParameter.status field
 */
export enum SearchParameterStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Code Values for the SearchParameter.type field
 */
export enum SearchParameterTypeCodes {
  NUMBER = "number",
  DATE = "date",
  STRING = "string",
  TOKEN = "token",
  REFERENCE = "reference",
  COMPOSITE = "composite",
  QUANTITY = "quantity",
  URI = "uri",
}
/**
 * Code Values for the SearchParameter.xpathUsage field
 */
export enum SearchParameterXpathUsageCodes {
  NORMAL = "normal",
  PHONETIC = "phonetic",
  NEARBY = "nearby",
  DISTANCE = "distance",
  OTHER = "other",
}
/**
 * A slot of time on a schedule that may be available for booking appointments.
 */
export interface Slot extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Slot'
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  comment?: string;
  _comment?: Element;
  /**
   * Date/Time that the slot is to conclude.
   */
  end: string;
  _end?: Element;
  /**
   * busy | free | busy-unavailable | busy-tentative.
   */
  freeBusyType: string;
  _freeBusyType?: Element;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[];
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  overbooked?: boolean;
  _overbooked?: Element;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  schedule: Reference;
  /**
   * Date/Time that the slot is to begin.
   */
  start: string;
  _start?: Element;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  type?: CodeableConcept;
}
/**
 * Code Values for the Slot.freeBusyType field
 */
export enum SlotFreeBusyTypeCodes {
  BUSY = "busy",
  FREE = "free",
  BUSY_UNAVAILABLE = "busy-unavailable",
  BUSY_TENTATIVE = "busy-tentative",
}
/**
 * Details concerning the specimen collection.
 */
export interface SpecimenCollection extends BackboneElement {
  /**
   * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
   */
  bodySite?: CodeableConcept;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedDateTime?: string;
  _collectedDateTime?: Element;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedPeriod?: Period;
  /**
   * Person who collected the specimen.
   */
  collector?: Reference;
  /**
   * To communicate any details or issues encountered during the specimen collection procedure.
   */
  comment?: string[];
  _comment?: Element;
  /**
   * A coded value specifying the technique that is used to perform the procedure.
   */
  method?: CodeableConcept;
  /**
   * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
   */
  quantity?: Quantity;
}
/**
 * Details concerning treatment and processing steps for the specimen.
 */
export interface SpecimenTreatment extends BackboneElement {
  /**
   * Material used in the processing step.
   */
  additive?: Reference[];
  /**
   * Textual description of procedure.
   */
  description?: string;
  _description?: Element;
  /**
   * A coded value specifying the procedure used to process the specimen.
   */
  procedure?: CodeableConcept;
}
/**
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
export interface SpecimenContainer extends BackboneElement {
  /**
   * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveCodeableConcept?: CodeableConcept;
  /**
   * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveReference?: Reference;
  /**
   * The capacity (volume or other measure) the container may contain.
   */
  capacity?: Quantity;
  /**
   * Textual description of the container.
   */
  description?: string;
  _description?: Element;
  /**
   * Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
   */
  identifier?: Identifier[];
  /**
   * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
   */
  specimenQuantity?: Quantity;
  /**
   * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
   */
  type?: CodeableConcept;
}
/**
 * A sample to be used for analysis.
 */
export interface Specimen extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Specimen'
  /**
   * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
   */
  accessionIdentifier?: Identifier;
  /**
   * Details concerning the specimen collection.
   */
  collection?: SpecimenCollection;
  /**
   * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
   */
  container?: SpecimenContainer[];
  /**
   * Id for specimen.
   */
  identifier?: Identifier[];
  /**
   * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
   */
  parent?: Reference[];
  /**
   * Time when specimen was received for processing or testing.
   */
  receivedTime?: string;
  _receivedTime?: Element;
  /**
   * The availability of the specimen.
   */
  status?: string;
  _status?: Element;
  /**
   * Must know the subject context.
   */
  subject: Reference;
  /**
   * Details concerning treatment and processing steps for the specimen.
   */
  treatment?: SpecimenTreatment[];
  /**
   * The kind of material that forms the specimen.
   */
  type?: CodeableConcept;
}
/**
 * Code Values for the Specimen.status field
 */
export enum SpecimenStatusCodes {
  AVAILABLE = "available",
  UNAVAILABLE = "unavailable",
  UNSATISFACTORY = "unsatisfactory",
  ENTERED_IN_ERROR = "entered-in-error",
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface StructureDefinitionContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the structure definition.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * An external specification that the content is mapped to.
 */
export interface StructureDefinitionMapping extends BackboneElement {
  /**
   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
   */
  comments?: string;
  _comments?: Element;
  /**
   * An Internal id that is used to identify this mapping set when specific mappings are made.
   */
  identity: string;
  _identity?: Element;
  /**
   * A name for the specification that is being mapped to.
   */
  name?: string;
  _name?: Element;
  /**
   * An absolute URI that identifies the specification that this mapping is expressed to.
   */
  uri?: string;
  _uri?: Element;
}
/**
 * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
 */
export interface StructureDefinitionSnapshot extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
/**
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export interface StructureDefinitionDifferential extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
/**
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
 */
export interface StructureDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'StructureDefinition'
  /**
   * Whether structure this definition describes is abstract or not  - that is, whether an actual exchanged item can ever be of this type.
   */
  abstract: boolean;
  _abstract?: Element;
  /**
   * An absolute URI that is the base structure from which this set of constraints is derived.
   */
  base?: string;
  _base?: Element;
  /**
   * Assist in searching for appropriate StructureDefinitions.
   */
  code?: Coding[];
  /**
   * The type of type that is being constrained - a data type, an extension, a resource, including abstract ones. If this field is present, it indicates that the structure definition is a constraint. If it is not present, then the structure definition is the definition of a base structure.
   */
  constrainedType?: string;
  _constrainedType?: Element;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: StructureDefinitionContact[];
  /**
   * Identifies the types of resource or data type elements to which the extension can be applied.
   */
  context?: string[];
  _context?: Element;
  /**
   * If this is an extension, Identifies the context within FHIR resources where the extension can be used.
   */
  contextType?: string;
  _contextType?: Element;
  /**
   * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
   */
  copyright?: string;
  _copyright?: Element;
  /**
   * The date this version of the structure definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
   */
  date?: string;
  _date?: Element;
  /**
   * A free text natural language description of the StructureDefinition and its use.
   */
  description?: string;
  _description?: Element;
  /**
   * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
   */
  differential?: StructureDefinitionDifferential;
  /**
   * Defined so that applications can use this name when displaying the value of the extension to the user.
   */
  display?: string;
  _display?: Element;
  /**
   * Allows filtering of StructureDefinitions that are appropriate for use vs. not.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
   */
  fhirVersion?: string;
  _fhirVersion?: Element;
  /**
   * Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI).
   */
  identifier?: Identifier[];
  /**
   * Defines the kind of structure that this definition is describing.
   */
  kind: string;
  _kind?: Element;
  /**
   * An external specification that the content is mapped to.
   */
  mapping?: StructureDefinitionMapping[];
  /**
   * A free text natural language name identifying the StructureDefinition.
   */
  name: string;
  _name?: Element;
  /**
   * Helps establish the "authority/credibility" of the structure definition.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Explains why this structure definition is needed and why it's been constrained as it has.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
   */
  snapshot?: StructureDefinitionSnapshot;
  /**
   * Allows filtering of StructureDefinitions that are appropriate for use vs. not.
   */
  status: string;
  _status?: Element;
  /**
   * So you can say, in a StructureDefinition, what the full extension URLs should be. This is required to allow hosting StructureDefinitions on multiple different servers, and to allow for the editorial process.
   */
  url: string;
  _url?: Element;
  /**
   * Assist in searching for appropriate content.
   */
  useContext?: CodeableConcept[];
  /**
   * There may be multiple resource versions of the StructureDefinition that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the StructureDefinition.contextType field
 */
export enum StructureDefinitionContextTypeCodes {
  RESOURCE = "resource",
  DATATYPE = "datatype",
  MAPPING = "mapping",
  EXTENSION = "extension",
}
/**
 * Code Values for the StructureDefinition.kind field
 */
export enum StructureDefinitionKindCodes {
  DATATYPE = "datatype",
  RESOURCE = "resource",
  LOGICAL = "logical",
}
/**
 * Code Values for the StructureDefinition.status field
 */
export enum StructureDefinitionStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Details where to send notifications when resources are received that meet the criteria.
 */
export interface SubscriptionChannel extends BackboneElement {
  /**
   * The uri that describes the actual end-point to send messages to.
   */
  endpoint?: string;
  _endpoint?: Element;
  /**
   * Additional headers / information to send as part of the notification.
   */
  header?: string;
  _header?: Element;
  /**
   * The mime type to send the payload in - either application/xml+fhir, or application/json+fhir. If the mime type is blank, then there is no payload in the notification, just a notification.
   */
  payload: string;
  _payload?: Element;
  /**
   * The type of channel to send notifications on.
   */
  type: string;
  _type?: Element;
}
/**
 * Code Values for the Subscription.channel.type field
 */
export enum SubscriptionChannelTypeCodes {
  REST_HOOK = "rest-hook",
  WEBSOCKET = "websocket",
  EMAIL = "email",
  SMS = "sms",
  MESSAGE = "message",
}
/**
 * The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
 */
export interface Subscription extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Subscription'
  /**
   * Details where to send notifications when resources are received that meet the criteria.
   */
  channel: SubscriptionChannel;
  /**
   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
   */
  contact?: ContactPoint[];
  /**
   * The rules that the server should use to determine when to generate notifications for this subscription.
   */
  criteria: string;
  _criteria?: Element;
  /**
   * The time for the server to turn the subscription off.
   */
  end?: string;
  _end?: Element;
  /**
   * A record of the last error that occurred when the server processed a notification.
   */
  error?: string;
  _error?: Element;
  /**
   * A description of why this subscription is defined.
   */
  reason: string;
  _reason?: Element;
  /**
   * The status of the subscription, which marks the server state for managing the subscription.
   */
  status: string;
  _status?: Element;
  /**
   * A tag to add to any resource that matches the criteria, after the subscription is processed.
   */
  tag?: Coding[];
}
/**
 * Code Values for the Subscription.status field
 */
export enum SubscriptionStatusCodes {
  REQUESTED = "requested",
  ACTIVE = "active",
  ERROR = "error",
  OFF = "off",
}
/**
 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
 */
export interface SubstanceInstance extends BackboneElement {
  /**
   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
   */
  expiry?: string;
  _expiry?: Element;
  /**
   * Identifier associated with the package/container (usually a label affixed directly).
   */
  identifier?: Identifier;
  /**
   * The amount of the substance.
   */
  quantity?: Quantity;
}
/**
 * A substance can be composed of other substances.
 */
export interface SubstanceIngredient extends BackboneElement {
  /**
   * The amount of the ingredient in the substance - a concentration ratio.
   */
  quantity?: Ratio;
  /**
   * Another substance that is a component of this substance.
   */
  substance: Reference;
}
/**
 * A homogeneous material with a definite composition.
 */
export interface Substance extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'Substance'
  /**
   * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
   */
  category?: CodeableConcept[];
  /**
   * A code (or set of codes) that identify this substance.
   */
  code: CodeableConcept;
  /**
   * A description of the substance - its appearance, handling requirements, and other usage notes.
   */
  description?: string;
  _description?: Element;
  /**
   * Unique identifier for the substance.
   */
  identifier?: Identifier[];
  /**
   * A substance can be composed of other substances.
   */
  ingredient?: SubstanceIngredient[];
  /**
   * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
   */
  instance?: SubstanceInstance[];
}
/**
 * Record of delivery of what is supplied.
 */
export interface SupplyDelivery extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'SupplyDelivery'
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  destination?: Reference;
  /**
   * Identifier assigned by the dispensing facility when the item(s) is dispensed.
   */
  identifier?: Identifier;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  patient?: Reference;
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  quantity?: Quantity;
  /**
   * Identifies the person who picked up the Supply.
   */
  receiver?: Reference[];
  /**
   * A code specifying the state of the dispense event.
   */
  status?: string;
  _status?: Element;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a simple attribute carrying a code that identifies the item from a known list.
   */
  suppliedItem?: Reference;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  supplier?: Reference;
  /**
   * The time the dispensed item was sent or handed to the patient (or agent).
   */
  time?: string;
  _time?: Element;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: CodeableConcept;
  /**
   * The time the dispense event occurred.
   */
  whenPrepared?: Period;
}
/**
 * Code Values for the SupplyDelivery.status field
 */
export enum SupplyDeliveryStatusCodes {
  IN_PROGRESS = "in-progress",
  COMPLETED = "completed",
  ABANDONED = "abandoned",
}
/**
 * When the request should be fulfilled.
 */
export interface SupplyRequestWhen extends BackboneElement {
  /**
   * Code indicating when the request should be fulfilled.
   */
  code?: CodeableConcept;
  /**
   * Formal fulfillment schedule.
   */
  schedule?: Timing;
}
/**
 * A record of a request for a medication, substance or device used in the healthcare setting.
 */
export interface SupplyRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'SupplyRequest'
  /**
   * When the request was made.
   */
  date?: string;
  _date?: Element;
  /**
   * Unique identifier for this supply request.
   */
  identifier?: Identifier;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  kind?: CodeableConcept;
  /**
   * The item that is requested to be supplied.
   */
  orderedItem?: Reference;
  /**
   * A link to a resource representing the person whom the ordered item is for.
   */
  patient?: Reference;
  /**
   * Why the supply item was requested.
   */
  reasonCodeableConcept?: CodeableConcept;
  /**
   * Why the supply item was requested.
   */
  reasonReference?: Reference;
  /**
   * The Practitioner , Organization or Patient who initiated this order for the supply.
   */
  source?: Reference;
  /**
   * Status of the supply request.
   */
  status?: string;
  _status?: Element;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: Reference[];
  /**
   * When the request should be fulfilled.
   */
  when?: SupplyRequestWhen;
}
/**
 * Code Values for the SupplyRequest.status field
 */
export enum SupplyRequestStatusCodes {
  REQUESTED = "requested",
  COMPLETED = "completed",
  FAILED = "failed",
  CANCELLED = "cancelled",
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface TestScriptContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the Test Script.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * A link to the FHIR specification that this test is covering.
 */
export interface TestScriptMetadataLink extends BackboneElement {
  /**
   * Short description of the link.
   */
  description?: string;
  _description?: Element;
  /**
   * URL to a particular requirement or feature within the FHIR specification.
   */
  url: string;
  _url?: Element;
}
/**
 * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
 */
export interface TestScriptMetadataCapability extends BackboneElement {
  /**
   * Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.
   */
  conformance: Reference;
  /**
   * Description of the capabilities that this test script is requiring the server to support.
   */
  description?: string;
  _description?: Element;
  /**
   * Which server these requirements apply to.
   */
  destination?: number;
  /**
   * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
   */
  link?: string[];
  _link?: Element;
  /**
   * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
   */
  required?: boolean;
  _required?: Element;
  /**
   * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
   */
  validated?: boolean;
  _validated?: Element;
}
/**
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
export interface TestScriptMetadata extends BackboneElement {
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   */
  capability: TestScriptMetadataCapability[];
  /**
   * A link to the FHIR specification that this test is covering.
   */
  link?: TestScriptMetadataLink[];
}
/**
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
export interface TestScriptFixture extends BackboneElement {
  /**
   * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
   */
  autocreate?: boolean;
  _autocreate?: Element;
  /**
   * Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
   */
  autodelete?: boolean;
  _autodelete?: Element;
  /**
   * Reference to the resource (containing the contents of the resource needed for operations).
   */
  resource?: Reference;
}
/**
 * Variable is set based either on element value in response body or on header field value in the response headers.
 */
export interface TestScriptVariable extends BackboneElement {
  /**
   * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
   */
  headerField?: string;
  _headerField?: Element;
  /**
   * Descriptive name for this variable.
   */
  name: string;
  _name?: Element;
  /**
   * XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.
   */
  path?: string;
  _path?: Element;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
   */
  sourceId?: string;
  _sourceId?: Element;
}
/**
 * Header elements would be used to set HTTP headers.
 */
export interface TestScriptSetupActionOperationRequestHeader extends BackboneElement {
  /**
   * The HTTP header field e.g. "Accept".
   */
  field: string;
  _field?: Element;
  /**
   * The value of the header e.g. "application/xml".
   */
  value: string;
  _value?: Element;
}
/**
 * The operation to perform.
 */
export interface TestScriptSetupActionOperation extends BackboneElement {
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Accept' header.
   */
  accept?: string;
  _accept?: Element;
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
   */
  contentType?: string;
  _contentType?: Element;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   */
  description?: string;
  _description?: Element;
  /**
   * Which server to perform the operation on.
   */
  destination?: number;
  /**
   * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
   */
  encodeRequestUrl?: boolean;
  _encodeRequestUrl?: Element;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   */
  label?: string;
  _label?: Element;
  /**
   * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
   */
  params?: string;
  _params?: Element;
  /**
   * Header elements would be used to set HTTP headers.
   */
  requestHeader?: TestScriptSetupActionOperationRequestHeader[];
  /**
   * The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
   */
  resource?: string;
  _resource?: Element;
  /**
   * The fixture id (maybe new) to map to the response.
   */
  responseId?: string;
  _responseId?: Element;
  /**
   * The id of the fixture used as the body of a PUT or POST request.
   */
  sourceId?: string;
  _sourceId?: Element;
  /**
   * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
   */
  targetId?: string;
  _targetId?: Element;
  /**
   * Server interaction or operation type.
   */
  type?: Coding;
  /**
   * Complete request URL.
   */
  url?: string;
  _url?: Element;
}
/**
 * Code Values for the TestScript.setup.action.operation.accept field
 */
export enum TestScriptSetupActionOperationAcceptCodes {
  XML = "xml",
  JSON = "json",
}
/**
 * Code Values for the TestScript.setup.action.operation.contentType field
 */
export enum TestScriptSetupActionOperationContentTypeCodes {
  XML = "xml",
  JSON = "json",
}
/**
 * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
 */
export interface TestScriptSetupActionAssert extends BackboneElement {
  /**
   * Id of fixture used to compare the "sourceId/path" evaluations to.
   */
  compareToSourceId?: string;
  _compareToSourceId?: Element;
  /**
   * XPath or JSONPath expression against fixture used to compare the "sourceId/path" evaluations to.
   */
  compareToSourcePath?: string;
  _compareToSourcePath?: Element;
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
   */
  contentType?: string;
  _contentType?: Element;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   */
  description?: string;
  _description?: Element;
  /**
   * The direction to use for the assertion.
   */
  direction?: string;
  _direction?: Element;
  /**
   * The HTTP header field name e.g. 'Location'.
   */
  headerField?: string;
  _headerField?: Element;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   */
  label?: string;
  _label?: Element;
  /**
   * The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.
   */
  minimumId?: string;
  _minimumId?: Element;
  /**
   * Whether or not the test execution performs validation on the bundle navigation links.
   */
  navigationLinks?: boolean;
  _navigationLinks?: Element;
  /**
   * The operator type.
   */
  operator?: string;
  _operator?: Element;
  /**
   * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
   */
  path?: string;
  _path?: Element;
  /**
   * The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
   */
  resource?: string;
  _resource?: Element;
  /**
   * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
   */
  response?: string;
  _response?: Element;
  /**
   * The value of the HTTP response code to be tested.
   */
  responseCode?: string;
  _responseCode?: Element;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
   */
  sourceId?: string;
  _sourceId?: Element;
  /**
   * The ID of the Profile to validate against.
   */
  validateProfileId?: string;
  _validateProfileId?: Element;
  /**
   * The value to compare to.
   */
  value?: string;
  _value?: Element;
  /**
   * Whether or not the test execution will produce a warning only on error for this assert.
   */
  warningOnly?: boolean;
  _warningOnly?: Element;
}
/**
 * Code Values for the TestScript.setup.action.assert.contentType field
 */
export enum TestScriptSetupActionAssertContentTypeCodes {
  XML = "xml",
  JSON = "json",
}
/**
 * Code Values for the TestScript.setup.action.assert.direction field
 */
export enum TestScriptSetupActionAssertDirectionCodes {
  RESPONSE = "response",
  REQUEST = "request",
}
/**
 * Code Values for the TestScript.setup.action.assert.operator field
 */
export enum TestScriptSetupActionAssertOperatorCodes {
  EQUALS = "equals",
  NOTEQUALS = "notEquals",
  IN = "in",
  NOTIN = "notIn",
  GREATERTHAN = "greaterThan",
  LESSTHAN = "lessThan",
  EMPTY = "empty",
  NOTEMPTY = "notEmpty",
  CONTAINS = "contains",
  NOTCONTAINS = "notContains",
}
/**
 * Code Values for the TestScript.setup.action.assert.response field
 */
export enum TestScriptSetupActionAssertResponseCodes {
  OKAY = "okay",
  CREATED = "created",
  NOCONTENT = "noContent",
  NOTMODIFIED = "notModified",
  BAD = "bad",
  FORBIDDEN = "forbidden",
  NOTFOUND = "notFound",
  METHODNOTALLOWED = "methodNotAllowed",
  CONFLICT = "conflict",
  GONE = "gone",
  PRECONDITIONFAILED = "preconditionFailed",
  UNPROCESSABLE = "unprocessable",
}
/**
 * Action would contain either an operation or an assertion.
 */
export interface TestScriptSetupAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   */
  assert?: TestScriptSetupActionAssert;
  /**
   * The operation to perform.
   */
  operation?: TestScriptSetupActionOperation;
}
/**
 * A series of required setup operations before tests are executed.
 */
export interface TestScriptSetup extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   */
  action: TestScriptSetupAction[];
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   */
  Metadata?: TestScriptMetadata;
}
/**
 * Action would contain either an operation or an assertion.
 */
export interface TestScriptTestAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   */
  Assert?: TestScriptSetupActionAssert;
  /**
   * An operation would involve a REST request to a server.
   */
  Operation?: TestScriptSetupActionOperation;
}
/**
 * A test in this script.
 */
export interface TestScriptTest extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   */
  action: TestScriptTestAction[];
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string;
  _description?: Element;
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   */
  Metadata?: TestScriptMetadata;
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string;
  _name?: Element;
}
/**
 * The teardown action will only contain an operation.
 */
export interface TestScriptTeardownAction extends BackboneElement {
  /**
   * An operation would involve a REST request to a server.
   */
  Operation?: TestScriptSetupActionOperation;
}
/**
 * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
 */
export interface TestScriptTeardown extends BackboneElement {
  /**
   * The teardown action will only contain an operation.
   */
  action: TestScriptTeardownAction[];
}
/**
 * TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
 */
export interface TestScript extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'TestScript'
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: TestScriptContact[];
  /**
   * A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
   */
  copyright?: string;
  _copyright?: Element;
  /**
   * The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.
   */
  date?: string;
  _date?: Element;
  /**
   * A free text natural language description of the TestScript and its use.
   */
  description?: string;
  _description?: Element;
  /**
   * Allows filtering of TestScripts that are appropriate for use vs. not.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
   */
  fixture?: TestScriptFixture[];
  /**
   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
   */
  identifier?: Identifier;
  /**
   * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
   */
  metadata?: TestScriptMetadata;
  /**
   * If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.
   */
  multiserver?: boolean;
  _multiserver?: Element;
  /**
   * A free text natural language name identifying the TestScript.
   */
  name: string;
  _name?: Element;
  /**
   * Reference to the profile to be used for validation.
   */
  profile?: Reference[];
  /**
   * Helps establish the "authority/credibility" of the Test Script.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Explains why this Test Script is needed and why it's been constrained as it has.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * A series of required setup operations before tests are executed.
   */
  setup?: TestScriptSetup;
  /**
   * Allows filtering of TestScripts that are appropriate for use vs. not.
   */
  status: string;
  _status?: Element;
  /**
   * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
   */
  teardown?: TestScriptTeardown;
  /**
   * A test in this script.
   */
  test?: TestScriptTest[];
  /**
   * An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.
   */
  url: string;
  _url?: Element;
  /**
   * Assist in searching for appropriate content.
   */
  useContext?: CodeableConcept[];
  /**
   * Variable is set based either on element value in response body or on header field value in the response headers.
   */
  variable?: TestScriptVariable[];
  /**
   * There may be multiple resource versions of the TestScript that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the TestScript.status field
 */
export enum TestScriptStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Contacts to assist a user in finding and communicating with the publisher.
 */
export interface ValueSetContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the value set.
   */
  name?: string;
  _name?: Element;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[];
}
/**
 * Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.
 */
export interface ValueSetCodeSystemConceptDesignation extends BackboneElement {
  /**
   * The language this designation is defined for.
   */
  language?: string;
  _language?: Element;
  /**
   * A code that details how this designation would be used.
   */
  use?: Coding;
  /**
   * The text value for this designation.
   */
  value: string;
  _value?: Element;
}
/**
 * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
 */
export interface ValueSetCodeSystemConcept extends BackboneElement {
  /**
   * If this code is not for use as a real concept.
   */
  abstract?: boolean;
  _abstract?: Element;
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  code: string;
  _code?: Element;
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) and can only be determined by examining the definitions of the concepts.
   */
  Concept?: ValueSetCodeSystemConcept[];
  /**
   * The formal definition of the concept. The value set resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  definition?: string;
  _definition?: Element;
  /**
   * Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.
   */
  designation?: ValueSetCodeSystemConceptDesignation[];
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  display?: string;
  _display?: Element;
}
/**
 * A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
 */
export interface ValueSetCodeSystem extends BackboneElement {
  /**
   * If code comparison is case sensitive when codes within this system are compared to each other.
   */
  caseSensitive?: boolean;
  _caseSensitive?: Element;
  /**
   * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
   */
  concept: ValueSetCodeSystemConcept[];
  /**
   * An absolute URI that is used to reference this code system, including in [Coding]{datatypes.html#Coding}.system.
   */
  system: string;
  _system?: Element;
  /**
   * The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked.
   */
  version?: string;
  _version?: Element;
}
/**
 * Specifies a concept to be included or excluded.
 */
export interface ValueSetComposeIncludeConcept extends BackboneElement {
  /**
   * Specifies a code for the concept to be included or excluded.
   */
  code: string;
  _code?: Element;
  /**
   * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
   */
  Designation?: ValueSetCodeSystemConceptDesignation[];
  /**
   * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
   */
  display?: string;
  _display?: Element;
}
/**
 * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
 */
export interface ValueSetComposeIncludeFilter extends BackboneElement {
  /**
   * The kind of operation to perform as a part of the filter criteria.
   */
  op: string;
  _op?: Element;
  /**
   * A code that identifies a property defined in the code system.
   */
  property: string;
  _property?: Element;
  /**
   * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value.
   */
  value: string;
  _value?: Element;
}
/**
 * Code Values for the ValueSet.compose.include.filter.op field
 */
export enum ValueSetComposeIncludeFilterOpCodes {
  EQUALS = "=",
  IS_A = "is-a",
  IS_NOT_A = "is-not-a",
  REGEX = "regex",
  IN = "in",
  NOT_IN = "not-in",
}
/**
 * Include one or more codes from a code system.
 */
export interface ValueSetComposeInclude extends BackboneElement {
  /**
   * Specifies a concept to be included or excluded.
   */
  concept?: ValueSetComposeIncludeConcept[];
  /**
   * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
   */
  filter?: ValueSetComposeIncludeFilter[];
  /**
   * An absolute URI which is the code system from which the selected codes come from.
   */
  system: string;
  _system?: Element;
  /**
   * The version of the code system that the codes are selected from.
   */
  version?: string;
  _version?: Element;
}
/**
 * A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
 */
export interface ValueSetCompose extends BackboneElement {
  /**
   * Exclude one or more codes from the value set.
   */
  Exclude?: ValueSetComposeInclude[];
  /**
   * Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri.
   */
  import?: string[];
  _import?: Element;
  /**
   * Include one or more codes from a code system.
   */
  include?: ValueSetComposeInclude[];
}
/**
 * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
 */
export interface ValueSetExpansionParameter extends BackboneElement {
  /**
   * The name of the parameter.
   */
  name: string;
  _name?: Element;
  /**
   * The value of the parameter.
   */
  valueString?: string;
  _valueString?: Element;
  /**
   * The value of the parameter.
   */
  valueBoolean?: boolean;
  _valueBoolean?: Element;
  /**
   * The value of the parameter.
   */
  valueInteger?: number;
  /**
   * The value of the parameter.
   */
  valueDecimal?: number;
  /**
   * The value of the parameter.
   */
  valueUri?: string;
  _valueUri?: Element;
  /**
   * The value of the parameter.
   */
  valueCode?: string;
  _valueCode?: Element;
}
/**
 * The codes that are contained in the value set expansion.
 */
export interface ValueSetExpansionContains extends BackboneElement {
  /**
   * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
   */
  abstract?: boolean;
  _abstract?: Element;
  /**
   * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
   */
  code?: string;
  _code?: Element;
  /**
   * Other codes and entries contained under this entry in the hierarchy.
   */
  Contains?: ValueSetExpansionContains[];
  /**
   * The recommended display for this item in the expansion.
   */
  display?: string;
  _display?: Element;
  /**
   * An absolute URI which is the code system in which the code for this item in the expansion is defined.
   */
  system?: string;
  _system?: Element;
  /**
   * The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.
   */
  version?: string;
  _version?: Element;
}
/**
 * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
 */
export interface ValueSetExpansion extends BackboneElement {
  /**
   * The codes that are contained in the value set expansion.
   */
  contains?: ValueSetExpansionContains[];
  /**
   * An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.
   */
  identifier: string;
  _identifier?: Element;
  /**
   * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.
   */
  offset?: number;
  /**
   * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
   */
  parameter?: ValueSetExpansionParameter[];
  /**
   * The time at which the expansion was produced by the expanding system.
   */
  timestamp: string;
  _timestamp?: Element;
  /**
   * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
   */
  total?: number;
}
/**
 * A value set specifies a set of codes drawn from one or more code systems.
 */
export interface ValueSet extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'ValueSet'
  /**
   * A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
   */
  codeSystem?: ValueSetCodeSystem;
  /**
   * A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
   */
  compose?: ValueSetCompose;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ValueSetContact[];
  /**
   * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
   */
  copyright?: string;
  _copyright?: Element;
  /**
   * Need to know when a value set was first legal for use or became withdrawn or replaced.
   */
  date?: string;
  _date?: Element;
  /**
   * Human understandability.
   */
  description?: string;
  _description?: Element;
  /**
   * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
   */
  expansion?: ValueSetExpansion;
  /**
   * This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean;
  _experimental?: Element;
  /**
   * It is not required to say whether this intent applies.
   */
  extensible?: boolean;
  _extensible?: Element;
  /**
   * Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier;
  /**
   * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
   */
  immutable?: boolean;
  _immutable?: Element;
  /**
   * If a locked date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value set instances as of the locked date.
   */
  lockedDate?: string;
  _lockedDate?: Element;
  /**
   * Support human navigation.
   */
  name?: string;
  _name?: Element;
  /**
   * Helps establish the "authority/credibility" of the value set.  May also allow for contact.
   */
  publisher?: string;
  _publisher?: Element;
  /**
   * Explains why this value set is needed and why it has been constrained as it has.
   */
  requirements?: string;
  _requirements?: Element;
  /**
   * Identify when/if the value set should be used.
   */
  status: string;
  _status?: Element;
  /**
   * An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.
   */
  url?: string;
  _url?: Element;
  /**
   * Assist in searching for appropriate content.
   */
  useContext?: CodeableConcept[];
  /**
   * Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: string;
  _version?: Element;
}
/**
 * Code Values for the ValueSet.status field
 */
export enum ValueSetStatusCodes {
  DRAFT = "draft",
  ACTIVE = "active",
  RETIRED = "retired",
}
/**
 * Deals with details of the dispense part of the supply specification.
 */
export interface VisionPrescriptionDispense extends BackboneElement {
  /**
   * Power adjustment for multifocal lenses measured in diopters (0.25 units).
   */
  add?: number;
  /**
   * Adjustment for astigmatism measured in integer degrees.
   */
  axis?: number;
  /**
   * Back curvature measured in millimeters.
   */
  backCurve?: number;
  /**
   * The relative base, or reference lens edge, for the prism.
   */
  base?: string;
  _base?: Element;
  /**
   * Brand recommendations or restrictions.
   */
  brand?: string;
  _brand?: Element;
  /**
   * Special color or pattern.
   */
  color?: string;
  _color?: Element;
  /**
   * Power adjustment for astigmatism measured in diopters (0.25 units).
   */
  cylinder?: number;
  /**
   * Contact lens diameter measured in millimeters.
   */
  diameter?: number;
  /**
   * The recommended maximum wear period for the lens.
   */
  duration?: Quantity;
  /**
   * The eye for which the lens applies.
   */
  eye?: string;
  _eye?: Element;
  /**
   * Notes for special requirements such as coatings and lens materials.
   */
  notes?: string;
  _notes?: Element;
  /**
   * Contact lens power measured in diopters (0.25 units).
   */
  power?: number;
  /**
   * Amount of prism to compensate for eye alignment in fractional units.
   */
  prism?: number;
  /**
   * Identifies the type of vision correction product which is required for the patient.
   */
  product: Coding;
  /**
   * Lens power measured in diopters (0.25 units).
   */
  sphere?: number;
}
/**
 * Code Values for the VisionPrescription.dispense.base field
 */
export enum VisionPrescriptionDispenseBaseCodes {
  UP = "up",
  DOWN = "down",
  IN = "in",
  OUT = "out",
}
/**
 * Code Values for the VisionPrescription.dispense.eye field
 */
export enum VisionPrescriptionDispenseEyeCodes {
  RIGHT = "right",
  LEFT = "left",
}
/**
 * An authorization for the supply of glasses and/or contact lenses to a patient.
 */
export interface VisionPrescription extends DomainResource {
  /** Resource Type Name (for serialization) */
  resourceType: 'VisionPrescription'
  /**
   * The date (and perhaps time) when the prescription was written.
   */
  dateWritten?: string;
  _dateWritten?: Element;
  /**
   * Deals with details of the dispense part of the supply specification.
   */
  dispense?: VisionPrescriptionDispense[];
  /**
   * A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
   */
  encounter?: Reference;
  /**
   * Business identifier which may be used by other parties to reference or identify the prescription.
   */
  identifier?: Identifier[];
  /**
   * A link to a resource representing the person to whom the vision products will be supplied.
   */
  patient?: Reference;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber?: Reference;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonCodeableConcept?: CodeableConcept;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonReference?: Reference;
}
const account_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/account-status"
};
const account_status_Inactive: Coding = {
  code: "inactive",
  display: "Inactive",
  system: "http://hl7.org/fhir/account-status"
};
/**
 * Indicates whether the account is available to be used.
 */
export const AccountStatus = {
  /**
   * This account is active and may be used.
   */
  Active: account_status_Active,
  /**
   * This account is inactive and should not be used to track financial information.
   */
  Inactive: account_status_Inactive,
};
const actionlist_CancelReverseOrNullify: Coding = {
  code: "cancel",
  display: "Cancel, Reverse or Nullify",
  system: "http://hl7.org/fhir/actionlist"
};
const actionlist_Poll: Coding = {
  code: "poll",
  display: "Poll",
  system: "http://hl7.org/fhir/actionlist"
};
const actionlist_ReProcess: Coding = {
  code: "reprocess",
  display: "Re-Process",
  system: "http://hl7.org/fhir/actionlist"
};
const actionlist_StatusCheck: Coding = {
  code: "status",
  display: "Status Check",
  system: "http://hl7.org/fhir/actionlist"
};
/**
 * List of allowable action which this resource can request.
 */
export const Actionlist = {
  /**
   * Cancel, reverse or nullify the target resource.
   */
  CancelReverseOrNullify: actionlist_CancelReverseOrNullify,
  /**
   * Check for previously un-read/ not-retrieved resources.
   */
  Poll: actionlist_Poll,
  /**
   * Re-process the target resource.
   */
  ReProcess: actionlist_ReProcess,
  /**
   * Retrieve the processing status of the target resource.
   */
  StatusCheck: actionlist_StatusCheck,
};
const address_type_PostalAndPhysical: Coding = {
  code: "both",
  display: "Postal & Physical",
  system: "http://hl7.org/fhir/address-type"
};
const address_type_Physical: Coding = {
  code: "physical",
  display: "Physical",
  system: "http://hl7.org/fhir/address-type"
};
const address_type_Postal: Coding = {
  code: "postal",
  display: "Postal",
  system: "http://hl7.org/fhir/address-type"
};
/**
 * The type of an address (physical / postal)
 * 
 * The type of an address (physical / postal).
 */
export const AddressType = {
  /**
   * An address that is both physical and postal.
   */
  PostalAndPhysical: address_type_PostalAndPhysical,
  /**
   * A physical address that can be visited.
   */
  Physical: address_type_Physical,
  /**
   * Mailing addresses - PO Boxes and care-of addresses.
   */
  Postal: address_type_Postal,
};
const address_use_Home: Coding = {
  code: "home",
  display: "Home",
  system: "http://hl7.org/fhir/address-use"
};
const address_use_OldIncorrect: Coding = {
  code: "old",
  display: "Old / Incorrect",
  system: "http://hl7.org/fhir/address-use"
};
const address_use_Temporary: Coding = {
  code: "temp",
  display: "Temporary",
  system: "http://hl7.org/fhir/address-use"
};
const address_use_Work: Coding = {
  code: "work",
  display: "Work",
  system: "http://hl7.org/fhir/address-use"
};
/**
 * The use of an address
 * 
 * The use of an address (home / work / etc.).
 */
export const AddressUse = {
  /**
   * A communication address at a home.
   */
  Home: address_use_Home,
  /**
   * This address is no longer in use (or was never correct, but retained for records).
   */
  OldIncorrect: address_use_OldIncorrect,
  /**
   * A temporary address. The period can provide more detailed information.
   */
  Temporary: address_use_Temporary,
  /**
   * An office address. First choice for business related contacts during business hours.
   */
  Work: address_use_Work,
};
const administrative_gender_Female: Coding = {
  code: "female",
  display: "Female",
  system: "http://hl7.org/fhir/administrative-gender"
};
const administrative_gender_Male: Coding = {
  code: "male",
  display: "Male",
  system: "http://hl7.org/fhir/administrative-gender"
};
const administrative_gender_Other: Coding = {
  code: "other",
  display: "Other",
  system: "http://hl7.org/fhir/administrative-gender"
};
const administrative_gender_Unknown: Coding = {
  code: "unknown",
  display: "Unknown",
  system: "http://hl7.org/fhir/administrative-gender"
};
/**
 * The gender of a person used for administrative purposes.
 */
export const AdministrativeGender = {
  /**
   * Female
   */
  Female: administrative_gender_Female,
  /**
   * Male
   */
  Male: administrative_gender_Male,
  /**
   * Other
   */
  Other: administrative_gender_Other,
  /**
   * Unknown
   */
  Unknown: administrative_gender_Unknown,
};
const AgeUnits_Year: Coding = {
  code: "a",
  display: "Year",
  system: "http://unitsofmeasure.org"
};
const AgeUnits_Day: Coding = {
  code: "d",
  display: "Day",
  system: "http://unitsofmeasure.org"
};
const AgeUnits_Hour: Coding = {
  code: "h",
  display: "Hour",
  system: "http://unitsofmeasure.org"
};
const AgeUnits_Minute: Coding = {
  code: "min",
  display: "Minute",
  system: "http://unitsofmeasure.org"
};
const AgeUnits_Month: Coding = {
  code: "mo",
  display: "Month",
  system: "http://unitsofmeasure.org"
};
const AgeUnits_Week: Coding = {
  code: "wk",
  display: "Week",
  system: "http://unitsofmeasure.org"
};
/**
 * A valueSet of UCUM codes for representing age value units.
 */
export const AgeUnits = {
  Year: AgeUnits_Year,
  Day: AgeUnits_Day,
  Hour: AgeUnits_Hour,
  Minute: AgeUnits_Minute,
  Month: AgeUnits_Month,
  Week: AgeUnits_Week,
};
const allergy_intolerance_category_Environment: Coding = {
  code: "environment",
  display: "Environment",
  system: "http://hl7.org/fhir/allergy-intolerance-category"
};
const allergy_intolerance_category_Food: Coding = {
  code: "food",
  display: "Food",
  system: "http://hl7.org/fhir/allergy-intolerance-category"
};
const allergy_intolerance_category_Medication: Coding = {
  code: "medication",
  display: "Medication",
  system: "http://hl7.org/fhir/allergy-intolerance-category"
};
const allergy_intolerance_category_Other: Coding = {
  code: "other",
  display: "Other",
  system: "http://hl7.org/fhir/allergy-intolerance-category"
};
/**
 * Category of an identified Substance.
 */
export const AllergyIntoleranceCategory = {
  /**
   * Substances that are encountered in the environment.
   */
  Environment: allergy_intolerance_category_Environment,
  /**
   * Any substance consumed to provide nutritional support for the body.
   */
  Food: allergy_intolerance_category_Food,
  /**
   * Substances administered to achieve a physiological effect.
   */
  Medication: allergy_intolerance_category_Medication,
  /**
   * Other substances that are not covered by any other category.
   */
  Other: allergy_intolerance_category_Other,
};
const allergy_intolerance_criticality_HighRisk: Coding = {
  code: "CRITH",
  display: "High Risk",
  system: "http://hl7.org/fhir/allergy-intolerance-criticality"
};
const allergy_intolerance_criticality_LowRisk: Coding = {
  code: "CRITL",
  display: "Low Risk",
  system: "http://hl7.org/fhir/allergy-intolerance-criticality"
};
const allergy_intolerance_criticality_UnableToDetermine: Coding = {
  code: "CRITU",
  display: "Unable to determine",
  system: "http://hl7.org/fhir/allergy-intolerance-criticality"
};
/**
 * Estimate of the potential clinical harm, or seriousness, of a reaction to an identified Substance.
 */
export const AllergyIntoleranceCriticality = {
  /**
   * The potential clinical impact of a future reaction is estimated as high risk: exposure to substance may result in a life threatening or organ system threatening outcome. Future exposure to the Substance may be considered an absolute contra-indication.
   */
  HighRisk: allergy_intolerance_criticality_HighRisk,
  /**
   * The potential clinical impact of a future reaction is estimated as low risk: exposure to substance is unlikely to result in a life threatening or organ system threatening outcome. Future exposure to the Substance is considered a relative contra-indication.
   */
  LowRisk: allergy_intolerance_criticality_LowRisk,
  /**
   * Unable to assess the potential clinical impact with the information available.
   */
  UnableToDetermine: allergy_intolerance_criticality_UnableToDetermine,
};
const allergy_intolerance_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/allergy-intolerance-status"
};
const allergy_intolerance_status_Confirmed: Coding = {
  code: "confirmed",
  display: "Confirmed",
  system: "http://hl7.org/fhir/allergy-intolerance-status"
};
const allergy_intolerance_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered In Error",
  system: "http://hl7.org/fhir/allergy-intolerance-status"
};
const allergy_intolerance_status_Inactive: Coding = {
  code: "inactive",
  display: "Inactive",
  system: "http://hl7.org/fhir/allergy-intolerance-status"
};
const allergy_intolerance_status_Refuted: Coding = {
  code: "refuted",
  display: "Refuted",
  system: "http://hl7.org/fhir/allergy-intolerance-status"
};
const allergy_intolerance_status_Resolved: Coding = {
  code: "resolved",
  display: "Resolved",
  system: "http://hl7.org/fhir/allergy-intolerance-status"
};
const allergy_intolerance_status_Unconfirmed: Coding = {
  code: "unconfirmed",
  display: "Unconfirmed",
  system: "http://hl7.org/fhir/allergy-intolerance-status"
};
/**
 * Assertion about certainty associated with a propensity, or potential risk, of a reaction to the identified Substance.
 */
export const AllergyIntoleranceStatus = {
  /**
   * An active record of a reaction to the identified Substance.
   */
  Active: allergy_intolerance_status_Active,
  /**
   * A high level of certainty about the propensity for a reaction to the identified Substance, which may include clinical evidence by testing or rechallenge.
   */
  Confirmed: allergy_intolerance_status_Confirmed,
  /**
   * The statement was entered in error and is not valid.
   */
  EnteredInError: allergy_intolerance_status_EnteredInError,
  /**
   * An inactive record of a reaction to the identified Substance.
   */
  Inactive: allergy_intolerance_status_Inactive,
  /**
   * A propensity for a reaction to the identified Substance has been disproven with a high level of clinical certainty, which may include testing or rechallenge, and is refuted.
   */
  Refuted: allergy_intolerance_status_Refuted,
  /**
   * A reaction to the identified Substance has been clinically reassessed by testing or rechallenge and considered to be resolved.
   */
  Resolved: allergy_intolerance_status_Resolved,
  /**
   * A low level of certainty about the propensity for a reaction to the identified Substance.
   */
  Unconfirmed: allergy_intolerance_status_Unconfirmed,
};
const allergy_intolerance_type_Allergy: Coding = {
  code: "allergy",
  display: "Allergy",
  system: "http://hl7.org/fhir/allergy-intolerance-type"
};
const allergy_intolerance_type_Intolerance: Coding = {
  code: "intolerance",
  display: "Intolerance",
  system: "http://hl7.org/fhir/allergy-intolerance-type"
};
/**
 * Identification of the underlying physiological mechanism for a Reaction Risk.
 */
export const AllergyIntoleranceType = {
  /**
   * A propensity for hypersensitivity reaction(s) to a substance.  These reactions are most typically type I hypersensitivity, plus other "allergy-like" reactions, including pseudoallergy.
   */
  Allergy: allergy_intolerance_type_Allergy,
  /**
   * A propensity for adverse reactions to a substance that is not judged to be allergic or "allergy-like".  These reactions are typically (but not necessarily) non-immune.  They are to some degree idiosyncratic and/or individually specific (i.e. are not a reaction that is expected to occur with most or all patients given similar circumstances).
   */
  Intolerance: allergy_intolerance_type_Intolerance,
};
const answer_format_Attachment: Coding = {
  code: "attachment",
  display: "Attachment",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Boolean: Coding = {
  code: "boolean",
  display: "Boolean",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Choice: Coding = {
  code: "choice",
  display: "Choice",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Date: Coding = {
  code: "date",
  display: "Date",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_DateTime: Coding = {
  code: "dateTime",
  display: "Date Time",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Decimal: Coding = {
  code: "decimal",
  display: "Decimal",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Instant: Coding = {
  code: "instant",
  display: "Instant",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Integer: Coding = {
  code: "integer",
  display: "Integer",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_OpenChoice: Coding = {
  code: "open-choice",
  display: "Open Choice",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Quantity: Coding = {
  code: "quantity",
  display: "Quantity",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Reference: Coding = {
  code: "reference",
  display: "Reference",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_String: Coding = {
  code: "string",
  display: "String",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Text: Coding = {
  code: "text",
  display: "Text",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Time: Coding = {
  code: "time",
  display: "Time",
  system: "http://hl7.org/fhir/answer-format"
};
const answer_format_Url: Coding = {
  code: "url",
  display: "Url",
  system: "http://hl7.org/fhir/answer-format"
};
/**
 * The expected format of an answer.
 */
export const AnswerFormat = {
  /**
   * Answer is binary content such as a image, PDF, etc.
   */
  Attachment: answer_format_Attachment,
  /**
   * Answer is a yes/no answer.
   */
  Boolean: answer_format_Boolean,
  /**
   * Answer is a Coding drawn from a list of options.
   */
  Choice: answer_format_Choice,
  /**
   * Answer is a date.
   */
  Date: answer_format_Date,
  /**
   * Answer is a date and time.
   */
  DateTime: answer_format_DateTime,
  /**
   * Answer is a floating point number.
   */
  Decimal: answer_format_Decimal,
  /**
   * Answer is a system timestamp.
   */
  Instant: answer_format_Instant,
  /**
   * Answer is an integer.
   */
  Integer: answer_format_Integer,
  /**
   * Answer is a Coding drawn from a list of options or a free-text entry.
   */
  OpenChoice: answer_format_OpenChoice,
  /**
   * Answer is a combination of a numeric value and unit, potentially with a comparator (<, >, etc.).
   */
  Quantity: answer_format_Quantity,
  /**
   * Answer is a reference to another resource (practitioner, organization, etc.).
   */
  Reference: answer_format_Reference,
  /**
   * Answer is a short (few words to short sentence) free-text entry.
   */
  String: answer_format_String,
  /**
   * Answer is a long (potentially multi-paragraph) free-text entry (still captured as a string).
   */
  Text: answer_format_Text,
  /**
   * Answer is a time (hour/minute/second) independent of date.
   */
  Time: answer_format_Time,
  /**
   * Answer is a url (website, FTP site, etc.).
   */
  Url: answer_format_Url,
};
const appointmentstatus_Arrived: Coding = {
  code: "arrived",
  display: "Arrived",
  system: "http://hl7.org/fhir/appointmentstatus"
};
const appointmentstatus_Booked: Coding = {
  code: "booked",
  display: "Booked",
  system: "http://hl7.org/fhir/appointmentstatus"
};
const appointmentstatus_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/appointmentstatus"
};
const appointmentstatus_Fulfilled: Coding = {
  code: "fulfilled",
  display: "Fulfilled",
  system: "http://hl7.org/fhir/appointmentstatus"
};
const appointmentstatus_NoShow: Coding = {
  code: "noshow",
  display: "No Show",
  system: "http://hl7.org/fhir/appointmentstatus"
};
const appointmentstatus_Pending: Coding = {
  code: "pending",
  display: "Pending",
  system: "http://hl7.org/fhir/appointmentstatus"
};
const appointmentstatus_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/appointmentstatus"
};
/**
 * The free/busy status of an appointment.
 */
export const Appointmentstatus = {
  /**
   * Some of the patients have arrived.
   */
  Arrived: appointmentstatus_Arrived,
  /**
   * All participant(s) have been considered and the appointment is confirmed to go ahead at the date/times specified.
   */
  Booked: appointmentstatus_Booked,
  /**
   * The appointment has been cancelled.
   */
  Cancelled: appointmentstatus_Cancelled,
  /**
   * This appointment has completed and may have resulted in an encounter.
   */
  Fulfilled: appointmentstatus_Fulfilled,
  /**
   * Some or all of the participant(s) have not/did not appear for the appointment (usually the patient).
   */
  NoShow: appointmentstatus_NoShow,
  /**
   * Some or all of the participant(s) have not finalized their acceptance of the appointment request.
   */
  Pending: appointmentstatus_Pending,
  /**
   * None of the participant(s) have finalized their acceptance of the appointment request, and the start/end time may not be set yet.
   */
  Proposed: appointmentstatus_Proposed,
};
const assert_direction_codes_Request: Coding = {
  code: "request",
  display: "request",
  system: "http://hl7.org/fhir/assert-direction-codes"
};
const assert_direction_codes_Response: Coding = {
  code: "response",
  display: "response",
  system: "http://hl7.org/fhir/assert-direction-codes"
};
/**
 * The type of direction to use for assertion.
 * 
 * The direction to use for assertions.
 */
export const AssertDirectionCodes = {
  /**
   * The assertion is evaluated on the request.
   */
  Request: assert_direction_codes_Request,
  /**
   * The assertion is evaluated on the response. This is the default value.
   */
  Response: assert_direction_codes_Response,
};
const assert_operator_codes_Contains: Coding = {
  code: "contains",
  display: "contains",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_Empty: Coding = {
  code: "empty",
  display: "empty",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_Equals: Coding = {
  code: "equals",
  display: "equals",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_GreaterThan: Coding = {
  code: "greaterThan",
  display: "greaterThan",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_In: Coding = {
  code: "in",
  display: "in",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_LessThan: Coding = {
  code: "lessThan",
  display: "lessThan",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_NotContains: Coding = {
  code: "notContains",
  display: "notContains",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_NotEmpty: Coding = {
  code: "notEmpty",
  display: "notEmpty",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_NotEquals: Coding = {
  code: "notEquals",
  display: "notEquals",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
const assert_operator_codes_NotIn: Coding = {
  code: "notIn",
  display: "notIn",
  system: "http://hl7.org/fhir/assert-operator-codes"
};
/**
 * The type of operator to use for assertion.
 * 
 * The type of operator to use for assertions.
 */
export const AssertOperatorCodes = {
  /**
   * Compare value string contains a known value.
   */
  Contains: assert_operator_codes_Contains,
  /**
   * Compare value is empty.
   */
  Empty: assert_operator_codes_Empty,
  /**
   * Default value. Equals comparison.
   */
  Equals: assert_operator_codes_Equals,
  /**
   * Compare value to be greater than a known value.
   */
  GreaterThan: assert_operator_codes_GreaterThan,
  /**
   * Compare value within a known set of values.
   */
  In: assert_operator_codes_In,
  /**
   * Compare value to be less than a known value.
   */
  LessThan: assert_operator_codes_LessThan,
  /**
   * Compare value string does not contain a known value.
   */
  NotContains: assert_operator_codes_NotContains,
  /**
   * Compare value is not empty.
   */
  NotEmpty: assert_operator_codes_NotEmpty,
  /**
   * Not equals comparison.
   */
  NotEquals: assert_operator_codes_NotEquals,
  /**
   * Compare value not within a known set of values.
   */
  NotIn: assert_operator_codes_NotIn,
};
const assert_response_code_types_Bad: Coding = {
  code: "bad",
  display: "bad",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_Conflict: Coding = {
  code: "conflict",
  display: "conflict",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_Created: Coding = {
  code: "created",
  display: "created",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_Forbidden: Coding = {
  code: "forbidden",
  display: "forbidden",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_Gone: Coding = {
  code: "gone",
  display: "gone",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_MethodNotAllowed: Coding = {
  code: "methodNotAllowed",
  display: "methodNotAllowed",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_NoContent: Coding = {
  code: "noContent",
  display: "noContent",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_NotFound: Coding = {
  code: "notFound",
  display: "notFound",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_NotModified: Coding = {
  code: "notModified",
  display: "notModified",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_Okay: Coding = {
  code: "okay",
  display: "okay",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_PreconditionFailed: Coding = {
  code: "preconditionFailed",
  display: "preconditionFailed",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
const assert_response_code_types_Unprocessable: Coding = {
  code: "unprocessable",
  display: "unprocessable",
  system: "http://hl7.org/fhir/assert-response-code-types"
};
/**
 * The type of response code to use for assertion.
 * 
 * The response code to expect in the response.
 */
export const AssertResponseCodeTypes = {
  /**
   * Response code is 400.
   */
  Bad: assert_response_code_types_Bad,
  /**
   * Response code is 409.
   */
  Conflict: assert_response_code_types_Conflict,
  /**
   * Response code is 201.
   */
  Created: assert_response_code_types_Created,
  /**
   * Response code is 403.
   */
  Forbidden: assert_response_code_types_Forbidden,
  /**
   * Response code is 410.
   */
  Gone: assert_response_code_types_Gone,
  /**
   * Response code is 405.
   */
  MethodNotAllowed: assert_response_code_types_MethodNotAllowed,
  /**
   * Response code is 204.
   */
  NoContent: assert_response_code_types_NoContent,
  /**
   * Response code is 404.
   */
  NotFound: assert_response_code_types_NotFound,
  /**
   * Response code is 304.
   */
  NotModified: assert_response_code_types_NotModified,
  /**
   * Response code is 200.
   */
  Okay: assert_response_code_types_Okay,
  /**
   * Response code is 412.
   */
  PreconditionFailed: assert_response_code_types_PreconditionFailed,
  /**
   * Response code is 422.
   */
  Unprocessable: assert_response_code_types_Unprocessable,
};
const audit_event_action_Create: Coding = {
  code: "C",
  display: "Create",
  system: "http://hl7.org/fhir/audit-event-action"
};
const audit_event_action_Delete: Coding = {
  code: "D",
  display: "Delete",
  system: "http://hl7.org/fhir/audit-event-action"
};
const audit_event_action_Execute: Coding = {
  code: "E",
  display: "Execute",
  system: "http://hl7.org/fhir/audit-event-action"
};
const audit_event_action_ReadViewPrint: Coding = {
  code: "R",
  display: "Read/View/Print",
  system: "http://hl7.org/fhir/audit-event-action"
};
const audit_event_action_Update: Coding = {
  code: "U",
  display: "Update",
  system: "http://hl7.org/fhir/audit-event-action"
};
/**
 * Indicator for type of action performed during the event that generated the audit.
 */
export const AuditEventAction = {
  /**
   * Create a new database object, such as placing an order.
   */
  Create: audit_event_action_Create,
  /**
   * Delete items, such as a doctor master file record.
   */
  Delete: audit_event_action_Delete,
  /**
   * Perform a system or application function such as log-on, program execution or use of an object's method, or perform a query/search operation.
   */
  Execute: audit_event_action_Execute,
  /**
   * Display or print data, such as a doctor census.
   */
  ReadViewPrint: audit_event_action_ReadViewPrint,
  /**
   * Update data, such as revise patient information.
   */
  Update: audit_event_action_Update,
};
const audit_event_outcome_Success: Coding = {
  code: "0",
  display: "Success",
  system: "http://hl7.org/fhir/audit-event-outcome"
};
const audit_event_outcome_MajorFailure: Coding = {
  code: "12",
  display: "Major failure",
  system: "http://hl7.org/fhir/audit-event-outcome"
};
const audit_event_outcome_MinorFailure: Coding = {
  code: "4",
  display: "Minor failure",
  system: "http://hl7.org/fhir/audit-event-outcome"
};
const audit_event_outcome_SeriousFailure: Coding = {
  code: "8",
  display: "Serious failure",
  system: "http://hl7.org/fhir/audit-event-outcome"
};
/**
 * Indicates whether the event succeeded or failed
 */
export const AuditEventOutcome = {
  /**
   * The operation completed successfully (whether with warnings or not).
   */
  Success: audit_event_outcome_Success,
  /**
   * An error of such magnitude occurred that the system is no longer available for use (i.e. the system died).
   */
  MajorFailure: audit_event_outcome_MajorFailure,
  /**
   * The action was not successful due to some kind of catered for error (often equivalent to an HTTP 400 response).
   */
  MinorFailure: audit_event_outcome_MinorFailure,
  /**
   * The action was not successful due to some kind of unexpected error (often equivalent to an HTTP 500 response).
   */
  SeriousFailure: audit_event_outcome_SeriousFailure,
};
const binding_strength_Example: Coding = {
  code: "example",
  display: "Example",
  system: "http://hl7.org/fhir/binding-strength"
};
const binding_strength_Extensible: Coding = {
  code: "extensible",
  display: "Extensible",
  system: "http://hl7.org/fhir/binding-strength"
};
const binding_strength_Preferred: Coding = {
  code: "preferred",
  display: "Preferred",
  system: "http://hl7.org/fhir/binding-strength"
};
const binding_strength_Required: Coding = {
  code: "required",
  display: "Required",
  system: "http://hl7.org/fhir/binding-strength"
};
/**
 * Indication of the degree of conformance expectations associated with a binding.
 */
export const BindingStrength = {
  /**
   * Instances are not expected or even encouraged to draw from the specified value set.  The value set merely provides examples of the types of concepts intended to be included.
   */
  Example: binding_strength_Example,
  /**
   * To be conformant, instances of this element SHALL include a code from the specified value set if any of the codes within the value set can apply to the concept being communicated.  If the valueset does not cover the concept (based on human review), alternate codings (or, data type allowing, text) may be included instead.
   */
  Extensible: binding_strength_Extensible,
  /**
   * Instances are encouraged to draw from the specified codes for interoperability purposes but are not required to do so to be considered conformant.
   */
  Preferred: binding_strength_Preferred,
  /**
   * To be conformant, instances of this element SHALL include a code from the specified value set.
   */
  Required: binding_strength_Required,
};
const bundle_type_Batch: Coding = {
  code: "batch",
  display: "Batch",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_BatchResponse: Coding = {
  code: "batch-response",
  display: "Batch Response",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_Collection: Coding = {
  code: "collection",
  display: "Collection",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_Document: Coding = {
  code: "document",
  display: "Document",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_HistoryList: Coding = {
  code: "history",
  display: "History List",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_Message: Coding = {
  code: "message",
  display: "Message",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_SearchResults: Coding = {
  code: "searchset",
  display: "Search Results",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_Transaction: Coding = {
  code: "transaction",
  display: "Transaction",
  system: "http://hl7.org/fhir/bundle-type"
};
const bundle_type_TransactionResponse: Coding = {
  code: "transaction-response",
  display: "Transaction Response",
  system: "http://hl7.org/fhir/bundle-type"
};
/**
 * Indicates the purpose of a bundle - how it was intended to be used.
 */
export const BundleType = {
  /**
   * The bundle is a transaction - intended to be processed by a server as a group of actions.
   */
  Batch: bundle_type_Batch,
  /**
   * The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
   */
  BatchResponse: bundle_type_BatchResponse,
  /**
   * The bundle is a set of resources collected into a single document for ease of distribution.
   */
  Collection: bundle_type_Collection,
  /**
   * The bundle is a document. The first resource is a Composition.
   */
  Document: bundle_type_Document,
  /**
   * The bundle is a list of resources from a history interaction on a server.
   */
  HistoryList: bundle_type_HistoryList,
  /**
   * The bundle is a message. The first resource is a MessageHeader.
   */
  Message: bundle_type_Message,
  /**
   * The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
   */
  SearchResults: bundle_type_SearchResults,
  /**
   * The bundle is a transaction - intended to be processed by a server as an atomic commit.
   */
  Transaction: bundle_type_Transaction,
  /**
   * The bundle is a transaction response. Because the response is a transaction response, the transactionhas succeeded, and all responses are error free.
   */
  TransactionResponse: bundle_type_TransactionResponse,
};
const care_plan_activity_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/care-plan-activity-status"
};
const care_plan_activity_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/care-plan-activity-status"
};
const care_plan_activity_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/care-plan-activity-status"
};
const care_plan_activity_status_NotStarted: Coding = {
  code: "not-started",
  display: "Not Started",
  system: "http://hl7.org/fhir/care-plan-activity-status"
};
const care_plan_activity_status_OnHold: Coding = {
  code: "on-hold",
  display: "On Hold",
  system: "http://hl7.org/fhir/care-plan-activity-status"
};
const care_plan_activity_status_Scheduled: Coding = {
  code: "scheduled",
  display: "Scheduled",
  system: "http://hl7.org/fhir/care-plan-activity-status"
};
/**
 * Indicates where the activity is at in its overall life cycle.
 */
export const CarePlanActivityStatus = {
  /**
   * The activities have been ended prior to completion (perhaps even before they were started).
   */
  Cancelled: care_plan_activity_status_Cancelled,
  /**
   * The activities have been completed (more or less) as planned.
   */
  Completed: care_plan_activity_status_Completed,
  /**
   * Activity has been started but is not yet complete.
   */
  InProgress: care_plan_activity_status_InProgress,
  /**
   * Activity is planned but no action has yet been taken.
   */
  NotStarted: care_plan_activity_status_NotStarted,
  /**
   * Activity was started but has temporarily ceased with an expectation of resumption at a future time.
   */
  OnHold: care_plan_activity_status_OnHold,
  /**
   * Appointment or other booking has occurred but activity has not yet begun.
   */
  Scheduled: care_plan_activity_status_Scheduled,
};
const care_plan_relationship_Fulfills: Coding = {
  code: "fulfills",
  display: "Fulfills",
  system: "http://hl7.org/fhir/care-plan-relationship"
};
const care_plan_relationship_Includes: Coding = {
  code: "includes",
  display: "Includes",
  system: "http://hl7.org/fhir/care-plan-relationship"
};
const care_plan_relationship_Replaces: Coding = {
  code: "replaces",
  display: "Replaces",
  system: "http://hl7.org/fhir/care-plan-relationship"
};
/**
 * Codes identifying the types of relationships between two plans.
 */
export const CarePlanRelationship = {
  /**
   * This plan provides details about how to perform activities defined at a higher level by the referenced plan.
   */
  Fulfills: care_plan_relationship_Fulfills,
  /**
   * The referenced plan is considered to be part of this plan.
   */
  Includes: care_plan_relationship_Includes,
  /**
   * This plan takes the places of the referenced plan.
   */
  Replaces: care_plan_relationship_Replaces,
};
const care_plan_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/care-plan-status"
};
const care_plan_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/care-plan-status"
};
const care_plan_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/care-plan-status"
};
const care_plan_status_Pending: Coding = {
  code: "draft",
  display: "Pending",
  system: "http://hl7.org/fhir/care-plan-status"
};
const care_plan_status_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/care-plan-status"
};
/**
 * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
 */
export const CarePlanStatus = {
  /**
   * The plan is intended to be followed and used as part of patient care.
   */
  Active: care_plan_status_Active,
  /**
   * The plan has been terminated prior to reaching completion (though it may have been replaced by a new plan).
   */
  Cancelled: care_plan_status_Cancelled,
  /**
   * The plan is no longer in use and is not expected to be followed or used in patient care.
   */
  Completed: care_plan_status_Completed,
  /**
   * The plan is in development or awaiting use but is not yet intended to be acted upon.
   */
  Pending: care_plan_status_Pending,
  /**
   * The plan has been suggested but no commitment to it has yet been made.
   */
  Proposed: care_plan_status_Proposed,
};
const claim_type_link_Institutional: Coding = {
  code: "institutional",
  display: "Institutional",
  system: "http://hl7.org/fhir/claim-type-link"
};
const claim_type_link_OralHealth: Coding = {
  code: "oral",
  display: "Oral Health",
  system: "http://hl7.org/fhir/claim-type-link"
};
const claim_type_link_Pharmacy: Coding = {
  code: "pharmacy",
  display: "Pharmacy",
  system: "http://hl7.org/fhir/claim-type-link"
};
const claim_type_link_Professional: Coding = {
  code: "professional",
  display: "Professional",
  system: "http://hl7.org/fhir/claim-type-link"
};
const claim_type_link_Vision: Coding = {
  code: "vision",
  display: "Vision",
  system: "http://hl7.org/fhir/claim-type-link"
};
/**
 * The type or discipline-style of the claim.
 */
export const ClaimTypeLink = {
  /**
   * A claim for Institution based, typically in-patient, goods and services.
   */
  Institutional: claim_type_link_Institutional,
  /**
   * A claim for Oral Health (Dentist, Denturist, Hygienist) goods and services.
   */
  OralHealth: claim_type_link_OralHealth,
  /**
   * A claim for Pharmacy based goods and services.
   */
  Pharmacy: claim_type_link_Pharmacy,
  /**
   * A claim for Professional, typically out-patient, goods and services.
   */
  Professional: claim_type_link_Professional,
  /**
   * A claim for Vision (Ophthamologist, Optometrist and Optician) goods and services.
   */
  Vision: claim_type_link_Vision,
};
const claim_use_link_Complete: Coding = {
  code: "complete",
  display: "Complete",
  system: "http://hl7.org/fhir/claim-use-link"
};
const claim_use_link_Exploratory: Coding = {
  code: "exploratory",
  display: "Exploratory",
  system: "http://hl7.org/fhir/claim-use-link"
};
const claim_use_link_Other: Coding = {
  code: "other",
  display: "Other",
  system: "http://hl7.org/fhir/claim-use-link"
};
const claim_use_link_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/claim-use-link"
};
/**
 * Complete, proposed, exploratory, other.
 */
export const ClaimUseLink = {
  /**
   * The treatment is complete and this represents a Claim for the services.
   */
  Complete: claim_use_link_Complete,
  /**
   * The treatment is proposed and this represents a Pre-determination for the services.
   */
  Exploratory: claim_use_link_Exploratory,
  /**
   * A locally defined or otherwise resolved status.
   */
  Other: claim_use_link_Other,
  /**
   * The treatment is proposed and this represents a Pre-authorization for the services.
   */
  Proposed: claim_use_link_Proposed,
};
const clinical_impression_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/clinical-impression-status"
};
const clinical_impression_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/clinical-impression-status"
};
const clinical_impression_status_InProgress: Coding = {
  code: "in-progress",
  display: "In progress",
  system: "http://hl7.org/fhir/clinical-impression-status"
};
/**
 * The workflow state of a clinical impression.
 */
export const ClinicalImpressionStatus = {
  /**
   * The assessment is done and the results are final.
   */
  Completed: clinical_impression_status_Completed,
  /**
   * This assessment was never actually done and the record is erroneous (e.g. Wrong patient).
   */
  EnteredInError: clinical_impression_status_EnteredInError,
  /**
   * The assessment is still on-going and results are not yet final.
   */
  InProgress: clinical_impression_status_InProgress,
};
const communication_request_status_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Failed: Coding = {
  code: "failed",
  display: "Failed",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Received: Coding = {
  code: "received",
  display: "Received",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/communication-request-status"
};
const communication_request_status_Suspended: Coding = {
  code: "suspended",
  display: "Suspended",
  system: "http://hl7.org/fhir/communication-request-status"
};
/**
 * The status of the communication.
 */
export const CommunicationRequestStatus = {
  /**
   * The receiving system has accepted the order, but work has not yet commenced.
   */
  Accepted: communication_request_status_Accepted,
  /**
   * The work has been complete, the report(s) released, and no further work is planned.
   */
  Completed: communication_request_status_Completed,
  /**
   * The communication was attempted, but due to some procedural error, it could not be completed.
   */
  Failed: communication_request_status_Failed,
  /**
   * The work to fulfill the order is happening.
   */
  InProgress: communication_request_status_InProgress,
  /**
   * The request has been planned.
   */
  Planned: communication_request_status_Planned,
  /**
   * The request has been proposed.
   */
  Proposed: communication_request_status_Proposed,
  /**
   * The receiving system has received the request but not yet decided whether it will be performed.
   */
  Received: communication_request_status_Received,
  /**
   * The receiving system has declined to fulfill the request
   */
  Rejected: communication_request_status_Rejected,
  /**
   * The request has been placed.
   */
  Requested: communication_request_status_Requested,
  /**
   * The request has been held by originating system/user request.
   */
  Suspended: communication_request_status_Suspended,
};
const communication_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/communication-status"
};
const communication_status_Failed: Coding = {
  code: "failed",
  display: "Failed",
  system: "http://hl7.org/fhir/communication-status"
};
const communication_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/communication-status"
};
const communication_status_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/communication-status"
};
const communication_status_Suspended: Coding = {
  code: "suspended",
  display: "Suspended",
  system: "http://hl7.org/fhir/communication-status"
};
/**
 * The status of the communication.
 */
export const CommunicationStatus = {
  /**
   * The message transmission is complete, i.e., delivered to the recipient's destination.
   */
  Completed: communication_status_Completed,
  /**
   * There was a failure in transmitting the message out.
   */
  Failed: communication_status_Failed,
  /**
   * The communication transmission is ongoing.
   */
  InProgress: communication_status_InProgress,
  /**
   * The receiving system has declined to accept the message.
   */
  Rejected: communication_status_Rejected,
  /**
   * The communication transmission has been held by originating system/user request.
   */
  Suspended: communication_status_Suspended,
};
const composition_attestation_mode_Legal: Coding = {
  code: "legal",
  display: "Legal",
  system: "http://hl7.org/fhir/composition-attestation-mode"
};
const composition_attestation_mode_Official: Coding = {
  code: "official",
  display: "Official",
  system: "http://hl7.org/fhir/composition-attestation-mode"
};
const composition_attestation_mode_Personal: Coding = {
  code: "personal",
  display: "Personal",
  system: "http://hl7.org/fhir/composition-attestation-mode"
};
const composition_attestation_mode_Professional: Coding = {
  code: "professional",
  display: "Professional",
  system: "http://hl7.org/fhir/composition-attestation-mode"
};
/**
 * The way in which a person authenticated a composition.
 */
export const CompositionAttestationMode = {
  /**
   * The person authenticated the content and accepted legal responsibility for its content.
   */
  Legal: composition_attestation_mode_Legal,
  /**
   * The organization authenticated the content as consistent with their policies and procedures.
   */
  Official: composition_attestation_mode_Official,
  /**
   * The person authenticated the content in their personal capacity.
   */
  Personal: composition_attestation_mode_Personal,
  /**
   * The person authenticated the content in their professional capacity.
   */
  Professional: composition_attestation_mode_Professional,
};
const composition_status_Amended: Coding = {
  code: "amended",
  display: "Amended",
  system: "http://hl7.org/fhir/composition-status"
};
const composition_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/composition-status"
};
const composition_status_Final: Coding = {
  code: "final",
  display: "Final",
  system: "http://hl7.org/fhir/composition-status"
};
const composition_status_Preliminary: Coding = {
  code: "preliminary",
  display: "Preliminary",
  system: "http://hl7.org/fhir/composition-status"
};
/**
 * The workflow/clinical status of the composition.
 */
export const CompositionStatus = {
  /**
   * The composition content or the referenced resources have been modified (edited or added to) subsequent to being released as "final" and the composition is complete and verified by an authorized person.
   */
  Amended: composition_status_Amended,
  /**
   * The composition or document was originally created/issued in error, and this is an amendment that marks that the entire series should not be considered as valid.
   */
  EnteredInError: composition_status_EnteredInError,
  /**
   * This version of the composition is complete and verified by an appropriate person and no further work is planned. Any subsequent updates would be on a new version of the composition.
   */
  Final: composition_status_Final,
  /**
   * This is a preliminary composition or document (also known as initial or interim). The content may be incomplete or unverified.
   */
  Preliminary: composition_status_Preliminary,
};
const concept_map_equivalence_Disjoint: Coding = {
  code: "disjoint",
  display: "Disjoint",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Equal: Coding = {
  code: "equal",
  display: "Equal",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Equivalent: Coding = {
  code: "equivalent",
  display: "Equivalent",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Inexact: Coding = {
  code: "inexact",
  display: "Inexact",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Narrower: Coding = {
  code: "narrower",
  display: "Narrower",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Specializes: Coding = {
  code: "specializes",
  display: "Specializes",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Subsumes: Coding = {
  code: "subsumes",
  display: "Subsumes",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Unmatched: Coding = {
  code: "unmatched",
  display: "Unmatched",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
const concept_map_equivalence_Wider: Coding = {
  code: "wider",
  display: "Wider",
  system: "http://hl7.org/fhir/concept-map-equivalence"
};
/**
 * The degree of equivalence between concepts.
 */
export const ConceptMapEquivalence = {
  /**
   * This is an explicit assertion that there is no mapping between the source and target concept.
   */
  Disjoint: concept_map_equivalence_Disjoint,
  /**
   * The definitions of the concepts are exactly the same (i.e. only grammatical differences) and structural implications of meaning are identical or irrelevant (i.e. intentionally identical).
   */
  Equal: concept_map_equivalence_Equal,
  /**
   * The definitions of the concepts mean the same thing (including when structural implications of meaning are considered) (i.e. extensionally identical).
   */
  Equivalent: concept_map_equivalence_Equivalent,
  /**
   * The target mapping overlaps with the source concept, but both source and target cover additional meaning, or the definitions are imprecise and it is uncertain whether they have the same boundaries to their meaning. The sense in which the mapping is narrower SHALL be described in the comments in this case, and applications should be careful when attempting to use these mappings operationally.
   */
  Inexact: concept_map_equivalence_Inexact,
  /**
   * The target mapping is narrower in meaning that the source concept. The sense in which the mapping is narrower SHALL be described in the comments in this case, and applications should be careful when attempting to use these mappings operationally.
   */
  Narrower: concept_map_equivalence_Narrower,
  /**
   * The target mapping specializes the meaning of the source concept (e.g. the target is-a source).
   */
  Specializes: concept_map_equivalence_Specializes,
  /**
   * The target mapping subsumes the meaning of the source concept (e.g. the source is-a target).
   */
  Subsumes: concept_map_equivalence_Subsumes,
  /**
   * There is no match for this concept in the destination concept system.
   */
  Unmatched: concept_map_equivalence_Unmatched,
  /**
   * The target mapping is wider in meaning than the source concept.
   */
  Wider: concept_map_equivalence_Wider,
};
const conditional_delete_status_MultipleDeletesSupported: Coding = {
  code: "multiple",
  display: "Multiple Deletes Supported",
  system: "http://hl7.org/fhir/conditional-delete-status"
};
const conditional_delete_status_NotSupported: Coding = {
  code: "not-supported",
  display: "Not Supported",
  system: "http://hl7.org/fhir/conditional-delete-status"
};
const conditional_delete_status_SingleDeletesSupported: Coding = {
  code: "single",
  display: "Single Deletes Supported",
  system: "http://hl7.org/fhir/conditional-delete-status"
};
/**
 * A code that indicates how the server supports conditional delete.
 */
export const ConditionalDeleteStatus = {
  /**
   * Conditional deletes are supported, and multiple resources can be deleted in a single interaction.
   */
  MultipleDeletesSupported: conditional_delete_status_MultipleDeletesSupported,
  /**
   * No support for conditional deletes.
   */
  NotSupported: conditional_delete_status_NotSupported,
  /**
   * Conditional deletes are supported, but only single resources at a time.
   */
  SingleDeletesSupported: conditional_delete_status_SingleDeletesSupported,
};
const condition_clinical_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/condition-clinical"
};
const condition_clinical_Relapse: Coding = {
  code: "relapse",
  display: "Relapse",
  system: "http://hl7.org/fhir/condition-clinical"
};
const condition_clinical_Remission: Coding = {
  code: "remission",
  display: "Remission",
  system: "http://hl7.org/fhir/condition-clinical"
};
const condition_clinical_Resolved: Coding = {
  code: "resolved",
  display: "Resolved",
  system: "http://hl7.org/fhir/condition-clinical"
};
/**
 * Preferred value set for Condition Clinical Status.
 */
export const ConditionClinical = {
  /**
   * The subject is currently experiencing the symptoms of the condition.
   */
  Active: condition_clinical_Active,
  /**
   * The subject is re-experiencing the symptoms of the condition after a period of remission or presumed resolution.
   */
  Relapse: condition_clinical_Relapse,
  /**
   * The subject is no longer experiencing the symptoms of the condition, but there is a risk of the symptoms returning.
   */
  Remission: condition_clinical_Remission,
  /**
   * The subject is no longer experiencing the symptoms of the condition and there is no perceived risk of the symptoms returning.
   */
  Resolved: condition_clinical_Resolved,
};
const condition_ver_status_Confirmed: Coding = {
  code: "confirmed",
  display: "Confirmed",
  system: "http://hl7.org/fhir/condition-ver-status"
};
const condition_ver_status_Differential: Coding = {
  code: "differential",
  display: "Differential",
  system: "http://hl7.org/fhir/condition-ver-status"
};
const condition_ver_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered In Error",
  system: "http://hl7.org/fhir/condition-ver-status"
};
const condition_ver_status_Provisional: Coding = {
  code: "provisional",
  display: "Provisional",
  system: "http://hl7.org/fhir/condition-ver-status"
};
const condition_ver_status_Refuted: Coding = {
  code: "refuted",
  display: "Refuted",
  system: "http://hl7.org/fhir/condition-ver-status"
};
const condition_ver_status_Unknown: Coding = {
  code: "unknown",
  display: "Unknown",
  system: "http://hl7.org/fhir/condition-ver-status"
};
/**
 * The verification status to support or decline the clinical status of the condition or diagnosis.
 */
export const ConditionVerStatus = {
  /**
   * There is sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.
   */
  Confirmed: condition_ver_status_Confirmed,
  /**
   * One of a set of potential (and typically mutually exclusive) diagnosis asserted to further guide the diagnostic process and preliminary treatment.
   */
  Differential: condition_ver_status_Differential,
  /**
   * The statement was entered in error and is not valid.
   */
  EnteredInError: condition_ver_status_EnteredInError,
  /**
   * This is a tentative diagnosis - still a candidate that is under consideration.
   */
  Provisional: condition_ver_status_Provisional,
  /**
   * This condition has been ruled out by diagnostic and clinical evidence.
   */
  Refuted: condition_ver_status_Refuted,
  /**
   * The condition status is unknown.  Note that "unknown" is a value of last resort and every attempt should be made to provide a meaningful value other than "unknown".
   */
  Unknown: condition_ver_status_Unknown,
};
const conformance_resource_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/conformance-resource-status"
};
const conformance_resource_status_Draft: Coding = {
  code: "draft",
  display: "Draft",
  system: "http://hl7.org/fhir/conformance-resource-status"
};
const conformance_resource_status_Retired: Coding = {
  code: "retired",
  display: "Retired",
  system: "http://hl7.org/fhir/conformance-resource-status"
};
/**
 * The lifecycle status of a Value Set or Concept Map.
 */
export const ConformanceResourceStatus = {
  /**
   * This resource is ready for normal use.
   */
  Active: conformance_resource_status_Active,
  /**
   * This resource is still under development.
   */
  Draft: conformance_resource_status_Draft,
  /**
   * This resource has been withdrawn or superseded and should no longer be used.
   */
  Retired: conformance_resource_status_Retired,
};
const conformance_statement_kind_Capability: Coding = {
  code: "capability",
  display: "Capability",
  system: "http://hl7.org/fhir/conformance-statement-kind"
};
const conformance_statement_kind_Instance: Coding = {
  code: "instance",
  display: "Instance",
  system: "http://hl7.org/fhir/conformance-statement-kind"
};
const conformance_statement_kind_Requirements: Coding = {
  code: "requirements",
  display: "Requirements",
  system: "http://hl7.org/fhir/conformance-statement-kind"
};
/**
 * How a conformance statement is intended to be used.
 */
export const ConformanceStatementKind = {
  /**
   * The Conformance instance represents the capabilities of a system or piece of software, independent of a particular installation.
   */
  Capability: conformance_statement_kind_Capability,
  /**
   * The Conformance instance represents the present capabilities of a specific system instance.  This is the kind returned by OPTIONS for a FHIR server end-point.
   */
  Instance: conformance_statement_kind_Instance,
  /**
   * The Conformance instance represents a set of requirements for other systems to meet; e.g. as part of an implementation guide or 'request for proposal'.
   */
  Requirements: conformance_statement_kind_Requirements,
};
const constraint_severity_Error: Coding = {
  code: "error",
  display: "Error",
  system: "http://hl7.org/fhir/constraint-severity"
};
const constraint_severity_Warning: Coding = {
  code: "warning",
  display: "Warning",
  system: "http://hl7.org/fhir/constraint-severity"
};
/**
 * SHALL applications comply with this constraint?
 */
export const ConstraintSeverity = {
  /**
   * If the constraint is violated, the resource is not conformant.
   */
  Error: constraint_severity_Error,
  /**
   * If the constraint is violated, the resource is conformant, but it is not necessarily following best practice.
   */
  Warning: constraint_severity_Warning,
};
const contact_point_system_Email: Coding = {
  code: "email",
  display: "Email",
  system: "http://hl7.org/fhir/contact-point-system"
};
const contact_point_system_Fax: Coding = {
  code: "fax",
  display: "Fax",
  system: "http://hl7.org/fhir/contact-point-system"
};
const contact_point_system_URL: Coding = {
  code: "other",
  display: "URL",
  system: "http://hl7.org/fhir/contact-point-system"
};
const contact_point_system_Pager: Coding = {
  code: "pager",
  display: "Pager",
  system: "http://hl7.org/fhir/contact-point-system"
};
const contact_point_system_Phone: Coding = {
  code: "phone",
  display: "Phone",
  system: "http://hl7.org/fhir/contact-point-system"
};
/**
 * Telecommunications form for contact point
 */
export const ContactPointSystem = {
  /**
   * The value is an email address.
   */
  Email: contact_point_system_Email,
  /**
   * The value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
   */
  Fax: contact_point_system_Fax,
  /**
   * A contact that is not a phone, fax, or email address. The format of the value SHOULD be a URL. This is intended for various personal contacts including blogs, Twitter, Facebook, etc. Do not use for email addresses. If this is not a URL, then it will require human interpretation.
   */
  URL: contact_point_system_URL,
  /**
   * The value is a pager number. These may be local pager numbers that are only usable on a particular pager system.
   */
  Pager: contact_point_system_Pager,
  /**
   * The value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
   */
  Phone: contact_point_system_Phone,
};
const contact_point_use_Home: Coding = {
  code: "home",
  display: "Home",
  system: "http://hl7.org/fhir/contact-point-use"
};
const contact_point_use_Mobile: Coding = {
  code: "mobile",
  display: "Mobile",
  system: "http://hl7.org/fhir/contact-point-use"
};
const contact_point_use_Old: Coding = {
  code: "old",
  display: "Old",
  system: "http://hl7.org/fhir/contact-point-use"
};
const contact_point_use_Temp: Coding = {
  code: "temp",
  display: "Temp",
  system: "http://hl7.org/fhir/contact-point-use"
};
const contact_point_use_Work: Coding = {
  code: "work",
  display: "Work",
  system: "http://hl7.org/fhir/contact-point-use"
};
/**
 * Use of contact point
 */
export const ContactPointUse = {
  /**
   * A communication contact point at a home; attempted contacts for business purposes might intrude privacy and chances are one will contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts are available.
   */
  Home: contact_point_use_Home,
  /**
   * A telecommunication device that moves and stays with its owner. May have characteristics of all other use codes, suitable for urgent matters, not the first choice for routine business.
   */
  Mobile: contact_point_use_Mobile,
  /**
   * This contact point is no longer in use (or was never correct, but retained for records).
   */
  Old: contact_point_use_Old,
  /**
   * A temporary contact point. The period can provide more detailed information.
   */
  Temp: contact_point_use_Temp,
  /**
   * An office contact point. First choice for business related contacts during business hours.
   */
  Work: contact_point_use_Work,
};
const content_type_Json: Coding = {
  code: "json",
  display: "json",
  system: "http://hl7.org/fhir/content-type"
};
const content_type_Xml: Coding = {
  code: "xml",
  display: "xml",
  system: "http://hl7.org/fhir/content-type"
};
/**
 * The content or mime type.
 * 
 * The content type or mime type to be specified in Accept or Content-Type header.
 */
export const ContentType = {
  /**
   * JSON content-type corresponding to the application/json+fhir mime-type.
   */
  Json: content_type_Json,
  /**
   * XML content-type corresponding to the application/xml+fhir mime-type.
   */
  Xml: content_type_Xml,
};
const data_absent_reason_Asked: Coding = {
  code: "asked",
  display: "Asked",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_AsText: Coding = {
  code: "astext",
  display: "As Text",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_Error: Coding = {
  code: "error",
  display: "Error",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_Masked: Coding = {
  code: "masked",
  display: "Masked",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_NotANumber: Coding = {
  code: "NaN",
  display: "Not a Number",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_NotAsked: Coding = {
  code: "not-asked",
  display: "Not Asked",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_Temp: Coding = {
  code: "temp",
  display: "Temp",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_Unknown: Coding = {
  code: "unknown",
  display: "Unknown",
  system: "http://hl7.org/fhir/data-absent-reason"
};
const data_absent_reason_Unsupported: Coding = {
  code: "unsupported",
  display: "Unsupported",
  system: "http://hl7.org/fhir/data-absent-reason"
};
/**
 * Used to specify why the normally expected content of the data element is missing.
 */
export const DataAbsentReason = {
  /**
   * The source human does not know the value.
   */
  Asked: data_absent_reason_Asked,
  /**
   * The content of the data is represented in the resource narrative.
   */
  AsText: data_absent_reason_AsText,
  /**
   * Some system or workflow process error means that the information is not available.
   */
  Error: data_absent_reason_Error,
  /**
   * The information is not available due to security, privacy or related reasons.
   */
  Masked: data_absent_reason_Masked,
  /**
   * NaN, standing for not a number, is a numeric data type value representing an undefined or unrepresentable value.
   */
  NotANumber: data_absent_reason_NotANumber,
  /**
   * The workflow didn't lead to this value being known.
   */
  NotAsked: data_absent_reason_NotAsked,
  /**
   * There is reason to expect (from the workflow) that the value may become known.
   */
  Temp: data_absent_reason_Temp,
  /**
   * The value is not known.
   */
  Unknown: data_absent_reason_Unknown,
  /**
   * The source system wasn't capable of supporting this element.
   */
  Unsupported: data_absent_reason_Unsupported,
};
const dataelement_stringency_Comparable: Coding = {
  code: "comparable",
  display: "Comparable",
  system: "http://hl7.org/fhir/dataelement-stringency"
};
const dataelement_stringency_Convertable: Coding = {
  code: "convertable",
  display: "Convertable",
  system: "http://hl7.org/fhir/dataelement-stringency"
};
const dataelement_stringency_Equivalent: Coding = {
  code: "equivalent",
  display: "Equivalent",
  system: "http://hl7.org/fhir/dataelement-stringency"
};
const dataelement_stringency_Flexible: Coding = {
  code: "flexible",
  display: "Flexible",
  system: "http://hl7.org/fhir/dataelement-stringency"
};
const dataelement_stringency_FullySpecified: Coding = {
  code: "fully-specified",
  display: "Fully Specified",
  system: "http://hl7.org/fhir/dataelement-stringency"
};
const dataelement_stringency_Scaleable: Coding = {
  code: "scaleable",
  display: "Scaleable",
  system: "http://hl7.org/fhir/dataelement-stringency"
};
/**
 * Indicates the degree of precision of the data element definition.
 */
export const DataelementStringency = {
  /**
   * The data element is sufficiently well-constrained that multiple pieces of data captured according to the constraints of the data element will be comparable (though in some cases, a degree of automated conversion/normalization may be required).
   */
  Comparable: dataelement_stringency_Comparable,
  /**
   * The data element allows multiple units of measure that are convertable between each other (e.g. inches and centimeters) and/or allows data to be captured in multiple value sets for which a known mapping exists allowing conversion of meaning.
   */
  Convertable: dataelement_stringency_Convertable,
  /**
   * The data element allows multiple units of measure having equivalent meaning; e.g. "cc" (cubic centimeter) and "mL" (milliliter).
   */
  Equivalent: dataelement_stringency_Equivalent,
  /**
   * The data element is unconstrained in units, choice of data types and/or choice of vocabulary such that automated comparison of data captured using the data element is not possible.
   */
  Flexible: dataelement_stringency_Flexible,
  /**
   * The data element is fully specified down to a single value set, single unit of measure, single data type, etc.  Multiple pieces of data associated with this data element are fully comparable.
   */
  FullySpecified: dataelement_stringency_FullySpecified,
  /**
   * A convertable data element where unit conversions are different only by a power of 10; e.g. g, mg, kg.
   */
  Scaleable: dataelement_stringency_Scaleable,
};
const data_types_Address: Coding = {
  code: "Address",
  display: "Address",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Age: Coding = {
  code: "Age",
  display: "Age",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Annotation: Coding = {
  code: "Annotation",
  display: "Annotation",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Attachment: Coding = {
  code: "Attachment",
  display: "Attachment",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_BackboneElement: Coding = {
  code: "BackboneElement",
  display: "BackboneElement",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Base64Binary: Coding = {
  code: "base64Binary",
  display: "base64Binary",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Boolean: Coding = {
  code: "boolean",
  display: "boolean",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Code: Coding = {
  code: "code",
  display: "code",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_CodeableConcept: Coding = {
  code: "CodeableConcept",
  display: "CodeableConcept",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Coding: Coding = {
  code: "Coding",
  display: "Coding",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_ContactPoint: Coding = {
  code: "ContactPoint",
  display: "ContactPoint",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Count: Coding = {
  code: "Count",
  display: "Count",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Date: Coding = {
  code: "date",
  display: "date",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_DateTime: Coding = {
  code: "dateTime",
  display: "dateTime",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Decimal: Coding = {
  code: "decimal",
  display: "decimal",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Distance: Coding = {
  code: "Distance",
  display: "Distance",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Duration: Coding = {
  code: "Duration",
  display: "Duration",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Element: Coding = {
  code: "Element",
  display: "Element",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_ElementDefinition: Coding = {
  code: "ElementDefinition",
  display: "ElementDefinition",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Extension: Coding = {
  code: "Extension",
  display: "Extension",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_HumanName: Coding = {
  code: "HumanName",
  display: "HumanName",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Id: Coding = {
  code: "id",
  display: "id",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Identifier: Coding = {
  code: "Identifier",
  display: "Identifier",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Instant: Coding = {
  code: "instant",
  display: "instant",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Integer: Coding = {
  code: "integer",
  display: "integer",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Markdown: Coding = {
  code: "markdown",
  display: "markdown",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Meta: Coding = {
  code: "Meta",
  display: "Meta",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Money: Coding = {
  code: "Money",
  display: "Money",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Narrative: Coding = {
  code: "Narrative",
  display: "Narrative",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Oid: Coding = {
  code: "oid",
  display: "oid",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Period: Coding = {
  code: "Period",
  display: "Period",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_PositiveInt: Coding = {
  code: "positiveInt",
  display: "positiveInt",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Quantity: Coding = {
  code: "Quantity",
  display: "Quantity",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Range: Coding = {
  code: "Range",
  display: "Range",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Ratio: Coding = {
  code: "Ratio",
  display: "Ratio",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Reference: Coding = {
  code: "Reference",
  display: "Reference",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_SampledData: Coding = {
  code: "SampledData",
  display: "SampledData",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Signature: Coding = {
  code: "Signature",
  display: "Signature",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_SimpleQuantity: Coding = {
  code: "SimpleQuantity",
  display: "SimpleQuantity",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_String: Coding = {
  code: "string",
  display: "string",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Time: Coding = {
  code: "time",
  display: "time",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Timing: Coding = {
  code: "Timing",
  display: "Timing",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_UnsignedInt: Coding = {
  code: "unsignedInt",
  display: "unsignedInt",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Uri: Coding = {
  code: "uri",
  display: "uri",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_Uuid: Coding = {
  code: "uuid",
  display: "uuid",
  system: "http://hl7.org/fhir/data-types"
};
const data_types_XHTML: Coding = {
  code: "xhtml",
  display: "XHTML",
  system: "http://hl7.org/fhir/data-types"
};
/**
 * The type of an element - one of the FHIR data types.
 */
export const DataTypes = {
  /**
   * There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
   */
  Address: data_types_Address,
  Age: data_types_Age,
  /**
   * A  text note which also  contains information about who made the statement and when.
   */
  Annotation: data_types_Annotation,
  /**
   * For referring to data content defined in other formats.
   */
  Attachment: data_types_Attachment,
  /**
   * Base definition for all elements that are defined inside a resource - but not those in a data type.
   */
  BackboneElement: data_types_BackboneElement,
  /**
   * A stream of bytes
   */
  Base64Binary: data_types_Base64Binary,
  /**
   * Value of "true" or "false"
   */
  Boolean: data_types_Boolean,
  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
   */
  Code: data_types_Code,
  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
   */
  CodeableConcept: data_types_CodeableConcept,
  /**
   * A reference to a code defined by a terminology system.
   */
  Coding: data_types_Coding,
  /**
   * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
   */
  ContactPoint: data_types_ContactPoint,
  Count: data_types_Count,
  /**
   * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
   */
  Date: data_types_Date,
  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
   */
  DateTime: data_types_DateTime,
  /**
   * A rational number with implicit precision
   */
  Decimal: data_types_Decimal,
  Distance: data_types_Distance,
  Duration: data_types_Duration,
  /**
   * Base definition for all elements in a resource.
   */
  Element: data_types_Element,
  /**
   * Captures constraints on each element within the resource, profile, or extension.
   */
  ElementDefinition: data_types_ElementDefinition,
  /**
   * Optional Extensions Element - found in all resources.
   */
  Extension: data_types_Extension,
  /**
   * A human's name with the ability to identify parts and usage.
   */
  HumanName: data_types_HumanName,
  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
   */
  Id: data_types_Id,
  /**
   * A technical identifier - identifies some entity uniquely and unambiguously.
   */
  Identifier: data_types_Identifier,
  /**
   * An instant in time - known at least to the second
   */
  Instant: data_types_Instant,
  /**
   * A whole number
   */
  Integer: data_types_Integer,
  /**
   * A string that may contain markdown syntax for optional processing by a mark down presentation engine
   */
  Markdown: data_types_Markdown,
  /**
   * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  Meta: data_types_Meta,
  Money: data_types_Money,
  /**
   * A human-readable formatted text, including images.
   */
  Narrative: data_types_Narrative,
  /**
   * An oid represented as a URI
   */
  Oid: data_types_Oid,
  /**
   * A time period defined by a start and end date and optionally time.
   */
  Period: data_types_Period,
  /**
   * An integer with a value that is positive (e.g. >0)
   */
  PositiveInt: data_types_PositiveInt,
  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
   */
  Quantity: data_types_Quantity,
  /**
   * A set of ordered Quantities defined by a low and high limit.
   */
  Range: data_types_Range,
  /**
   * A relationship of two Quantity values - expressed as a numerator and a denominator.
   */
  Ratio: data_types_Ratio,
  /**
   * A reference from one resource to another.
   */
  Reference: data_types_Reference,
  /**
   * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
   */
  SampledData: data_types_SampledData,
  /**
   * A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
   */
  Signature: data_types_Signature,
  SimpleQuantity: data_types_SimpleQuantity,
  /**
   * A sequence of Unicode characters
   */
  String: data_types_String,
  /**
   * A time during the day, with no date specified
   */
  Time: data_types_Time,
  /**
   * Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
   */
  Timing: data_types_Timing,
  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
  UnsignedInt: data_types_UnsignedInt,
  /**
   * String of characters used to identify a name or a resource
   */
  Uri: data_types_Uri,
  /**
   * A UUID, represented as a URI
   */
  Uuid: data_types_Uuid,
  /**
   * XHTML format, as defined by W3C, but restricted usage (mainly, no active content)
   */
  XHTML: data_types_XHTML,
};
const days_of_week_Friday: Coding = {
  code: "fri",
  display: "Friday",
  system: "http://hl7.org/fhir/days-of-week"
};
const days_of_week_Monday: Coding = {
  code: "mon",
  display: "Monday",
  system: "http://hl7.org/fhir/days-of-week"
};
const days_of_week_Saturday: Coding = {
  code: "sat",
  display: "Saturday",
  system: "http://hl7.org/fhir/days-of-week"
};
const days_of_week_Sunday: Coding = {
  code: "sun",
  display: "Sunday",
  system: "http://hl7.org/fhir/days-of-week"
};
const days_of_week_Thursday: Coding = {
  code: "thu",
  display: "Thursday",
  system: "http://hl7.org/fhir/days-of-week"
};
const days_of_week_Tuesday: Coding = {
  code: "tue",
  display: "Tuesday",
  system: "http://hl7.org/fhir/days-of-week"
};
const days_of_week_Wednesday: Coding = {
  code: "wed",
  display: "Wednesday",
  system: "http://hl7.org/fhir/days-of-week"
};
/**
 * The days of the week.
 */
export const DaysOfWeek = {
  /**
   * Friday
   */
  Friday: days_of_week_Friday,
  /**
   * Monday
   */
  Monday: days_of_week_Monday,
  /**
   * Saturday
   */
  Saturday: days_of_week_Saturday,
  /**
   * Sunday
   */
  Sunday: days_of_week_Sunday,
  /**
   * Thursday
   */
  Thursday: days_of_week_Thursday,
  /**
   * Tuesday
   */
  Tuesday: days_of_week_Tuesday,
  /**
   * Wednesday
   */
  Wednesday: days_of_week_Wednesday,
};
const resource_types_Account: Coding = {
  code: "Account",
  display: "Account",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_AllergyIntolerance: Coding = {
  code: "AllergyIntolerance",
  display: "AllergyIntolerance",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Appointment: Coding = {
  code: "Appointment",
  display: "Appointment",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_AppointmentResponse: Coding = {
  code: "AppointmentResponse",
  display: "AppointmentResponse",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_AuditEvent: Coding = {
  code: "AuditEvent",
  display: "AuditEvent",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Basic: Coding = {
  code: "Basic",
  display: "Basic",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Binary: Coding = {
  code: "Binary",
  display: "Binary",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_BodySite: Coding = {
  code: "BodySite",
  display: "BodySite",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Bundle: Coding = {
  code: "Bundle",
  display: "Bundle",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_CarePlan: Coding = {
  code: "CarePlan",
  display: "CarePlan",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Claim: Coding = {
  code: "Claim",
  display: "Claim",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ClaimResponse: Coding = {
  code: "ClaimResponse",
  display: "ClaimResponse",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ClinicalImpression: Coding = {
  code: "ClinicalImpression",
  display: "ClinicalImpression",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Communication: Coding = {
  code: "Communication",
  display: "Communication",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_CommunicationRequest: Coding = {
  code: "CommunicationRequest",
  display: "CommunicationRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Composition: Coding = {
  code: "Composition",
  display: "Composition",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ConceptMap: Coding = {
  code: "ConceptMap",
  display: "ConceptMap",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Condition: Coding = {
  code: "Condition",
  display: "Condition",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Conformance: Coding = {
  code: "Conformance",
  display: "Conformance",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Contract: Coding = {
  code: "Contract",
  display: "Contract",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Coverage: Coding = {
  code: "Coverage",
  display: "Coverage",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DataElement: Coding = {
  code: "DataElement",
  display: "DataElement",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DetectedIssue: Coding = {
  code: "DetectedIssue",
  display: "DetectedIssue",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Device: Coding = {
  code: "Device",
  display: "Device",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DeviceComponent: Coding = {
  code: "DeviceComponent",
  display: "DeviceComponent",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DeviceMetric: Coding = {
  code: "DeviceMetric",
  display: "DeviceMetric",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DeviceUseRequest: Coding = {
  code: "DeviceUseRequest",
  display: "DeviceUseRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DeviceUseStatement: Coding = {
  code: "DeviceUseStatement",
  display: "DeviceUseStatement",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DiagnosticOrder: Coding = {
  code: "DiagnosticOrder",
  display: "DiagnosticOrder",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DiagnosticReport: Coding = {
  code: "DiagnosticReport",
  display: "DiagnosticReport",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DocumentManifest: Coding = {
  code: "DocumentManifest",
  display: "DocumentManifest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DocumentReference: Coding = {
  code: "DocumentReference",
  display: "DocumentReference",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_DomainResource: Coding = {
  code: "DomainResource",
  display: "DomainResource",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_EligibilityRequest: Coding = {
  code: "EligibilityRequest",
  display: "EligibilityRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_EligibilityResponse: Coding = {
  code: "EligibilityResponse",
  display: "EligibilityResponse",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Encounter: Coding = {
  code: "Encounter",
  display: "Encounter",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_EnrollmentRequest: Coding = {
  code: "EnrollmentRequest",
  display: "EnrollmentRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_EnrollmentResponse: Coding = {
  code: "EnrollmentResponse",
  display: "EnrollmentResponse",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_EpisodeOfCare: Coding = {
  code: "EpisodeOfCare",
  display: "EpisodeOfCare",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ExplanationOfBenefit: Coding = {
  code: "ExplanationOfBenefit",
  display: "ExplanationOfBenefit",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_FamilyMemberHistory: Coding = {
  code: "FamilyMemberHistory",
  display: "FamilyMemberHistory",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Flag: Coding = {
  code: "Flag",
  display: "Flag",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Goal: Coding = {
  code: "Goal",
  display: "Goal",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Group: Coding = {
  code: "Group",
  display: "Group",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_HealthcareService: Coding = {
  code: "HealthcareService",
  display: "HealthcareService",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ImagingObjectSelection: Coding = {
  code: "ImagingObjectSelection",
  display: "ImagingObjectSelection",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ImagingStudy: Coding = {
  code: "ImagingStudy",
  display: "ImagingStudy",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Immunization: Coding = {
  code: "Immunization",
  display: "Immunization",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ImmunizationRecommendation: Coding = {
  code: "ImmunizationRecommendation",
  display: "ImmunizationRecommendation",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ImplementationGuide: Coding = {
  code: "ImplementationGuide",
  display: "ImplementationGuide",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_List: Coding = {
  code: "List",
  display: "List",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Location: Coding = {
  code: "Location",
  display: "Location",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Media: Coding = {
  code: "Media",
  display: "Media",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Medication: Coding = {
  code: "Medication",
  display: "Medication",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_MedicationAdministration: Coding = {
  code: "MedicationAdministration",
  display: "MedicationAdministration",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_MedicationDispense: Coding = {
  code: "MedicationDispense",
  display: "MedicationDispense",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_MedicationOrder: Coding = {
  code: "MedicationOrder",
  display: "MedicationOrder",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_MedicationStatement: Coding = {
  code: "MedicationStatement",
  display: "MedicationStatement",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_MessageHeader: Coding = {
  code: "MessageHeader",
  display: "MessageHeader",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_NamingSystem: Coding = {
  code: "NamingSystem",
  display: "NamingSystem",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_NutritionOrder: Coding = {
  code: "NutritionOrder",
  display: "NutritionOrder",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Observation: Coding = {
  code: "Observation",
  display: "Observation",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_OperationDefinition: Coding = {
  code: "OperationDefinition",
  display: "OperationDefinition",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_OperationOutcome: Coding = {
  code: "OperationOutcome",
  display: "OperationOutcome",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Order: Coding = {
  code: "Order",
  display: "Order",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_OrderResponse: Coding = {
  code: "OrderResponse",
  display: "OrderResponse",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Organization: Coding = {
  code: "Organization",
  display: "Organization",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Parameters: Coding = {
  code: "Parameters",
  display: "Parameters",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Patient: Coding = {
  code: "Patient",
  display: "Patient",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_PaymentNotice: Coding = {
  code: "PaymentNotice",
  display: "PaymentNotice",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_PaymentReconciliation: Coding = {
  code: "PaymentReconciliation",
  display: "PaymentReconciliation",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Person: Coding = {
  code: "Person",
  display: "Person",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Practitioner: Coding = {
  code: "Practitioner",
  display: "Practitioner",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Procedure: Coding = {
  code: "Procedure",
  display: "Procedure",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ProcedureRequest: Coding = {
  code: "ProcedureRequest",
  display: "ProcedureRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ProcessRequest: Coding = {
  code: "ProcessRequest",
  display: "ProcessRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ProcessResponse: Coding = {
  code: "ProcessResponse",
  display: "ProcessResponse",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Provenance: Coding = {
  code: "Provenance",
  display: "Provenance",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Questionnaire: Coding = {
  code: "Questionnaire",
  display: "Questionnaire",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_QuestionnaireResponse: Coding = {
  code: "QuestionnaireResponse",
  display: "QuestionnaireResponse",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ReferralRequest: Coding = {
  code: "ReferralRequest",
  display: "ReferralRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_RelatedPerson: Coding = {
  code: "RelatedPerson",
  display: "RelatedPerson",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Resource: Coding = {
  code: "Resource",
  display: "Resource",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_RiskAssessment: Coding = {
  code: "RiskAssessment",
  display: "RiskAssessment",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Schedule: Coding = {
  code: "Schedule",
  display: "Schedule",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_SearchParameter: Coding = {
  code: "SearchParameter",
  display: "SearchParameter",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Slot: Coding = {
  code: "Slot",
  display: "Slot",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Specimen: Coding = {
  code: "Specimen",
  display: "Specimen",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_StructureDefinition: Coding = {
  code: "StructureDefinition",
  display: "StructureDefinition",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Subscription: Coding = {
  code: "Subscription",
  display: "Subscription",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_Substance: Coding = {
  code: "Substance",
  display: "Substance",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_SupplyDelivery: Coding = {
  code: "SupplyDelivery",
  display: "SupplyDelivery",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_SupplyRequest: Coding = {
  code: "SupplyRequest",
  display: "SupplyRequest",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_TestScript: Coding = {
  code: "TestScript",
  display: "TestScript",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_ValueSet: Coding = {
  code: "ValueSet",
  display: "ValueSet",
  system: "http://hl7.org/fhir/resource-types"
};
const resource_types_VisionPrescription: Coding = {
  code: "VisionPrescription",
  display: "VisionPrescription",
  system: "http://hl7.org/fhir/resource-types"
};
/**
 * Either a resource or a data type.
 */
export const DefinedTypes = {
  /**
   * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
   */
  Account_resource_types: resource_types_Account,
  /**
   * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
   */
  Account_resource_types_2: resource_types_Account,
  /**
   * There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
   */
  Address_data_types: data_types_Address,
  /**
   * There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
   */
  Address_data_types_2: data_types_Address,
  Age_data_types: data_types_Age,
  Age_data_types_2: data_types_Age,
  /**
   * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
   */
  AllergyIntolerance_resource_types: resource_types_AllergyIntolerance,
  /**
   * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
   */
  AllergyIntolerance_resource_types_2: resource_types_AllergyIntolerance,
  /**
   * A  text note which also  contains information about who made the statement and when.
   */
  Annotation_data_types: data_types_Annotation,
  /**
   * A  text note which also  contains information about who made the statement and when.
   */
  Annotation_data_types_2: data_types_Annotation,
  /**
   * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
   */
  Appointment_resource_types: resource_types_Appointment,
  /**
   * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
   */
  Appointment_resource_types_2: resource_types_Appointment,
  /**
   * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
   */
  AppointmentResponse_resource_types: resource_types_AppointmentResponse,
  /**
   * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
   */
  AppointmentResponse_resource_types_2: resource_types_AppointmentResponse,
  /**
   * For referring to data content defined in other formats.
   */
  Attachment_data_types: data_types_Attachment,
  /**
   * For referring to data content defined in other formats.
   */
  Attachment_data_types_2: data_types_Attachment,
  /**
   * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
   */
  AuditEvent_resource_types: resource_types_AuditEvent,
  /**
   * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
   */
  AuditEvent_resource_types_2: resource_types_AuditEvent,
  /**
   * Base definition for all elements that are defined inside a resource - but not those in a data type.
   */
  BackboneElement_data_types: data_types_BackboneElement,
  /**
   * Base definition for all elements that are defined inside a resource - but not those in a data type.
   */
  BackboneElement_data_types_2: data_types_BackboneElement,
  /**
   * A stream of bytes
   */
  Base64Binary_data_types: data_types_Base64Binary,
  /**
   * A stream of bytes
   */
  Base64Binary_data_types_2: data_types_Base64Binary,
  /**
   * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
   */
  Basic_resource_types: resource_types_Basic,
  /**
   * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
   */
  Basic_resource_types_2: resource_types_Basic,
  /**
   * A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
   */
  Binary_resource_types: resource_types_Binary,
  /**
   * A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
   */
  Binary_resource_types_2: resource_types_Binary,
  /**
   * Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
   */
  BodySite_resource_types: resource_types_BodySite,
  /**
   * Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
   */
  BodySite_resource_types_2: resource_types_BodySite,
  /**
   * Value of "true" or "false"
   */
  Boolean_data_types: data_types_Boolean,
  /**
   * Value of "true" or "false"
   */
  Boolean_data_types_2: data_types_Boolean,
  /**
   * A container for a collection of resources.
   */
  Bundle_resource_types: resource_types_Bundle,
  /**
   * A container for a collection of resources.
   */
  Bundle_resource_types_2: resource_types_Bundle,
  /**
   * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
   */
  CarePlan_resource_types: resource_types_CarePlan,
  /**
   * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
   */
  CarePlan_resource_types_2: resource_types_CarePlan,
  /**
   * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
   */
  Claim_resource_types: resource_types_Claim,
  /**
   * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
   */
  Claim_resource_types_2: resource_types_Claim,
  /**
   * This resource provides the adjudication details from the processing of a Claim resource.
   */
  ClaimResponse_resource_types: resource_types_ClaimResponse,
  /**
   * This resource provides the adjudication details from the processing of a Claim resource.
   */
  ClaimResponse_resource_types_2: resource_types_ClaimResponse,
  /**
   * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
   */
  ClinicalImpression_resource_types: resource_types_ClinicalImpression,
  /**
   * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
   */
  ClinicalImpression_resource_types_2: resource_types_ClinicalImpression,
  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
   */
  Code_data_types: data_types_Code,
  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
   */
  Code_data_types_2: data_types_Code,
  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
   */
  CodeableConcept_data_types: data_types_CodeableConcept,
  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
   */
  CodeableConcept_data_types_2: data_types_CodeableConcept,
  /**
   * A reference to a code defined by a terminology system.
   */
  Coding_data_types: data_types_Coding,
  /**
   * A reference to a code defined by a terminology system.
   */
  Coding_data_types_2: data_types_Coding,
  /**
   * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
   */
  Communication_resource_types: resource_types_Communication,
  /**
   * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
   */
  Communication_resource_types_2: resource_types_Communication,
  /**
   * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
   */
  CommunicationRequest_resource_types: resource_types_CommunicationRequest,
  /**
   * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
   */
  CommunicationRequest_resource_types_2: resource_types_CommunicationRequest,
  /**
   * A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
   */
  Composition_resource_types: resource_types_Composition,
  /**
   * A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
   */
  Composition_resource_types_2: resource_types_Composition,
  /**
   * A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
   */
  ConceptMap_resource_types: resource_types_ConceptMap,
  /**
   * A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
   */
  ConceptMap_resource_types_2: resource_types_ConceptMap,
  /**
   * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
   */
  Condition_resource_types: resource_types_Condition,
  /**
   * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
   */
  Condition_resource_types_2: resource_types_Condition,
  /**
   * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
   */
  Conformance_resource_types: resource_types_Conformance,
  /**
   * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
   */
  Conformance_resource_types_2: resource_types_Conformance,
  /**
   * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
   */
  ContactPoint_data_types: data_types_ContactPoint,
  /**
   * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
   */
  ContactPoint_data_types_2: data_types_ContactPoint,
  /**
   * A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
   */
  Contract_resource_types: resource_types_Contract,
  /**
   * A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
   */
  Contract_resource_types_2: resource_types_Contract,
  Count_data_types: data_types_Count,
  Count_data_types_2: data_types_Count,
  /**
   * Financial instrument which may be used to pay for or reimburse health care products and services.
   */
  Coverage_resource_types: resource_types_Coverage,
  /**
   * Financial instrument which may be used to pay for or reimburse health care products and services.
   */
  Coverage_resource_types_2: resource_types_Coverage,
  /**
   * The formal description of a single piece of information that can be gathered and reported.
   */
  DataElement_resource_types: resource_types_DataElement,
  /**
   * The formal description of a single piece of information that can be gathered and reported.
   */
  DataElement_resource_types_2: resource_types_DataElement,
  /**
   * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
   */
  Date_data_types: data_types_Date,
  /**
   * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
   */
  Date_data_types_2: data_types_Date,
  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
   */
  DateTime_data_types: data_types_DateTime,
  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
   */
  DateTime_data_types_2: data_types_DateTime,
  /**
   * A rational number with implicit precision
   */
  Decimal_data_types: data_types_Decimal,
  /**
   * A rational number with implicit precision
   */
  Decimal_data_types_2: data_types_Decimal,
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
   */
  DetectedIssue_resource_types: resource_types_DetectedIssue,
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
   */
  DetectedIssue_resource_types_2: resource_types_DetectedIssue,
  /**
   * This resource identifies an instance of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
   */
  Device_resource_types: resource_types_Device,
  /**
   * This resource identifies an instance of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
   */
  Device_resource_types_2: resource_types_Device,
  /**
   * Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
   */
  DeviceComponent_resource_types: resource_types_DeviceComponent,
  /**
   * Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
   */
  DeviceComponent_resource_types_2: resource_types_DeviceComponent,
  /**
   * Describes a measurement, calculation or setting capability of a medical device.
   */
  DeviceMetric_resource_types: resource_types_DeviceMetric,
  /**
   * Describes a measurement, calculation or setting capability of a medical device.
   */
  DeviceMetric_resource_types_2: resource_types_DeviceMetric,
  /**
   * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
   */
  DeviceUseRequest_resource_types: resource_types_DeviceUseRequest,
  /**
   * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
   */
  DeviceUseRequest_resource_types_2: resource_types_DeviceUseRequest,
  /**
   * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
   */
  DeviceUseStatement_resource_types: resource_types_DeviceUseStatement,
  /**
   * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
   */
  DeviceUseStatement_resource_types_2: resource_types_DeviceUseStatement,
  /**
   * A record of a request for a diagnostic investigation service to be performed.
   */
  DiagnosticOrder_resource_types: resource_types_DiagnosticOrder,
  /**
   * A record of a request for a diagnostic investigation service to be performed.
   */
  DiagnosticOrder_resource_types_2: resource_types_DiagnosticOrder,
  /**
   * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
   */
  DiagnosticReport_resource_types: resource_types_DiagnosticReport,
  /**
   * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
   */
  DiagnosticReport_resource_types_2: resource_types_DiagnosticReport,
  Distance_data_types: data_types_Distance,
  Distance_data_types_2: data_types_Distance,
  /**
   * A manifest that defines a set of documents.
   */
  DocumentManifest_resource_types: resource_types_DocumentManifest,
  /**
   * A manifest that defines a set of documents.
   */
  DocumentManifest_resource_types_2: resource_types_DocumentManifest,
  /**
   * A reference to a document .
   */
  DocumentReference_resource_types: resource_types_DocumentReference,
  /**
   * A reference to a document .
   */
  DocumentReference_resource_types_2: resource_types_DocumentReference,
  /**
   * --- Abstract Type! ---A resource that includes narrative, extensions, and contained resources.
   */
  DomainResource_resource_types: resource_types_DomainResource,
  /**
   * --- Abstract Type! ---A resource that includes narrative, extensions, and contained resources.
   */
  DomainResource_resource_types_2: resource_types_DomainResource,
  Duration_data_types: data_types_Duration,
  Duration_data_types_2: data_types_Duration,
  /**
   * Base definition for all elements in a resource.
   */
  Element_data_types: data_types_Element,
  /**
   * Base definition for all elements in a resource.
   */
  Element_data_types_2: data_types_Element,
  /**
   * Captures constraints on each element within the resource, profile, or extension.
   */
  ElementDefinition_data_types: data_types_ElementDefinition,
  /**
   * Captures constraints on each element within the resource, profile, or extension.
   */
  ElementDefinition_data_types_2: data_types_ElementDefinition,
  /**
   * This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.
   */
  EligibilityRequest_resource_types: resource_types_EligibilityRequest,
  /**
   * This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.
   */
  EligibilityRequest_resource_types_2: resource_types_EligibilityRequest,
  /**
   * This resource provides eligibility and plan details from the processing of an Eligibility resource.
   */
  EligibilityResponse_resource_types: resource_types_EligibilityResponse,
  /**
   * This resource provides eligibility and plan details from the processing of an Eligibility resource.
   */
  EligibilityResponse_resource_types_2: resource_types_EligibilityResponse,
  /**
   * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
   */
  Encounter_resource_types: resource_types_Encounter,
  /**
   * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
   */
  Encounter_resource_types_2: resource_types_Encounter,
  /**
   * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
   */
  EnrollmentRequest_resource_types: resource_types_EnrollmentRequest,
  /**
   * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
   */
  EnrollmentRequest_resource_types_2: resource_types_EnrollmentRequest,
  /**
   * This resource provides enrollment and plan details from the processing of an Enrollment resource.
   */
  EnrollmentResponse_resource_types: resource_types_EnrollmentResponse,
  /**
   * This resource provides enrollment and plan details from the processing of an Enrollment resource.
   */
  EnrollmentResponse_resource_types_2: resource_types_EnrollmentResponse,
  /**
   * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
   */
  EpisodeOfCare_resource_types: resource_types_EpisodeOfCare,
  /**
   * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
   */
  EpisodeOfCare_resource_types_2: resource_types_EpisodeOfCare,
  /**
   * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
   */
  ExplanationOfBenefit_resource_types: resource_types_ExplanationOfBenefit,
  /**
   * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
   */
  ExplanationOfBenefit_resource_types_2: resource_types_ExplanationOfBenefit,
  /**
   * Optional Extensions Element - found in all resources.
   */
  Extension_data_types: data_types_Extension,
  /**
   * Optional Extensions Element - found in all resources.
   */
  Extension_data_types_2: data_types_Extension,
  /**
   * Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
   */
  FamilyMemberHistory_resource_types: resource_types_FamilyMemberHistory,
  /**
   * Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
   */
  FamilyMemberHistory_resource_types_2: resource_types_FamilyMemberHistory,
  /**
   * Prospective warnings of potential issues when providing care to the patient.
   */
  Flag_resource_types: resource_types_Flag,
  /**
   * Prospective warnings of potential issues when providing care to the patient.
   */
  Flag_resource_types_2: resource_types_Flag,
  /**
   * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
   */
  Goal_resource_types: resource_types_Goal,
  /**
   * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
   */
  Goal_resource_types_2: resource_types_Goal,
  /**
   * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
   */
  Group_resource_types: resource_types_Group,
  /**
   * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
   */
  Group_resource_types_2: resource_types_Group,
  /**
   * The details of a healthcare service available at a location.
   */
  HealthcareService_resource_types: resource_types_HealthcareService,
  /**
   * The details of a healthcare service available at a location.
   */
  HealthcareService_resource_types_2: resource_types_HealthcareService,
  /**
   * A human's name with the ability to identify parts and usage.
   */
  HumanName_data_types: data_types_HumanName,
  /**
   * A human's name with the ability to identify parts and usage.
   */
  HumanName_data_types_2: data_types_HumanName,
  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
   */
  Id_data_types: data_types_Id,
  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
   */
  Id_data_types_2: data_types_Id,
  /**
   * A technical identifier - identifies some entity uniquely and unambiguously.
   */
  Identifier_data_types: data_types_Identifier,
  /**
   * A technical identifier - identifies some entity uniquely and unambiguously.
   */
  Identifier_data_types_2: data_types_Identifier,
  /**
   * A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
   */
  ImagingObjectSelection_resource_types: resource_types_ImagingObjectSelection,
  /**
   * A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
   */
  ImagingObjectSelection_resource_types_2: resource_types_ImagingObjectSelection,
  /**
   * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
   */
  ImagingStudy_resource_types: resource_types_ImagingStudy,
  /**
   * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
   */
  ImagingStudy_resource_types_2: resource_types_ImagingStudy,
  /**
   * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
   */
  Immunization_resource_types: resource_types_Immunization,
  /**
   * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
   */
  Immunization_resource_types_2: resource_types_Immunization,
  /**
   * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
   */
  ImmunizationRecommendation_resource_types: resource_types_ImmunizationRecommendation,
  /**
   * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
   */
  ImmunizationRecommendation_resource_types_2: resource_types_ImmunizationRecommendation,
  /**
   * A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
   */
  ImplementationGuide_resource_types: resource_types_ImplementationGuide,
  /**
   * A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
   */
  ImplementationGuide_resource_types_2: resource_types_ImplementationGuide,
  /**
   * An instant in time - known at least to the second
   */
  Instant_data_types: data_types_Instant,
  /**
   * An instant in time - known at least to the second
   */
  Instant_data_types_2: data_types_Instant,
  /**
   * A whole number
   */
  Integer_data_types: data_types_Integer,
  /**
   * A whole number
   */
  Integer_data_types_2: data_types_Integer,
  /**
   * A set of information summarized from a list of other resources.
   */
  List_resource_types: resource_types_List,
  /**
   * A set of information summarized from a list of other resources.
   */
  List_resource_types_2: resource_types_List,
  /**
   * Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
   */
  Location_resource_types: resource_types_Location,
  /**
   * Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
   */
  Location_resource_types_2: resource_types_Location,
  /**
   * A string that may contain markdown syntax for optional processing by a mark down presentation engine
   */
  Markdown_data_types: data_types_Markdown,
  /**
   * A string that may contain markdown syntax for optional processing by a mark down presentation engine
   */
  Markdown_data_types_2: data_types_Markdown,
  /**
   * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
   */
  Media_resource_types: resource_types_Media,
  /**
   * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
   */
  Media_resource_types_2: resource_types_Media,
  /**
   * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
   */
  Medication_resource_types: resource_types_Medication,
  /**
   * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
   */
  Medication_resource_types_2: resource_types_Medication,
  /**
   * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
   */
  MedicationAdministration_resource_types: resource_types_MedicationAdministration,
  /**
   * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
   */
  MedicationAdministration_resource_types_2: resource_types_MedicationAdministration,
  /**
   * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
   */
  MedicationDispense_resource_types: resource_types_MedicationDispense,
  /**
   * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
   */
  MedicationDispense_resource_types_2: resource_types_MedicationDispense,
  /**
   * An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
   */
  MedicationOrder_resource_types: resource_types_MedicationOrder,
  /**
   * An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
   */
  MedicationOrder_resource_types_2: resource_types_MedicationOrder,
  /**
   * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains 
   * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
   */
  MedicationStatement_resource_types: resource_types_MedicationStatement,
  /**
   * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains 
   * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
   */
  MedicationStatement_resource_types_2: resource_types_MedicationStatement,
  /**
   * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
   */
  MessageHeader_resource_types: resource_types_MessageHeader,
  /**
   * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
   */
  MessageHeader_resource_types_2: resource_types_MessageHeader,
  /**
   * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  Meta_data_types: data_types_Meta,
  /**
   * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  Meta_data_types_2: data_types_Meta,
  Money_data_types: data_types_Money,
  Money_data_types_2: data_types_Money,
  /**
   * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
   */
  NamingSystem_resource_types: resource_types_NamingSystem,
  /**
   * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
   */
  NamingSystem_resource_types_2: resource_types_NamingSystem,
  /**
   * A human-readable formatted text, including images.
   */
  Narrative_data_types: data_types_Narrative,
  /**
   * A human-readable formatted text, including images.
   */
  Narrative_data_types_2: data_types_Narrative,
  /**
   * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
   */
  NutritionOrder_resource_types: resource_types_NutritionOrder,
  /**
   * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
   */
  NutritionOrder_resource_types_2: resource_types_NutritionOrder,
  /**
   * Measurements and simple assertions made about a patient, device or other subject.
   */
  Observation_resource_types: resource_types_Observation,
  /**
   * Measurements and simple assertions made about a patient, device or other subject.
   */
  Observation_resource_types_2: resource_types_Observation,
  /**
   * An oid represented as a URI
   */
  Oid_data_types: data_types_Oid,
  /**
   * An oid represented as a URI
   */
  Oid_data_types_2: data_types_Oid,
  /**
   * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
   */
  OperationDefinition_resource_types: resource_types_OperationDefinition,
  /**
   * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
   */
  OperationDefinition_resource_types_2: resource_types_OperationDefinition,
  /**
   * A collection of error, warning or information messages that result from a system action.
   */
  OperationOutcome_resource_types: resource_types_OperationOutcome,
  /**
   * A collection of error, warning or information messages that result from a system action.
   */
  OperationOutcome_resource_types_2: resource_types_OperationOutcome,
  /**
   * A request to perform an action.
   */
  Order_resource_types: resource_types_Order,
  /**
   * A request to perform an action.
   */
  Order_resource_types_2: resource_types_Order,
  /**
   * A response to an order.
   */
  OrderResponse_resource_types: resource_types_OrderResponse,
  /**
   * A response to an order.
   */
  OrderResponse_resource_types_2: resource_types_OrderResponse,
  /**
   * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
   */
  Organization_resource_types: resource_types_Organization,
  /**
   * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
   */
  Organization_resource_types_2: resource_types_Organization,
  /**
   * This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
   */
  Parameters_resource_types: resource_types_Parameters,
  /**
   * This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
   */
  Parameters_resource_types_2: resource_types_Parameters,
  /**
   * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
   */
  Patient_resource_types: resource_types_Patient,
  /**
   * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
   */
  Patient_resource_types_2: resource_types_Patient,
  /**
   * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
   */
  PaymentNotice_resource_types: resource_types_PaymentNotice,
  /**
   * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
   */
  PaymentNotice_resource_types_2: resource_types_PaymentNotice,
  /**
   * This resource provides payment details and claim references supporting a bulk payment.
   */
  PaymentReconciliation_resource_types: resource_types_PaymentReconciliation,
  /**
   * This resource provides payment details and claim references supporting a bulk payment.
   */
  PaymentReconciliation_resource_types_2: resource_types_PaymentReconciliation,
  /**
   * A time period defined by a start and end date and optionally time.
   */
  Period_data_types: data_types_Period,
  /**
   * A time period defined by a start and end date and optionally time.
   */
  Period_data_types_2: data_types_Period,
  /**
   * Demographics and administrative information about a person independent of a specific health-related context.
   */
  Person_resource_types: resource_types_Person,
  /**
   * Demographics and administrative information about a person independent of a specific health-related context.
   */
  Person_resource_types_2: resource_types_Person,
  /**
   * An integer with a value that is positive (e.g. >0)
   */
  PositiveInt_data_types: data_types_PositiveInt,
  /**
   * An integer with a value that is positive (e.g. >0)
   */
  PositiveInt_data_types_2: data_types_PositiveInt,
  /**
   * A person who is directly or indirectly involved in the provisioning of healthcare.
   */
  Practitioner_resource_types: resource_types_Practitioner,
  /**
   * A person who is directly or indirectly involved in the provisioning of healthcare.
   */
  Practitioner_resource_types_2: resource_types_Practitioner,
  /**
   * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
   */
  Procedure_resource_types: resource_types_Procedure,
  /**
   * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
   */
  Procedure_resource_types_2: resource_types_Procedure,
  /**
   * A request for a procedure to be performed. May be a proposal or an order.
   */
  ProcedureRequest_resource_types: resource_types_ProcedureRequest,
  /**
   * A request for a procedure to be performed. May be a proposal or an order.
   */
  ProcedureRequest_resource_types_2: resource_types_ProcedureRequest,
  /**
   * This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
   */
  ProcessRequest_resource_types: resource_types_ProcessRequest,
  /**
   * This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
   */
  ProcessRequest_resource_types_2: resource_types_ProcessRequest,
  /**
   * This resource provides processing status, errors and notes from the processing of a resource.
   */
  ProcessResponse_resource_types: resource_types_ProcessResponse,
  /**
   * This resource provides processing status, errors and notes from the processing of a resource.
   */
  ProcessResponse_resource_types_2: resource_types_ProcessResponse,
  /**
   * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
   */
  Provenance_resource_types: resource_types_Provenance,
  /**
   * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
   */
  Provenance_resource_types_2: resource_types_Provenance,
  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
   */
  Quantity_data_types: data_types_Quantity,
  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
   */
  Quantity_data_types_2: data_types_Quantity,
  /**
   * A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  Questionnaire_resource_types: resource_types_Questionnaire,
  /**
   * A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  Questionnaire_resource_types_2: resource_types_Questionnaire,
  /**
   * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  QuestionnaireResponse_resource_types: resource_types_QuestionnaireResponse,
  /**
   * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  QuestionnaireResponse_resource_types_2: resource_types_QuestionnaireResponse,
  /**
   * A set of ordered Quantities defined by a low and high limit.
   */
  Range_data_types: data_types_Range,
  /**
   * A set of ordered Quantities defined by a low and high limit.
   */
  Range_data_types_2: data_types_Range,
  /**
   * A relationship of two Quantity values - expressed as a numerator and a denominator.
   */
  Ratio_data_types: data_types_Ratio,
  /**
   * A relationship of two Quantity values - expressed as a numerator and a denominator.
   */
  Ratio_data_types_2: data_types_Ratio,
  /**
   * A reference from one resource to another.
   */
  Reference_data_types: data_types_Reference,
  /**
   * A reference from one resource to another.
   */
  Reference_data_types_2: data_types_Reference,
  /**
   * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
   */
  ReferralRequest_resource_types: resource_types_ReferralRequest,
  /**
   * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
   */
  ReferralRequest_resource_types_2: resource_types_ReferralRequest,
  /**
   * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
   */
  RelatedPerson_resource_types: resource_types_RelatedPerson,
  /**
   * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
   */
  RelatedPerson_resource_types_2: resource_types_RelatedPerson,
  /**
   * --- Abstract Type! ---This is the base resource type for everything.
   */
  Resource_resource_types: resource_types_Resource,
  /**
   * --- Abstract Type! ---This is the base resource type for everything.
   */
  Resource_resource_types_2: resource_types_Resource,
  /**
   * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
   */
  RiskAssessment_resource_types: resource_types_RiskAssessment,
  /**
   * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
   */
  RiskAssessment_resource_types_2: resource_types_RiskAssessment,
  /**
   * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
   */
  SampledData_data_types: data_types_SampledData,
  /**
   * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
   */
  SampledData_data_types_2: data_types_SampledData,
  /**
   * A container for slot(s) of time that may be available for booking appointments.
   */
  Schedule_resource_types: resource_types_Schedule,
  /**
   * A container for slot(s) of time that may be available for booking appointments.
   */
  Schedule_resource_types_2: resource_types_Schedule,
  /**
   * A search parameter that defines a named search item that can be used to search/filter on a resource.
   */
  SearchParameter_resource_types: resource_types_SearchParameter,
  /**
   * A search parameter that defines a named search item that can be used to search/filter on a resource.
   */
  SearchParameter_resource_types_2: resource_types_SearchParameter,
  /**
   * A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
   */
  Signature_data_types: data_types_Signature,
  /**
   * A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
   */
  Signature_data_types_2: data_types_Signature,
  SimpleQuantity_data_types: data_types_SimpleQuantity,
  SimpleQuantity_data_types_2: data_types_SimpleQuantity,
  /**
   * A slot of time on a schedule that may be available for booking appointments.
   */
  Slot_resource_types: resource_types_Slot,
  /**
   * A slot of time on a schedule that may be available for booking appointments.
   */
  Slot_resource_types_2: resource_types_Slot,
  /**
   * A sample to be used for analysis.
   */
  Specimen_resource_types: resource_types_Specimen,
  /**
   * A sample to be used for analysis.
   */
  Specimen_resource_types_2: resource_types_Specimen,
  /**
   * A sequence of Unicode characters
   */
  String_data_types: data_types_String,
  /**
   * A sequence of Unicode characters
   */
  String_data_types_2: data_types_String,
  /**
   * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
   */
  StructureDefinition_resource_types: resource_types_StructureDefinition,
  /**
   * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
   */
  StructureDefinition_resource_types_2: resource_types_StructureDefinition,
  /**
   * The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
   */
  Subscription_resource_types: resource_types_Subscription,
  /**
   * The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
   */
  Subscription_resource_types_2: resource_types_Subscription,
  /**
   * A homogeneous material with a definite composition.
   */
  Substance_resource_types: resource_types_Substance,
  /**
   * A homogeneous material with a definite composition.
   */
  Substance_resource_types_2: resource_types_Substance,
  /**
   * Record of delivery of what is supplied.
   */
  SupplyDelivery_resource_types: resource_types_SupplyDelivery,
  /**
   * Record of delivery of what is supplied.
   */
  SupplyDelivery_resource_types_2: resource_types_SupplyDelivery,
  /**
   * A record of a request for a medication, substance or device used in the healthcare setting.
   */
  SupplyRequest_resource_types: resource_types_SupplyRequest,
  /**
   * A record of a request for a medication, substance or device used in the healthcare setting.
   */
  SupplyRequest_resource_types_2: resource_types_SupplyRequest,
  /**
   * TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
   */
  TestScript_resource_types: resource_types_TestScript,
  /**
   * TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
   */
  TestScript_resource_types_2: resource_types_TestScript,
  /**
   * A time during the day, with no date specified
   */
  Time_data_types: data_types_Time,
  /**
   * A time during the day, with no date specified
   */
  Time_data_types_2: data_types_Time,
  /**
   * Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
   */
  Timing_data_types: data_types_Timing,
  /**
   * Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
   */
  Timing_data_types_2: data_types_Timing,
  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
  UnsignedInt_data_types: data_types_UnsignedInt,
  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
  UnsignedInt_data_types_2: data_types_UnsignedInt,
  /**
   * String of characters used to identify a name or a resource
   */
  Uri_data_types: data_types_Uri,
  /**
   * String of characters used to identify a name or a resource
   */
  Uri_data_types_2: data_types_Uri,
  /**
   * A UUID, represented as a URI
   */
  Uuid_data_types: data_types_Uuid,
  /**
   * A UUID, represented as a URI
   */
  Uuid_data_types_2: data_types_Uuid,
  /**
   * A value set specifies a set of codes drawn from one or more code systems.
   */
  ValueSet_resource_types: resource_types_ValueSet,
  /**
   * A value set specifies a set of codes drawn from one or more code systems.
   */
  ValueSet_resource_types_2: resource_types_ValueSet,
  /**
   * An authorization for the supply of glasses and/or contact lenses to a patient.
   */
  VisionPrescription_resource_types: resource_types_VisionPrescription,
  /**
   * An authorization for the supply of glasses and/or contact lenses to a patient.
   */
  VisionPrescription_resource_types_2: resource_types_VisionPrescription,
  /**
   * XHTML format, as defined by W3C, but restricted usage (mainly, no active content)
   */
  XHTML_data_types: data_types_XHTML,
  /**
   * XHTML format, as defined by W3C, but restricted usage (mainly, no active content)
   */
  XHTML_data_types_2: data_types_XHTML,
};
const detectedissue_severity_High: Coding = {
  code: "high",
  display: "High",
  system: "http://hl7.org/fhir/detectedissue-severity"
};
const detectedissue_severity_Low: Coding = {
  code: "low",
  display: "Low",
  system: "http://hl7.org/fhir/detectedissue-severity"
};
const detectedissue_severity_Moderate: Coding = {
  code: "moderate",
  display: "Moderate",
  system: "http://hl7.org/fhir/detectedissue-severity"
};
/**
 * Indicates the potential degree of impact of the identified issue on the patient.
 */
export const DetectedissueSeverity = {
  /**
   * Indicates the issue may be life-threatening or has the potential to cause permanent injury.
   */
  High: detectedissue_severity_High,
  /**
   * Indicates the issue may result in some adverse consequences but is unlikely to substantially affect the situation of the subject.
   */
  Low: detectedissue_severity_Low,
  /**
   * Indicates the issue may result in noticeable adverse consequences but is unlikely to be life-threatening or cause permanent injury.
   */
  Moderate: detectedissue_severity_Moderate,
};
const devicestatus_Available: Coding = {
  code: "available",
  display: "Available",
  system: "http://hl7.org/fhir/devicestatus"
};
const devicestatus_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/devicestatus"
};
const devicestatus_NotAvailable: Coding = {
  code: "not-available",
  display: "Not Available",
  system: "http://hl7.org/fhir/devicestatus"
};
/**
 * The availability status of the device.
 */
export const Devicestatus = {
  /**
   * The Device is available for use.
   */
  Available: devicestatus_Available,
  /**
   * The Device was entered in error and voided.
   */
  EnteredInError: devicestatus_EnteredInError,
  /**
   * The Device is no longer available for use (e.g. lost, expired, damaged).
   */
  NotAvailable: devicestatus_NotAvailable,
};
const device_use_request_priority_ASAP: Coding = {
  code: "asap",
  display: "ASAP",
  system: "http://hl7.org/fhir/device-use-request-priority"
};
const device_use_request_priority_Routine: Coding = {
  code: "routine",
  display: "Routine",
  system: "http://hl7.org/fhir/device-use-request-priority"
};
const device_use_request_priority_Stat: Coding = {
  code: "stat",
  display: "Stat",
  system: "http://hl7.org/fhir/device-use-request-priority"
};
const device_use_request_priority_Urgent: Coding = {
  code: "urgent",
  display: "Urgent",
  system: "http://hl7.org/fhir/device-use-request-priority"
};
/**
 * Codes representing the priority of the request.
 */
export const DeviceUseRequestPriority = {
  /**
   * The request should be acted on as soon as possible.
   */
  ASAP: device_use_request_priority_ASAP,
  /**
   * The request has a normal priority.
   */
  Routine: device_use_request_priority_Routine,
  /**
   * The request is time-critical.
   */
  Stat: device_use_request_priority_Stat,
  /**
   * The request should be done urgently.
   */
  Urgent: device_use_request_priority_Urgent,
};
const device_use_request_status_Aborted: Coding = {
  code: "aborted",
  display: "Aborted",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Received: Coding = {
  code: "received",
  display: "Received",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/device-use-request-status"
};
const device_use_request_status_Suspended: Coding = {
  code: "suspended",
  display: "Suspended",
  system: "http://hl7.org/fhir/device-use-request-status"
};
/**
 * Codes representing the status of the request.
 */
export const DeviceUseRequestStatus = {
  /**
   * The request was attempted, but due to some procedural error, it could not be completed.
   */
  Aborted: device_use_request_status_Aborted,
  /**
   * The receiving system has accepted the request but work has not yet commenced.
   */
  Accepted: device_use_request_status_Accepted,
  /**
   * The work has been complete, the report(s) released, and no further work is planned.
   */
  Completed: device_use_request_status_Completed,
  /**
   * The work to fulfill the order is happening.
   */
  InProgress: device_use_request_status_InProgress,
  /**
   * The request has been planned.
   */
  Planned: device_use_request_status_Planned,
  /**
   * The request has been proposed.
   */
  Proposed: device_use_request_status_Proposed,
  /**
   * The receiving system has received the request but not yet decided whether it will be performed.
   */
  Received: device_use_request_status_Received,
  /**
   * The receiving system has declined to fulfill the request.
   */
  Rejected: device_use_request_status_Rejected,
  /**
   * The request has been placed.
   */
  Requested: device_use_request_status_Requested,
  /**
   * The request has been held by originating system/user request.
   */
  Suspended: device_use_request_status_Suspended,
};
const diagnostic_order_priority_ASAP: Coding = {
  code: "asap",
  display: "ASAP",
  system: "http://hl7.org/fhir/diagnostic-order-priority"
};
const diagnostic_order_priority_Routine: Coding = {
  code: "routine",
  display: "Routine",
  system: "http://hl7.org/fhir/diagnostic-order-priority"
};
const diagnostic_order_priority_Stat: Coding = {
  code: "stat",
  display: "Stat",
  system: "http://hl7.org/fhir/diagnostic-order-priority"
};
const diagnostic_order_priority_Urgent: Coding = {
  code: "urgent",
  display: "Urgent",
  system: "http://hl7.org/fhir/diagnostic-order-priority"
};
/**
 * The clinical priority of a diagnostic order.
 */
export const DiagnosticOrderPriority = {
  /**
   * The order should be acted on as soon as possible.
   */
  ASAP: diagnostic_order_priority_ASAP,
  /**
   * The order has a normal priority .
   */
  Routine: diagnostic_order_priority_Routine,
  /**
   * The order is time-critical.
   */
  Stat: diagnostic_order_priority_Stat,
  /**
   * The order should be urgently.
   */
  Urgent: diagnostic_order_priority_Urgent,
};
const diagnostic_order_status_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Draft: Coding = {
  code: "draft",
  display: "Draft",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Failed: Coding = {
  code: "failed",
  display: "Failed",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_InProgress: Coding = {
  code: "in-progress",
  display: "In-Progress",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Received: Coding = {
  code: "received",
  display: "Received",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Review: Coding = {
  code: "review",
  display: "Review",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
const diagnostic_order_status_Suspended: Coding = {
  code: "suspended",
  display: "Suspended",
  system: "http://hl7.org/fhir/diagnostic-order-status"
};
/**
 * The status of a diagnostic order.
 */
export const DiagnosticOrderStatus = {
  /**
   * The receiving system has accepted the order, but work has not yet commenced.
   */
  Accepted: diagnostic_order_status_Accepted,
  /**
   * The request has been withdrawn.
   */
  Cancelled: diagnostic_order_status_Cancelled,
  /**
   * The work has been completed, the report(s) released, and no further work is planned.
   */
  Completed: diagnostic_order_status_Completed,
  /**
   * The request is in preliminary form prior to being sent.
   */
  Draft: diagnostic_order_status_Draft,
  /**
   * The diagnostic investigation was attempted, but due to some procedural error, it could not be completed.
   */
  Failed: diagnostic_order_status_Failed,
  /**
   * The work to fulfill the order is happening.
   */
  InProgress: diagnostic_order_status_InProgress,
  /**
   * The request has been planned.
   */
  Planned: diagnostic_order_status_Planned,
  /**
   * The request has been proposed.
   */
  Proposed: diagnostic_order_status_Proposed,
  /**
   * The receiving system has received the order, but not yet decided whether it will be performed.
   */
  Received: diagnostic_order_status_Received,
  /**
   * The receiving system has declined to fulfill the request.
   */
  Rejected: diagnostic_order_status_Rejected,
  /**
   * The request has been placed.
   */
  Requested: diagnostic_order_status_Requested,
  /**
   * The work is complete, and the outcomes are being reviewed for approval.
   */
  Review: diagnostic_order_status_Review,
  /**
   * The request has been held by originating system/user request.
   */
  Suspended: diagnostic_order_status_Suspended,
};
const diagnostic_report_status_Appended: Coding = {
  code: "appended",
  display: "Appended",
  system: "http://hl7.org/fhir/diagnostic-report-status"
};
const diagnostic_report_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/diagnostic-report-status"
};
const diagnostic_report_status_Corrected: Coding = {
  code: "corrected",
  display: "Corrected",
  system: "http://hl7.org/fhir/diagnostic-report-status"
};
const diagnostic_report_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/diagnostic-report-status"
};
const diagnostic_report_status_Final: Coding = {
  code: "final",
  display: "Final",
  system: "http://hl7.org/fhir/diagnostic-report-status"
};
const diagnostic_report_status_Partial: Coding = {
  code: "partial",
  display: "Partial",
  system: "http://hl7.org/fhir/diagnostic-report-status"
};
const diagnostic_report_status_Registered: Coding = {
  code: "registered",
  display: "Registered",
  system: "http://hl7.org/fhir/diagnostic-report-status"
};
/**
 * The status of the diagnostic report as a whole.
 */
export const DiagnosticReportStatus = {
  /**
   * The report has been modified subsequent to being Final, and is complete and verified by an authorized person. New content has been added, but existing content hasn't changed.
   */
  Appended: diagnostic_report_status_Appended,
  /**
   * The report is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
   */
  Cancelled: diagnostic_report_status_Cancelled,
  /**
   * The report has been modified subsequent to being Final, and is complete and verified by an authorized person. New content has been added, but existing content hasn't changed
   */
  Corrected: diagnostic_report_status_Corrected,
  /**
   * The report has been withdrawn following a previous final release.
   */
  EnteredInError: diagnostic_report_status_EnteredInError,
  /**
   * The report is complete and verified by an authorized person.
   */
  Final: diagnostic_report_status_Final,
  /**
   * This is a partial (e.g. initial, interim or preliminary) report: data in the report may be incomplete or unverified.
   */
  Partial: diagnostic_report_status_Partial,
  /**
   * The existence of the report is registered, but there is nothing yet available.
   */
  Registered: diagnostic_report_status_Registered,
};
const digital_media_type_Audio: Coding = {
  code: "audio",
  display: "Audio",
  system: "http://hl7.org/fhir/digital-media-type"
};
const digital_media_type_Photo: Coding = {
  code: "photo",
  display: "Photo",
  system: "http://hl7.org/fhir/digital-media-type"
};
const digital_media_type_Video: Coding = {
  code: "video",
  display: "Video",
  system: "http://hl7.org/fhir/digital-media-type"
};
/**
 * Whether the Media is a photo, video, or audio
 */
export const DigitalMediaType = {
  /**
   * The media consists of a sound recording
   */
  Audio: digital_media_type_Audio,
  /**
   * The media consists of one or more unmoving images, including photographs, computer-generated graphs and charts, and scanned documents
   */
  Photo: digital_media_type_Photo,
  /**
   * The media consists of a series of frames that capture a moving image
   */
  Video: digital_media_type_Video,
};
const document_mode_Consumer: Coding = {
  code: "consumer",
  display: "Consumer",
  system: "http://hl7.org/fhir/document-mode"
};
const document_mode_Producer: Coding = {
  code: "producer",
  display: "Producer",
  system: "http://hl7.org/fhir/document-mode"
};
/**
 * Whether the application produces or consumes documents.
 */
export const DocumentMode = {
  /**
   * The application consumes documents of the specified type.
   */
  Consumer: document_mode_Consumer,
  /**
   * The application produces documents of the specified type.
   */
  Producer: document_mode_Producer,
};
const document_reference_status_Current: Coding = {
  code: "current",
  display: "Current",
  system: "http://hl7.org/fhir/document-reference-status"
};
const document_reference_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/document-reference-status"
};
const document_reference_status_Superseded: Coding = {
  code: "superseded",
  display: "Superseded",
  system: "http://hl7.org/fhir/document-reference-status"
};
/**
 * The status of the document reference.
 */
export const DocumentReferenceStatus = {
  /**
   * This is the current reference for this document.
   */
  Current: document_reference_status_Current,
  /**
   * This reference was created in error.
   */
  EnteredInError: document_reference_status_EnteredInError,
  /**
   * This reference has been superseded by another reference.
   */
  Superseded: document_reference_status_Superseded,
};
const document_relationship_type_Appends: Coding = {
  code: "appends",
  display: "Appends",
  system: "http://hl7.org/fhir/document-relationship-type"
};
const document_relationship_type_Replaces: Coding = {
  code: "replaces",
  display: "Replaces",
  system: "http://hl7.org/fhir/document-relationship-type"
};
const document_relationship_type_Signs: Coding = {
  code: "signs",
  display: "Signs",
  system: "http://hl7.org/fhir/document-relationship-type"
};
const document_relationship_type_Transforms: Coding = {
  code: "transforms",
  display: "Transforms",
  system: "http://hl7.org/fhir/document-relationship-type"
};
/**
 * The type of relationship between documents.
 */
export const DocumentRelationshipType = {
  /**
   * This document adds additional information to the target document.
   */
  Appends: document_relationship_type_Appends,
  /**
   * This document logically replaces or supersedes the target document.
   */
  Replaces: document_relationship_type_Replaces,
  /**
   * This document is a signature of the target document.
   */
  Signs: document_relationship_type_Signs,
  /**
   * This document was generated by transforming the target document (e.g. format or language conversion).
   */
  Transforms: document_relationship_type_Transforms,
};
const encounter_class_Ambulatory: Coding = {
  code: "ambulatory",
  display: "Ambulatory",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Daytime: Coding = {
  code: "daytime",
  display: "Daytime",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Emergency: Coding = {
  code: "emergency",
  display: "Emergency",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Field: Coding = {
  code: "field",
  display: "Field",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Home: Coding = {
  code: "home",
  display: "Home",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Inpatient: Coding = {
  code: "inpatient",
  display: "Inpatient",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Other: Coding = {
  code: "other",
  display: "Other",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Outpatient: Coding = {
  code: "outpatient",
  display: "Outpatient",
  system: "http://hl7.org/fhir/encounter-class"
};
const encounter_class_Virtual: Coding = {
  code: "virtual",
  display: "Virtual",
  system: "http://hl7.org/fhir/encounter-class"
};
/**
 * Classification of the encounter
 */
export const EncounterClass = {
  /**
   * An encounter where the patient visits the practitioner in his/her office, e.g. a G.P. visit.
   */
  Ambulatory: encounter_class_Ambulatory,
  /**
   * An encounter where the patient needs more prolonged treatment or investigations than outpatients, but who do not need to stay in the hospital overnight.
   */
  Daytime: encounter_class_Daytime,
  /**
   * An encounter in the Emergency Care Department.
   */
  Emergency: encounter_class_Emergency,
  /**
   * An encounter taking place outside the regular environment for giving care.
   */
  Field: encounter_class_Field,
  /**
   * An encounter where the practitioner visits the patient at his/her home.
   */
  Home: encounter_class_Home,
  /**
   * An encounter during which the patient is hospitalized and stays overnight.
   */
  Inpatient: encounter_class_Inpatient,
  /**
   * Any other encounter type that is not described by one of the other values. Where this is used it is expected that an implementer will include an extension value to define what the actual other type is.
   */
  Other: encounter_class_Other,
  /**
   * An encounter during which the patient is not hospitalized overnight.
   */
  Outpatient: encounter_class_Outpatient,
  /**
   * An encounter that takes place where the patient and practitioner do not physically meet but use electronic means for contact.
   */
  Virtual: encounter_class_Virtual,
};
const encounter_location_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/encounter-location-status"
};
const encounter_location_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/encounter-location-status"
};
const encounter_location_status_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/encounter-location-status"
};
const encounter_location_status_Reserved: Coding = {
  code: "reserved",
  display: "Reserved",
  system: "http://hl7.org/fhir/encounter-location-status"
};
/**
 * The status of the location.
 */
export const EncounterLocationStatus = {
  /**
   * The patient is currently at this location, or was between the period specified.
   * A system may update these records when the patient leaves the location to either reserved, or completed
   */
  Active: encounter_location_status_Active,
  /**
   * The patient was at this location during the period specified.
   * Not to be used when the patient is currently at the location
   */
  Completed: encounter_location_status_Completed,
  /**
   * The patient is planned to be moved to this location at some point in the future.
   */
  Planned: encounter_location_status_Planned,
  /**
   * This location is held empty for this patient.
   */
  Reserved: encounter_location_status_Reserved,
};
const encounter_state_Arrived: Coding = {
  code: "arrived",
  display: "Arrived",
  system: "http://hl7.org/fhir/encounter-state"
};
const encounter_state_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/encounter-state"
};
const encounter_state_Finished: Coding = {
  code: "finished",
  display: "Finished",
  system: "http://hl7.org/fhir/encounter-state"
};
const encounter_state_InProgress: Coding = {
  code: "in-progress",
  display: "in Progress",
  system: "http://hl7.org/fhir/encounter-state"
};
const encounter_state_OnLeave: Coding = {
  code: "onleave",
  display: "On Leave",
  system: "http://hl7.org/fhir/encounter-state"
};
const encounter_state_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/encounter-state"
};
/**
 * Current state of the encounter
 */
export const EncounterState = {
  /**
   * The Patient is present for the encounter, however is not currently meeting with a practitioner.
   */
  Arrived: encounter_state_Arrived,
  /**
   * The Encounter has ended before it has begun.
   */
  Cancelled: encounter_state_Cancelled,
  /**
   * The Encounter has ended.
   */
  Finished: encounter_state_Finished,
  /**
   * The Encounter has begun and the patient is present / the practitioner and the patient are meeting.
   */
  InProgress: encounter_state_InProgress,
  /**
   * The Encounter has begun, but the patient is temporarily on leave.
   */
  OnLeave: encounter_state_OnLeave,
  /**
   * The Encounter has not yet started.
   */
  Planned: encounter_state_Planned,
};
const episode_of_care_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/episode-of-care-status"
};
const episode_of_care_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/episode-of-care-status"
};
const episode_of_care_status_Finished: Coding = {
  code: "finished",
  display: "Finished",
  system: "http://hl7.org/fhir/episode-of-care-status"
};
const episode_of_care_status_OnHold: Coding = {
  code: "onhold",
  display: "On Hold",
  system: "http://hl7.org/fhir/episode-of-care-status"
};
const episode_of_care_status_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/episode-of-care-status"
};
const episode_of_care_status_Waitlist: Coding = {
  code: "waitlist",
  display: "Waitlist",
  system: "http://hl7.org/fhir/episode-of-care-status"
};
/**
 * The status of the encounter.
 */
export const EpisodeOfCareStatus = {
  /**
   * This episode of care is current.
   */
  Active: episode_of_care_status_Active,
  /**
   * The episode of care was cancelled, or withdrawn from service, often selected during the planned stage as the patient may have gone elsewhere, or the circumstances have changed and the organization is unable to provide the care. It indicates that services terminated outside the planned/expected workflow.
   */
  Cancelled: episode_of_care_status_Cancelled,
  /**
   * This episode of care is finished at the organization is not expecting to be providing care to the patient. Can also be known as "closed", "completed" or other similar terms.
   */
  Finished: episode_of_care_status_Finished,
  /**
   * This episode of care is on hold, the organization has limited responsibility for the patient (such as while on respite).
   */
  OnHold: episode_of_care_status_OnHold,
  /**
   * This episode of care is planned to start at the date specified in the period.start. During this status an organization may perform assessments to determine if they are eligible to receive services, or be organizing to make resources available to provide care services.
   */
  Planned: episode_of_care_status_Planned,
  /**
   * This episode has been placed on a waitlist, pending the episode being made active (or cancelled).
   */
  Waitlist: episode_of_care_status_Waitlist,
};
const v3_TimingEvent_AC: Coding = {
  code: "AC",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_ACD: Coding = {
  code: "ACD",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_ACM: Coding = {
  code: "ACM",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_ACV: Coding = {
  code: "ACV",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_C: Coding = {
  code: "C",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_CD: Coding = {
  code: "CD",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_CM: Coding = {
  code: "CM",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_CV: Coding = {
  code: "CV",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_HS: Coding = {
  code: "HS",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_PC: Coding = {
  code: "PC",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_PCD: Coding = {
  code: "PCD",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_PCM: Coding = {
  code: "PCM",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_PCV: Coding = {
  code: "PCV",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
const v3_TimingEvent_WAKE: Coding = {
  code: "WAKE",
  system: "http://hl7.org/fhir/v3/TimingEvent"
};
/**
 * Real world event that the relating to the schedule.
 */
export const EventTiming = {
  AC: v3_TimingEvent_AC,
  ACD: v3_TimingEvent_ACD,
  ACM: v3_TimingEvent_ACM,
  ACV: v3_TimingEvent_ACV,
  C: v3_TimingEvent_C,
  CD: v3_TimingEvent_CD,
  CM: v3_TimingEvent_CM,
  CV: v3_TimingEvent_CV,
  HS: v3_TimingEvent_HS,
  PC: v3_TimingEvent_PC,
  PCD: v3_TimingEvent_PCD,
  PCM: v3_TimingEvent_PCM,
  PCV: v3_TimingEvent_PCV,
  WAKE: v3_TimingEvent_WAKE,
};
const extension_context_Datatype: Coding = {
  code: "datatype",
  display: "Datatype",
  system: "http://hl7.org/fhir/extension-context"
};
const extension_context_Extension: Coding = {
  code: "extension",
  display: "Extension",
  system: "http://hl7.org/fhir/extension-context"
};
const extension_context_Mapping: Coding = {
  code: "mapping",
  display: "Mapping",
  system: "http://hl7.org/fhir/extension-context"
};
const extension_context_Resource: Coding = {
  code: "resource",
  display: "Resource",
  system: "http://hl7.org/fhir/extension-context"
};
/**
 * How an extension context is interpreted.
 */
export const ExtensionContext = {
  /**
   * The context is all nodes matching a particular data type element path (root or repeating element) or all elements referencing a particular primitive data type (expressed as the datatype name).
   */
  Datatype: extension_context_Datatype,
  /**
   * The context is a particular extension from a particular profile, a uri that identifies the extension definition.
   */
  Extension: extension_context_Extension,
  /**
   * The context is all nodes whose mapping to a specified reference model corresponds to a particular mapping structure.  The context identifies the mapping target. The mapping should clearly identify where such an extension could be used.
   */
  Mapping: extension_context_Mapping,
  /**
   * The context is all elements matching a particular resource element path.
   */
  Resource: extension_context_Resource,
};
const filter_operator_Equals: Coding = {
  code: "=",
  display: "Equals",
  system: "http://hl7.org/fhir/filter-operator"
};
const filter_operator_InSet: Coding = {
  code: "in",
  display: "In Set",
  system: "http://hl7.org/fhir/filter-operator"
};
const filter_operator_IsABySubsumption: Coding = {
  code: "is-a",
  display: "Is A (by subsumption)",
  system: "http://hl7.org/fhir/filter-operator"
};
const filter_operator_NotIsABySubsumption: Coding = {
  code: "is-not-a",
  display: "Not (Is A) (by subsumption)",
  system: "http://hl7.org/fhir/filter-operator"
};
const filter_operator_NotInSet: Coding = {
  code: "not-in",
  display: "Not in Set",
  system: "http://hl7.org/fhir/filter-operator"
};
const filter_operator_RegularExpression: Coding = {
  code: "regex",
  display: "Regular Expression",
  system: "http://hl7.org/fhir/filter-operator"
};
/**
 * The kind of operation to perform as a part of a property based filter.
 */
export const FilterOperator = {
  /**
   * The specified property of the code equals the provided value.
   */
  Equals: filter_operator_Equals,
  /**
   * The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list).
   */
  InSet: filter_operator_InSet,
  /**
   * Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself.
   */
  IsABySubsumption: filter_operator_IsABySubsumption,
  /**
   * The specified property of the code does not have an is-a relationship with the provided value.
   */
  NotIsABySubsumption: filter_operator_NotIsABySubsumption,
  /**
   * The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list).
   */
  NotInSet: filter_operator_NotInSet,
  /**
   * The specified property of the code  matches the regex specified in the provided value.
   */
  RegularExpression: filter_operator_RegularExpression,
};
const flag_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/flag-status"
};
const flag_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/flag-status"
};
const flag_status_Inactive: Coding = {
  code: "inactive",
  display: "Inactive",
  system: "http://hl7.org/fhir/flag-status"
};
/**
 * Indicates whether this flag is active and needs to be displayed to a user, or whether it is no longer needed or entered in error.
 */
export const FlagStatus = {
  /**
   * A current flag that should be displayed to a user. A system may use the category to determine which roles should view the flag.
   */
  Active: flag_status_Active,
  /**
   * The flag was added in error, and should no longer be displayed.
   */
  EnteredInError: flag_status_EnteredInError,
  /**
   * The flag does not need to be displayed any more.
   */
  Inactive: flag_status_Inactive,
};
const goal_status_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_Achieved: Coding = {
  code: "achieved",
  display: "Achieved",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_OnHold: Coding = {
  code: "on-hold",
  display: "On Hold",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/goal-status"
};
const goal_status_Sustaining: Coding = {
  code: "sustaining",
  display: "Sustaining",
  system: "http://hl7.org/fhir/goal-status"
};
/**
 * Indicates whether the goal has been met and is still being targeted
 */
export const GoalStatus = {
  /**
   * A proposed goal was accepted
   */
  Accepted: goal_status_Accepted,
  /**
   * The goal has been met and no further action is needed
   */
  Achieved: goal_status_Achieved,
  /**
   * The goal is no longer being sought
   */
  Cancelled: goal_status_Cancelled,
  /**
   * The goal is being sought but has not yet been reached.  (Also applies if goal was reached in the past but there has been regression and goal is being sought again)
   */
  InProgress: goal_status_InProgress,
  /**
   * The goal remains a long term objective but is no longer being actively pursued for a temporary period of time.
   */
  OnHold: goal_status_OnHold,
  /**
   * A goal is planned for this patient
   */
  Planned: goal_status_Planned,
  /**
   * A goal is proposed for this patient
   */
  Proposed: goal_status_Proposed,
  /**
   * A proposed goal was rejected
   */
  Rejected: goal_status_Rejected,
  /**
   * The goal has been met, but ongoing activity is needed to sustain the goal objective
   */
  Sustaining: goal_status_Sustaining,
};
const group_type_Animal: Coding = {
  code: "animal",
  display: "Animal",
  system: "http://hl7.org/fhir/group-type"
};
const group_type_Device: Coding = {
  code: "device",
  display: "Device",
  system: "http://hl7.org/fhir/group-type"
};
const group_type_Medication: Coding = {
  code: "medication",
  display: "Medication",
  system: "http://hl7.org/fhir/group-type"
};
const group_type_Person: Coding = {
  code: "person",
  display: "Person",
  system: "http://hl7.org/fhir/group-type"
};
const group_type_Practitioner: Coding = {
  code: "practitioner",
  display: "Practitioner",
  system: "http://hl7.org/fhir/group-type"
};
const group_type_Substance: Coding = {
  code: "substance",
  display: "Substance",
  system: "http://hl7.org/fhir/group-type"
};
/**
 * Types of resources that are part of group
 */
export const GroupType = {
  /**
   * Group contains "animal" Patient resources
   */
  Animal: group_type_Animal,
  /**
   * Group contains Device resources
   */
  Device: group_type_Device,
  /**
   * Group contains Medication resources
   */
  Medication: group_type_Medication,
  /**
   * Group contains "person" Patient resources
   */
  Person: group_type_Person,
  /**
   * Group contains healthcare practitioner resources
   */
  Practitioner: group_type_Practitioner,
  /**
   * Group contains Substance resources
   */
  Substance: group_type_Substance,
};
const guide_dependency_type_Inclusion: Coding = {
  code: "inclusion",
  display: "Inclusion",
  system: "http://hl7.org/fhir/guide-dependency-type"
};
const guide_dependency_type_Reference: Coding = {
  code: "reference",
  display: "Reference",
  system: "http://hl7.org/fhir/guide-dependency-type"
};
/**
 * How a dependency is represented when the guide is published.
 */
export const GuideDependencyType = {
  /**
   * The guide is embedded in this guide when published.
   */
  Inclusion: guide_dependency_type_Inclusion,
  /**
   * The guide is referred to by URL.
   */
  Reference: guide_dependency_type_Reference,
};
const guide_page_kind_Dictionary: Coding = {
  code: "dictionary",
  display: "Dictionary",
  system: "http://hl7.org/fhir/guide-page-kind"
};
const guide_page_kind_Directory: Coding = {
  code: "directory",
  display: "Directory",
  system: "http://hl7.org/fhir/guide-page-kind"
};
const guide_page_kind_Example: Coding = {
  code: "example",
  display: "Example",
  system: "http://hl7.org/fhir/guide-page-kind"
};
const guide_page_kind_Include: Coding = {
  code: "include",
  display: "Include",
  system: "http://hl7.org/fhir/guide-page-kind"
};
const guide_page_kind_List: Coding = {
  code: "list",
  display: "List",
  system: "http://hl7.org/fhir/guide-page-kind"
};
const guide_page_kind_Page: Coding = {
  code: "page",
  display: "Page",
  system: "http://hl7.org/fhir/guide-page-kind"
};
const guide_page_kind_Resource: Coding = {
  code: "resource",
  display: "Resource",
  system: "http://hl7.org/fhir/guide-page-kind"
};
const guide_page_kind_TableOfContents: Coding = {
  code: "toc",
  display: "Table Of Contents",
  system: "http://hl7.org/fhir/guide-page-kind"
};
/**
 * The kind of an included page.
 */
export const GuidePageKind = {
  /**
   * This is a page that creates the listed resources as a dictionary.
   */
  Dictionary: guide_page_kind_Dictionary,
  /**
   * This is a page that lists the resources of a given type, and also creates pages for all the listed types as other pages in the section.
   */
  Directory: guide_page_kind_Directory,
  /**
   * This is a page that represents a human readable rendering of an example.
   */
  Example: guide_page_kind_Example,
  /**
   * This is a page showing where an included guide is injected.
   */
  Include: guide_page_kind_Include,
  /**
   * This is a page that represents a list of resources of one or more types.
   */
  List: guide_page_kind_List,
  /**
   * This is a page of content that is included in the implementation guide. It has no particular function.
   */
  Page: guide_page_kind_Page,
  /**
   * This is a page that represents a presented resource. This is typically used for generated conformance resource presentations.
   */
  Resource: guide_page_kind_Resource,
  /**
   * This is a generated page that contains the table of contents.
   */
  TableOfContents: guide_page_kind_TableOfContents,
};
const guide_resource_purpose_Dictionary: Coding = {
  code: "dictionary",
  display: "Dictionary",
  system: "http://hl7.org/fhir/guide-resource-purpose"
};
const guide_resource_purpose_Example: Coding = {
  code: "example",
  display: "Example",
  system: "http://hl7.org/fhir/guide-resource-purpose"
};
const guide_resource_purpose_Extension: Coding = {
  code: "extension",
  display: "Extension",
  system: "http://hl7.org/fhir/guide-resource-purpose"
};
const guide_resource_purpose_LogicalModel: Coding = {
  code: "logical",
  display: "Logical Model",
  system: "http://hl7.org/fhir/guide-resource-purpose"
};
const guide_resource_purpose_Profile: Coding = {
  code: "profile",
  display: "Profile",
  system: "http://hl7.org/fhir/guide-resource-purpose"
};
const guide_resource_purpose_Terminology: Coding = {
  code: "terminology",
  display: "Terminology",
  system: "http://hl7.org/fhir/guide-resource-purpose"
};
/**
 * Why a resource is included in the guide.
 */
export const GuideResourcePurpose = {
  /**
   * The resource contains a dictionary that is part of the implementation guide.
   */
  Dictionary: guide_resource_purpose_Dictionary,
  /**
   * The resource is intended as an example.
   */
  Example: guide_resource_purpose_Example,
  /**
   * The resource defines an extension (StructureDefinition) that is used in the implementation guide.
   */
  Extension: guide_resource_purpose_Extension,
  /**
   * The resource defines a logical model (in a StructureDefinition) that is used in the implementation guide.
   */
  LogicalModel: guide_resource_purpose_LogicalModel,
  /**
   * The resource defines a profile (StructureDefinition) that is used in the implementation guide.
   */
  Profile: guide_resource_purpose_Profile,
  /**
   * The resource defines a value set or concept map used in the implementation guide.
   */
  Terminology: guide_resource_purpose_Terminology,
};
const history_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/history-status"
};
const history_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in error",
  system: "http://hl7.org/fhir/history-status"
};
const history_status_HealthUnknown: Coding = {
  code: "health-unknown",
  display: "Health unknown",
  system: "http://hl7.org/fhir/history-status"
};
const history_status_Partial: Coding = {
  code: "partial",
  display: "Partial",
  system: "http://hl7.org/fhir/history-status"
};
/**
 * A code that identifies the status of the family history record.
 */
export const HistoryStatus = {
  /**
   * All relevant health information is known and captured.
   */
  Completed: history_status_Completed,
  /**
   * This instance should not have been part of this patient's medical record.
   */
  EnteredInError: history_status_EnteredInError,
  /**
   * Health information for this individual is unavailable/unknown.
   */
  HealthUnknown: history_status_HealthUnknown,
  /**
   * Some health information is known and captured, but not complete - see notes for details.
   */
  Partial: history_status_Partial,
};
const http_verb_DELETE: Coding = {
  code: "DELETE",
  display: "DELETE",
  system: "http://hl7.org/fhir/http-verb"
};
const http_verb_GET: Coding = {
  code: "GET",
  display: "GET",
  system: "http://hl7.org/fhir/http-verb"
};
const http_verb_POST: Coding = {
  code: "POST",
  display: "POST",
  system: "http://hl7.org/fhir/http-verb"
};
const http_verb_PUT: Coding = {
  code: "PUT",
  display: "PUT",
  system: "http://hl7.org/fhir/http-verb"
};
/**
 * HTTP verbs (in the HTTP command line).
 */
export const HttpVerb = {
  /**
   * HTTP DELETE
   */
  DELETE: http_verb_DELETE,
  /**
   * HTTP GET
   */
  GET: http_verb_GET,
  /**
   * HTTP POST
   */
  POST: http_verb_POST,
  /**
   * HTTP PUT
   */
  PUT: http_verb_PUT,
};
const identifier_use_Official: Coding = {
  code: "official",
  display: "Official",
  system: "http://hl7.org/fhir/identifier-use"
};
const identifier_use_Secondary: Coding = {
  code: "secondary",
  display: "Secondary",
  system: "http://hl7.org/fhir/identifier-use"
};
const identifier_use_Temp: Coding = {
  code: "temp",
  display: "Temp",
  system: "http://hl7.org/fhir/identifier-use"
};
const identifier_use_Usual: Coding = {
  code: "usual",
  display: "Usual",
  system: "http://hl7.org/fhir/identifier-use"
};
/**
 * Identifies the purpose for this identifier, if known .
 */
export const IdentifierUse = {
  /**
   * The identifier considered to be most trusted for the identification of this item.
   */
  Official: identifier_use_Official,
  /**
   * An identifier that was assigned in secondary use - it serves to identify the object in a relative context, but cannot be consistently assigned to the same object again in a different context.
   */
  Secondary: identifier_use_Secondary,
  /**
   * A temporary identifier.
   */
  Temp: identifier_use_Temp,
  /**
   * The identifier recommended for display and use in real-world interactions.
   */
  Usual: identifier_use_Usual,
};
const identity_assuranceLevel_Level1: Coding = {
  code: "level1",
  display: "Level 1",
  system: "http://hl7.org/fhir/identity-assuranceLevel"
};
const identity_assuranceLevel_Level2: Coding = {
  code: "level2",
  display: "Level 2",
  system: "http://hl7.org/fhir/identity-assuranceLevel"
};
const identity_assuranceLevel_Level3: Coding = {
  code: "level3",
  display: "Level 3",
  system: "http://hl7.org/fhir/identity-assuranceLevel"
};
const identity_assuranceLevel_Level4: Coding = {
  code: "level4",
  display: "Level 4",
  system: "http://hl7.org/fhir/identity-assuranceLevel"
};
/**
 * The level of confidence that this link represents the same actual person, based on NIST Authentication Levels.
 */
export const IdentityAssuranceLevel = {
  /**
   * Little or no confidence in the asserted identity's accuracy.
   */
  Level1: identity_assuranceLevel_Level1,
  /**
   * Some confidence in the asserted identity's accuracy.
   */
  Level2: identity_assuranceLevel_Level2,
  /**
   * High confidence in the asserted identity's accuracy.
   */
  Level3: identity_assuranceLevel_Level3,
  /**
   * Very high confidence in the asserted identity's accuracy.
   */
  Level4: identity_assuranceLevel_Level4,
};
const InstanceAvailability_NEARLINE: Coding = {
  code: "NEARLINE",
  system: "http://nema.org/dicom/dicm"
};
const InstanceAvailability_OFFLINE: Coding = {
  code: "OFFLINE",
  system: "http://nema.org/dicom/dicm"
};
const InstanceAvailability_ONLINE: Coding = {
  code: "ONLINE",
  system: "http://nema.org/dicom/dicm"
};
const InstanceAvailability_UNAVAILABLE: Coding = {
  code: "UNAVAILABLE",
  system: "http://nema.org/dicom/dicm"
};
/**
 * Availability of the resource
 */
export const InstanceAvailability = {
  NEARLINE: InstanceAvailability_NEARLINE,
  OFFLINE: InstanceAvailability_OFFLINE,
  ONLINE: InstanceAvailability_ONLINE,
  UNAVAILABLE: InstanceAvailability_UNAVAILABLE,
};
const issue_severity_Error: Coding = {
  code: "error",
  display: "Error",
  system: "http://hl7.org/fhir/issue-severity"
};
const issue_severity_Fatal: Coding = {
  code: "fatal",
  display: "Fatal",
  system: "http://hl7.org/fhir/issue-severity"
};
const issue_severity_Information: Coding = {
  code: "information",
  display: "Information",
  system: "http://hl7.org/fhir/issue-severity"
};
const issue_severity_Warning: Coding = {
  code: "warning",
  display: "Warning",
  system: "http://hl7.org/fhir/issue-severity"
};
/**
 * How the issue affects the success of the action.
 */
export const IssueSeverity = {
  /**
   * The issue is sufficiently important to cause the action to fail.
   */
  Error: issue_severity_Error,
  /**
   * The issue caused the action to fail, and no further checking could be performed.
   */
  Fatal: issue_severity_Fatal,
  /**
   * The issue has no relation to the degree of success of the action.
   */
  Information: issue_severity_Information,
  /**
   * The issue is not important enough to cause the action to fail, but may cause it to be performed suboptimally or in a way that is not as desired.
   */
  Warning: issue_severity_Warning,
};
const issue_type_BusinessRuleViolation: Coding = {
  code: "business-rule",
  display: "Business Rule Violation",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_InvalidCode: Coding = {
  code: "code-invalid",
  display: "Invalid Code",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_EditVersionConflict: Coding = {
  code: "conflict",
  display: "Edit Version Conflict",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_Duplicate: Coding = {
  code: "duplicate",
  display: "Duplicate",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_Exception: Coding = {
  code: "exception",
  display: "Exception",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_SessionExpired: Coding = {
  code: "expired",
  display: "Session Expired",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_UnacceptableExtension: Coding = {
  code: "extension",
  display: "Unacceptable Extension",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_Forbidden: Coding = {
  code: "forbidden",
  display: "Forbidden",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_IncompleteResults: Coding = {
  code: "incomplete",
  display: "Incomplete Results",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_InformationalNote: Coding = {
  code: "informational",
  display: "Informational Note",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_InvalidContent: Coding = {
  code: "invalid",
  display: "Invalid Content",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_ValidationRuleFailed: Coding = {
  code: "invariant",
  display: "Validation rule failed",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_LockError: Coding = {
  code: "lock-error",
  display: "Lock Error",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_LoginRequired: Coding = {
  code: "login",
  display: "Login Required",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_NoStoreAvailable: Coding = {
  code: "no-store",
  display: "No Store Available",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_NotFound: Coding = {
  code: "not-found",
  display: "Not Found",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_ContentNotSupported: Coding = {
  code: "not-supported",
  display: "Content not supported",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_ProcessingFailure: Coding = {
  code: "processing",
  display: "Processing Failure",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_RequiredElementMissing: Coding = {
  code: "required",
  display: "Required element missing",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_SecurityProblem: Coding = {
  code: "security",
  display: "Security Problem",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_StructuralIssue: Coding = {
  code: "structure",
  display: "Structural Issue",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_InformationSuppressed: Coding = {
  code: "suppressed",
  display: "Information  Suppressed",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_Throttled: Coding = {
  code: "throttled",
  display: "Throttled",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_Timeout: Coding = {
  code: "timeout",
  display: "Timeout",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_OperationTooCostly: Coding = {
  code: "too-costly",
  display: "Operation Too Costly",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_ContentTooLong: Coding = {
  code: "too-long",
  display: "Content Too Long",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_TransientIssue: Coding = {
  code: "transient",
  display: "Transient Issue",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_UnknownUser: Coding = {
  code: "unknown",
  display: "Unknown User",
  system: "http://hl7.org/fhir/issue-type"
};
const issue_type_ElementValueInvalid: Coding = {
  code: "value",
  display: "Element value invalid",
  system: "http://hl7.org/fhir/issue-type"
};
/**
 * A code that describes the type of issue.
 */
export const IssueType = {
  /**
   * The content/operation failed to pass some business rule, and so could not proceed.
   */
  BusinessRuleViolation: issue_type_BusinessRuleViolation,
  /**
   * The code or system could not be understood, or it was not valid in the context of a particular ValueSet.code.
   */
  InvalidCode: issue_type_InvalidCode,
  /**
   * Content could not be accepted because of an edit conflict (i.e. version aware updates) (In a pure RESTful environment, this would be an HTTP 404 error, but this code may be used where the conflict is discovered further into the application architecture.)
   */
  EditVersionConflict: issue_type_EditVersionConflict,
  /**
   * An attempt was made to create a duplicate record.
   */
  Duplicate: issue_type_Duplicate,
  /**
   * An unexpected internal error has occurred.
   */
  Exception: issue_type_Exception,
  /**
   * User session expired; a login may be required.
   */
  SessionExpired: issue_type_SessionExpired,
  /**
   * An extension was found that was not acceptable, could not be resolved, or a modifierExtension was not recognized.
   */
  UnacceptableExtension: issue_type_UnacceptableExtension,
  /**
   * The user does not have the rights to perform this action.
   */
  Forbidden: issue_type_Forbidden,
  /**
   * Not all data sources typically accessed could be reached, or responded in time, so the returned information may not be complete.
   */
  IncompleteResults: issue_type_IncompleteResults,
  /**
   * A message unrelated to the processing success of the completed operation (examples of the latter include things like reminders of password expiry, system maintenance times, etc.).
   */
  InformationalNote: issue_type_InformationalNote,
  /**
   * Content invalid against the specification or a profile.
   */
  InvalidContent: issue_type_InvalidContent,
  /**
   * A content validation rule failed - e.g. a schematron rule.
   */
  ValidationRuleFailed: issue_type_ValidationRuleFailed,
  /**
   * A resource/record locking failure (usually in an underlying database).
   */
  LockError: issue_type_LockError,
  /**
   * The client needs to initiate an authentication process.
   */
  LoginRequired: issue_type_LoginRequired,
  /**
   * The persistent store is unavailable; e.g. the database is down for maintenance or similar action.
   */
  NoStoreAvailable: issue_type_NoStoreAvailable,
  /**
   * The reference provided was not found. In a pure RESTful environment, this would be an HTTP 404 error, but this code may be used where the content is not found further into the application architecture.
   */
  NotFound: issue_type_NotFound,
  /**
   * The resource or profile is not supported.
   */
  ContentNotSupported: issue_type_ContentNotSupported,
  /**
   * Processing issues. These are expected to be final e.g. there is no point resubmitting the same content unchanged.
   */
  ProcessingFailure: issue_type_ProcessingFailure,
  /**
   * A required element is missing.
   */
  RequiredElementMissing: issue_type_RequiredElementMissing,
  /**
   * An authentication/authorization/permissions issue of some kind.
   */
  SecurityProblem: issue_type_SecurityProblem,
  /**
   * A structural issue in the content such as wrong namespace, or unable to parse the content completely, or invalid json syntax.
   */
  StructuralIssue: issue_type_StructuralIssue,
  /**
   * Some information was not or may not have been returned due to business rules, consent or privacy rules, or access permission constraints.  This information may be accessible through alternate processes.
   */
  InformationSuppressed: issue_type_InformationSuppressed,
  /**
   * The system is not prepared to handle this request due to load management.
   */
  Throttled: issue_type_Throttled,
  /**
   * An internal timeout has occurred.
   */
  Timeout: issue_type_Timeout,
  /**
   * The operation was stopped to protect server resources; e.g. a request for a value set expansion on all of SNOMED CT.
   */
  OperationTooCostly: issue_type_OperationTooCostly,
  /**
   * Provided content is too long (typically, this is a denial of service protection type of error).
   */
  ContentTooLong: issue_type_ContentTooLong,
  /**
   * Transient processing issues. The system receiving the error may be able to resubmit the same content once an underlying issue is resolved.
   */
  TransientIssue: issue_type_TransientIssue,
  /**
   * The user or system was not able to be authenticated (either there is no process, or the proferred token is unacceptable).
   */
  UnknownUser: issue_type_UnknownUser,
  /**
   * An element value is invalid.
   */
  ElementValueInvalid: issue_type_ElementValueInvalid,
};
const link_type_Refer: Coding = {
  code: "refer",
  display: "Refer",
  system: "http://hl7.org/fhir/link-type"
};
const link_type_Replace: Coding = {
  code: "replace",
  display: "Replace",
  system: "http://hl7.org/fhir/link-type"
};
const link_type_SeeAlso: Coding = {
  code: "seealso",
  display: "See also",
  system: "http://hl7.org/fhir/link-type"
};
/**
 * The type of link between this patient resource and another patient resource.
 */
export const LinkType = {
  /**
   * The patient resource containing this link is in use and valid but not considered the main source of information about a patient. The link points forward to another patient resource that should be consulted to retrieve additional patient information.
   */
  Refer: link_type_Refer,
  /**
   * The patient resource containing this link must no longer be used. The link points forward to another patient resource that must be used in lieu of the patient resource that contains this link.
   */
  Replace: link_type_Replace,
  /**
   * The patient resource containing this link is in use and valid, but points to another patient resource that is known to contain data about the same person. Data in this resource might overlap or contradict information found in the other patient resource. This link does not indicate any relative importance of the resources concerned, and both should be regarded as equally valid.
   */
  SeeAlso: link_type_SeeAlso,
};
const list_mode_ChangeList: Coding = {
  code: "changes",
  display: "Change List",
  system: "http://hl7.org/fhir/list-mode"
};
const list_mode_SnapshotList: Coding = {
  code: "snapshot",
  display: "Snapshot List",
  system: "http://hl7.org/fhir/list-mode"
};
const list_mode_WorkingList: Coding = {
  code: "working",
  display: "Working List",
  system: "http://hl7.org/fhir/list-mode"
};
/**
 * The processing mode that applies to this list
 */
export const ListMode = {
  /**
   * A list that indicates where changes have been made or recommended
   */
  ChangeList: list_mode_ChangeList,
  /**
   * This list was prepared as a snapshot. It should not be assumed to be current
   */
  SnapshotList: list_mode_SnapshotList,
  /**
   * This list is the master list, maintained in an ongoing fashion with regular updates as the real world list it is tracking changes
   */
  WorkingList: list_mode_WorkingList,
};
const list_status_Current: Coding = {
  code: "current",
  display: "Current",
  system: "http://hl7.org/fhir/list-status"
};
const list_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered In Error",
  system: "http://hl7.org/fhir/list-status"
};
const list_status_Retired: Coding = {
  code: "retired",
  display: "Retired",
  system: "http://hl7.org/fhir/list-status"
};
/**
 * The current state of the list
 */
export const ListStatus = {
  /**
   * The list is considered to be an active part of the patient's record.
   */
  Current: list_status_Current,
  /**
   * The list was never accurate.  It is retained for medico-legal purposes only.
   */
  EnteredInError: list_status_EnteredInError,
  /**
   * The list is "old" and should no longer be considered accurate or relevant.
   */
  Retired: list_status_Retired,
};
const location_mode_Instance: Coding = {
  code: "instance",
  display: "Instance",
  system: "http://hl7.org/fhir/location-mode"
};
const location_mode_Kind: Coding = {
  code: "kind",
  display: "Kind",
  system: "http://hl7.org/fhir/location-mode"
};
/**
 * Indicates whether a resource instance represents a specific location or a class of locations.
 */
export const LocationMode = {
  /**
   * The Location resource represents a specific instance of a location (e.g. Operating Theatre 1A).
   */
  Instance: location_mode_Instance,
  /**
   * The Location represents a class of locations (e.g. Any Operating Theatre) although this class of locations could be constrained within a specific boundary (such as organization, or parent location, address etc.).
   */
  Kind: location_mode_Kind,
};
const location_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/location-status"
};
const location_status_Inactive: Coding = {
  code: "inactive",
  display: "Inactive",
  system: "http://hl7.org/fhir/location-status"
};
const location_status_Suspended: Coding = {
  code: "suspended",
  display: "Suspended",
  system: "http://hl7.org/fhir/location-status"
};
/**
 * Indicates whether the location is still in use.
 */
export const LocationStatus = {
  /**
   * The location is operational.
   */
  Active: location_status_Active,
  /**
   * The location is no longer used.
   */
  Inactive: location_status_Inactive,
  /**
   * The location is temporarily closed.
   */
  Suspended: location_status_Suspended,
};
const measurement_principle_MSPAcoustical: Coding = {
  code: "acoustical",
  display: "MSP Acoustical",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPBiological: Coding = {
  code: "biological",
  display: "MSP Biological",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPChemical: Coding = {
  code: "chemical",
  display: "MSP Chemical",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPElectrical: Coding = {
  code: "electrical",
  display: "MSP Electrical",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPImpedance: Coding = {
  code: "impedance",
  display: "MSP Impedance",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPManual: Coding = {
  code: "manual",
  display: "MSP Manual",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPMechanical: Coding = {
  code: "mechanical",
  display: "MSP Mechanical",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPNuclear: Coding = {
  code: "nuclear",
  display: "MSP Nuclear",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPOptical: Coding = {
  code: "optical",
  display: "MSP Optical",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPOther: Coding = {
  code: "other",
  display: "MSP Other",
  system: "http://hl7.org/fhir/measurement-principle"
};
const measurement_principle_MSPThermal: Coding = {
  code: "thermal",
  display: "MSP Thermal",
  system: "http://hl7.org/fhir/measurement-principle"
};
/**
 * Different measurement principle supported by the device.
 */
export const MeasurementPrinciple = {
  /**
   * Measurement is done using the acoustical principle.
   */
  MSPAcoustical: measurement_principle_MSPAcoustical,
  /**
   * Measurement is done using the biological principle.
   */
  MSPBiological: measurement_principle_MSPBiological,
  /**
   * Measurement is done using the chemical principle.
   */
  MSPChemical: measurement_principle_MSPChemical,
  /**
   * Measurement is done using the electrical principle.
   */
  MSPElectrical: measurement_principle_MSPElectrical,
  /**
   * Measurement is done using the impedance principle.
   */
  MSPImpedance: measurement_principle_MSPImpedance,
  /**
   * Measurement is done using the manual principle.
   */
  MSPManual: measurement_principle_MSPManual,
  /**
   * Measurement is done using the mechanical principle.
   */
  MSPMechanical: measurement_principle_MSPMechanical,
  /**
   * Measurement is done using the nuclear principle.
   */
  MSPNuclear: measurement_principle_MSPNuclear,
  /**
   * Measurement is done using the optical principle.
   */
  MSPOptical: measurement_principle_MSPOptical,
  /**
   * Measurement principle isn't in the list.
   */
  MSPOther: measurement_principle_MSPOther,
  /**
   * Measurement is done using the thermal principle.
   */
  MSPThermal: measurement_principle_MSPThermal,
};
const medication_admin_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/medication-admin-status"
};
const medication_admin_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/medication-admin-status"
};
const medication_admin_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/medication-admin-status"
};
const medication_admin_status_OnHold: Coding = {
  code: "on-hold",
  display: "On Hold",
  system: "http://hl7.org/fhir/medication-admin-status"
};
const medication_admin_status_Stopped: Coding = {
  code: "stopped",
  display: "Stopped",
  system: "http://hl7.org/fhir/medication-admin-status"
};
/**
 * A set of codes indicating the current status of a MedicationAdministration.
 */
export const MedicationAdminStatus = {
  /**
   * All actions that are implied by the administration have occurred.
   */
  Completed: medication_admin_status_Completed,
  /**
   * The administration was entered in error and therefore nullified.
   */
  EnteredInError: medication_admin_status_EnteredInError,
  /**
   * The administration has started but has not yet completed.
   */
  InProgress: medication_admin_status_InProgress,
  /**
   * Actions implied by the administration have been temporarily halted, but are expected to continue later. May also be called "suspended".
   */
  OnHold: medication_admin_status_OnHold,
  /**
   * Actions implied by the administration have been permanently halted, before all of them occurred.
   */
  Stopped: medication_admin_status_Stopped,
};
const medication_dispense_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/medication-dispense-status"
};
const medication_dispense_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in-Error",
  system: "http://hl7.org/fhir/medication-dispense-status"
};
const medication_dispense_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/medication-dispense-status"
};
const medication_dispense_status_OnHold: Coding = {
  code: "on-hold",
  display: "On Hold",
  system: "http://hl7.org/fhir/medication-dispense-status"
};
const medication_dispense_status_Stopped: Coding = {
  code: "stopped",
  display: "Stopped",
  system: "http://hl7.org/fhir/medication-dispense-status"
};
/**
 * A code specifying the state of the dispense event.
 * 
 * Describes the lifecycle of the dispense.
 */
export const MedicationDispenseStatus = {
  /**
   * All actions that are implied by the dispense have occurred.
   */
  Completed: medication_dispense_status_Completed,
  /**
   * The dispense was entered in error and therefore nullified.
   */
  EnteredInError: medication_dispense_status_EnteredInError,
  /**
   * The dispense has started but has not yet completed.
   */
  InProgress: medication_dispense_status_InProgress,
  /**
   * Actions implied by the administration have been temporarily halted, but are expected to continue later. May also be called "suspended"
   */
  OnHold: medication_dispense_status_OnHold,
  /**
   * Actions implied by the dispense have been permanently halted, before all of them occurred.
   */
  Stopped: medication_dispense_status_Stopped,
};
const medication_order_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/medication-order-status"
};
const medication_order_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/medication-order-status"
};
const medication_order_status_Draft: Coding = {
  code: "draft",
  display: "Draft",
  system: "http://hl7.org/fhir/medication-order-status"
};
const medication_order_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered In Error",
  system: "http://hl7.org/fhir/medication-order-status"
};
const medication_order_status_OnHold: Coding = {
  code: "on-hold",
  display: "On Hold",
  system: "http://hl7.org/fhir/medication-order-status"
};
const medication_order_status_Stopped: Coding = {
  code: "stopped",
  display: "Stopped",
  system: "http://hl7.org/fhir/medication-order-status"
};
/**
 * A code specifying the state of the prescribing event. Describes the lifecycle of the prescription.
 */
export const MedicationOrderStatus = {
  /**
   * The prescription is 'actionable', but not all actions that are implied by it have occurred yet.
   */
  Active: medication_order_status_Active,
  /**
   * All actions that are implied by the prescription have occurred.
   */
  Completed: medication_order_status_Completed,
  /**
   * The prescription is not yet 'actionable', i.e. it is a work in progress, requires sign-off or verification, and needs to be run through decision support process.
   */
  Draft: medication_order_status_Draft,
  /**
   * The prescription was entered in error.
   */
  EnteredInError: medication_order_status_EnteredInError,
  /**
   * Actions implied by the prescription are to be temporarily halted, but are expected to continue later.  May also be called "suspended".
   */
  OnHold: medication_order_status_OnHold,
  /**
   * Actions implied by the prescription are to be permanently halted, before all of them occurred.
   */
  Stopped: medication_order_status_Stopped,
};
const medication_statement_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/medication-statement-status"
};
const medication_statement_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/medication-statement-status"
};
const medication_statement_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/medication-statement-status"
};
const medication_statement_status_Intended: Coding = {
  code: "intended",
  display: "Intended",
  system: "http://hl7.org/fhir/medication-statement-status"
};
/**
 * A set of codes indicating the current status of a MedicationStatement.
 */
export const MedicationStatementStatus = {
  /**
   * The medication is still being taken.
   */
  Active: medication_statement_status_Active,
  /**
   * The medication is no longer being taken.
   */
  Completed: medication_statement_status_Completed,
  /**
   * The statement was entered in error.
   */
  EnteredInError: medication_statement_status_EnteredInError,
  /**
   * The medication may be taken at some time in the future.
   */
  Intended: medication_statement_status_Intended,
};
const message_conformance_event_mode_Receiver: Coding = {
  code: "receiver",
  display: "Receiver",
  system: "http://hl7.org/fhir/message-conformance-event-mode"
};
const message_conformance_event_mode_Sender: Coding = {
  code: "sender",
  display: "Sender",
  system: "http://hl7.org/fhir/message-conformance-event-mode"
};
/**
 * The mode of a message conformance statement.
 */
export const MessageConformanceEventMode = {
  /**
   * The application receives requests and sends responses.
   */
  Receiver: message_conformance_event_mode_Receiver,
  /**
   * The application sends requests and receives responses.
   */
  Sender: message_conformance_event_mode_Sender,
};
const message_events_AdminNotify: Coding = {
  code: "admin-notify",
  display: "admin-notify",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_DiagnosticreportProvide: Coding = {
  code: "diagnosticreport-provide",
  display: "diagnosticreport-provide",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_MedicationAdministrationComplete: Coding = {
  code: "MedicationAdministration-Complete",
  display: "MedicationAdministration-Complete",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_MedicationAdministrationNullification: Coding = {
  code: "MedicationAdministration-Nullification",
  display: "MedicationAdministration-Nullification",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_MedicationAdministrationRecording: Coding = {
  code: "MedicationAdministration-Recording",
  display: "MedicationAdministration-Recording",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_MedicationAdministrationUpdate: Coding = {
  code: "MedicationAdministration-Update",
  display: "MedicationAdministration-Update",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_ObservationProvide: Coding = {
  code: "observation-provide",
  display: "observation-provide",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_PatientLink: Coding = {
  code: "patient-link",
  display: "patient-link",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_PatientUnlink: Coding = {
  code: "patient-unlink",
  display: "patient-unlink",
  system: "http://hl7.org/fhir/message-events"
};
const message_events_ValuesetExpand: Coding = {
  code: "valueset-expand",
  display: "valueset-expand",
  system: "http://hl7.org/fhir/message-events"
};
/**
 * One of the message events defined as part of FHIR.
 */
export const MessageEvents = {
  /**
   * Notification of a change to an administrative resource (either create or update). Note that there is no delete, though some administrative resources have status or period elements for this use.
   */
  AdminNotify: message_events_AdminNotify,
  /**
   * Provide a diagnostic report, or update a previously provided diagnostic report.
   */
  DiagnosticreportProvide: message_events_DiagnosticreportProvide,
  /**
   * Change the status of a Medication Administration to show that it is complete.
   */
  MedicationAdministrationComplete: message_events_MedicationAdministrationComplete,
  /**
   * Someone wishes to record that the record of administration of a medication is in error and should be ignored.
   */
  MedicationAdministrationNullification: message_events_MedicationAdministrationNullification,
  /**
   * Indicates that a medication has been recorded against the patient's record.
   */
  MedicationAdministrationRecording: message_events_MedicationAdministrationRecording,
  /**
   * Update a Medication Administration record.
   */
  MedicationAdministrationUpdate: message_events_MedicationAdministrationUpdate,
  /**
   * Provide a simple observation or update a previously provided simple observation.
   */
  ObservationProvide: message_events_ObservationProvide,
  /**
   * Notification that two patient records actually identify the same patient.
   */
  PatientLink: message_events_PatientLink,
  /**
   * Notification that previous advice that two patient records concern the same patient is now considered incorrect.
   */
  PatientUnlink: message_events_PatientUnlink,
  /**
   * The definition of a value set is used to create a simple collection of codes suitable for use for data entry or validation. An expanded value set will be returned, or an error message.
   */
  ValuesetExpand: message_events_ValuesetExpand,
};
const message_significance_category_Consequence: Coding = {
  code: "Consequence",
  display: "Consequence",
  system: "http://hl7.org/fhir/message-significance-category"
};
const message_significance_category_Currency: Coding = {
  code: "Currency",
  display: "Currency",
  system: "http://hl7.org/fhir/message-significance-category"
};
const message_significance_category_Notification: Coding = {
  code: "Notification",
  display: "Notification",
  system: "http://hl7.org/fhir/message-significance-category"
};
/**
 * The impact of the content of a message.
 */
export const MessageSignificanceCategory = {
  /**
   * The message represents/requests a change that should not be processed more than once; e.g. Making a booking for an appointment.
   */
  Consequence: message_significance_category_Consequence,
  /**
   * The message represents a response to query for current information. Retrospective processing is wrong and/or wasteful.
   */
  Currency: message_significance_category_Currency,
  /**
   * The content is not necessarily intended to be current, and it can be reprocessed, though there may be version issues created by processing old notifications.
   */
  Notification: message_significance_category_Notification,
};
const metric_calibration_state_Calibrated: Coding = {
  code: "calibrated",
  display: "Calibrated",
  system: "http://hl7.org/fhir/metric-calibration-state"
};
const metric_calibration_state_CalibrationRequired: Coding = {
  code: "calibration-required",
  display: "Calibration Required",
  system: "http://hl7.org/fhir/metric-calibration-state"
};
const metric_calibration_state_NotCalibrated: Coding = {
  code: "not-calibrated",
  display: "Not Calibrated",
  system: "http://hl7.org/fhir/metric-calibration-state"
};
const metric_calibration_state_Unspecified: Coding = {
  code: "unspecified",
  display: "Unspecified",
  system: "http://hl7.org/fhir/metric-calibration-state"
};
/**
 * Describes the state of a metric calibration.
 */
export const MetricCalibrationState = {
  /**
   * The metric has been calibrated.
   */
  Calibrated: metric_calibration_state_Calibrated,
  /**
   * The metric needs to be calibrated.
   */
  CalibrationRequired: metric_calibration_state_CalibrationRequired,
  /**
   * The metric has not been calibrated.
   */
  NotCalibrated: metric_calibration_state_NotCalibrated,
  /**
   * The state of calibration of this metric is unspecified.
   */
  Unspecified: metric_calibration_state_Unspecified,
};
const metric_calibration_type_Gain: Coding = {
  code: "gain",
  display: "Gain",
  system: "http://hl7.org/fhir/metric-calibration-type"
};
const metric_calibration_type_Offset: Coding = {
  code: "offset",
  display: "Offset",
  system: "http://hl7.org/fhir/metric-calibration-type"
};
const metric_calibration_type_TwoPoint: Coding = {
  code: "two-point",
  display: "Two Point",
  system: "http://hl7.org/fhir/metric-calibration-type"
};
const metric_calibration_type_Unspecified: Coding = {
  code: "unspecified",
  display: "Unspecified",
  system: "http://hl7.org/fhir/metric-calibration-type"
};
/**
 * Describes the type of a metric calibration.
 */
export const MetricCalibrationType = {
  /**
   * TODO
   */
  Gain: metric_calibration_type_Gain,
  /**
   * TODO
   */
  Offset: metric_calibration_type_Offset,
  /**
   * TODO
   */
  TwoPoint: metric_calibration_type_TwoPoint,
  /**
   * TODO
   */
  Unspecified: metric_calibration_type_Unspecified,
};
const metric_category_Calculation: Coding = {
  code: "calculation",
  display: "Calculation",
  system: "http://hl7.org/fhir/metric-category"
};
const metric_category_Measurement: Coding = {
  code: "measurement",
  display: "Measurement",
  system: "http://hl7.org/fhir/metric-category"
};
const metric_category_Setting: Coding = {
  code: "setting",
  display: "Setting",
  system: "http://hl7.org/fhir/metric-category"
};
const metric_category_Unspecified: Coding = {
  code: "unspecified",
  display: "Unspecified",
  system: "http://hl7.org/fhir/metric-category"
};
/**
 * Describes the category of the metric.
 */
export const MetricCategory = {
  /**
   * DeviceObservations generated for this DeviceMetric are calculated.
   */
  Calculation: metric_category_Calculation,
  /**
   * DeviceObservations generated for this DeviceMetric are measured.
   */
  Measurement: metric_category_Measurement,
  /**
   * DeviceObservations generated for this DeviceMetric is a setting that will influence the behavior of the Device.
   */
  Setting: metric_category_Setting,
  /**
   * The category of this DeviceMetric is unspecified.
   */
  Unspecified: metric_category_Unspecified,
};
const metric_color_ColorBlack: Coding = {
  code: "black",
  display: "Color Black",
  system: "http://hl7.org/fhir/metric-color"
};
const metric_color_ColorBlue: Coding = {
  code: "blue",
  display: "Color Blue",
  system: "http://hl7.org/fhir/metric-color"
};
const metric_color_ColorCyan: Coding = {
  code: "cyan",
  display: "Color Cyan",
  system: "http://hl7.org/fhir/metric-color"
};
const metric_color_ColorGreen: Coding = {
  code: "green",
  display: "Color Green",
  system: "http://hl7.org/fhir/metric-color"
};
const metric_color_ColorMagenta: Coding = {
  code: "magenta",
  display: "Color Magenta",
  system: "http://hl7.org/fhir/metric-color"
};
const metric_color_ColorRed: Coding = {
  code: "red",
  display: "Color Red",
  system: "http://hl7.org/fhir/metric-color"
};
const metric_color_ColorWhite: Coding = {
  code: "white",
  display: "Color White",
  system: "http://hl7.org/fhir/metric-color"
};
const metric_color_ColorYellow: Coding = {
  code: "yellow",
  display: "Color Yellow",
  system: "http://hl7.org/fhir/metric-color"
};
/**
 * Describes the typical color of representation.
 */
export const MetricColor = {
  /**
   * Color for representation - black.
   */
  ColorBlack: metric_color_ColorBlack,
  /**
   * Color for representation - blue.
   */
  ColorBlue: metric_color_ColorBlue,
  /**
   * Color for representation - cyan.
   */
  ColorCyan: metric_color_ColorCyan,
  /**
   * Color for representation - green.
   */
  ColorGreen: metric_color_ColorGreen,
  /**
   * Color for representation - magenta.
   */
  ColorMagenta: metric_color_ColorMagenta,
  /**
   * Color for representation - red.
   */
  ColorRed: metric_color_ColorRed,
  /**
   * Color for representation - white.
   */
  ColorWhite: metric_color_ColorWhite,
  /**
   * Color for representation - yellow.
   */
  ColorYellow: metric_color_ColorYellow,
};
const metric_operational_status_Off: Coding = {
  code: "off",
  display: "Off",
  system: "http://hl7.org/fhir/metric-operational-status"
};
const metric_operational_status_On: Coding = {
  code: "on",
  display: "On",
  system: "http://hl7.org/fhir/metric-operational-status"
};
const metric_operational_status_Standby: Coding = {
  code: "standby",
  display: "Standby",
  system: "http://hl7.org/fhir/metric-operational-status"
};
/**
 * Describes the operational status of the DeviceMetric.
 */
export const MetricOperationalStatus = {
  /**
   * The DeviceMetric is not operating.
   */
  Off: metric_operational_status_Off,
  /**
   * The DeviceMetric is operating and will generate DeviceObservations.
   */
  On: metric_operational_status_On,
  /**
   * The DeviceMetric is operating, but will not generate any DeviceObservations.
   */
  Standby: metric_operational_status_Standby,
};
const name_use_Anonymous: Coding = {
  code: "anonymous",
  display: "Anonymous",
  system: "http://hl7.org/fhir/name-use"
};
const name_use_Maiden: Coding = {
  code: "maiden",
  display: "Maiden",
  system: "http://hl7.org/fhir/name-use"
};
const name_use_Nickname: Coding = {
  code: "nickname",
  display: "Nickname",
  system: "http://hl7.org/fhir/name-use"
};
const name_use_Official: Coding = {
  code: "official",
  display: "Official",
  system: "http://hl7.org/fhir/name-use"
};
const name_use_Old: Coding = {
  code: "old",
  display: "Old",
  system: "http://hl7.org/fhir/name-use"
};
const name_use_Temp: Coding = {
  code: "temp",
  display: "Temp",
  system: "http://hl7.org/fhir/name-use"
};
const name_use_Usual: Coding = {
  code: "usual",
  display: "Usual",
  system: "http://hl7.org/fhir/name-use"
};
/**
 * The use of a human name
 */
export const NameUse = {
  /**
   * Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons)
   */
  Anonymous: name_use_Anonymous,
  /**
   * A name used prior to marriage. Marriage naming customs vary greatly around the world. This name use is for use by applications that collect and store "maiden" names. Though the concept of maiden name is often gender specific, the use of this term is not gender specific. The use of this term does not imply any particular history for a person's name, nor should the maiden name be determined algorithmically.
   */
  Maiden: name_use_Maiden,
  /**
   * A name that is used to address the person in an informal manner, but is not part of their formal or usual name
   */
  Nickname: name_use_Nickname,
  /**
   * The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called "legal name".
   */
  Official: name_use_Official,
  /**
   * This name is no longer in use (or was never correct, but retained for records)
   */
  Old: name_use_Old,
  /**
   * A temporary name. Name.period can provide more detailed information. This may also be used for temporary names assigned at birth or in emergency situations.
   */
  Temp: name_use_Temp,
  /**
   * Known as/conventional/the one you normally use
   */
  Usual: name_use_Usual,
};
const namingsystem_identifier_type_OID: Coding = {
  code: "oid",
  display: "OID",
  system: "http://hl7.org/fhir/namingsystem-identifier-type"
};
const namingsystem_identifier_type_Other: Coding = {
  code: "other",
  display: "Other",
  system: "http://hl7.org/fhir/namingsystem-identifier-type"
};
const namingsystem_identifier_type_URI: Coding = {
  code: "uri",
  display: "URI",
  system: "http://hl7.org/fhir/namingsystem-identifier-type"
};
const namingsystem_identifier_type_UUID: Coding = {
  code: "uuid",
  display: "UUID",
  system: "http://hl7.org/fhir/namingsystem-identifier-type"
};
/**
 * Identifies the style of unique identifier used to identify a namespace.
 */
export const NamingsystemIdentifierType = {
  /**
   * An ISO object identifier; e.g. 1.2.3.4.5.
   */
  OID: namingsystem_identifier_type_OID,
  /**
   * Some other type of unique identifier; e.g. HL7-assigned reserved string such as LN for LOINC.
   */
  Other: namingsystem_identifier_type_Other,
  /**
   * A uniform resource identifier (ideally a URL - uniform resource locator); e.g. http://unitsofmeasure.org.
   */
  URI: namingsystem_identifier_type_URI,
  /**
   * A universally unique identifier of the form a5afddf4-e880-459b-876e-e4591b0acc11.
   */
  UUID: namingsystem_identifier_type_UUID,
};
const namingsystem_type_CodeSystem: Coding = {
  code: "codesystem",
  display: "Code System",
  system: "http://hl7.org/fhir/namingsystem-type"
};
const namingsystem_type_Identifier: Coding = {
  code: "identifier",
  display: "Identifier",
  system: "http://hl7.org/fhir/namingsystem-type"
};
const namingsystem_type_Root: Coding = {
  code: "root",
  display: "Root",
  system: "http://hl7.org/fhir/namingsystem-type"
};
/**
 * Identifies the purpose of the naming system.
 */
export const NamingsystemType = {
  /**
   * The naming system is used to define concepts and symbols to represent those concepts; e.g. UCUM, LOINC, NDC code, local lab codes, etc.
   */
  CodeSystem: namingsystem_type_CodeSystem,
  /**
   * The naming system is used to manage identifiers (e.g. license numbers, order numbers, etc.).
   */
  Identifier: namingsystem_type_Identifier,
  /**
   * The naming system is used as the root for other identifiers and naming systems.
   */
  Root: namingsystem_type_Root,
};
const narrative_status_Additional: Coding = {
  code: "additional",
  display: "Additional",
  system: "http://hl7.org/fhir/narrative-status"
};
const narrative_status_Empty: Coding = {
  code: "empty",
  display: "Empty",
  system: "http://hl7.org/fhir/narrative-status"
};
const narrative_status_Extensions: Coding = {
  code: "extensions",
  display: "Extensions",
  system: "http://hl7.org/fhir/narrative-status"
};
const narrative_status_Generated: Coding = {
  code: "generated",
  display: "Generated",
  system: "http://hl7.org/fhir/narrative-status"
};
/**
 * The status of a resource narrative
 */
export const NarrativeStatus = {
  /**
   * The contents of the narrative contain additional information not found in the structured data
   */
  Additional: narrative_status_Additional,
  /**
   * The contents of the narrative are some equivalent of "No human-readable text provided in this case"
   */
  Empty: narrative_status_Empty,
  /**
   * The contents of the narrative are entirely generated from the structured data in the content and some of the content is generated from extensions
   */
  Extensions: narrative_status_Extensions,
  /**
   * The contents of the narrative are entirely generated from the structured data in the content.
   */
  Generated: narrative_status_Generated,
};
const network_type_MachineName: Coding = {
  code: "1",
  display: "Machine Name",
  system: "http://hl7.org/fhir/network-type"
};
const network_type_IPAddress: Coding = {
  code: "2",
  display: "IP Address",
  system: "http://hl7.org/fhir/network-type"
};
const network_type_TelephoneNumber: Coding = {
  code: "3",
  display: "Telephone Number",
  system: "http://hl7.org/fhir/network-type"
};
const network_type_EmailAddress: Coding = {
  code: "4",
  display: "Email address",
  system: "http://hl7.org/fhir/network-type"
};
const network_type_URI: Coding = {
  code: "5",
  display: "URI",
  system: "http://hl7.org/fhir/network-type"
};
/**
 * The type of network access point of this participant in the audit event
 */
export const NetworkType = {
  /**
   * The machine name, including DNS name.
   */
  MachineName: network_type_MachineName,
  /**
   * The assigned Internet Protocol (IP) address.
   */
  IPAddress: network_type_IPAddress,
  /**
   * The assigned telephone number.
   */
  TelephoneNumber: network_type_TelephoneNumber,
  /**
   * The assigned email address.
   */
  EmailAddress: network_type_EmailAddress,
  /**
   * URI (User directory, HTTP-PUT, ftp, etc.).
   */
  URI: network_type_URI,
};
const note_type_Display: Coding = {
  code: "display",
  display: "Display",
  system: "http://hl7.org/fhir/note-type"
};
const note_type_PrintForm: Coding = {
  code: "print",
  display: "Print (Form)",
  system: "http://hl7.org/fhir/note-type"
};
const note_type_PrintOperator: Coding = {
  code: "printoper",
  display: "Print (Operator)",
  system: "http://hl7.org/fhir/note-type"
};
/**
 * The presentation types of notes.
 */
export const NoteType = {
  /**
   * Display the note.
   */
  Display: note_type_Display,
  /**
   * Print the note on the form.
   */
  PrintForm: note_type_PrintForm,
  /**
   * Print the note for the operator.
   */
  PrintOperator: note_type_PrintOperator,
};
const nutrition_order_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
const nutrition_order_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
const nutrition_order_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
const nutrition_order_status_Draft: Coding = {
  code: "draft",
  display: "Draft",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
const nutrition_order_status_OnHold: Coding = {
  code: "on-hold",
  display: "On-Hold",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
const nutrition_order_status_Planned: Coding = {
  code: "planned",
  display: "Planned",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
const nutrition_order_status_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
const nutrition_order_status_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/nutrition-order-status"
};
/**
 * Codes specifying the state of the request. Describes the lifecycle of the nutrition order.
 */
export const NutritionOrderStatus = {
  /**
   * The request is 'actionable', but not all actions that are implied by it have occurred yet.
   */
  Active: nutrition_order_status_Active,
  /**
   * The request has been withdrawn and is no longer actionable.
   */
  Cancelled: nutrition_order_status_Cancelled,
  /**
   * All actions that are implied by the order have occurred and no continuation is planned (this will rarely be made explicit).
   */
  Completed: nutrition_order_status_Completed,
  /**
   * The request is in preliminary form prior to being sent.
   */
  Draft: nutrition_order_status_Draft,
  /**
   * Actions implied by the request have been temporarily halted, but are expected to continue later. May also be called "suspended".
   */
  OnHold: nutrition_order_status_OnHold,
  /**
   * The request has been planned.
   */
  Planned: nutrition_order_status_Planned,
  /**
   * The request has been proposed.
   */
  Proposed: nutrition_order_status_Proposed,
  /**
   * The request has been placed.
   */
  Requested: nutrition_order_status_Requested,
};
const observation_relationshiptypes_DerivedFrom: Coding = {
  code: "derived-from",
  display: "Derived From",
  system: "http://hl7.org/fhir/observation-relationshiptypes"
};
const observation_relationshiptypes_HasMember: Coding = {
  code: "has-member",
  display: "Has Member",
  system: "http://hl7.org/fhir/observation-relationshiptypes"
};
const observation_relationshiptypes_InterferedBy: Coding = {
  code: "interfered-by",
  display: "Interfered By",
  system: "http://hl7.org/fhir/observation-relationshiptypes"
};
const observation_relationshiptypes_QualifiedBy: Coding = {
  code: "qualified-by",
  display: "Qualified By",
  system: "http://hl7.org/fhir/observation-relationshiptypes"
};
const observation_relationshiptypes_Replaces: Coding = {
  code: "replaces",
  display: "Replaces",
  system: "http://hl7.org/fhir/observation-relationshiptypes"
};
const observation_relationshiptypes_SequelTo: Coding = {
  code: "sequel-to",
  display: "Sequel To",
  system: "http://hl7.org/fhir/observation-relationshiptypes"
};
/**
 * Codes specifying how two observations are related.
 */
export const ObservationRelationshiptypes = {
  /**
   * The target resource (Observation or QuestionnaireResponse) is part of the information from which this observation value is derived. (e.g. calculated anion gap, Apgar score)  NOTE:  "derived-from" is only logical choice when referencing QuestionnaireResponse.
   */
  DerivedFrom: observation_relationshiptypes_DerivedFrom,
  /**
   * This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
   */
  HasMember: observation_relationshiptypes_HasMember,
  /**
   * The value of the target observation interferes (degrades quality, or prevents valid observation) with the semantics of the source observation (e.g. a hemolysis measure target from a plasma potassium measure which has no value).
   */
  InterferedBy: observation_relationshiptypes_InterferedBy,
  /**
   * The value of the target observation qualifies (refines) the semantics of the source observation (e.g. a lipemia measure target from a plasma measure).
   */
  QualifiedBy: observation_relationshiptypes_QualifiedBy,
  /**
   * This observation replaces a previous observation (i.e. a revised value). The target observation is now obsolete.
   */
  Replaces: observation_relationshiptypes_Replaces,
  /**
   * This observation follows the target observation (e.g. timed tests such as Glucose Tolerance Test).
   */
  SequelTo: observation_relationshiptypes_SequelTo,
};
const observation_status_Amended: Coding = {
  code: "amended",
  display: "Amended",
  system: "http://hl7.org/fhir/observation-status"
};
const observation_status_Cancelled: Coding = {
  code: "cancelled",
  display: "cancelled",
  system: "http://hl7.org/fhir/observation-status"
};
const observation_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/observation-status"
};
const observation_status_Final: Coding = {
  code: "final",
  display: "Final",
  system: "http://hl7.org/fhir/observation-status"
};
const observation_status_Preliminary: Coding = {
  code: "preliminary",
  display: "Preliminary",
  system: "http://hl7.org/fhir/observation-status"
};
const observation_status_Registered: Coding = {
  code: "registered",
  display: "Registered",
  system: "http://hl7.org/fhir/observation-status"
};
const observation_status_UnknownStatus: Coding = {
  code: "unknown",
  display: "Unknown Status",
  system: "http://hl7.org/fhir/observation-status"
};
/**
 * Codes providing the status of an observation.
 */
export const ObservationStatus = {
  /**
   * The observation has been modified subsequent to being Final, and is complete and verified by an authorized person.
   */
  Amended: observation_status_Amended,
  /**
   * The observation is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
   */
  Cancelled: observation_status_Cancelled,
  /**
   * The observation has been withdrawn following previous final release.
   */
  EnteredInError: observation_status_EnteredInError,
  /**
   * The observation is complete and verified by an authorized person.
   */
  Final: observation_status_Final,
  /**
   * This is an initial or interim observation: data may be incomplete or unverified.
   */
  Preliminary: observation_status_Preliminary,
  /**
   * The existence of the observation is registered, but there is no result yet available.
   */
  Registered: observation_status_Registered,
  /**
   * The observation status is unknown.  Note that "unknown" is a value of last resort and every attempt should be made to provide a meaningful value other than "unknown".
   */
  UnknownStatus: observation_status_UnknownStatus,
};
const operation_kind_Operation: Coding = {
  code: "operation",
  display: "Operation",
  system: "http://hl7.org/fhir/operation-kind"
};
const operation_kind_Query: Coding = {
  code: "query",
  display: "Query",
  system: "http://hl7.org/fhir/operation-kind"
};
/**
 * Whether an operation is a normal operation or a query.
 */
export const OperationKind = {
  /**
   * This operation is invoked as an operation.
   */
  Operation: operation_kind_Operation,
  /**
   * This operation is a named query, invoked using the search mechanism.
   */
  Query: operation_kind_Query,
};
const search_param_type_Composite: Coding = {
  code: "composite",
  display: "Composite",
  system: "http://hl7.org/fhir/search-param-type"
};
const search_param_type_DateDateTime: Coding = {
  code: "date",
  display: "Date/DateTime",
  system: "http://hl7.org/fhir/search-param-type"
};
const search_param_type_Number: Coding = {
  code: "number",
  display: "Number",
  system: "http://hl7.org/fhir/search-param-type"
};
const search_param_type_Quantity: Coding = {
  code: "quantity",
  display: "Quantity",
  system: "http://hl7.org/fhir/search-param-type"
};
const search_param_type_Reference: Coding = {
  code: "reference",
  display: "Reference",
  system: "http://hl7.org/fhir/search-param-type"
};
const search_param_type_String: Coding = {
  code: "string",
  display: "String",
  system: "http://hl7.org/fhir/search-param-type"
};
const search_param_type_Token: Coding = {
  code: "token",
  display: "Token",
  system: "http://hl7.org/fhir/search-param-type"
};
const search_param_type_URI: Coding = {
  code: "uri",
  display: "URI",
  system: "http://hl7.org/fhir/search-param-type"
};
/**
 * Parameter Types used in Operation Definitions
 */
export const OperationParameterType = {
  /**
   * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
   */
  Account_resource_types: resource_types_Account,
  /**
   * There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
   */
  Address_data_types: data_types_Address,
  Age_data_types: data_types_Age,
  /**
   * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
   */
  AllergyIntolerance_resource_types: resource_types_AllergyIntolerance,
  /**
   * A  text note which also  contains information about who made the statement and when.
   */
  Annotation_data_types: data_types_Annotation,
  /**
   * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
   */
  Appointment_resource_types: resource_types_Appointment,
  /**
   * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
   */
  AppointmentResponse_resource_types: resource_types_AppointmentResponse,
  /**
   * For referring to data content defined in other formats.
   */
  Attachment_data_types: data_types_Attachment,
  /**
   * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
   */
  AuditEvent_resource_types: resource_types_AuditEvent,
  /**
   * Base definition for all elements that are defined inside a resource - but not those in a data type.
   */
  BackboneElement_data_types: data_types_BackboneElement,
  /**
   * A stream of bytes
   */
  Base64Binary_data_types: data_types_Base64Binary,
  /**
   * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
   */
  Basic_resource_types: resource_types_Basic,
  /**
   * A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
   */
  Binary_resource_types: resource_types_Binary,
  /**
   * Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
   */
  BodySite_resource_types: resource_types_BodySite,
  /**
   * Value of "true" or "false"
   */
  Boolean_data_types: data_types_Boolean,
  /**
   * A container for a collection of resources.
   */
  Bundle_resource_types: resource_types_Bundle,
  /**
   * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
   */
  CarePlan_resource_types: resource_types_CarePlan,
  /**
   * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
   */
  Claim_resource_types: resource_types_Claim,
  /**
   * This resource provides the adjudication details from the processing of a Claim resource.
   */
  ClaimResponse_resource_types: resource_types_ClaimResponse,
  /**
   * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
   */
  ClinicalImpression_resource_types: resource_types_ClinicalImpression,
  /**
   * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
   */
  Code_data_types: data_types_Code,
  /**
   * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
   */
  CodeableConcept_data_types: data_types_CodeableConcept,
  /**
   * A reference to a code defined by a terminology system.
   */
  Coding_data_types: data_types_Coding,
  /**
   * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
   */
  Communication_resource_types: resource_types_Communication,
  /**
   * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
   */
  CommunicationRequest_resource_types: resource_types_CommunicationRequest,
  /**
   * A composite search parameter that combines a search on two values together.
   */
  Composite_search_param_type: search_param_type_Composite,
  /**
   * A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
   */
  Composition_resource_types: resource_types_Composition,
  /**
   * A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
   */
  ConceptMap_resource_types: resource_types_ConceptMap,
  /**
   * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
   */
  Condition_resource_types: resource_types_Condition,
  /**
   * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
   */
  Conformance_resource_types: resource_types_Conformance,
  /**
   * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
   */
  ContactPoint_data_types: data_types_ContactPoint,
  /**
   * A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
   */
  Contract_resource_types: resource_types_Contract,
  Count_data_types: data_types_Count,
  /**
   * Financial instrument which may be used to pay for or reimburse health care products and services.
   */
  Coverage_resource_types: resource_types_Coverage,
  /**
   * The formal description of a single piece of information that can be gathered and reported.
   */
  DataElement_resource_types: resource_types_DataElement,
  /**
   * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
   */
  Date_data_types: data_types_Date,
  /**
   * Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.
   */
  DateDateTime_search_param_type: search_param_type_DateDateTime,
  /**
   * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
   */
  DateTime_data_types: data_types_DateTime,
  /**
   * A rational number with implicit precision
   */
  Decimal_data_types: data_types_Decimal,
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
   */
  DetectedIssue_resource_types: resource_types_DetectedIssue,
  /**
   * This resource identifies an instance of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
   */
  Device_resource_types: resource_types_Device,
  /**
   * Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
   */
  DeviceComponent_resource_types: resource_types_DeviceComponent,
  /**
   * Describes a measurement, calculation or setting capability of a medical device.
   */
  DeviceMetric_resource_types: resource_types_DeviceMetric,
  /**
   * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
   */
  DeviceUseRequest_resource_types: resource_types_DeviceUseRequest,
  /**
   * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
   */
  DeviceUseStatement_resource_types: resource_types_DeviceUseStatement,
  /**
   * A record of a request for a diagnostic investigation service to be performed.
   */
  DiagnosticOrder_resource_types: resource_types_DiagnosticOrder,
  /**
   * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
   */
  DiagnosticReport_resource_types: resource_types_DiagnosticReport,
  Distance_data_types: data_types_Distance,
  /**
   * A manifest that defines a set of documents.
   */
  DocumentManifest_resource_types: resource_types_DocumentManifest,
  /**
   * A reference to a document .
   */
  DocumentReference_resource_types: resource_types_DocumentReference,
  /**
   * --- Abstract Type! ---A resource that includes narrative, extensions, and contained resources.
   */
  DomainResource_resource_types: resource_types_DomainResource,
  Duration_data_types: data_types_Duration,
  /**
   * Base definition for all elements in a resource.
   */
  Element_data_types: data_types_Element,
  /**
   * Captures constraints on each element within the resource, profile, or extension.
   */
  ElementDefinition_data_types: data_types_ElementDefinition,
  /**
   * This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.
   */
  EligibilityRequest_resource_types: resource_types_EligibilityRequest,
  /**
   * This resource provides eligibility and plan details from the processing of an Eligibility resource.
   */
  EligibilityResponse_resource_types: resource_types_EligibilityResponse,
  /**
   * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
   */
  Encounter_resource_types: resource_types_Encounter,
  /**
   * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
   */
  EnrollmentRequest_resource_types: resource_types_EnrollmentRequest,
  /**
   * This resource provides enrollment and plan details from the processing of an Enrollment resource.
   */
  EnrollmentResponse_resource_types: resource_types_EnrollmentResponse,
  /**
   * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
   */
  EpisodeOfCare_resource_types: resource_types_EpisodeOfCare,
  /**
   * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
   */
  ExplanationOfBenefit_resource_types: resource_types_ExplanationOfBenefit,
  /**
   * Optional Extensions Element - found in all resources.
   */
  Extension_data_types: data_types_Extension,
  /**
   * Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
   */
  FamilyMemberHistory_resource_types: resource_types_FamilyMemberHistory,
  /**
   * Prospective warnings of potential issues when providing care to the patient.
   */
  Flag_resource_types: resource_types_Flag,
  /**
   * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
   */
  Goal_resource_types: resource_types_Goal,
  /**
   * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
   */
  Group_resource_types: resource_types_Group,
  /**
   * The details of a healthcare service available at a location.
   */
  HealthcareService_resource_types: resource_types_HealthcareService,
  /**
   * A human's name with the ability to identify parts and usage.
   */
  HumanName_data_types: data_types_HumanName,
  /**
   * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
   */
  Id_data_types: data_types_Id,
  /**
   * A technical identifier - identifies some entity uniquely and unambiguously.
   */
  Identifier_data_types: data_types_Identifier,
  /**
   * A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
   */
  ImagingObjectSelection_resource_types: resource_types_ImagingObjectSelection,
  /**
   * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
   */
  ImagingStudy_resource_types: resource_types_ImagingStudy,
  /**
   * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
   */
  Immunization_resource_types: resource_types_Immunization,
  /**
   * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
   */
  ImmunizationRecommendation_resource_types: resource_types_ImmunizationRecommendation,
  /**
   * A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
   */
  ImplementationGuide_resource_types: resource_types_ImplementationGuide,
  /**
   * An instant in time - known at least to the second
   */
  Instant_data_types: data_types_Instant,
  /**
   * A whole number
   */
  Integer_data_types: data_types_Integer,
  /**
   * A set of information summarized from a list of other resources.
   */
  List_resource_types: resource_types_List,
  /**
   * Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
   */
  Location_resource_types: resource_types_Location,
  /**
   * A string that may contain markdown syntax for optional processing by a mark down presentation engine
   */
  Markdown_data_types: data_types_Markdown,
  /**
   * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
   */
  Media_resource_types: resource_types_Media,
  /**
   * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
   */
  Medication_resource_types: resource_types_Medication,
  /**
   * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
   */
  MedicationAdministration_resource_types: resource_types_MedicationAdministration,
  /**
   * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
   */
  MedicationDispense_resource_types: resource_types_MedicationDispense,
  /**
   * An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
   */
  MedicationOrder_resource_types: resource_types_MedicationOrder,
  /**
   * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains 
   * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
   */
  MedicationStatement_resource_types: resource_types_MedicationStatement,
  /**
   * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
   */
  MessageHeader_resource_types: resource_types_MessageHeader,
  /**
   * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  Meta_data_types: data_types_Meta,
  Money_data_types: data_types_Money,
  /**
   * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
   */
  NamingSystem_resource_types: resource_types_NamingSystem,
  /**
   * A human-readable formatted text, including images.
   */
  Narrative_data_types: data_types_Narrative,
  /**
   * Search parameter SHALL be a number (a whole number, or a decimal).
   */
  Number_search_param_type: search_param_type_Number,
  /**
   * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
   */
  NutritionOrder_resource_types: resource_types_NutritionOrder,
  /**
   * Measurements and simple assertions made about a patient, device or other subject.
   */
  Observation_resource_types: resource_types_Observation,
  /**
   * An oid represented as a URI
   */
  Oid_data_types: data_types_Oid,
  /**
   * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
   */
  OperationDefinition_resource_types: resource_types_OperationDefinition,
  /**
   * A collection of error, warning or information messages that result from a system action.
   */
  OperationOutcome_resource_types: resource_types_OperationOutcome,
  /**
   * A request to perform an action.
   */
  Order_resource_types: resource_types_Order,
  /**
   * A response to an order.
   */
  OrderResponse_resource_types: resource_types_OrderResponse,
  /**
   * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
   */
  Organization_resource_types: resource_types_Organization,
  /**
   * This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
   */
  Parameters_resource_types: resource_types_Parameters,
  /**
   * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
   */
  Patient_resource_types: resource_types_Patient,
  /**
   * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
   */
  PaymentNotice_resource_types: resource_types_PaymentNotice,
  /**
   * This resource provides payment details and claim references supporting a bulk payment.
   */
  PaymentReconciliation_resource_types: resource_types_PaymentReconciliation,
  /**
   * A time period defined by a start and end date and optionally time.
   */
  Period_data_types: data_types_Period,
  /**
   * Demographics and administrative information about a person independent of a specific health-related context.
   */
  Person_resource_types: resource_types_Person,
  /**
   * An integer with a value that is positive (e.g. >0)
   */
  PositiveInt_data_types: data_types_PositiveInt,
  /**
   * A person who is directly or indirectly involved in the provisioning of healthcare.
   */
  Practitioner_resource_types: resource_types_Practitioner,
  /**
   * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
   */
  Procedure_resource_types: resource_types_Procedure,
  /**
   * A request for a procedure to be performed. May be a proposal or an order.
   */
  ProcedureRequest_resource_types: resource_types_ProcedureRequest,
  /**
   * This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
   */
  ProcessRequest_resource_types: resource_types_ProcessRequest,
  /**
   * This resource provides processing status, errors and notes from the processing of a resource.
   */
  ProcessResponse_resource_types: resource_types_ProcessResponse,
  /**
   * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
   */
  Provenance_resource_types: resource_types_Provenance,
  /**
   * A search parameter that searches on a quantity.
   */
  Quantity_search_param_type: search_param_type_Quantity,
  /**
   * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
   */
  Quantity_data_types: data_types_Quantity,
  /**
   * A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  Questionnaire_resource_types: resource_types_Questionnaire,
  /**
   * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  QuestionnaireResponse_resource_types: resource_types_QuestionnaireResponse,
  /**
   * A set of ordered Quantities defined by a low and high limit.
   */
  Range_data_types: data_types_Range,
  /**
   * A relationship of two Quantity values - expressed as a numerator and a denominator.
   */
  Ratio_data_types: data_types_Ratio,
  /**
   * A reference to another resource.
   */
  Reference_search_param_type: search_param_type_Reference,
  /**
   * A reference from one resource to another.
   */
  Reference_data_types: data_types_Reference,
  /**
   * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
   */
  ReferralRequest_resource_types: resource_types_ReferralRequest,
  /**
   * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
   */
  RelatedPerson_resource_types: resource_types_RelatedPerson,
  /**
   * --- Abstract Type! ---This is the base resource type for everything.
   */
  Resource_resource_types: resource_types_Resource,
  /**
   * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
   */
  RiskAssessment_resource_types: resource_types_RiskAssessment,
  /**
   * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
   */
  SampledData_data_types: data_types_SampledData,
  /**
   * A container for slot(s) of time that may be available for booking appointments.
   */
  Schedule_resource_types: resource_types_Schedule,
  /**
   * A search parameter that defines a named search item that can be used to search/filter on a resource.
   */
  SearchParameter_resource_types: resource_types_SearchParameter,
  /**
   * A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
   */
  Signature_data_types: data_types_Signature,
  SimpleQuantity_data_types: data_types_SimpleQuantity,
  /**
   * A slot of time on a schedule that may be available for booking appointments.
   */
  Slot_resource_types: resource_types_Slot,
  /**
   * A sample to be used for analysis.
   */
  Specimen_resource_types: resource_types_Specimen,
  /**
   * A sequence of Unicode characters
   */
  String_data_types: data_types_String,
  /**
   * Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.
   */
  String_search_param_type: search_param_type_String,
  /**
   * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
   */
  StructureDefinition_resource_types: resource_types_StructureDefinition,
  /**
   * The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
   */
  Subscription_resource_types: resource_types_Subscription,
  /**
   * A homogeneous material with a definite composition.
   */
  Substance_resource_types: resource_types_Substance,
  /**
   * Record of delivery of what is supplied.
   */
  SupplyDelivery_resource_types: resource_types_SupplyDelivery,
  /**
   * A record of a request for a medication, substance or device used in the healthcare setting.
   */
  SupplyRequest_resource_types: resource_types_SupplyRequest,
  /**
   * TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
   */
  TestScript_resource_types: resource_types_TestScript,
  /**
   * A time during the day, with no date specified
   */
  Time_data_types: data_types_Time,
  /**
   * Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.
   */
  Timing_data_types: data_types_Timing,
  /**
   * Search parameter on a coded element or identifier. May be used to search through the text, displayname, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.
   */
  Token_search_param_type: search_param_type_Token,
  /**
   * An integer with a value that is not negative (e.g. >= 0)
   */
  UnsignedInt_data_types: data_types_UnsignedInt,
  /**
   * String of characters used to identify a name or a resource
   */
  Uri_data_types: data_types_Uri,
  /**
   * A search parameter that searches on a URI (RFC 3986).
   */
  URI_search_param_type: search_param_type_URI,
  /**
   * A UUID, represented as a URI
   */
  Uuid_data_types: data_types_Uuid,
  /**
   * A value set specifies a set of codes drawn from one or more code systems.
   */
  ValueSet_resource_types: resource_types_ValueSet,
  /**
   * An authorization for the supply of glasses and/or contact lenses to a patient.
   */
  VisionPrescription_resource_types: resource_types_VisionPrescription,
  /**
   * XHTML format, as defined by W3C, but restricted usage (mainly, no active content)
   */
  XHTML_data_types: data_types_XHTML,
};
const operation_parameter_use_In: Coding = {
  code: "in",
  display: "In",
  system: "http://hl7.org/fhir/operation-parameter-use"
};
const operation_parameter_use_Out: Coding = {
  code: "out",
  display: "Out",
  system: "http://hl7.org/fhir/operation-parameter-use"
};
/**
 * Whether an operation parameter is an input or an output parameter.
 */
export const OperationParameterUse = {
  /**
   * This is an input parameter.
   */
  In: operation_parameter_use_In,
  /**
   * This is an output parameter.
   */
  Out: operation_parameter_use_Out,
};
const order_status_Aborted: Coding = {
  code: "aborted",
  display: "Aborted",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Error: Coding = {
  code: "error",
  display: "Error",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Pending: Coding = {
  code: "pending",
  display: "Pending",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Replaced: Coding = {
  code: "replaced",
  display: "Replaced",
  system: "http://hl7.org/fhir/order-status"
};
const order_status_Review: Coding = {
  code: "review",
  display: "Review",
  system: "http://hl7.org/fhir/order-status"
};
/**
 * The status of the response to an order.
 */
export const OrderStatus = {
  /**
   * Processing the order was stopped because of some workflow/business logic reason.
   */
  Aborted: order_status_Aborted,
  /**
   * The order has been accepted, and work is in progress.
   */
  Accepted: order_status_Accepted,
  /**
   * Processing the order was halted at the initiators request.
   */
  Cancelled: order_status_Cancelled,
  /**
   * The order has been completed.
   */
  Completed: order_status_Completed,
  /**
   * The order was unable to be processed because of a technical error (i.e. unexpected error)
   */
  Error: order_status_Error,
  /**
   * The order is known, but no processing has occurred at this time
   */
  Pending: order_status_Pending,
  /**
   * The order was rejected because of a workflow/business logic reason
   */
  Rejected: order_status_Rejected,
  /**
   * The order has been cancelled and replaced by another.
   */
  Replaced: order_status_Replaced,
  /**
   * The order is undergoing initial processing to determine whether it will be accepted (usually this involves human review)
   */
  Review: order_status_Review,
};
const participantrequired_InformationOnly: Coding = {
  code: "information-only",
  display: "Information Only",
  system: "http://hl7.org/fhir/participantrequired"
};
const participantrequired_Optional: Coding = {
  code: "optional",
  display: "Optional",
  system: "http://hl7.org/fhir/participantrequired"
};
const participantrequired_Required: Coding = {
  code: "required",
  display: "Required",
  system: "http://hl7.org/fhir/participantrequired"
};
/**
 * Is the Participant required to attend the appointment.
 */
export const Participantrequired = {
  /**
   * The participant is excluded from the appointment, and may not be informed of the appointment taking place. (Appointment is about them, not for them - such as 2 doctors discussing results about a patient's test).
   */
  InformationOnly: participantrequired_InformationOnly,
  /**
   * The participant may optionally attend the appointment.
   */
  Optional: participantrequired_Optional,
  /**
   * The participant is required to attend the appointment.
   */
  Required: participantrequired_Required,
};
const participantstatus_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/participantstatus"
};
const participantstatus_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/participantstatus"
};
const participantstatus_Declined: Coding = {
  code: "declined",
  display: "Declined",
  system: "http://hl7.org/fhir/participantstatus"
};
const participantstatus_InProcess: Coding = {
  code: "in-process",
  display: "In Process",
  system: "http://hl7.org/fhir/participantstatus"
};
const participantstatus_NeedsAction: Coding = {
  code: "needs-action",
  display: "Needs Action",
  system: "http://hl7.org/fhir/participantstatus"
};
const participantstatus_Tentative: Coding = {
  code: "tentative",
  display: "Tentative",
  system: "http://hl7.org/fhir/participantstatus"
};
/**
 * The Participation status of an appointment.
 */
export const Participantstatus = {
  /**
   * The appointment participant has accepted that they can attend the appointment at the time specified in the AppointmentResponse.
   */
  Accepted: participantstatus_Accepted,
  /**
   * The participant has completed the appointment.
   */
  Completed: participantstatus_Completed,
  /**
   * The appointment participant has declined the appointment.
   */
  Declined: participantstatus_Declined,
  /**
   * The participant has in-process the appointment.
   */
  InProcess: participantstatus_InProcess,
  /**
   * This is the intitial status of an appointment participant until a participant has replied. It implies that there is no commitment for the appointment.
   */
  NeedsAction: participantstatus_NeedsAction,
  /**
   * The appointment participant has tentatively accepted the appointment.
   */
  Tentative: participantstatus_Tentative,
};
const participationstatus_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/participationstatus"
};
const participationstatus_Declined: Coding = {
  code: "declined",
  display: "Declined",
  system: "http://hl7.org/fhir/participationstatus"
};
const participationstatus_NeedsAction: Coding = {
  code: "needs-action",
  display: "Needs Action",
  system: "http://hl7.org/fhir/participationstatus"
};
const participationstatus_Tentative: Coding = {
  code: "tentative",
  display: "Tentative",
  system: "http://hl7.org/fhir/participationstatus"
};
/**
 * The Participation status of an appointment.
 */
export const Participationstatus = {
  /**
   * The participant has accepted the appointment.
   */
  Accepted: participationstatus_Accepted,
  /**
   * The participant has declined the appointment and will not participate in the appointment.
   */
  Declined: participationstatus_Declined,
  /**
   * The participant needs to indicate if they accept the appointment by changing this status to one of the other statuses.
   */
  NeedsAction: participationstatus_NeedsAction,
  /**
   * The participant has  tentatively accepted the appointment. This could be automatically created by a system and requires further processing before it can be accepted. There is no commitment that attendance will occur.
   */
  Tentative: participationstatus_Tentative,
};
const procedure_request_priority_ASAP: Coding = {
  code: "asap",
  display: "ASAP",
  system: "http://hl7.org/fhir/procedure-request-priority"
};
const procedure_request_priority_Routine: Coding = {
  code: "routine",
  display: "Routine",
  system: "http://hl7.org/fhir/procedure-request-priority"
};
const procedure_request_priority_Stat: Coding = {
  code: "stat",
  display: "Stat",
  system: "http://hl7.org/fhir/procedure-request-priority"
};
const procedure_request_priority_Urgent: Coding = {
  code: "urgent",
  display: "Urgent",
  system: "http://hl7.org/fhir/procedure-request-priority"
};
/**
 * The priority of the request.
 */
export const ProcedureRequestPriority = {
  /**
   * The request should be acted on as soon as possible.
   */
  ASAP: procedure_request_priority_ASAP,
  /**
   * The request has a normal priority.
   */
  Routine: procedure_request_priority_Routine,
  /**
   * The request is time-critical.
   */
  Stat: procedure_request_priority_Stat,
  /**
   * The request should be done urgently.
   */
  Urgent: procedure_request_priority_Urgent,
};
const procedure_request_status_Aborted: Coding = {
  code: "aborted",
  display: "Aborted",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Draft: Coding = {
  code: "draft",
  display: "Draft",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Proposed: Coding = {
  code: "proposed",
  display: "Proposed",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Received: Coding = {
  code: "received",
  display: "Received",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/procedure-request-status"
};
const procedure_request_status_Suspended: Coding = {
  code: "suspended",
  display: "Suspended",
  system: "http://hl7.org/fhir/procedure-request-status"
};
/**
 * The status of the request.
 */
export const ProcedureRequestStatus = {
  /**
   * The request was attempted, but due to some procedural error, it could not be completed.
   */
  Aborted: procedure_request_status_Aborted,
  /**
   * The receiving system has accepted the request, but work has not yet commenced.
   */
  Accepted: procedure_request_status_Accepted,
  /**
   * The work has been completed, the report(s) released, and no further work is planned.
   */
  Completed: procedure_request_status_Completed,
  /**
   * The request is in preliminary form, prior to being requested.
   */
  Draft: procedure_request_status_Draft,
  /**
   * The work to fulfill the request is happening.
   */
  InProgress: procedure_request_status_InProgress,
  /**
   * The request has been proposed.
   */
  Proposed: procedure_request_status_Proposed,
  /**
   * The receiving system has received the request but not yet decided whether it will be performed.
   */
  Received: procedure_request_status_Received,
  /**
   * The receiving system has declined to fulfill the request.
   */
  Rejected: procedure_request_status_Rejected,
  /**
   * The request has been placed.
   */
  Requested: procedure_request_status_Requested,
  /**
   * The request has been held by originating system/user request.
   */
  Suspended: procedure_request_status_Suspended,
};
const procedure_status_Aboted: Coding = {
  code: "aborted",
  display: "Aboted",
  system: "http://hl7.org/fhir/procedure-status"
};
const procedure_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/procedure-status"
};
const procedure_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered in Error",
  system: "http://hl7.org/fhir/procedure-status"
};
const procedure_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/procedure-status"
};
/**
 * A code specifying the state of the procedure.
 */
export const ProcedureStatus = {
  /**
   * The procedure was terminated without completing successfully.
   */
  Aboted: procedure_status_Aboted,
  /**
   * All actions involved in the procedure have taken place.
   */
  Completed: procedure_status_Completed,
  /**
   * The statement was entered in error and Is not valid.
   */
  EnteredInError: procedure_status_EnteredInError,
  /**
   * The procedure is still occurring.
   */
  InProgress: procedure_status_InProgress,
};
const property_representation_XMLAttribute: Coding = {
  code: "xmlAttr",
  display: "XML Attribute",
  system: "http://hl7.org/fhir/property-representation"
};
/**
 * How a property is represented on the wire.
 */
export const PropertyRepresentation = {
  /**
   * In XML, this property is represented as an attribute not an element.
   */
  XMLAttribute: property_representation_XMLAttribute,
};
const provenance_entity_role_Derivation: Coding = {
  code: "derivation",
  display: "Derivation",
  system: "http://hl7.org/fhir/provenance-entity-role"
};
const provenance_entity_role_Quotation: Coding = {
  code: "quotation",
  display: "Quotation",
  system: "http://hl7.org/fhir/provenance-entity-role"
};
const provenance_entity_role_Revision: Coding = {
  code: "revision",
  display: "Revision",
  system: "http://hl7.org/fhir/provenance-entity-role"
};
const provenance_entity_role_Source: Coding = {
  code: "source",
  display: "Source",
  system: "http://hl7.org/fhir/provenance-entity-role"
};
/**
 * How an entity was used in an activity.
 */
export const ProvenanceEntityRole = {
  /**
   * A transformation of an entity into another, an update of an entity resulting in a new one, or the construction of a new entity based on a preexisting entity.
   */
  Derivation: provenance_entity_role_Derivation,
  /**
   * The repeat of (some or all of) an entity, such as text or image, by someone who may or may not be its original author.
   */
  Quotation: provenance_entity_role_Quotation,
  /**
   * A derivation for which the resulting entity is a revised version of some original.
   */
  Revision: provenance_entity_role_Revision,
  /**
   * A primary source for a topic refers to something produced by some agent with direct experience and knowledge about the topic, at the time of the topic's study, without benefit from hindsight.
   */
  Source: provenance_entity_role_Source,
};
const quantity_comparator_LessThan: Coding = {
  code: "<",
  display: "Less than",
  system: "http://hl7.org/fhir/quantity-comparator"
};
const quantity_comparator_LessOrEqualTo: Coding = {
  code: "<=",
  display: "Less or Equal to",
  system: "http://hl7.org/fhir/quantity-comparator"
};
const quantity_comparator_GreaterThan: Coding = {
  code: ">",
  display: "Greater than",
  system: "http://hl7.org/fhir/quantity-comparator"
};
const quantity_comparator_GreaterOrEqualTo: Coding = {
  code: ">=",
  display: "Greater or Equal to",
  system: "http://hl7.org/fhir/quantity-comparator"
};
/**
 * How the Quantity should be understood and represented.
 */
export const QuantityComparator = {
  /**
   * The actual value is less than the given value.
   */
  LessThan: quantity_comparator_LessThan,
  /**
   * The actual value is less than or equal to the given value.
   */
  LessOrEqualTo: quantity_comparator_LessOrEqualTo,
  /**
   * The actual value is greater than the given value.
   */
  GreaterThan: quantity_comparator_GreaterThan,
  /**
   * The actual value is greater than or equal to the given value.
   */
  GreaterOrEqualTo: quantity_comparator_GreaterOrEqualTo,
};
const questionnaire_answers_status_Amended: Coding = {
  code: "amended",
  display: "Amended",
  system: "http://hl7.org/fhir/questionnaire-answers-status"
};
const questionnaire_answers_status_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/questionnaire-answers-status"
};
const questionnaire_answers_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/questionnaire-answers-status"
};
/**
 * Lifecycle status of the questionnaire response.
 */
export const QuestionnaireAnswersStatus = {
  /**
   * This QuestionnaireResponse has been filled out with answers, then marked as complete, yet changes or additions have been made to it afterwards.
   */
  Amended: questionnaire_answers_status_Amended,
  /**
   * This QuestionnaireResponse has been filled out with answers, and the current content is regarded as definitive.
   */
  Completed: questionnaire_answers_status_Completed,
  /**
   * This QuestionnaireResponse has been partially filled out with answers, but changes or additions are still expected to be made to it.
   */
  InProgress: questionnaire_answers_status_InProgress,
};
const questionnaire_status_Draft: Coding = {
  code: "draft",
  display: "Draft",
  system: "http://hl7.org/fhir/questionnaire-status"
};
const questionnaire_status_Published: Coding = {
  code: "published",
  display: "Published",
  system: "http://hl7.org/fhir/questionnaire-status"
};
const questionnaire_status_Retired: Coding = {
  code: "retired",
  display: "Retired",
  system: "http://hl7.org/fhir/questionnaire-status"
};
/**
 * Lifecycle status of the questionnaire.
 */
export const QuestionnaireStatus = {
  /**
   * This Questionnaire is not ready for official use.
   */
  Draft: questionnaire_status_Draft,
  /**
   * This Questionnaire is ready for use.
   */
  Published: questionnaire_status_Published,
  /**
   * This Questionnaire should no longer be used to gather data.
   */
  Retired: questionnaire_status_Retired,
};
const reaction_event_certainty_Confirmed: Coding = {
  code: "confirmed",
  display: "Confirmed",
  system: "http://hl7.org/fhir/reaction-event-certainty"
};
const reaction_event_certainty_Likely: Coding = {
  code: "likely",
  display: "Likely",
  system: "http://hl7.org/fhir/reaction-event-certainty"
};
const reaction_event_certainty_Unlikely: Coding = {
  code: "unlikely",
  display: "Unlikely",
  system: "http://hl7.org/fhir/reaction-event-certainty"
};
/**
 * Statement about the degree of clinical certainty that a Specific Substance was the cause of the Manifestation in an reaction event.
 */
export const ReactionEventCertainty = {
  /**
   * There is a very high level of clinical certainty that the reaction was due to the identified Substance, which may include clinical evidence by testing or rechallenge.
   */
  Confirmed: reaction_event_certainty_Confirmed,
  /**
   * There is a high level of clinical certainty that the reaction was caused by the identified Substance.
   */
  Likely: reaction_event_certainty_Likely,
  /**
   * There is a low level of clinical certainty that the reaction was caused by the identified Substance.
   */
  Unlikely: reaction_event_certainty_Unlikely,
};
const reaction_event_severity_Mild: Coding = {
  code: "mild",
  display: "Mild",
  system: "http://hl7.org/fhir/reaction-event-severity"
};
const reaction_event_severity_Moderate: Coding = {
  code: "moderate",
  display: "Moderate",
  system: "http://hl7.org/fhir/reaction-event-severity"
};
const reaction_event_severity_Severe: Coding = {
  code: "severe",
  display: "Severe",
  system: "http://hl7.org/fhir/reaction-event-severity"
};
/**
 * Clinical assessment of the severity of a reaction event as a whole, potentially considering multiple different manifestations.
 */
export const ReactionEventSeverity = {
  /**
   * Causes mild physiological effects.
   */
  Mild: reaction_event_severity_Mild,
  /**
   * Causes moderate physiological effects.
   */
  Moderate: reaction_event_severity_Moderate,
  /**
   * Causes severe physiological effects.
   */
  Severe: reaction_event_severity_Severe,
};
const referralstatus_Accepted: Coding = {
  code: "accepted",
  display: "Accepted",
  system: "http://hl7.org/fhir/referralstatus"
};
const referralstatus_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/referralstatus"
};
const referralstatus_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/referralstatus"
};
const referralstatus_Completed: Coding = {
  code: "completed",
  display: "Completed",
  system: "http://hl7.org/fhir/referralstatus"
};
const referralstatus_Draft: Coding = {
  code: "draft",
  display: "Draft",
  system: "http://hl7.org/fhir/referralstatus"
};
const referralstatus_Rejected: Coding = {
  code: "rejected",
  display: "Rejected",
  system: "http://hl7.org/fhir/referralstatus"
};
const referralstatus_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/referralstatus"
};
/**
 * The status of the referral.
 */
export const Referralstatus = {
  /**
   * The recipient has agreed to deliver the care requested by the referral.
   */
  Accepted: referralstatus_Accepted,
  /**
   * The referral has been acknowledged by the recipient, and is in the process of being actioned.
   */
  Active: referralstatus_Active,
  /**
   * The referral has been cancelled without being completed. For example it is no longer needed.
   */
  Cancelled: referralstatus_Cancelled,
  /**
   * The referral has been completely actioned.
   */
  Completed: referralstatus_Completed,
  /**
   * A draft referral that has yet to be send.
   */
  Draft: referralstatus_Draft,
  /**
   * The recipient has declined to accept the referral.
   */
  Rejected: referralstatus_Rejected,
  /**
   * The referral has been transmitted, but not yet acknowledged by the recipient.
   */
  Requested: referralstatus_Requested,
};
const remittance_outcome_Complete: Coding = {
  code: "complete",
  display: "Complete",
  system: "http://hl7.org/fhir/remittance-outcome"
};
const remittance_outcome_Error: Coding = {
  code: "error",
  display: "Error",
  system: "http://hl7.org/fhir/remittance-outcome"
};
/**
 * The outcome of the processing.
 */
export const RemittanceOutcome = {
  /**
   * The processing completed without errors.
   */
  Complete: remittance_outcome_Complete,
  /**
   * The processing identified errors.
   */
  Error: remittance_outcome_Error,
};
const resource_aggregation_mode_Bundled: Coding = {
  code: "bundled",
  display: "Bundled",
  system: "http://hl7.org/fhir/resource-aggregation-mode"
};
const resource_aggregation_mode_Contained: Coding = {
  code: "contained",
  display: "Contained",
  system: "http://hl7.org/fhir/resource-aggregation-mode"
};
const resource_aggregation_mode_Referenced: Coding = {
  code: "referenced",
  display: "Referenced",
  system: "http://hl7.org/fhir/resource-aggregation-mode"
};
/**
 * How resource references can be aggregated.
 */
export const ResourceAggregationMode = {
  /**
   * The resource the reference points to will be found in the same bundle as the resource that includes the reference.
   */
  Bundled: resource_aggregation_mode_Bundled,
  /**
   * The reference is a local reference to a contained resource.
   */
  Contained: resource_aggregation_mode_Contained,
  /**
   * The reference to a resource that has to be resolved externally to the resource that includes the reference.
   */
  Referenced: resource_aggregation_mode_Referenced,
};
const resource_slicing_rules_Closed: Coding = {
  code: "closed",
  display: "Closed",
  system: "http://hl7.org/fhir/resource-slicing-rules"
};
const resource_slicing_rules_Open: Coding = {
  code: "open",
  display: "Open",
  system: "http://hl7.org/fhir/resource-slicing-rules"
};
const resource_slicing_rules_OpenAtEnd: Coding = {
  code: "openAtEnd",
  display: "Open at End",
  system: "http://hl7.org/fhir/resource-slicing-rules"
};
/**
 * How slices are interpreted when evaluating an instance.
 */
export const ResourceSlicingRules = {
  /**
   * No additional content is allowed other than that described by the slices in this profile.
   */
  Closed: resource_slicing_rules_Closed,
  /**
   * Additional content is allowed anywhere in the list.
   */
  Open: resource_slicing_rules_Open,
  /**
   * Additional content is allowed, but only at the end of the list. Note that using this requires that the slices be ordered, which makes it hard to share uses. This should only be done where absolutely required.
   */
  OpenAtEnd: resource_slicing_rules_OpenAtEnd,
};
/**
 * One of the resource types defined as part of FHIR.
 */
export const ResourceTypes = {
  /**
   * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.
   */
  Account: resource_types_Account,
  /**
   * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
   */
  AllergyIntolerance: resource_types_AllergyIntolerance,
  /**
   * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
   */
  Appointment: resource_types_Appointment,
  /**
   * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
   */
  AppointmentResponse: resource_types_AppointmentResponse,
  /**
   * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
   */
  AuditEvent: resource_types_AuditEvent,
  /**
   * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
   */
  Basic: resource_types_Basic,
  /**
   * A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
   */
  Binary: resource_types_Binary,
  /**
   * Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
   */
  BodySite: resource_types_BodySite,
  /**
   * A container for a collection of resources.
   */
  Bundle: resource_types_Bundle,
  /**
   * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
   */
  CarePlan: resource_types_CarePlan,
  /**
   * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
   */
  Claim: resource_types_Claim,
  /**
   * This resource provides the adjudication details from the processing of a Claim resource.
   */
  ClaimResponse: resource_types_ClaimResponse,
  /**
   * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
   */
  ClinicalImpression: resource_types_ClinicalImpression,
  /**
   * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
   */
  Communication: resource_types_Communication,
  /**
   * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
   */
  CommunicationRequest: resource_types_CommunicationRequest,
  /**
   * A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
   */
  Composition: resource_types_Composition,
  /**
   * A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
   */
  ConceptMap: resource_types_ConceptMap,
  /**
   * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.
   */
  Condition: resource_types_Condition,
  /**
   * A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
   */
  Conformance: resource_types_Conformance,
  /**
   * A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
   */
  Contract: resource_types_Contract,
  /**
   * Financial instrument which may be used to pay for or reimburse health care products and services.
   */
  Coverage: resource_types_Coverage,
  /**
   * The formal description of a single piece of information that can be gathered and reported.
   */
  DataElement: resource_types_DataElement,
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
   */
  DetectedIssue: resource_types_DetectedIssue,
  /**
   * This resource identifies an instance of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
   */
  Device: resource_types_Device,
  /**
   * Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.
   */
  DeviceComponent: resource_types_DeviceComponent,
  /**
   * Describes a measurement, calculation or setting capability of a medical device.
   */
  DeviceMetric: resource_types_DeviceMetric,
  /**
   * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
   */
  DeviceUseRequest: resource_types_DeviceUseRequest,
  /**
   * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
   */
  DeviceUseStatement: resource_types_DeviceUseStatement,
  /**
   * A record of a request for a diagnostic investigation service to be performed.
   */
  DiagnosticOrder: resource_types_DiagnosticOrder,
  /**
   * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
   */
  DiagnosticReport: resource_types_DiagnosticReport,
  /**
   * A manifest that defines a set of documents.
   */
  DocumentManifest: resource_types_DocumentManifest,
  /**
   * A reference to a document .
   */
  DocumentReference: resource_types_DocumentReference,
  /**
   * --- Abstract Type! ---A resource that includes narrative, extensions, and contained resources.
   */
  DomainResource: resource_types_DomainResource,
  /**
   * This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.
   */
  EligibilityRequest: resource_types_EligibilityRequest,
  /**
   * This resource provides eligibility and plan details from the processing of an Eligibility resource.
   */
  EligibilityResponse: resource_types_EligibilityResponse,
  /**
   * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
   */
  Encounter: resource_types_Encounter,
  /**
   * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
   */
  EnrollmentRequest: resource_types_EnrollmentRequest,
  /**
   * This resource provides enrollment and plan details from the processing of an Enrollment resource.
   */
  EnrollmentResponse: resource_types_EnrollmentResponse,
  /**
   * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
   */
  EpisodeOfCare: resource_types_EpisodeOfCare,
  /**
   * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
   */
  ExplanationOfBenefit: resource_types_ExplanationOfBenefit,
  /**
   * Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
   */
  FamilyMemberHistory: resource_types_FamilyMemberHistory,
  /**
   * Prospective warnings of potential issues when providing care to the patient.
   */
  Flag: resource_types_Flag,
  /**
   * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
   */
  Goal: resource_types_Goal,
  /**
   * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
   */
  Group: resource_types_Group,
  /**
   * The details of a healthcare service available at a location.
   */
  HealthcareService: resource_types_HealthcareService,
  /**
   * A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
   */
  ImagingObjectSelection: resource_types_ImagingObjectSelection,
  /**
   * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
   */
  ImagingStudy: resource_types_ImagingStudy,
  /**
   * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
   */
  Immunization: resource_types_Immunization,
  /**
   * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
   */
  ImmunizationRecommendation: resource_types_ImmunizationRecommendation,
  /**
   * A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
   */
  ImplementationGuide: resource_types_ImplementationGuide,
  /**
   * A set of information summarized from a list of other resources.
   */
  List: resource_types_List,
  /**
   * Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
   */
  Location: resource_types_Location,
  /**
   * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
   */
  Media: resource_types_Media,
  /**
   * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
   */
  Medication: resource_types_Medication,
  /**
   * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
   */
  MedicationAdministration: resource_types_MedicationAdministration,
  /**
   * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
   */
  MedicationDispense: resource_types_MedicationDispense,
  /**
   * An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
   */
  MedicationOrder: resource_types_MedicationOrder,
  /**
   * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains 
   * The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
   */
  MedicationStatement: resource_types_MedicationStatement,
  /**
   * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
   */
  MessageHeader: resource_types_MessageHeader,
  /**
   * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
   */
  NamingSystem: resource_types_NamingSystem,
  /**
   * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
   */
  NutritionOrder: resource_types_NutritionOrder,
  /**
   * Measurements and simple assertions made about a patient, device or other subject.
   */
  Observation: resource_types_Observation,
  /**
   * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
   */
  OperationDefinition: resource_types_OperationDefinition,
  /**
   * A collection of error, warning or information messages that result from a system action.
   */
  OperationOutcome: resource_types_OperationOutcome,
  /**
   * A request to perform an action.
   */
  Order: resource_types_Order,
  /**
   * A response to an order.
   */
  OrderResponse: resource_types_OrderResponse,
  /**
   * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
   */
  Organization: resource_types_Organization,
  /**
   * This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
   */
  Parameters: resource_types_Parameters,
  /**
   * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
   */
  Patient: resource_types_Patient,
  /**
   * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
   */
  PaymentNotice: resource_types_PaymentNotice,
  /**
   * This resource provides payment details and claim references supporting a bulk payment.
   */
  PaymentReconciliation: resource_types_PaymentReconciliation,
  /**
   * Demographics and administrative information about a person independent of a specific health-related context.
   */
  Person: resource_types_Person,
  /**
   * A person who is directly or indirectly involved in the provisioning of healthcare.
   */
  Practitioner: resource_types_Practitioner,
  /**
   * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
   */
  Procedure: resource_types_Procedure,
  /**
   * A request for a procedure to be performed. May be a proposal or an order.
   */
  ProcedureRequest: resource_types_ProcedureRequest,
  /**
   * This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
   */
  ProcessRequest: resource_types_ProcessRequest,
  /**
   * This resource provides processing status, errors and notes from the processing of a resource.
   */
  ProcessResponse: resource_types_ProcessResponse,
  /**
   * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
   */
  Provenance: resource_types_Provenance,
  /**
   * A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  Questionnaire: resource_types_Questionnaire,
  /**
   * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
   */
  QuestionnaireResponse: resource_types_QuestionnaireResponse,
  /**
   * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
   */
  ReferralRequest: resource_types_ReferralRequest,
  /**
   * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
   */
  RelatedPerson: resource_types_RelatedPerson,
  /**
   * --- Abstract Type! ---This is the base resource type for everything.
   */
  Resource: resource_types_Resource,
  /**
   * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
   */
  RiskAssessment: resource_types_RiskAssessment,
  /**
   * A container for slot(s) of time that may be available for booking appointments.
   */
  Schedule: resource_types_Schedule,
  /**
   * A search parameter that defines a named search item that can be used to search/filter on a resource.
   */
  SearchParameter: resource_types_SearchParameter,
  /**
   * A slot of time on a schedule that may be available for booking appointments.
   */
  Slot: resource_types_Slot,
  /**
   * A sample to be used for analysis.
   */
  Specimen: resource_types_Specimen,
  /**
   * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.
   */
  StructureDefinition: resource_types_StructureDefinition,
  /**
   * The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
   */
  Subscription: resource_types_Subscription,
  /**
   * A homogeneous material with a definite composition.
   */
  Substance: resource_types_Substance,
  /**
   * Record of delivery of what is supplied.
   */
  SupplyDelivery: resource_types_SupplyDelivery,
  /**
   * A record of a request for a medication, substance or device used in the healthcare setting.
   */
  SupplyRequest: resource_types_SupplyRequest,
  /**
   * TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
   */
  TestScript: resource_types_TestScript,
  /**
   * A value set specifies a set of codes drawn from one or more code systems.
   */
  ValueSet: resource_types_ValueSet,
  /**
   * An authorization for the supply of glasses and/or contact lenses to a patient.
   */
  VisionPrescription: resource_types_VisionPrescription,
};
const response_code_FatalError: Coding = {
  code: "fatal-error",
  display: "Fatal Error",
  system: "http://hl7.org/fhir/response-code"
};
const response_code_OK: Coding = {
  code: "ok",
  display: "OK",
  system: "http://hl7.org/fhir/response-code"
};
const response_code_TransientError: Coding = {
  code: "transient-error",
  display: "Transient Error",
  system: "http://hl7.org/fhir/response-code"
};
/**
 * The kind of response to a message
 */
export const ResponseCode = {
  /**
   * The message was rejected because of some content in it. There is no point in re-sending without change. The response narrative SHALL describe the issue.
   */
  FatalError: response_code_FatalError,
  /**
   * The message was accepted and processed without error.
   */
  OK: response_code_OK,
  /**
   * Some internal unexpected error occurred - wait and try again. Note - this is usually used for things like database unavailable, which may be expected to resolve, though human intervention may be required.
   */
  TransientError: response_code_TransientError,
};
const restful_conformance_mode_Client: Coding = {
  code: "client",
  display: "Client",
  system: "http://hl7.org/fhir/restful-conformance-mode"
};
const restful_conformance_mode_Server: Coding = {
  code: "server",
  display: "Server",
  system: "http://hl7.org/fhir/restful-conformance-mode"
};
/**
 * The mode of a RESTful conformance statement.
 */
export const RestfulConformanceMode = {
  /**
   * The application acts as a client for this resource.
   */
  Client: restful_conformance_mode_Client,
  /**
   * The application acts as a server for this resource.
   */
  Server: restful_conformance_mode_Server,
};
const search_entry_mode_Include: Coding = {
  code: "include",
  display: "Include",
  system: "http://hl7.org/fhir/search-entry-mode"
};
const search_entry_mode_Match: Coding = {
  code: "match",
  display: "Match",
  system: "http://hl7.org/fhir/search-entry-mode"
};
const search_entry_mode_Outcome: Coding = {
  code: "outcome",
  display: "Outcome",
  system: "http://hl7.org/fhir/search-entry-mode"
};
/**
 * Why an entry is in the result set - whether it's included as a match or because of an _include requirement.
 */
export const SearchEntryMode = {
  /**
   * This resource is returned because it is referred to from another resource in the search set.
   */
  Include: search_entry_mode_Include,
  /**
   * This resource matched the search specification.
   */
  Match: search_entry_mode_Match,
  /**
   * An OperationOutcome that provides additional information about the processing of a search.
   */
  Outcome: search_entry_mode_Outcome,
};
const search_modifier_code_Above: Coding = {
  code: "above",
  display: "Above",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_Below: Coding = {
  code: "below",
  display: "Below",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_Contains: Coding = {
  code: "contains",
  display: "Contains",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_Exact: Coding = {
  code: "exact",
  display: "Exact",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_In: Coding = {
  code: "in",
  display: "In",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_Missing: Coding = {
  code: "missing",
  display: "Missing",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_Not: Coding = {
  code: "not",
  display: "Not",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_NotIn: Coding = {
  code: "not-in",
  display: "Not In",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_Text: Coding = {
  code: "text",
  display: "Text",
  system: "http://hl7.org/fhir/search-modifier-code"
};
const search_modifier_code_Type: Coding = {
  code: "type",
  display: "Type",
  system: "http://hl7.org/fhir/search-modifier-code"
};
/**
 * A supported modifier for a search parameter.
 */
export const SearchModifierCode = {
  /**
   * The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
   */
  Above: search_modifier_code_Above,
  /**
   * The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
   */
  Below: search_modifier_code_Below,
  /**
   * The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
   */
  Contains: search_modifier_code_Contains,
  /**
   * The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
   */
  Exact: search_modifier_code_Exact,
  /**
   * The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
   */
  In: search_modifier_code_In,
  /**
   * The search parameter returns resources that have a value or not.
   */
  Missing: search_modifier_code_Missing,
  /**
   * The search parameter returns resources that do not contain a match .
   */
  Not: search_modifier_code_Not,
  /**
   * The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
   */
  NotIn: search_modifier_code_NotIn,
  /**
   * The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
   */
  Text: search_modifier_code_Text,
  /**
   * The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
   */
  Type: search_modifier_code_Type,
};
/**
 * Data types allowed to be used for search parameters.
 */
export const SearchParamType = {
  /**
   * A composite search parameter that combines a search on two values together.
   */
  Composite: search_param_type_Composite,
  /**
   * Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.
   */
  DateDateTime: search_param_type_DateDateTime,
  /**
   * Search parameter SHALL be a number (a whole number, or a decimal).
   */
  Number: search_param_type_Number,
  /**
   * A search parameter that searches on a quantity.
   */
  Quantity: search_param_type_Quantity,
  /**
   * A reference to another resource.
   */
  Reference: search_param_type_Reference,
  /**
   * Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.
   */
  String: search_param_type_String,
  /**
   * Search parameter on a coded element or identifier. May be used to search through the text, displayname, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.
   */
  Token: search_param_type_Token,
  /**
   * A search parameter that searches on a URI (RFC 3986).
   */
  URI: search_param_type_URI,
};
const search_xpath_usage_Distance: Coding = {
  code: "distance",
  display: "Distance",
  system: "http://hl7.org/fhir/search-xpath-usage"
};
const search_xpath_usage_Nearby: Coding = {
  code: "nearby",
  display: "Nearby",
  system: "http://hl7.org/fhir/search-xpath-usage"
};
const search_xpath_usage_Normal: Coding = {
  code: "normal",
  display: "Normal",
  system: "http://hl7.org/fhir/search-xpath-usage"
};
const search_xpath_usage_Other: Coding = {
  code: "other",
  display: "Other",
  system: "http://hl7.org/fhir/search-xpath-usage"
};
const search_xpath_usage_Phonetic: Coding = {
  code: "phonetic",
  display: "Phonetic",
  system: "http://hl7.org/fhir/search-xpath-usage"
};
/**
 * How a search parameter relates to the set of elements returned by evaluating its xpath query.
 */
export const SearchXpathUsage = {
  /**
   * The search parameter is based on a spatial transform of the selected nodes, using physical distance from the middle.
   */
  Distance: search_xpath_usage_Distance,
  /**
   * The search parameter is based on a spatial transform of the selected nodes.
   */
  Nearby: search_xpath_usage_Nearby,
  /**
   * The search parameter is derived directly from the selected nodes based on the type definitions.
   */
  Normal: search_xpath_usage_Normal,
  /**
   * The interpretation of the xpath statement is unknown (and can't be automated).
   */
  Other: search_xpath_usage_Other,
  /**
   * The search parameter is derived by a phonetic transform from the selected nodes.
   */
  Phonetic: search_xpath_usage_Phonetic,
};
const slotstatus_Busy: Coding = {
  code: "busy",
  display: "Busy",
  system: "http://hl7.org/fhir/slotstatus"
};
const slotstatus_BusyTentative: Coding = {
  code: "busy-tentative",
  display: "Busy (Tentative)",
  system: "http://hl7.org/fhir/slotstatus"
};
const slotstatus_BusyUnavailable: Coding = {
  code: "busy-unavailable",
  display: "Busy (Unavailable)",
  system: "http://hl7.org/fhir/slotstatus"
};
const slotstatus_Free: Coding = {
  code: "free",
  display: "Free",
  system: "http://hl7.org/fhir/slotstatus"
};
/**
 * The free/busy status of a slot.
 */
export const Slotstatus = {
  /**
   * Indicates that the time interval is busy because one  or more events have been scheduled for that interval.
   */
  Busy: slotstatus_Busy,
  /**
   * Indicates that the time interval is busy because one or more events have been tentatively scheduled for that interval.
   */
  BusyTentative: slotstatus_BusyTentative,
  /**
   * Indicates that the time interval is busy and that the interval can not be scheduled.
   */
  BusyUnavailable: slotstatus_BusyUnavailable,
  /**
   * Indicates that the time interval is free for scheduling.
   */
  Free: slotstatus_Free,
};
const special_values_False: Coding = {
  code: "false",
  display: "false",
  system: "http://hl7.org/fhir/special-values"
};
const special_values_NilKnown: Coding = {
  code: "nil-known",
  display: "Nil Known",
  system: "http://hl7.org/fhir/special-values"
};
const special_values_SufficientQuantity: Coding = {
  code: "sufficient",
  display: "Sufficient Quantity",
  system: "http://hl7.org/fhir/special-values"
};
const special_values_TraceAmountDetected: Coding = {
  code: "trace",
  display: "Trace Amount Detected",
  system: "http://hl7.org/fhir/special-values"
};
const special_values_True: Coding = {
  code: "true",
  display: "true",
  system: "http://hl7.org/fhir/special-values"
};
const special_values_ValueWithdrawn: Coding = {
  code: "withdrawn",
  display: "Value Withdrawn",
  system: "http://hl7.org/fhir/special-values"
};
/**
 * A set of generally useful codes defined so they can be included in value sets.
 */
export const SpecialValues = {
  /**
   * Boolean false.
   */
  False: special_values_False,
  /**
   * The are no known applicable values in this context.
   */
  NilKnown: special_values_NilKnown,
  /**
   * The specific quantity is not known, but is known to be non-zero and is not specified because it makes up the bulk of the material.
   */
  SufficientQuantity: special_values_SufficientQuantity,
  /**
   * The content is greater than zero, but too small to be quantified.
   */
  TraceAmountDetected: special_values_TraceAmountDetected,
  /**
   * Boolean true.
   */
  True: special_values_True,
  /**
   * The value is no longer available.
   */
  ValueWithdrawn: special_values_ValueWithdrawn,
};
const specimen_status_Available: Coding = {
  code: "available",
  display: "Available",
  system: "http://hl7.org/fhir/specimen-status"
};
const specimen_status_EnteredInError: Coding = {
  code: "entered-in-error",
  display: "Entered-in-error",
  system: "http://hl7.org/fhir/specimen-status"
};
const specimen_status_Unavailable: Coding = {
  code: "unavailable",
  display: "Unavailable",
  system: "http://hl7.org/fhir/specimen-status"
};
const specimen_status_Unsatisfactory: Coding = {
  code: "unsatisfactory",
  display: "Unsatisfactory",
  system: "http://hl7.org/fhir/specimen-status"
};
/**
 * Codes providing the status/availability of a specimen.
 */
export const SpecimenStatus = {
  /**
   * The physical specimen is present and in good condition.
   */
  Available: specimen_status_Available,
  /**
   * The specimen was entered in error and therefore nullified.
   */
  EnteredInError: specimen_status_EnteredInError,
  /**
   * There is no physical specimen because it is either lost, destroyed or consumed.
   */
  Unavailable: specimen_status_Unavailable,
  /**
   * The specimen cannot be used because of a quality issue such as a broken container, contamination, or too old.
   */
  Unsatisfactory: specimen_status_Unsatisfactory,
};
const structure_definition_kind_DataType: Coding = {
  code: "datatype",
  display: "Data Type",
  system: "http://hl7.org/fhir/structure-definition-kind"
};
const structure_definition_kind_LogicalModel: Coding = {
  code: "logical",
  display: "Logical Model",
  system: "http://hl7.org/fhir/structure-definition-kind"
};
const structure_definition_kind_Resource: Coding = {
  code: "resource",
  display: "Resource",
  system: "http://hl7.org/fhir/structure-definition-kind"
};
/**
 * Defines the type of structure that a definition is describing.
 */
export const StructureDefinitionKind = {
  /**
   * A data type - either a primitive or complex structure that defines a set of data elements. These can be used throughout Resource and extension definitions.
   */
  DataType: structure_definition_kind_DataType,
  /**
   * A logical model - a conceptual package of data that will be mapped to resources for implementation.
   */
  LogicalModel: structure_definition_kind_LogicalModel,
  /**
   * A resource defined by the FHIR specification.
   */
  Resource: structure_definition_kind_Resource,
};
const subscription_channel_type_Email: Coding = {
  code: "email",
  display: "Email",
  system: "http://hl7.org/fhir/subscription-channel-type"
};
const subscription_channel_type_Message: Coding = {
  code: "message",
  display: "Message",
  system: "http://hl7.org/fhir/subscription-channel-type"
};
const subscription_channel_type_RestHook: Coding = {
  code: "rest-hook",
  display: "Rest Hook",
  system: "http://hl7.org/fhir/subscription-channel-type"
};
const subscription_channel_type_SMS: Coding = {
  code: "sms",
  display: "SMS",
  system: "http://hl7.org/fhir/subscription-channel-type"
};
const subscription_channel_type_Websocket: Coding = {
  code: "websocket",
  display: "Websocket",
  system: "http://hl7.org/fhir/subscription-channel-type"
};
/**
 * The type of method used to execute a subscription.
 */
export const SubscriptionChannelType = {
  /**
   * The channel is executed by sending an email to the email addressed in the URI (which must be a mailto:).
   */
  Email: subscription_channel_type_Email,
  /**
   * The channel is executed by sending a message (e.g. a Bundle with a MessageHeader resource etc.) to the application identified in the URI.
   */
  Message: subscription_channel_type_Message,
  /**
   * The channel is executed by making a post to the URI. If a payload is included, the URL is interpreted as the service base, and an update (PUT) is made.
   */
  RestHook: subscription_channel_type_RestHook,
  /**
   * The channel is executed by sending an SMS message to the phone number identified in the URL (tel:).
   */
  SMS: subscription_channel_type_SMS,
  /**
   * The channel is executed by sending a packet across a web socket connection maintained by the client. The URL identifies the websocket, and the client binds to this URL.
   */
  Websocket: subscription_channel_type_Websocket,
};
const subscription_status_Active: Coding = {
  code: "active",
  display: "Active",
  system: "http://hl7.org/fhir/subscription-status"
};
const subscription_status_Error: Coding = {
  code: "error",
  display: "Error",
  system: "http://hl7.org/fhir/subscription-status"
};
const subscription_status_Off: Coding = {
  code: "off",
  display: "Off",
  system: "http://hl7.org/fhir/subscription-status"
};
const subscription_status_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/subscription-status"
};
/**
 * The status of a subscription.
 */
export const SubscriptionStatus = {
  /**
   * The subscription is active.
   */
  Active: subscription_status_Active,
  /**
   * The server has an error executing the notification.
   */
  Error: subscription_status_Error,
  /**
   * Too many errors have occurred or the subscription has expired.
   */
  Off: subscription_status_Off,
  /**
   * The client has requested the subscription, and the server has not yet set it up.
   */
  Requested: subscription_status_Requested,
};
const supplydelivery_status_Abandoned: Coding = {
  code: "abandoned",
  display: "Abandoned",
  system: "http://hl7.org/fhir/supplydelivery-status"
};
const supplydelivery_status_Delivered: Coding = {
  code: "completed",
  display: "Delivered",
  system: "http://hl7.org/fhir/supplydelivery-status"
};
const supplydelivery_status_InProgress: Coding = {
  code: "in-progress",
  display: "In Progress",
  system: "http://hl7.org/fhir/supplydelivery-status"
};
/**
 * Status of the supply delivery.
 */
export const SupplydeliveryStatus = {
  /**
   * Dispensing was not completed.
   */
  Abandoned: supplydelivery_status_Abandoned,
  /**
   * Supply has been delivered ("completed").
   */
  Delivered: supplydelivery_status_Delivered,
  /**
   * Supply has been requested, but not delivered.
   */
  InProgress: supplydelivery_status_InProgress,
};
const supplyrequest_status_Cancelled: Coding = {
  code: "cancelled",
  display: "Cancelled",
  system: "http://hl7.org/fhir/supplyrequest-status"
};
const supplyrequest_status_Received: Coding = {
  code: "completed",
  display: "Received",
  system: "http://hl7.org/fhir/supplyrequest-status"
};
const supplyrequest_status_Failed: Coding = {
  code: "failed",
  display: "Failed",
  system: "http://hl7.org/fhir/supplyrequest-status"
};
const supplyrequest_status_Requested: Coding = {
  code: "requested",
  display: "Requested",
  system: "http://hl7.org/fhir/supplyrequest-status"
};
/**
 * Status of the supply request
 */
export const SupplyrequestStatus = {
  /**
   * The orderer of the supply cancelled the request.
   */
  Cancelled: supplyrequest_status_Cancelled,
  /**
   * Supply has been received by the requestor.
   */
  Received: supplyrequest_status_Received,
  /**
   * The supply will not be completed because the supplier was unable or unwilling to supply the item.
   */
  Failed: supplyrequest_status_Failed,
  /**
   * Supply has been requested, but not dispensed.
   */
  Requested: supplyrequest_status_Requested,
};
const restful_interaction_HistorySystem: Coding = {
  code: "history-system",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_SearchSystem: Coding = {
  code: "search-system",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_Transaction: Coding = {
  code: "transaction",
  system: "http://hl7.org/fhir/restful-interaction"
};
/**
 * Operations supported by REST at the system level.
 */
export const SystemRestfulInteraction = {
  HistorySystem: restful_interaction_HistorySystem,
  SearchSystem: restful_interaction_SearchSystem,
  Transaction: restful_interaction_Transaction,
};
const transaction_mode_BatchesSupported: Coding = {
  code: "batch",
  display: "Batches supported",
  system: "http://hl7.org/fhir/transaction-mode"
};
const transaction_mode_BatchesAndTransactions: Coding = {
  code: "both",
  display: "Batches & Transactions",
  system: "http://hl7.org/fhir/transaction-mode"
};
const transaction_mode_None: Coding = {
  code: "not-supported",
  display: "None",
  system: "http://hl7.org/fhir/transaction-mode"
};
const transaction_mode_TransactionsSupported: Coding = {
  code: "transaction",
  display: "Transactions Supported",
  system: "http://hl7.org/fhir/transaction-mode"
};
/**
 * A code that indicates how transactions are supported.
 */
export const TransactionMode = {
  /**
   * Batches are  supported.
   */
  BatchesSupported: transaction_mode_BatchesSupported,
  /**
   * Both batches and transactions are supported.
   */
  BatchesAndTransactions: transaction_mode_BatchesAndTransactions,
  /**
   * Neither batch or transaction is supported.
   */
  None: transaction_mode_None,
  /**
   * Transactions are supported.
   */
  TransactionsSupported: transaction_mode_TransactionsSupported,
};
const restful_interaction_Create: Coding = {
  code: "create",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_Delete: Coding = {
  code: "delete",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_HistoryInstance: Coding = {
  code: "history-instance",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_HistoryType: Coding = {
  code: "history-type",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_Read: Coding = {
  code: "read",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_SearchType: Coding = {
  code: "search-type",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_Update: Coding = {
  code: "update",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_Validate: Coding = {
  code: "validate",
  system: "http://hl7.org/fhir/restful-interaction"
};
const restful_interaction_Vread: Coding = {
  code: "vread",
  system: "http://hl7.org/fhir/restful-interaction"
};
/**
 * Operations supported by REST at the type or instance level.
 */
export const TypeRestfulInteraction = {
  Create: restful_interaction_Create,
  Delete: restful_interaction_Delete,
  HistoryInstance: restful_interaction_HistoryInstance,
  HistoryType: restful_interaction_HistoryType,
  Read: restful_interaction_Read,
  SearchType: restful_interaction_SearchType,
  Update: restful_interaction_Update,
  Validate: restful_interaction_Validate,
  Vread: restful_interaction_Vread,
};
const UnitsOfTime_NONE: Coding = {
  code: "s",
  system: "http://unitsofmeasure.org"
};
/**
 * A unit of time (units from UCUM).
 */
export const UnitsOfTime = {
  Year: AgeUnits_Year,
  Day: AgeUnits_Day,
  Hour: AgeUnits_Hour,
  Minute: AgeUnits_Minute,
  Month: AgeUnits_Month,
  NONE: UnitsOfTime_NONE,
  Week: AgeUnits_Week,
};
const unknown_content_code_UnknownElementsAndExtensions: Coding = {
  code: "both",
  display: "Unknown Elements and Extensions",
  system: "http://hl7.org/fhir/unknown-content-code"
};
const unknown_content_code_UnknownElements: Coding = {
  code: "elements",
  display: "Unknown Elements",
  system: "http://hl7.org/fhir/unknown-content-code"
};
const unknown_content_code_UnknownExtensions: Coding = {
  code: "extensions",
  display: "Unknown Extensions",
  system: "http://hl7.org/fhir/unknown-content-code"
};
const unknown_content_code_NeitherElementsOrExtensions: Coding = {
  code: "no",
  display: "Neither Elements or Extensions",
  system: "http://hl7.org/fhir/unknown-content-code"
};
/**
 * A code that indicates whether an application accepts unknown elements or extensions when reading resources.
 */
export const UnknownContentCode = {
  /**
   * The application accepts unknown elements and extensions.
   */
  UnknownElementsAndExtensions: unknown_content_code_UnknownElementsAndExtensions,
  /**
   * The application accepts unknown elements, but not unknown extensions.
   */
  UnknownElements: unknown_content_code_UnknownElements,
  /**
   * The application accepts unknown extensions, but not unknown elements.
   */
  UnknownExtensions: unknown_content_code_UnknownExtensions,
  /**
   * The application does not accept either unknown elements or extensions.
   */
  NeitherElementsOrExtensions: unknown_content_code_NeitherElementsOrExtensions,
};
const v3_Confidentiality_Confidentiality: Coding = {
  code: "_Confidentiality",
  display: "Confidentiality",
  system: "http://hl7.org/fhir/v3/Confidentiality"
};
const v3_Confidentiality_Low: Coding = {
  code: "L",
  display: "low",
  system: "http://hl7.org/fhir/v3/Confidentiality"
};
const v3_Confidentiality_Moderate: Coding = {
  code: "M",
  display: "moderate",
  system: "http://hl7.org/fhir/v3/Confidentiality"
};
const v3_Confidentiality_Normal: Coding = {
  code: "N",
  display: "normal",
  system: "http://hl7.org/fhir/v3/Confidentiality"
};
const v3_Confidentiality_Restricted: Coding = {
  code: "R",
  display: "restricted",
  system: "http://hl7.org/fhir/v3/Confidentiality"
};
const v3_Confidentiality_Unrestricted: Coding = {
  code: "U",
  display: "unrestricted",
  system: "http://hl7.org/fhir/v3/Confidentiality"
};
const v3_Confidentiality_VeryRestricted: Coding = {
  code: "V",
  display: "very restricted",
  system: "http://hl7.org/fhir/v3/Confidentiality"
};
/**
 *  A set of codes specifying the security classification of acts and roles in accordance with the definition for concept domain "Confidentiality".
 */
export const V3Confidentiality = {
  /**
   * A specializable code and its leaf codes used in Confidentiality value sets to value the Act.Confidentiality and Role.Confidentiality attribute in accordance with the definition for concept domain "Confidentiality".
   */
  Confidentiality: v3_Confidentiality_Confidentiality,
  /**
   * Definition: Privacy metadata indicating that the information has been de-identified, and there are mitigating circumstances that prevent re-identification, which minimize risk of harm from unauthorized disclosure.  The information requires protection to maintain low sensitivity.
   * 
   *                         
   *                            Examples: Includes anonymized, pseudonymized, or non-personally identifiable information such as HIPAA limited data sets.
   * 
   *                         
   *                            Map: No clear map to ISO 13606-4 Sensitivity Level (1) Care Management:   RECORD_COMPONENTs that might need to be accessed by a wide range of administrative staff to manage the subject of care's access to health services.
   * 
   *                         
   *                            Usage Note: This metadata indicates the receiver may have an obligation to comply with a data use agreement.
   */
  Low: v3_Confidentiality_Low,
  /**
   * Definition: Privacy metadata indicating moderately sensitive information, which presents moderate risk of harm if disclosed without authorization.
   * 
   *                         
   *                            Examples: Includes allergies of non-sensitive nature used inform food service; health information a patient authorizes to be used for marketing, released to a bank for a health credit card or savings account; or information in personal health record systems that are not governed under health privacy laws.
   * 
   *                         
   *                            Map: Partial Map to ISO 13606-4 Sensitivity Level (2) Clinical Management:  Less sensitive RECORD_COMPONENTs that might need to be accessed by a wider range of personnel not all of whom are actively caring for the patient (e.g. radiology staff).
   * 
   *                         
   *                            Usage Note: This metadata indicates that the receiver may be obligated to comply with the receiver's terms of use or privacy policies.
   */
  Moderate: v3_Confidentiality_Moderate,
  /**
   * Definition: Privacy metadata indicating that the information is typical, non-stigmatizing health information, which presents typical risk of harm if disclosed without authorization.
   * 
   *                         
   *                            Examples: In the US, this includes what HIPAA identifies as the minimum necessary protected health information (PHI) given a covered purpose of use (treatment, payment, or operations).  Includes typical, non-stigmatizing health information disclosed in an application for health, workers compensation, disability, or life insurance.
   * 
   *                         
   *                            Map: Partial Map to ISO 13606-4 Sensitivity Level (3) Clinical Care:   Default for normal clinical care access (i.e. most clinical staff directly caring for the patient should be able to access nearly all of the EHR).   Maps to normal confidentiality for treatment information but not to ancillary care, payment and operations.
   * 
   *                         
   *                            Usage Note: This metadata indicates that the receiver may be obligated to comply with applicable jurisdictional privacy law or disclosure authorization.
   */
  Normal: v3_Confidentiality_Normal,
  /**
   * Privacy metadata indicating highly sensitive, potentially stigmatizing information, which presents a high risk to the information subject if disclosed without authorization. May be pre-empted by jurisdictional law, e.g. for public health reporting or emergency treatment.
   * 
   *                         
   *                            Examples: Includes information that is additionally protected such as sensitive conditions mental health, HIV, substance abuse, domestic violence, child abuse, genetic disease, and reproductive health; or sensitive demographic information such as a patient's standing as an employee or a celebrity. May be used to indicate proprietary or classified information that is not related to an individual, e.g. secret ingredients in a therapeutic substance; or the name of a manufacturer.
   * 
   *                         
   *                            Map: Partial Map to ISO 13606-4 Sensitivity Level (3) Clinical Care: Default for normal clinical care access (i.e. most clinical staff directly caring for the patient should be able to access nearly all of the EHR). Maps to normal confidentiality for treatment information but not to ancillary care, payment and operations..
   * 
   *                         
   *                            Usage Note: This metadata indicates that the receiver may be obligated to comply with applicable, prevailing (default) jurisdictional privacy law or disclosure authorization..
   */
  Restricted: v3_Confidentiality_Restricted,
  /**
   * Definition: Privacy metadata indicating that the information is not classified as sensitive.
   * 
   *                         
   *                            Examples: Includes publicly available information, e.g. business name, phone, email or physical address.
   * 
   *                         
   *                            Usage Note: This metadata indicates that the receiver has no obligation to consider additional policies when making access control decisions.   Note that in some jurisdictions, personally identifiable information must be protected as confidential, so it would not be appropriate to assign a confidentiality code of "unrestricted"  to that information even if it is publicly available.
   */
  Unrestricted: v3_Confidentiality_Unrestricted,
  /**
   * . Privacy metadata indicating that the information is extremely sensitive and likely stigmatizing health information that presents a very high risk if disclosed without authorization.  This information must be kept in the highest confidence.  
   * 
   *                         
   *                            Examples:  Includes information about a victim of abuse, patient requested information sensitivity, and taboo subjects relating to health status that must be discussed with the patient by an attending provider before sharing with the patient.  May also include information held under â€œlegal lockâ€? or attorney-client privilege
   * 
   *                         
   *                            Map:  This metadata indicates that the receiver may not disclose this information except as directed by the information custodian, who may be the information subject.
   * 
   *                         
   *                            Usage Note:  This metadata indicates that the receiver may not disclose this information except as directed by the information custodian, who may be the information subject.
   */
  VeryRestricted: v3_Confidentiality_VeryRestricted,
};
const versioning_policy_NoVersionIdSupport: Coding = {
  code: "no-version",
  display: "No VersionId Support",
  system: "http://hl7.org/fhir/versioning-policy"
};
const versioning_policy_Versioned: Coding = {
  code: "versioned",
  display: "Versioned",
  system: "http://hl7.org/fhir/versioning-policy"
};
const versioning_policy_VersionIdTrackedFully: Coding = {
  code: "versioned-update",
  display: "VersionId tracked fully",
  system: "http://hl7.org/fhir/versioning-policy"
};
/**
 * How the system supports versioning for a resource.
 */
export const VersioningPolicy = {
  /**
   * VersionId meta-property is not supported (server) or used (client).
   */
  NoVersionIdSupport: versioning_policy_NoVersionIdSupport,
  /**
   * VersionId meta-property is supported (server) or used (client).
   */
  Versioned: versioning_policy_Versioned,
  /**
   * VersionId is must be correct for updates (server) or will be specified (If-match header) for updates (client).
   */
  VersionIdTrackedFully: versioning_policy_VersionIdTrackedFully,
};
const vision_base_codes_Down: Coding = {
  code: "down",
  display: "Down",
  system: "http://hl7.org/fhir/vision-base-codes"
};
const vision_base_codes_In: Coding = {
  code: "in",
  display: "In",
  system: "http://hl7.org/fhir/vision-base-codes"
};
const vision_base_codes_Out: Coding = {
  code: "out",
  display: "Out",
  system: "http://hl7.org/fhir/vision-base-codes"
};
const vision_base_codes_Up: Coding = {
  code: "up",
  display: "Up",
  system: "http://hl7.org/fhir/vision-base-codes"
};
/**
 * A coded concept listing the base codes.
 */
export const VisionBaseCodes = {
  /**
   * bottom
   */
  Down: vision_base_codes_Down,
  /**
   * inner edge
   */
  In: vision_base_codes_In,
  /**
   * outer edge
   */
  Out: vision_base_codes_Out,
  /**
   * top
   */
  Up: vision_base_codes_Up,
};
const vision_eye_codes_LeftEye: Coding = {
  code: "left",
  display: "Left Eye",
  system: "http://hl7.org/fhir/vision-eye-codes"
};
const vision_eye_codes_RightEye: Coding = {
  code: "right",
  display: "Right Eye",
  system: "http://hl7.org/fhir/vision-eye-codes"
};
/**
 * A coded concept listing the eye codes.
 */
export const VisionEyeCodes = {
  /**
   * Left Eye
   */
  LeftEye: vision_eye_codes_LeftEye,
  /**
   * Right Eye
   */
  RightEye: vision_eye_codes_RightEye,
};
